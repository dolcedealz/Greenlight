// admin/src/commands/coefficients.command.js
const { Markup } = require('telegraf');
const axios = require('axios');

// –ü–æ–ª—É—á–∞–µ–º API URL –∏ —Ç–æ–∫–µ–Ω –∏–∑ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è
const apiUrl = process.env.API_URL || 'https://greenlight-api-ghqh.onrender.com/api';
const adminToken = process.env.ADMIN_API_TOKEN;

// –°–æ–∑–¥–∞–µ–º axios instance —Å –ø—Ä–µ–¥—É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–Ω—ã–º–∏ –∑–∞–≥–æ–ª–æ–≤–∫–∞–º–∏
const apiClient = axios.create({
  baseURL: apiUrl,
  headers: {
    'Authorization': `Bearer ${adminToken}`,
    'Content-Type': 'application/json'
  },
  timeout: 30000
});

/**
 * –ü–æ–∫–∞–∑–∞—Ç—å –≥–ª–æ–±–∞–ª—å–Ω—ã–µ –∫–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç—ã
 */
async function showGlobalCoefficients(ctx) {
  console.log('ADMIN: –ó–∞–ø—Ä–æ—Å –≥–ª–æ–±–∞–ª—å–Ω—ã—Ö –∫–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç–æ–≤');
  
  try {
    const response = await apiClient.get('/admin/game-settings');
    
    if (!response.data.success) {
      throw new Error(response.data.message || '–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –Ω–∞—Å—Ç—Ä–æ–µ–∫');
    }
    
    const settings = response.data.data;
    const globalModifiers = settings.globalModifiers || {};
    
    let message = 'üåç *–ì–ª–æ–±–∞–ª—å–Ω—ã–µ –∫–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç—ã*\n\n';
    
    message += `**–†–µ–∂–∏–º –º–æ–¥–∏—Ñ–∏–∫–∞—Ç–æ—Ä–æ–≤:** ${settings.modifierMode === 'global' ? 'üåç –ì–ª–æ–±–∞–ª—å–Ω—ã–π' : 'üë§ –ò–Ω–¥–∏–≤–∏–¥—É–∞–ª—å–Ω—ã–π'}\n\n`;
    
    // Coin Flip
    if (globalModifiers.coin) {
      const coin = globalModifiers.coin;
      message += `ü™ô **Coin Flip:**\n`;
      message += `   üìä –ú–æ–¥–∏—Ñ–∏–∫–∞—Ç–æ—Ä —à–∞–Ω—Å–∞: ${coin.winChanceModifier || 0}%\n`;
      message += `   ‚öôÔ∏è –°—Ç–∞—Ç—É—Å: ${coin.enabled ? '‚úÖ –í–∫–ª—é—á–µ–Ω' : '‚ùå –í—ã–∫–ª—é—á–µ–Ω'}\n\n`;
    }
    
    // Slots
    if (globalModifiers.slots) {
      const slots = globalModifiers.slots;
      message += `üé∞ **Slots:**\n`;
      message += `   üìä –ú–æ–¥–∏—Ñ–∏–∫–∞—Ç–æ—Ä RTP: ${slots.rtpModifier || 0}%\n`;
      message += `   ‚öôÔ∏è –°—Ç–∞—Ç—É—Å: ${slots.enabled ? '‚úÖ –í–∫–ª—é—á–µ–Ω' : '‚ùå –í—ã–∫–ª—é—á–µ–Ω'}\n\n`;
    }
    
    // Mines
    if (globalModifiers.mines) {
      const mines = globalModifiers.mines;
      message += `üí£ **Mines:**\n`;
      message += `   üìä –ú–æ–¥–∏—Ñ–∏–∫–∞—Ç–æ—Ä –º–∏–Ω: ${mines.mineChanceModifier || 0}%\n`;
      message += `   ‚öôÔ∏è –°—Ç–∞—Ç—É—Å: ${mines.enabled ? '‚úÖ –í–∫–ª—é—á–µ–Ω' : '‚ùå –í—ã–∫–ª—é—á–µ–Ω'}\n\n`;
    }
    
    // Crash
    if (globalModifiers.crash) {
      const crash = globalModifiers.crash;
      message += `üöÄ **Crash:**\n`;
      message += `   üìä –ú–æ–¥–∏—Ñ–∏–∫–∞—Ç–æ—Ä –∫—Ä–∞—à–∞: ${crash.crashModifier || 0}%\n`;
      message += `   ‚öôÔ∏è –°—Ç–∞—Ç—É—Å: ${crash.enabled ? '‚úÖ –í–∫–ª—é—á–µ–Ω' : '‚ùå –í—ã–∫–ª—é—á–µ–Ω'}\n\n`;
    }
    
    message += `üìÖ *–ü–æ—Å–ª–µ–¥–Ω–µ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ:* ${new Date(settings.updatedAt).toLocaleString('ru-RU')}`;
    
    const keyboard = Markup.inlineKeyboard([
      [
        Markup.button.callback('ü™ô Coin', 'coeff_global_coin'),
        Markup.button.callback('üé∞ Slots', 'coeff_global_slots')
      ],
      [
        Markup.button.callback('üí£ Mines', 'coeff_global_mines'),
        Markup.button.callback('üöÄ Crash', 'coeff_global_crash')
      ],
      [
        Markup.button.callback('üîÑ –ü–µ—Ä–µ–∫–ª—é—á–∏—Ç—å —Ä–µ–∂–∏–º', 'coeff_toggle_mode'),
        Markup.button.callback('üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞', 'coefficients_stats')
      ],
      [
        Markup.button.callback('üîÑ –û–±–Ω–æ–≤–∏—Ç—å', 'coefficients_global'),
        Markup.button.callback('‚óÄÔ∏è –ù–∞–∑–∞–¥', 'coefficients_menu')
      ]
    ]);
    
    if (ctx.callbackQuery) {
      await ctx.editMessageText(message, {
        parse_mode: 'Markdown',
        ...keyboard
      });
    } else {
      await ctx.reply(message, {
        parse_mode: 'Markdown',
        ...keyboard
      });
    }
    
  } catch (error) {
    console.error('ADMIN: –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –≥–ª–æ–±–∞–ª—å–Ω—ã—Ö –∫–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç–æ–≤:', error);
    const errorMessage = `‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –Ω–∞—Å—Ç—Ä–æ–µ–∫: ${error.message}`;
    
    if (ctx.callbackQuery) {
      await ctx.answerCbQuery(errorMessage);
    } else {
      await ctx.reply(errorMessage);
    }
  }
}

/**
 * –ù–∞—Å—Ç—Ä–æ–∏—Ç—å –≥–ª–æ–±–∞–ª—å–Ω—ã–π –∫–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç –¥–ª—è –∏–≥—Ä—ã
 */
async function setupGlobalGameCoefficient(ctx, gameType) {
  console.log('ADMIN: –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –≥–ª–æ–±–∞–ª—å–Ω–æ–≥–æ –∫–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç–∞ –¥–ª—è –∏–≥—Ä—ã:', gameType);
  
  const gameNames = {
    'coin': 'Coin Flip',
    'slots': 'Slots',
    'mines': 'Mines',
    'crash': 'Crash'
  };
  
  const modifierNames = {
    'coin': '—à–∞–Ω—Å–∞ –≤—ã–∏–≥—Ä—ã—à–∞',
    'slots': 'RTP',
    'mines': '–∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –º–∏–Ω',
    'crash': '—Ä–∞–Ω–Ω–µ–≥–æ –∫—Ä–∞—à–∞'
  };
  
  ctx.session = ctx.session || {};
  ctx.session.settingCoefficient = {
    gameType: gameType,
    step: 'modifier'
  };
  
  const message = `üéØ *–ù–∞—Å—Ç—Ä–æ–π–∫–∞ ${gameNames[gameType]}*\n\n` +
    `–í–≤–µ–¥–∏—Ç–µ –º–æ–¥–∏—Ñ–∏–∫–∞—Ç–æ—Ä ${modifierNames[gameType]} –≤ –ø—Ä–æ—Ü–µ–Ω—Ç–∞—Ö:\n\n` +
    `‚Ä¢ –ü–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω–æ–µ —á–∏—Å–ª–æ - —É–≤–µ–ª–∏—á–∏–≤–∞–µ—Ç —Å–ª–æ–∂–Ω–æ—Å—Ç—å –¥–ª—è –∏–≥—Ä–æ–∫–∞\n` +
    `‚Ä¢ –û—Ç—Ä–∏—Ü–∞—Ç–µ–ª—å–Ω–æ–µ —á–∏—Å–ª–æ - —É–º–µ–Ω—å—à–∞–µ—Ç —Å–ª–æ–∂–Ω–æ—Å—Ç—å –¥–ª—è –∏–≥—Ä–æ–∫–∞\n` +
    `‚Ä¢ 0 - —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏\n\n` +
    `–ü—Ä–∏–º–µ—Ä: 5 (—É–≤–µ–ª–∏—á–∏—Ç—å –Ω–∞ 5%) –∏–ª–∏ -10 (—É–º–µ–Ω—å—à–∏—Ç—å –Ω–∞ 10%)`;
  
  const keyboard = Markup.inlineKeyboard([[
    Markup.button.callback('‚ùå –û—Ç–º–µ–Ω–∞', 'coefficients_global')
  ]]);
  
  await ctx.reply(message, {
    parse_mode: 'Markdown',
    ...keyboard
  });
}

/**
 * –û–±—Ä–∞–±–æ—Ç–∞—Ç—å –Ω–∞—Å—Ç—Ä–æ–π–∫—É –∫–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç–∞
 */
async function handleCoefficientSetting(ctx) {
  if (!ctx.session || !ctx.session.settingCoefficient) {
    return;
  }
  
  const session = ctx.session.settingCoefficient;
  const text = ctx.message.text.trim();
  
  if (session.step === 'modifier') {
    const modifier = parseFloat(text);
    
    if (isNaN(modifier)) {
      await ctx.reply('‚ùå –í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ —á–∏—Å–ª–æ:');
      return;
    }
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ–ø—É—Å—Ç–∏–º—ã–µ –¥–∏–∞–ø–∞–∑–æ–Ω—ã –¥–ª—è –∫–∞–∂–¥–æ–π –∏–≥—Ä—ã
    const limits = {
      'coin': { min: -47.5, max: 52.5 },
      'slots': { min: -30, max: 20 },
      'mines': { min: -20, max: 30 },
      'crash': { min: -20, max: 50 }
    };
    
    const limit = limits[session.gameType];
    if (modifier < limit.min || modifier > limit.max) {
      await ctx.reply(`‚ùå –ó–Ω–∞—á–µ–Ω–∏–µ –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –æ—Ç ${limit.min}% –¥–æ ${limit.max}%:`);
      return;
    }
    
    session.modifier = modifier;
    session.step = 'enabled';
    
    await ctx.reply(
      `üéØ –ú–æ–¥–∏—Ñ–∏–∫–∞—Ç–æ—Ä: ${modifier}%\n\n–í–∫–ª—é—á–∏—Ç—å –º–æ–¥–∏—Ñ–∏–∫–∞—Ç–æ—Ä?`,
      Markup.inlineKeyboard([
        [
          Markup.button.callback('‚úÖ –í–∫–ª—é—á–∏—Ç—å', 'coeff_enable_true'),
          Markup.button.callback('‚ùå –í—ã–∫–ª—é—á–∏—Ç—å', 'coeff_enable_false')
        ],
        [Markup.button.callback('üîô –û—Ç–º–µ–Ω–∞', 'coefficients_global')]
      ])
    );
  }
}

/**
 * –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å –Ω–∞—Å—Ç—Ä–æ–π–∫—É –∫–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç–∞
 */
async function confirmCoefficientSetting(ctx, enabled) {
  if (!ctx.session || !ctx.session.settingCoefficient) {
    await ctx.answerCbQuery('‚ùå –°–µ—Å—Å–∏—è –∏—Å—Ç–µ–∫–ª–∞');
    return;
  }
  
  const session = ctx.session.settingCoefficient;
  
  try {
    const response = await apiClient.post(`/admin/game-settings/${session.gameType}/modifier`, {
      modifier: session.modifier,
      enabled: enabled
    });
    
    if (!response.data.success) {
      throw new Error(response.data.message || '–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –Ω–∞—Å—Ç—Ä–æ–µ–∫');
    }
    
    const gameNames = {
      'coin': 'Coin Flip',
      'slots': 'Slots',
      'mines': 'Mines',
      'crash': 'Crash'
    };
    
    await ctx.answerCbQuery('‚úÖ –ù–∞—Å—Ç—Ä–æ–π–∫–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã');
    
    await ctx.reply(
      `‚úÖ *–ù–∞—Å—Ç—Ä–æ–π–∫–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã*\n\n` +
      `üéÆ –ò–≥—Ä–∞: ${gameNames[session.gameType]}\n` +
      `üìä –ú–æ–¥–∏—Ñ–∏–∫–∞—Ç–æ—Ä: ${session.modifier}%\n` +
      `‚öôÔ∏è –°—Ç–∞—Ç—É—Å: ${enabled ? '‚úÖ –í–∫–ª—é—á–µ–Ω' : '‚ùå –í—ã–∫–ª—é—á–µ–Ω'}\n` +
      `üìÖ –í—Ä–µ–º—è: ${new Date().toLocaleString('ru-RU')}`,
      {
        parse_mode: 'Markdown',
        ...Markup.inlineKeyboard([[
          Markup.button.callback('üåç –ö –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º', 'coefficients_global')
        ]])
      }
    );
    
    delete ctx.session.settingCoefficient;
    
  } catch (error) {
    console.error('ADMIN: –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –∫–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç–∞:', error);
    await ctx.answerCbQuery(`‚ùå –û—à–∏–±–∫–∞: ${error.message}`);
  }
}

/**
 * –ü–æ–∫–∞–∑–∞—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏–µ –∫–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç—ã
 */
async function showUserCoefficients(ctx) {
  console.log('ADMIN: –ü–æ–∫–∞–∑ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏—Ö –∫–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç–æ–≤');
  
  ctx.session = ctx.session || {};
  ctx.session.searchingUserCoeff = {
    step: 'userId'
  };
  
  const message = 'üë§ *–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏–µ –∫–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç—ã*\n\n–í–≤–µ–¥–∏—Ç–µ Telegram ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –∏–ª–∏ –∏–∑–º–µ–Ω–µ–Ω–∏—è –µ–≥–æ –º–æ–¥–∏—Ñ–∏–∫–∞—Ç–æ—Ä–æ–≤:';
  const keyboard = Markup.inlineKeyboard([[
    Markup.button.callback('‚ùå –û—Ç–º–µ–Ω–∞', 'coefficients_menu')
  ]]);
  
  if (ctx.callbackQuery) {
    await ctx.editMessageText(message, {
      parse_mode: 'Markdown',
      ...keyboard
    });
  } else {
    await ctx.reply(message, {
      parse_mode: 'Markdown',
      ...keyboard
    });
  }
}

/**
 * –û–±—Ä–∞–±–æ—Ç–∞—Ç—å –ø–æ–∏—Å–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–ª—è –∫–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç–æ–≤
 */
async function handleUserCoefficientSearch(ctx) {
  if (!ctx.session || !ctx.session.searchingUserCoeff) {
    return;
  }
  
  const userId = ctx.message.text.trim();
  console.log('ADMIN: –ü–æ–∏—Å–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–ª—è –∫–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç–æ–≤:', userId);
  
  try {
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ —ç—Ç–æ —á–∏—Å–ª–æ–º (Telegram ID)
    if (!/^\d+$/.test(userId)) {
      await ctx.reply('‚ùå –í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π Telegram ID (—Ç–æ–ª—å–∫–æ —Ü–∏—Ñ—Ä—ã):');
      return;
    }
    
    // –ò—â–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø–æ Telegram ID
    const response = await apiClient.get('/admin/users', {
      params: { search: userId, limit: 1 }
    });
    
    if (!response.data.success || response.data.data.users.length === 0) {
      await ctx.reply('‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –¥—Ä—É–≥–æ–π ID:');
      return;
    }
    
    const user = response.data.data.users[0];
    
    // –ü–æ–ª—É—á–∞–µ–º –º–æ–¥–∏—Ñ–∏–∫–∞—Ç–æ—Ä—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    const modifiersResponse = await apiClient.get(`/admin/users/${user._id}/modifiers`);
    
    if (!modifiersResponse.data.success) {
      throw new Error('–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –º–æ–¥–∏—Ñ–∏–∫–∞—Ç–æ—Ä–æ–≤');
    }
    
    const modifiers = modifiersResponse.data.data;
    await showUserModifiersDetails(ctx, modifiers);
    
    delete ctx.session.searchingUserCoeff;
    
  } catch (error) {
    console.error('ADMIN: –û—à–∏–±–∫–∞ –ø–æ–∏—Å–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–ª—è –∫–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç–æ–≤:', error);
    await ctx.reply(`‚ùå –û—à–∏–±–∫–∞: ${error.message}`);
  }
}

/**
 * –ü–æ–∫–∞–∑–∞—Ç—å –¥–µ—Ç–∞–ª–∏ –º–æ–¥–∏—Ñ–∏–∫–∞—Ç–æ—Ä–æ–≤ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
 */
async function showUserModifiersDetails(ctx, data) {
  const user = data;
  const gameSettings = user.gameSettings || {};
  
  let message = `üë§ *–ú–æ–¥–∏—Ñ–∏–∫–∞—Ç–æ—Ä—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è*\n\n`;
  message += `**–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å:** ${user.username ? `@${user.username}` : user.userId}\n`;
  message += `**ID:** \`${user.userId}\`\n\n`;
  
  // Coin Flip
  const coin = gameSettings.coin || {};
  message += `ü™ô **Coin Flip:**\n`;
  message += `   üìä –ú–æ–¥–∏—Ñ–∏–∫–∞—Ç–æ—Ä —à–∞–Ω—Å–∞: ${coin.winChanceModifier || 0}%\n\n`;
  
  // Slots
  const slots = gameSettings.slots || {};
  message += `üé∞ **Slots:**\n`;
  message += `   üìä –ú–æ–¥–∏—Ñ–∏–∫–∞—Ç–æ—Ä RTP: ${slots.rtpModifier || 0}%\n\n`;
  
  // Mines
  const mines = gameSettings.mines || {};
  message += `üí£ **Mines:**\n`;
  message += `   üìä –ú–æ–¥–∏—Ñ–∏–∫–∞—Ç–æ—Ä –º–∏–Ω: ${mines.mineChanceModifier || 0}%\n\n`;
  
  // Crash
  const crash = gameSettings.crash || {};
  message += `üöÄ **Crash:**\n`;
  message += `   üìä –ú–æ–¥–∏—Ñ–∏–∫–∞—Ç–æ—Ä –∫—Ä–∞—à–∞: ${crash.crashModifier || 0}%\n\n`;
  
  const hasAnyModifiers = Object.values(gameSettings).some(game => 
    Object.values(game || {}).some(value => value !== 0)
  );
  
  if (!hasAnyModifiers) {
    message += `‚ÑπÔ∏è *–£ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –º–æ–¥–∏—Ñ–∏–∫–∞—Ç–æ—Ä–æ–≤*`;
  }
  
  const keyboard = Markup.inlineKeyboard([
    [
      Markup.button.callback('ü™ô –ò–∑–º–µ–Ω–∏—Ç—å Coin', `user_coeff_coin_${user.userId}`),
      Markup.button.callback('üé∞ –ò–∑–º–µ–Ω–∏—Ç—å Slots', `user_coeff_slots_${user.userId}`)
    ],
    [
      Markup.button.callback('üí£ –ò–∑–º–µ–Ω–∏—Ç—å Mines', `user_coeff_mines_${user.userId}`),
      Markup.button.callback('üöÄ –ò–∑–º–µ–Ω–∏—Ç—å Crash', `user_coeff_crash_${user.userId}`)
    ],
    [
      Markup.button.callback('üîÑ –°–±—Ä–æ—Å–∏—Ç—å –≤—Å–µ', `user_coeff_reset_${user.userId}`),
      Markup.button.callback('üîç –î—Ä—É–≥–æ–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å', 'coefficients_users')
    ],
    [Markup.button.callback('‚óÄÔ∏è –ù–∞–∑–∞–¥', 'coefficients_menu')]
  ]);
  
  if (ctx.callbackQuery) {
    await ctx.editMessageText(message, {
      parse_mode: 'Markdown',
      ...keyboard
    });
  } else {
    await ctx.reply(message, {
      parse_mode: 'Markdown',
      ...keyboard
    });
  }
}

/**
 * –ü–æ–∫–∞–∑–∞—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –º–æ–¥–∏—Ñ–∏–∫–∞—Ç–æ—Ä–æ–≤
 */
async function showCoefficientsStats(ctx) {
  console.log('ADMIN: –ó–∞–ø—Ä–æ—Å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –º–æ–¥–∏—Ñ–∏–∫–∞—Ç–æ—Ä–æ–≤');
  
  try {
    const response = await apiClient.get('/admin/odds/statistics');
    
    if (!response.data.success) {
      throw new Error(response.data.message || '–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏');
    }
    
    const stats = response.data.data;
    
    let message = 'üìä *–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –º–æ–¥–∏—Ñ–∏–∫–∞—Ç–æ—Ä–æ–≤*\n\n';
    
    message += `**–û–±—â–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è:**\n`;
    message += `üë• –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π —Å –º–æ–¥–∏—Ñ–∏–∫–∞—Ç–æ—Ä–∞–º–∏: ${stats.usersWithModifiers || 0}\n`;
    message += `üéÆ –í—Å–µ–≥–æ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–Ω—ã—Ö –º–æ–¥–∏—Ñ–∏–∫–∞—Ç–æ—Ä–æ–≤: ${stats.totalModifiers || 0}\n`;
    message += `üìà –°—Ä–µ–¥–Ω–µ–µ –∑–Ω–∞—á–µ–Ω–∏–µ –º–æ–¥–∏—Ñ–∏–∫–∞—Ç–æ—Ä–∞: ${(stats.averageModifier || 0).toFixed(2)}%\n\n`;
    
    if (stats.gameStats) {
      message += `**–ü–æ –∏–≥—Ä–∞–º:**\n`;
      
      Object.entries(stats.gameStats).forEach(([gameType, gameStat]) => {
        const gameEmoji = {
          'coin': 'ü™ô',
          'slots': 'üé∞',
          'mines': 'üí£',
          'crash': 'üöÄ'
        }[gameType] || 'üéÆ';
        
        message += `${gameEmoji} **${gameType}:**\n`;
        message += `   üë• –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: ${gameStat.usersCount}\n`;
        message += `   üìä –°—Ä–µ–¥–Ω–∏–π –º–æ–¥–∏—Ñ–∏–∫–∞—Ç–æ—Ä: ${gameStat.averageModifier.toFixed(2)}%\n`;
        message += `   üìà –ú–∞–∫—Å. –º–æ–¥–∏—Ñ–∏–∫–∞—Ç–æ—Ä: ${gameStat.maxModifier}%\n`;
        message += `   üìâ –ú–∏–Ω. –º–æ–¥–∏—Ñ–∏–∫–∞—Ç–æ—Ä: ${gameStat.minModifier}%\n\n`;
      });
    }
    
    message += `**–ì–ª–æ–±–∞–ª—å–Ω—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏:**\n`;
    message += `üåç –†–µ–∂–∏–º: ${stats.globalMode ? '–ì–ª–æ–±–∞–ª—å–Ω—ã–π' : '–ò–Ω–¥–∏–≤–∏–¥—É–∞–ª—å–Ω—ã–π'}\n`;
    message += `‚öôÔ∏è –ê–∫—Ç–∏–≤–Ω—ã—Ö –≥–ª–æ–±–∞–ª—å–Ω—ã—Ö –º–æ–¥–∏—Ñ–∏–∫–∞—Ç–æ—Ä–æ–≤: ${stats.activeGlobalModifiers || 0}`;
    
    const keyboard = Markup.inlineKeyboard([
      [Markup.button.callback('üîÑ –û–±–Ω–æ–≤–∏—Ç—å', 'coefficients_stats')],
      [Markup.button.callback('‚óÄÔ∏è –ù–∞–∑–∞–¥', 'coefficients_menu')]
    ]);
    
    if (ctx.callbackQuery) {
      await ctx.editMessageText(message, {
        parse_mode: 'Markdown',
        ...keyboard
      });
    } else {
      await ctx.reply(message, {
        parse_mode: 'Markdown',
        ...keyboard
      });
    }
    
  } catch (error) {
    console.error('ADMIN: –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –º–æ–¥–∏—Ñ–∏–∫–∞—Ç–æ—Ä–æ–≤:', error);
    const errorMessage = `‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏: ${error.message}`;
    
    if (ctx.callbackQuery) {
      await ctx.answerCbQuery(errorMessage);
    } else {
      await ctx.reply(errorMessage);
    }
  }
}

/**
 * –ü–µ—Ä–µ–∫–ª—é—á–∏—Ç—å —Ä–µ–∂–∏–º –º–æ–¥–∏—Ñ–∏–∫–∞—Ç–æ—Ä–æ–≤
 */
async function toggleModifierMode(ctx) {
  console.log('ADMIN: –ü–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–µ —Ä–µ–∂–∏–º–∞ –º–æ–¥–∏—Ñ–∏–∫–∞—Ç–æ—Ä–æ–≤');
  
  try {
    // –°–Ω–∞—á–∞–ª–∞ –ø–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–∏–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
    const currentResponse = await apiClient.get('/admin/game-settings');
    if (!currentResponse.data.success) {
      throw new Error('–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Ç–µ–∫—É—â–∏—Ö –Ω–∞—Å—Ç—Ä–æ–µ–∫');
    }
    
    const currentMode = currentResponse.data.data.modifierMode;
    const newMode = currentMode === 'global' ? 'individual' : 'global';
    
    const response = await apiClient.put('/admin/game-settings', {
      modifierMode: newMode
    });
    
    if (!response.data.success) {
      throw new Error(response.data.message || '–û—à–∏–±–∫–∞ –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏—è —Ä–µ–∂–∏–º–∞');
    }
    
    await ctx.answerCbQuery(`‚úÖ –†–µ–∂–∏–º –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω –Ω–∞ ${newMode === 'global' ? '–≥–ª–æ–±–∞–ª—å–Ω—ã–π' : '–∏–Ω–¥–∏–≤–∏–¥—É–∞–ª—å–Ω—ã–π'}`);
    
    // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
    await showGlobalCoefficients(ctx);
    
  } catch (error) {
    console.error('ADMIN: –û—à–∏–±–∫–∞ –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏—è —Ä–µ–∂–∏–º–∞ –º–æ–¥–∏—Ñ–∏–∫–∞—Ç–æ—Ä–æ–≤:', error);
    await ctx.answerCbQuery(`‚ùå –û—à–∏–±–∫–∞: ${error.message}`);
  }
}

/**
 * –°–±—Ä–æ—Å–∏—Ç—å –≤—Å–µ –º–æ–¥–∏—Ñ–∏–∫–∞—Ç–æ—Ä—ã
 */
async function resetAllModifiers(ctx) {
  console.log('ADMIN: –°–±—Ä–æ—Å –≤—Å–µ—Ö –º–æ–¥–∏—Ñ–∏–∫–∞—Ç–æ—Ä–æ–≤');
  
  const message = 'üîÑ *–°–±—Ä–æ—Å –≤—Å–µ—Ö –º–æ–¥–∏—Ñ–∏–∫–∞—Ç–æ—Ä–æ–≤*\n\n‚ö†Ô∏è –≠—Ç–æ –¥–µ–π—Å—Ç–≤–∏–µ —Å–±—Ä–æ—Å–∏—Ç –í–°–ï –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏–µ –º–æ–¥–∏—Ñ–∏–∫–∞—Ç–æ—Ä—ã –¥–æ —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã—Ö –∑–Ω–∞—á–µ–Ω–∏–π.\n\n–í—ã —É–≤–µ—Ä–µ–Ω—ã?';
  
  const keyboard = Markup.inlineKeyboard([
    [
      Markup.button.callback('‚úÖ –î–∞, —Å–±—Ä–æ—Å–∏—Ç—å', 'confirm_reset_all'),
      Markup.button.callback('‚ùå –û—Ç–º–µ–Ω–∞', 'coefficients_menu')
    ]
  ]);
  
  await ctx.reply(message, {
    parse_mode: 'Markdown',
    ...keyboard
  });
}

/**
 * –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å —Å–±—Ä–æ—Å –≤—Å–µ—Ö –º–æ–¥–∏—Ñ–∏–∫–∞—Ç–æ—Ä–æ–≤
 */
async function confirmResetAllModifiers(ctx) {
  console.log('ADMIN: –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ —Å–±—Ä–æ—Å–∞ –≤—Å–µ—Ö –º–æ–¥–∏—Ñ–∏–∫–∞—Ç–æ—Ä–æ–≤');
  
  try {
    // –ó–¥–µ—Å—å –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –≤—ã–∑–æ–≤ API –¥–ª—è —Å–±—Ä–æ—Å–∞ –≤—Å–µ—Ö –º–æ–¥–∏—Ñ–∏–∫–∞—Ç–æ—Ä–æ–≤
    // –ü–æ–∫–∞ —á—Ç–æ –∑–∞–≥–ª—É—à–∫–∞
    await ctx.answerCbQuery('üöß –§—É–Ω–∫—Ü–∏—è –≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ');
    
  } catch (error) {
    console.error('ADMIN: –û—à–∏–±–∫–∞ —Å–±—Ä–æ—Å–∞ –º–æ–¥–∏—Ñ–∏–∫–∞—Ç–æ—Ä–æ–≤:', error);
    await ctx.answerCbQuery(`‚ùå –û—à–∏–±–∫–∞: ${error.message}`);
  }
}

module.exports = {
  showGlobalCoefficients,
  setupGlobalGameCoefficient,
  handleCoefficientSetting,
  confirmCoefficientSetting,
  showUserCoefficients,
  handleUserCoefficientSearch,
  showUserModifiersDetails,
  showCoefficientsStats,
  toggleModifierMode,
  resetAllModifiers,
  confirmResetAllModifiers
};