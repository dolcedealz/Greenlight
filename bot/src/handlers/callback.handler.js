// callback.handler.js
const { Markup } = require('telegraf');
const config = require('../config');
const apiService = require('../services/api.service');

// –§—É–Ω–∫—Ü–∏—è –ø–æ–ª—É—á–µ–Ω–∏—è –Ω–∞–∑–≤–∞–Ω–∏—è –∏–≥—Ä—ã
function getGameName(gameType) {
  const gameNames = {
    'üé≤': '–ö–æ—Å—Ç–∏',
    'üéØ': '–î–∞—Ä—Ç—Å', 
    '‚öΩ': '–§—É—Ç–±–æ–ª',
    'üèÄ': '–ë–∞—Å–∫–µ—Ç–±–æ–ª',
    'üé∞': '–°–ª–æ—Ç—ã',
    'üé≥': '–ë–æ—É–ª–∏–Ω–≥'
  };
  return gameNames[gameType] || '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∏–≥—Ä–∞';
}

/**
 * –û–±—Ä–∞–±–æ—Ç—á–∏–∫ callback –∑–∞–ø—Ä–æ—Å–æ–≤ (–Ω–∞–∂–∞—Ç–∏—è –Ω–∞ inline –∫–Ω–æ–ø–∫–∏)
 * @param {Object} bot - –≠–∫–∑–µ–º–ø–ª—è—Ä –±–æ—Ç–∞ Telegraf
 */
function registerCallbackHandlers(bot) {
  
  console.log('üîß –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º callback handlers...');
  
  // –£–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω—ã–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏ –≤—Å–µ—Ö callback
  bot.on('callback_query', async (ctx, next) => {
    console.log('üîò Callback query –ø–æ–ª—É—á–µ–Ω:', {
      data: ctx.callbackQuery.data,
      from: ctx.from.username,
      userId: ctx.from.id,
      messageId: ctx.callbackQuery.message?.message_id
    });
    await next();
  });
  
  // –û–±—Ä–∞–±–æ—Ç–∫–∞ –¥–µ–π—Å—Ç–≤–∏–π –ø–æ–ø–æ–ª–Ω–µ–Ω–∏—è –±–∞–ª–∞–Ω—Å–∞
  bot.action(/^deposit:(\d+|custom)$/, async (ctx) => {
    try {
      const amount = ctx.match[1];
      
      console.log(`–î–ï–ü–û–ó–ò–¢: –û–±—Ä–∞–±–æ—Ç–∫–∞ callback deposit:${amount}`);
      
      if (amount === 'custom') {
        // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ñ–ª–∞–≥ –æ–∂–∏–¥–∞–Ω–∏—è —Å—É–º–º—ã –¥–µ–ø–æ–∑–∏—Ç–∞
        ctx.session = ctx.session || {};
        ctx.session.waitingForDepositAmount = true;
        
        await ctx.answerCbQuery();
        await ctx.reply(
          'üí∞ –í–≤–µ–¥–∏—Ç–µ —Å—É–º–º—É –¥–ª—è –ø–æ–ø–æ–ª–Ω–µ–Ω–∏—è (–≤ USDT):\n\n' +
          '–ú–∏–Ω–∏–º—É–º: 1 USDT\n' +
          '–ú–∞–∫—Å–∏–º—É–º: 10000 USDT\n\n' +
          '–î–ª—è –æ—Ç–º–µ–Ω—ã –≤–≤–µ–¥–∏—Ç–µ /cancel'
        );
        return;
      }
      
      // –í–∞–ª–∏–¥–∞—Ü–∏—è —Å—É–º–º—ã
      const amountFloat = parseFloat(amount);
      console.log(`–î–ï–ü–û–ó–ò–¢: Parsed amount = ${amountFloat}`);
      
      if (isNaN(amountFloat) || amountFloat <= 0) {
        await ctx.reply('‚ùå –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–∞—è —Å—É–º–º–∞ –¥–ª—è –ø–æ–ø–æ–ª–Ω–µ–Ω–∏—è');
        return;
      }
      
      if (amountFloat < 1) {
        await ctx.reply('‚ùå –ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è —Å—É–º–º–∞ –ø–æ–ø–æ–ª–Ω–µ–Ω–∏—è: 1 USDT');
        return;
      }
      
      if (amountFloat > 10000) {
        await ctx.reply('‚ùå –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è —Å—É–º–º–∞ –ø–æ–ø–æ–ª–Ω–µ–Ω–∏—è: 10000 USDT');
        return;
      }
      
      // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä –∑–∞–≥—Ä—É–∑–∫–∏
      await ctx.answerCbQuery('‚è≥ –°–æ–∑–¥–∞–µ–º —Å—á–µ—Ç –¥–ª—è –æ–ø–ª–∞—Ç—ã...');
      
      console.log(`–î–ï–ü–û–ó–ò–¢: –°–æ–∑–¥–∞–Ω–∏–µ –¥–µ–ø–æ–∑–∏—Ç–∞ —á–µ—Ä–µ–∑ API –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ${ctx.from.id} –Ω–∞ —Å—É–º–º—É ${amountFloat} USDT`);
      
      try {
        // –°–æ–∑–¥–∞–µ–º –¥–µ–ø–æ–∑–∏—Ç —á–µ—Ä–µ–∑ API backend'–∞
        const depositData = await apiService.createDeposit(ctx.from, amountFloat, {
          source: 'bot',
          description: `–ü–æ–ø–æ–ª–Ω–µ–Ω–∏–µ —á–µ—Ä–µ–∑ Telegram –±–æ—Ç –Ω–∞ ${amountFloat} USDT`
        });
        
        console.log(`–î–ï–ü–û–ó–ò–¢: –î–µ–ø–æ–∑–∏—Ç —Å–æ–∑–¥–∞–Ω —á–µ—Ä–µ–∑ API:`, depositData);
        
        // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é —Å—Å—ã–ª–∫—É –Ω–∞ –æ–ø–ª–∞—Ç—É
        await ctx.reply(
          `üí∞ –°–æ–∑–¥–∞–Ω —Å—á–µ—Ç –Ω–∞ –ø–æ–ø–æ–ª–Ω–µ–Ω–∏–µ –±–∞–ª–∞–Ω—Å–∞\n\n` +
          `üíµ –°—É–º–º–∞: ${amountFloat} USDT\n` +
          `üÜî ID –¥–µ–ø–æ–∑–∏—Ç–∞: ${depositData.depositId}\n` +
          `üßæ ID –∏–Ω–≤–æ–π—Å–∞: ${depositData.invoiceId}\n` +
          `‚è∞ –°—Ä–æ–∫ –¥–µ–π—Å—Ç–≤–∏—è: 1 —á–∞—Å\n\n` +
          `–ù–∞–∂–º–∏—Ç–µ –Ω–∞ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ –¥–ª—è –æ–ø–ª–∞—Ç—ã:`,
          Markup.inlineKeyboard([
            [Markup.button.url('üí≥ –û–ø–ª–∞—Ç–∏—Ç—å', depositData.payUrl)],
            [Markup.button.callback('üìã –°—Ç–∞—Ç—É—Å –ø–ª–∞—Ç–µ–∂–∞', `check_deposit_status:${depositData.depositId}`)]
          ])
        );
        
      } catch (apiError) {
        console.error('–î–ï–ü–û–ó–ò–¢: –û—à–∏–±–∫–∞ API –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –¥–µ–ø–æ–∑–∏—Ç–∞:', apiError);
        await ctx.reply('‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å —Å—á–µ—Ç –¥–ª—è –æ–ø–ª–∞—Ç—ã. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.');
      }
      
    } catch (error) {
      console.error('–î–ï–ü–û–ó–ò–¢: –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –¥–µ–π—Å—Ç–≤–∏—è –ø–æ–ø–æ–ª–Ω–µ–Ω–∏—è:', error);
      await ctx.reply('‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.');
      await ctx.answerCbQuery('‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è —Å—á–µ—Ç–∞');
    }
  });

  // ============ –û–ë–†–ê–ë–û–¢–ß–ò–ö–ò –î–£–≠–õ–ï–ô ============
  
  // –ü—Ä–∏–Ω—è—Ç–∏–µ –æ—Ç–∫—Ä—ã—Ç–æ–π –¥—É—ç–ª–∏
  bot.action(/^accept_open_duel_(.+)$/, async (ctx) => {
    try {
      const sessionId = ctx.match[1];
      const userId = ctx.from.id.toString();
      const username = ctx.from.username;
      
      await ctx.answerCbQuery('‚è≥ –ü—Ä–∏–Ω–∏–º–∞–µ–º –¥—É—ç–ª—å...');
      
      // –ü—Ä–∏–Ω–∏–º–∞–µ–º –¥—É—ç–ª—å —á–µ—Ä–µ–∑ API (backend –ø—Ä–æ–≤–µ—Ä–∏—Ç —á—Ç–æ —ç—Ç–æ –Ω–µ –∏–Ω–∏—Ü–∏–∞—Ç–æ—Ä)
      console.log('üîÑ –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∑–∞–ø—Ä–æ—Å –Ω–∞ –ø—Ä–∏–Ω—è—Ç–∏–µ –¥—É—ç–ª–∏:', {
        sessionId, 
        userId, 
        username: ctx.from.username,
        headers: apiService.createTelegramAuthHeaders(ctx.from)
      });
      
      const result = await apiService.acceptDuel(sessionId, userId, ctx.from);
      
      if (result.success) {
        // –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
        await ctx.editMessageText(
          ctx.callbackQuery.message.text + `\n\n‚úÖ **–î–£–≠–õ–¨ –ü–†–ò–ù–Ø–¢–ê!**\n–û–ø–ø–æ–Ω–µ–Ω—Ç: @${username}`,
          {
            parse_mode: 'Markdown',
            reply_markup: undefined
          }
        );
        
        // –°–æ–∑–¥–∞–µ–º –∫–Ω–æ–ø–∫–∏ –¥–ª—è –∏–≥—Ä—ã —Å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º Telegraf Markup
        const gameMarkup = Markup.inlineKeyboard([
          [Markup.button.callback('üé≤ –ë—Ä–æ—Å–∏—Ç—å –∫–æ—Å—Ç—å', `play_game_${sessionId}`)],
          [Markup.button.callback('üìä –°—Ç–∞—Ç—É—Å –¥—É—ç–ª–∏', `duel_status_${sessionId}`)]
        ]);
        
        await ctx.reply(
          `üéØ **–î—É—ç–ª—å –Ω–∞—á–∞–ª–∞—Å—å!**\n\n` +
          `üéÆ –ù–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É –¥–ª—è –∏–≥—Ä—ã\n` +
          `üìã ID —Å–µ—Å—Å–∏–∏: \`${sessionId}\`\n\n` +
          `‚ö° –ò–≥—Ä–æ–∫–∏ –¥–µ–ª–∞—é—Ç —Ö–æ–¥—ã –ø–æ –æ—á–µ—Ä–µ–¥–∏`,
          { 
            parse_mode: 'Markdown',
            ...gameMarkup
          }
        );
      } else {
        await ctx.answerCbQuery(`‚ùå ${result.error || '–û—à–∏–±–∫–∞ –ø—Ä–∏–Ω—è—Ç–∏—è –¥—É—ç–ª–∏'}`);
      }
      
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏–Ω—è—Ç–∏—è –¥—É—ç–ª–∏:', error);
      await ctx.answerCbQuery('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏–Ω—è—Ç–∏—è –¥—É—ç–ª–∏');
    }
  });

  // –û—Ç–º–µ–Ω–∞ –¥—É—ç–ª–∏
  bot.action(/^cancel_duel_(.+)$/, async (ctx) => {
    try {
      const sessionId = ctx.match[1];
      const userId = ctx.from.id.toString();
      
      await ctx.answerCbQuery('‚è≥ –û—Ç–º–µ–Ω—è–µ–º –¥—É—ç–ª—å...');
      
      // –û—Ç–º–µ–Ω—è–µ–º –¥—É—ç–ª—å —á–µ—Ä–µ–∑ API (backend –ø—Ä–æ–≤–µ—Ä–∏—Ç –ø—Ä–∞–≤–∞ –Ω–∞ –æ—Ç–º–µ–Ω—É)
      const result = await apiService.cancelDuel(sessionId, userId, ctx.from);
      
      if (result.success) {
        await ctx.editMessageText(
          ctx.callbackQuery.message.text + `\n\n‚ùå **–î–£–≠–õ–¨ –û–¢–ú–ï–ù–ï–ù–ê**`,
          {
            parse_mode: 'Markdown',
            reply_markup: undefined
          }
        );
      } else {
        await ctx.answerCbQuery(`‚ùå ${result.error}`);
      }
      
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ –æ—Ç–º–µ–Ω—ã –¥—É—ç–ª–∏:', error);
      await ctx.answerCbQuery('‚ùå –û—à–∏–±–∫–∞ –æ—Ç–º–µ–Ω—ã –¥—É—ç–ª–∏');
    }
  });

  // –ü—Ä–∏–Ω—è—Ç–∏–µ –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω–æ–π –¥—É—ç–ª–∏
  bot.action(/^accept_personal_duel_(.+)$/, async (ctx) => {
    try {
      const sessionId = ctx.match[1];
      const userId = ctx.from.id.toString();
      const username = ctx.from.username;
      
      await ctx.answerCbQuery('‚è≥ –ü—Ä–∏–Ω–∏–º–∞–µ–º –¥—É—ç–ª—å...');
      
      // –ü—Ä–∏–Ω–∏–º–∞–µ–º –¥—É—ç–ª—å —á–µ—Ä–µ–∑ API
      const result = await apiService.acceptDuel(sessionId, userId, ctx.from);
      
      if (result.success) {
        // –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
        await ctx.editMessageText(
          ctx.callbackQuery.message.text + `\n\n‚úÖ **–î–£–≠–õ–¨ –ü–†–ò–ù–Ø–¢–ê!**\n–û–ø–ø–æ–Ω–µ–Ω—Ç: @${username}`,
          {
            parse_mode: 'Markdown',
            reply_markup: undefined
          }
        );
        
        // –°–æ–∑–¥–∞–µ–º –∫–Ω–æ–ø–∫–∏ –¥–ª—è –∏–≥—Ä—ã —Å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º Telegraf Markup
        const gameMarkup = Markup.inlineKeyboard([
          [Markup.button.callback('üé≤ –ë—Ä–æ—Å–∏—Ç—å –∫–æ—Å—Ç—å', `play_game_${sessionId}`)],
          [Markup.button.callback('üìä –°—Ç–∞—Ç—É—Å –¥—É—ç–ª–∏', `duel_status_${sessionId}`)]
        ]);
        
        await ctx.reply(
          `üéØ **–î—É—ç–ª—å –Ω–∞—á–∞–ª–∞—Å—å!**\n\n` +
          `üéÆ –ù–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É –¥–ª—è –∏–≥—Ä—ã\n` +
          `üìã ID —Å–µ—Å—Å–∏–∏: \`${sessionId}\`\n\n` +
          `‚ö° –ò–≥—Ä–æ–∫–∏ –¥–µ–ª–∞—é—Ç —Ö–æ–¥—ã –ø–æ –æ—á–µ—Ä–µ–¥–∏`,
          { 
            parse_mode: 'Markdown',
            ...gameMarkup
          }
        );
      } else {
        await ctx.answerCbQuery(`‚ùå ${result.error}`);
      }
      
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏–Ω—è—Ç–∏—è –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω–æ–π –¥—É—ç–ª–∏:', error);
      await ctx.answerCbQuery('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏–Ω—è—Ç–∏—è –¥—É—ç–ª–∏');
    }
  });

  // –û—Ç–∫–ª–æ–Ω–µ–Ω–∏–µ –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω–æ–π –¥—É—ç–ª–∏
  bot.action(/^decline_personal_duel_(.+)$/, async (ctx) => {
    try {
      const sessionId = ctx.match[1];
      const userId = ctx.from.id.toString();
      const username = ctx.from.username;
      
      await ctx.answerCbQuery('‚ùå –î—É—ç–ª—å –æ—Ç–∫–ª–æ–Ω–µ–Ω–∞');
      
      // –û—Ç–∫–ª–æ–Ω—è–µ–º –¥—É—ç–ª—å —á–µ—Ä–µ–∑ API
      const result = await apiService.cancelDuel(sessionId, userId, ctx.from);
      
      if (result.success) {
        await ctx.editMessageText(
          ctx.callbackQuery.message.text + `\n\n‚ùå **–î–£–≠–õ–¨ –û–¢–ö–õ–û–ù–ï–ù–ê**\n@${username} –æ—Ç–∫–ª–æ–Ω–∏–ª(–∞) –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏–µ`,
          {
            parse_mode: 'Markdown',
            reply_markup: undefined
          }
        );
      } else {
        await ctx.answerCbQuery(`‚ùå ${result.error}`);
      }
      
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ –æ—Ç–∫–ª–æ–Ω–µ–Ω–∏—è –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω–æ–π –¥—É—ç–ª–∏:', error);
      await ctx.answerCbQuery('‚ùå –û—à–∏–±–∫–∞ –æ—Ç–∫–ª–æ–Ω–µ–Ω–∏—è –¥—É—ç–ª–∏');
    }
  });

  // –ü–æ–∫–∞–∑ –ø—Ä–∞–≤–∏–ª –∏–≥—Ä—ã
  bot.action(/^duel_rules_(.+)$/, async (ctx) => {
    try {
      const gameTypeCode = ctx.match[1];
      
      // –ú–∞–ø–ø–∏–Ω–≥ –æ—á–∏—â–µ–Ω–Ω—ã—Ö –∫–æ–¥–æ–≤ –æ–±—Ä–∞—Ç–Ω–æ –∫ —ç–º–æ–¥–∑–∏
      const gameTypeMap = {
        '': 'üé≤', // fallback
        'undefined': 'üé≤', // fallback
      };
      
      const gameType = gameTypeMap[gameTypeCode] || 'üé≤';
      
      const gameRules = {
        'üé≤': '–ö–æ—Å—Ç–∏: –ë—Ä–æ—Å—å—Ç–µ –∫–æ—Å—Ç—å, —É –∫–æ–≥–æ –±–æ–ª—å—à–µ - —Ç–æ—Ç –≤—ã–∏–≥—Ä–∞–ª —Ä–∞—É–Ω–¥',
        'üéØ': '–î–∞—Ä—Ç—Å: –ü–æ–ø–∞–¥–∏—Ç–µ –≤ —Ü–µ–ª—å, –ª—É—á—à–∏–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç –ø–æ–±–µ–∂–¥–∞–µ—Ç',
        '‚öΩ': '–§—É—Ç–±–æ–ª: –ó–∞–±–µ–π—Ç–µ –≥–æ–ª, –ª—É—á—à–∏–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç –ø–æ–±–µ–∂–¥–∞–µ—Ç',
        'üèÄ': '–ë–∞—Å–∫–µ—Ç–±–æ–ª: –ü–æ–ø–∞–¥–∏—Ç–µ –≤ –∫–æ—Ä–∑–∏–Ω—É, –ª—É—á—à–∏–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç –ø–æ–±–µ–∂–¥–∞–µ—Ç',
        'üé≥': '–ë–æ—É–ª–∏–Ω–≥: –°–±–µ–π—Ç–µ –∫–µ–≥–ª–∏, –±–æ–ª—å—à–µ –∫–µ–≥–ª–µ–π = –ø–æ–±–µ–¥–∞',
        'üé∞': '–°–ª–æ—Ç—ã: –ü–æ–ª—É—á–∏—Ç–µ –∫–æ–º–±–∏–Ω–∞—Ü–∏—é, –±–æ–ª—å—à–µ –æ—á–∫–æ–≤ = –ø–æ–±–µ–¥–∞'
      };
      
      await ctx.answerCbQuery(
        gameRules[gameType] || '–ü—Ä–∞–≤–∏–ª–∞ –¥–ª—è —ç—Ç–æ–π –∏–≥—Ä—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã',
        { show_alert: true }
      );
      
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ –ø–æ–∫–∞–∑–∞ –ø—Ä–∞–≤–∏–ª:', error);
      await ctx.answerCbQuery('‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –ø—Ä–∞–≤–∏–ª');
    }
  });

  // ============ –û–ë–†–ê–ë–û–¢–ß–ò–ö–ò –ò–ì–†–û–í–û–ì–û –ü–†–û–¶–ï–°–°–ê ============
  
  // –ò–≥—Ä–∞ –≤ –¥—É—ç–ª–∏
  bot.action(/^play_game_(.+)$/, async (ctx) => {
    try {
      const sessionId = ctx.match[1];
      const userId = ctx.from.id.toString();
      const username = ctx.from.username;
      
      await ctx.answerCbQuery('üé≤ –ë—Ä–æ—Å–∞–µ–º –∫–æ—Å—Ç—å...');
      
      // –°–∏–º—É–ª—è—Ü–∏—è –±—Ä–æ—Å–∫–∞ –∫–æ—Å—Ç–∏ (1-6)
      const diceResult = Math.floor(Math.random() * 6) + 1;
      
      console.log(`üéÆ –ò–≥—Ä–æ–∫ ${username} (${userId}) –±—Ä–æ—Å–∏–ª –∫–æ—Å—Ç—å: ${diceResult} –≤ –¥—É—ç–ª–∏ ${sessionId}`);
      
      // –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç –≤ API
      const roundData = {
        userId,
        username,
        gameType: 'üé≤',
        result: diceResult,
        timestamp: Date.now()
      };
      
      const saveResult = await apiService.saveDuelRound(sessionId, roundData);
      
      if (saveResult.success) {
        // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç —Ç–µ–∫—É—â–µ–º—É –∏–≥—Ä–æ–∫—É
        await ctx.reply(
          `üé≤ **–í–∞—à —Ä–µ–∑—É–ª—å—Ç–∞—Ç –±—Ä–æ—Å–∫–∞**\n\n` +
          `üéØ –†–µ–∑—É–ª—å—Ç–∞—Ç: **${diceResult}**\n` +
          `üìã –°–µ—Å—Å–∏—è: \`${sessionId}\`\n\n` +
          `‚è≥ –û–∂–∏–¥–∞–Ω–∏–µ —Ö–æ–¥–∞ –ø—Ä–æ—Ç–∏–≤–Ω–∏–∫–∞...`,
          { parse_mode: 'Markdown' }
        );
        
        // –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –¥—É—ç–ª–∏ –¥–ª—è –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è –ø—Ä–æ—Ç–∏–≤–Ω–∏–∫–∞
        const duelData = await apiService.getDuelData(sessionId, userId);
        
        if (duelData.success) {
          const duel = duelData.data;
          const opponentId = duel.challengerId === userId ? duel.opponentId : duel.challengerId;
          const opponentUsername = duel.challengerId === userId ? duel.opponentUsername : duel.challengerUsername;
          
          // –£–≤–µ–¥–æ–º–ª—è–µ–º –ø—Ä–æ—Ç–∏–≤–Ω–∏–∫–∞ –æ —Ö–æ–¥–µ
          if (opponentId) {
            try {
              const gameMarkup = Markup.inlineKeyboard([
                [Markup.button.callback('üé≤ –ë—Ä–æ—Å–∏—Ç—å –∫–æ—Å—Ç—å', `play_game_${sessionId}`)],
                [Markup.button.callback('üìä –ü–æ–∫–∞–∑–∞—Ç—å —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã', `show_results_${sessionId}`)]
              ]);
              
              await ctx.telegram.sendMessage(
                opponentId,
                `üé≤ **–•–æ–¥ –ø—Ä–æ—Ç–∏–≤–Ω–∏–∫–∞!**\n\n` +
                `üë§ @${username} –±—Ä–æ—Å–∏–ª –∫–æ—Å—Ç—å: **${diceResult}**\n` +
                `üìã –°–µ—Å—Å–∏—è: \`${sessionId}\`\n\n` +
                `üéØ –¢–µ–ø–µ—Ä—å –≤–∞—à —Ö–æ–¥!`,
                { 
                  parse_mode: 'Markdown',
                  ...gameMarkup
                }
              );
              console.log(`‚úÖ –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ —Ö–æ–¥–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –ø—Ä–æ—Ç–∏–≤–Ω–∏–∫—É ${opponentId}`);
            } catch (notifyError) {
              console.error('‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —É–≤–µ–¥–æ–º–∏—Ç—å –ø—Ä–æ—Ç–∏–≤–Ω–∏–∫–∞:', notifyError.message);
            }
          }
        }
      } else {
        await ctx.reply(`‚ùå –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞: ${saveResult.error}`);
      }
      
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ –∏–≥—Ä–æ–≤–æ–≥–æ –ø—Ä–æ—Ü–µ—Å—Å–∞:', error);
      await ctx.answerCbQuery('‚ùå –û—à–∏–±–∫–∞ –∏–≥—Ä—ã');
    }
  });
  
  // –ü–æ–∫–∞–∑ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ —Ä–∞—É–Ω–¥–∞
  bot.action(/^show_results_(.+)$/, async (ctx) => {
    try {
      const sessionId = ctx.match[1];
      const userId = ctx.from.id.toString();
      
      await ctx.answerCbQuery('üìä –ó–∞–≥—Ä—É–∂–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã...');
      
      // –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –¥—É—ç–ª–∏
      const duelData = await apiService.getDuelData(sessionId, userId);
      
      if (duelData.success) {
        const duel = duelData.data;
        
        let resultsText = `üìä **–†–µ–∑—É–ª—å—Ç–∞—Ç—ã –¥—É—ç–ª–∏**\n\n`;
        resultsText += `üÜî –°–µ—Å—Å–∏—è: \`${sessionId}\`\n`;
        resultsText += `üéÆ –ò–≥—Ä–∞: ${duel.gameType}\n`;
        resultsText += `üí∞ –°—Ç–∞–≤–∫–∞: ${duel.amount} USDT\n\n`;
        
        if (duel.rounds && duel.rounds.length > 0) {
          resultsText += `üìà **–†–∞—É–Ω–¥—ã:**\n`;
          duel.rounds.forEach((round, index) => {
            resultsText += `${index + 1}. @${round.username}: ${round.result}\n`;
          });
        } else {
          resultsText += `üì≠ –†–∞—É–Ω–¥–æ–≤ –ø–æ–∫–∞ –Ω–µ—Ç`;
        }
        
        await ctx.reply(resultsText, { parse_mode: 'Markdown' });
      } else {
        await ctx.reply(`‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤: ${duelData.error}`);
      }
      
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ –ø–æ–∫–∞–∑–∞ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤:', error);
      await ctx.answerCbQuery('‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏');
    }
  });
  
  // –°–ª–µ–¥—É—é—â–∏–π —Ä–∞—É–Ω–¥
  bot.action(/^next_round_(.+)$/, async (ctx) => {
    try {
      const sessionId = ctx.match[1];
      
      await ctx.answerCbQuery('üîÑ –ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ —Å–ª–µ–¥—É—é—â–µ–≥–æ —Ä–∞—É–Ω–¥–∞...');
      
      // –°–æ–∑–¥–∞–µ–º –∫–Ω–æ–ø–∫–∏ –¥–ª—è —Å–ª–µ–¥—É—é—â–µ–≥–æ —Ä–∞—É–Ω–¥–∞
      const nextRoundMarkup = Markup.inlineKeyboard([
        [Markup.button.callback('üé≤ –ë—Ä–æ—Å–∏—Ç—å –∫–æ—Å—Ç—å', `play_game_${sessionId}`)],
        [Markup.button.callback('üìä –ü–æ–∫–∞–∑–∞—Ç—å —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã', `show_results_${sessionId}`)]
      ]);
      
      await ctx.reply(
        `üîÑ **–°–ª–µ–¥—É—é—â–∏–π —Ä–∞—É–Ω–¥**\n\n` +
        `üéÆ –ù–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É –¥–ª—è –∏–≥—Ä—ã\n` +
        `üìã –°–µ—Å—Å–∏—è: \`${sessionId}\``,
        { 
          parse_mode: 'Markdown',
          ...nextRoundMarkup
        }
      );
      
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ —Å–ª–µ–¥—É—é—â–µ–≥–æ —Ä–∞—É–Ω–¥–∞:', error);
      await ctx.answerCbQuery('‚ùå –û—à–∏–±–∫–∞ —Ä–∞—É–Ω–¥–∞');
    }
  });
  
  // –°—Ç–∞—Ç—É—Å –¥—É—ç–ª–∏
  bot.action(/^duel_status_(.+)$/, async (ctx) => {
    try {
      const sessionId = ctx.match[1];
      const userId = ctx.from.id.toString();
      
      await ctx.answerCbQuery('üìä –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç–∞—Ç—É—Å...');
      
      // –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –¥—É—ç–ª–∏
      const duelData = await apiService.getDuelData(sessionId, userId);
      
      if (duelData.success) {
        const duel = duelData.data;
        
        let statusText = `üìã **–°—Ç–∞—Ç—É—Å –¥—É—ç–ª–∏**\n\n`;
        statusText += `üÜî ID: \`${sessionId}\`\n`;
        statusText += `üéÆ –ò–≥—Ä–∞: ${duel.gameType}\n`;
        statusText += `üí∞ –°—Ç–∞–≤–∫–∞: ${duel.amount} USDT\n`;
        statusText += `üèÜ –§–æ—Ä–º–∞—Ç: ${duel.format}\n`;
        statusText += `üìä –°—Ç–∞—Ç—É—Å: ${duel.status}\n\n`;
        
        if (duel.challengerUsername && duel.opponentUsername) {
          statusText += `üë• **–ò–≥—Ä–æ–∫–∏:**\n`;
          statusText += `‚Ä¢ @${duel.challengerUsername}\n`;
          statusText += `‚Ä¢ @${duel.opponentUsername}\n\n`;
        }
        
        if (duel.rounds && duel.rounds.length > 0) {
          statusText += `üìà –†–∞—É–Ω–¥–æ–≤ —Å—ã–≥—Ä–∞–Ω–æ: ${duel.rounds.length}`;
        }
        
        await ctx.reply(statusText, { parse_mode: 'Markdown' });
      } else {
        await ctx.reply(`‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞: ${duelData.error}`);
      }
      
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ —Å—Ç–∞—Ç—É—Å–∞ –¥—É—ç–ª–∏:', error);
      await ctx.answerCbQuery('‚ùå –û—à–∏–±–∫–∞ —Å—Ç–∞—Ç—É—Å–∞');
    }
  });

  // ============ –û–ë–†–ê–ë–û–¢–ß–ò–ö–ò INLINE –î–£–≠–õ–ï–ô ============
  
  // –ü—Ä–∏–Ω—è—Ç–∏–µ inline –¥—É—ç–ª–∏
  bot.action(/^duel_accept_(\d+)_(\w+)_(\d+)_(.+)_(.+)$/, async (ctx) => {
    try {
      const challengerId = ctx.match[1];
      const targetUsername = ctx.match[2];
      const amount = parseInt(ctx.match[3]);
      const gameType = ctx.match[4];
      const format = ctx.match[5];
      const challengerUsername = 'challenger'; // fallback
      const acceptorId = ctx.from.id.toString();
      const acceptorUsername = ctx.from.username;
      
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –ø—Ä–∏–Ω–∏–º–∞–µ—Ç —Å–≤–æ–π –≤—ã–∑–æ–≤
      if (acceptorUsername !== targetUsername) {
        return await ctx.answerCbQuery('‚ùå –≠—Ç–æ –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏–µ –Ω–µ –¥–ª—è –≤–∞—Å');
      }
      
      await ctx.answerCbQuery('‚è≥ –°–æ–∑–¥–∞–µ–º –¥—É—ç–ª—å...');
      
      try {
        // Challenger username —É–∂–µ –∏–∑–≤–ª–µ—á–µ–Ω –∏–∑ callback data –≤—ã—à–µ
        
        // –°–æ–∑–¥–∞–µ–º –¥—É—ç–ª—å —á–µ—Ä–µ–∑ API
        const chatId = ctx.chat?.id?.toString() || ctx.callbackQuery?.message?.chat?.id?.toString() || 'inline_private';
        const duelData = await apiService.createDuel({
          challengerId,
          challengerUsername,
          opponentId: acceptorId,
          opponentUsername: acceptorUsername,
          gameType,
          format,
          amount,
          chatId,
          chatType: 'private'
        }, ctx.from);
        
        if (duelData.success) {
          const sessionId = duelData.data.sessionId;
          
          await ctx.editMessageText(
            `${gameType} **–î–£–≠–õ–¨ –ü–†–ò–ù–Ø–¢–ê!** ${gameType}\n\n` +
            `üéÆ –ò–≥—Ä–∞: ${getGameName(gameType)}\n` +
            `üí∞ –°—Ç–∞–≤–∫–∞: ${amount} USDT –∫–∞–∂–¥—ã–π\n` +
            `üèÜ –§–æ—Ä–º–∞—Ç: ${format.toUpperCase()}\n` +
            `üë• –ò–≥—Ä–æ–∫–∏: @${challengerUsername} vs @${acceptorUsername}\n\n` +
            `‚úÖ **–î—É—ç–ª—å –Ω–∞—á–∞–ª–∞—Å—å!**\n` +
            `üìã ID: \`${sessionId}\``,
            {
              parse_mode: 'Markdown',
              reply_markup: undefined
            }
          );
          
          // –°–æ–∑–¥–∞–µ–º –∏–≥—Ä–æ–≤—ã–µ –∫–Ω–æ–ø–∫–∏ –¥–ª—è inline –¥—É—ç–ª–∏
          const gameMarkup = Markup.inlineKeyboard([
            [Markup.button.callback('üé≤ –ë—Ä–æ—Å–∏—Ç—å –∫–æ—Å—Ç—å', `play_game_${sessionId}`)],
            [Markup.button.callback('üìä –°—Ç–∞—Ç—É—Å –¥—É—ç–ª–∏', `duel_status_${sessionId}`)]
          ]);
          
          // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∏–≥—Ä–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –ø—Ä–∏–Ω—è–≤—à–µ–º—É –∏–≥—Ä–æ–∫—É –í –õ–ò–ß–ö–£
          try {
            await ctx.telegram.sendMessage(
              acceptorId,
              `üéØ **–î—É—ç–ª—å –Ω–∞—á–∞–ª–∞—Å—å!**\n\n` +
              `üë§ –ü—Ä–æ—Ç–∏–≤–Ω–∏–∫: @${challengerUsername}\n` +
              `üéÆ –ò–≥—Ä–∞: ${getGameName(gameType)}\n` +
              `üí∞ –°—Ç–∞–≤–∫–∞: ${amount} USDT\n` +
              `üìã ID: \`${sessionId}\`\n\n` +
              `üé≤ –í–∞—à —Ö–æ–¥! –ù–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É –¥–ª—è –∏–≥—Ä—ã:`,
              { 
                parse_mode: 'Markdown',
                ...gameMarkup
              }
            );
            console.log(`‚úÖ –ò–≥—Ä–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –ø—Ä–∏–Ω—è–≤—à–µ–º—É –∏–≥—Ä–æ–∫—É ${acceptorId}`);
          } catch (sendError) {
            console.error('‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –∏–≥—Ä–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –ø—Ä–∏–Ω—è–≤—à–µ–º—É:', sendError.message);
          }
          
          // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∏–≥—Ä–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –∏–Ω–∏—Ü–∏–∞—Ç–æ—Ä—É –í –õ–ò–ß–ö–£
          try {
            await ctx.telegram.sendMessage(
              challengerId,
              `üéØ **–í–∞—à–∞ –¥—É—ç–ª—å –ø—Ä–∏–Ω—è—Ç–∞!**\n\n` +
              `üë§ –ü—Ä–æ—Ç–∏–≤–Ω–∏–∫: @${acceptorUsername}\n` +
              `üéÆ –ò–≥—Ä–∞: ${getGameName(gameType)}\n` +
              `üí∞ –°—Ç–∞–≤–∫–∞: ${amount} USDT\n` +
              `üìã ID: \`${sessionId}\`\n\n` +
              `üé≤ –í–∞—à —Ö–æ–¥! –ù–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É –¥–ª—è –∏–≥—Ä—ã:`,
              { 
                parse_mode: 'Markdown',
                ...gameMarkup
              }
            );
            console.log(`‚úÖ –ò–≥—Ä–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –∏–Ω–∏—Ü–∏–∞—Ç–æ—Ä—É ${challengerId}`);
          } catch (sendError) {
            console.error('‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –∏–≥—Ä–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –∏–Ω–∏—Ü–∏–∞—Ç–æ—Ä—É:', sendError.message);
          }
          
        } else {
          await ctx.answerCbQuery(`‚ùå ${duelData.error}`);
        }
        
      } catch (error) {
        console.error('–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è inline –¥—É—ç–ª–∏:', error);
        await ctx.answerCbQuery('‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –¥—É—ç–ª–∏: ' + error.message);
      }
      
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ inline –ø—Ä–∏–Ω—è—Ç–∏—è:', error);
      await ctx.answerCbQuery('‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏');
    }
  });

  // –û—Ç–∫–ª–æ–Ω–µ–Ω–∏–µ inline –¥—É—ç–ª–∏
  bot.action(/^duel_decline_(\d+)$/, async (ctx) => {
    try {
      const challengerId = ctx.match[1];
      const acceptorUsername = ctx.from.username;
      
      await ctx.answerCbQuery('‚ùå –î—É—ç–ª—å –æ—Ç–∫–ª–æ–Ω–µ–Ω–∞');
      
      await ctx.editMessageText(
        ctx.callbackQuery.message.text + `\n\n‚ùå **–î–£–≠–õ–¨ –û–¢–ö–õ–û–ù–ï–ù–ê**\n@${acceptorUsername} –æ—Ç–∫–ª–æ–Ω–∏–ª(–∞) –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏–µ`,
        {
          parse_mode: 'Markdown',
          reply_markup: undefined
        }
      );
      
      // –£–≤–µ–¥–æ–º–ª—è–µ–º –∏–Ω–∏—Ü–∏–∞—Ç–æ—Ä–∞
      try {
        await ctx.telegram.sendMessage(
          challengerId,
          `‚ùå **–î—É—ç–ª—å –æ—Ç–∫–ª–æ–Ω–µ–Ω–∞**\n\n@${acceptorUsername} –æ—Ç–∫–ª–æ–Ω–∏–ª(–∞) –≤–∞—à–µ –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏–µ –Ω–∞ –¥—É—ç–ª—å.`,
          { parse_mode: 'Markdown' }
        );
      } catch (notifyError) {
        console.log('–ù–µ —É–¥–∞–ª–æ—Å—å —É–≤–µ–¥–æ–º–∏—Ç—å –∏–Ω–∏—Ü–∏–∞—Ç–æ—Ä–∞ –æ–± –æ—Ç–∫–ª–æ–Ω–µ–Ω–∏–∏:', notifyError.message);
      }
      
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ –æ—Ç–∫–ª–æ–Ω–µ–Ω–∏—è inline –¥—É—ç–ª–∏:', error);
      await ctx.answerCbQuery('‚ùå –û—à–∏–±–∫–∞ –æ—Ç–∫–ª–æ–Ω–µ–Ω–∏—è');
    }
  });
  
  // –û–±—Ä–∞–±–æ—Ç–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å—Ç–∞—Ç—É—Å–∞ –¥–µ–ø–æ–∑–∏—Ç–∞
  bot.action(/^check_deposit_status:([0-9a-fA-F]{24})$/, async (ctx) => {
    try {
      const depositId = ctx.match[1];
      
      console.log(`–°–¢–ê–¢–£–°: –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç–∞—Ç—É—Å–∞ –¥–µ–ø–æ–∑–∏—Ç–∞: ${depositId}`);
      
      await ctx.answerCbQuery('‚è≥ –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç–∞—Ç—É—Å –¥–µ–ø–æ–∑–∏—Ç–∞...');
      
      const depositInfo = await apiService.getDepositStatus(ctx.from, depositId);
      
      let statusMessage = '';
      let statusEmoji = '';
      
      switch (depositInfo.status) {
        case 'pending':
          statusEmoji = '‚è≥';
          statusMessage = '–û–∂–∏–¥–∞–µ—Ç –æ–ø–ª–∞—Ç—ã';
          break;
        case 'paid':
          statusEmoji = '‚úÖ';
          statusMessage = '–û–ø–ª–∞—á–µ–Ω - —Å—Ä–µ–¥—Å—Ç–≤–∞ –∑–∞—á–∏—Å–ª–µ–Ω—ã –Ω–∞ –±–∞–ª–∞–Ω—Å';
          break;
        case 'expired':
          statusEmoji = '‚è∞';
          statusMessage = '–ò—Å—Ç–µ–∫ —Å—Ä–æ–∫ –¥–µ–π—Å—Ç–≤–∏—è';
          break;
        default:
          statusEmoji = '‚ùì';
          statusMessage = '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —Å—Ç–∞—Ç—É—Å';
      }
      
      await ctx.reply(
        `üìä –°—Ç–∞—Ç—É—Å –¥–µ–ø–æ–∑–∏—Ç–∞\n\n` +
        `üÜî ID: ${depositInfo.id}\n` +
        `üíµ –°—É–º–º–∞: ${depositInfo.amount} USDT\n` +
        `${statusEmoji} –°—Ç–∞—Ç—É—Å: ${statusMessage}\n` +
        `üìÖ –°–æ–∑–¥–∞–Ω: ${new Date(depositInfo.createdAt).toLocaleString('ru-RU')}`
      );
      
    } catch (error) {
      console.error('–°–¢–ê–¢–£–°: –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ —Å—Ç–∞—Ç—É—Å–∞ –¥–µ–ø–æ–∑–∏—Ç–∞:', error);
      await ctx.reply('‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø—Ä–æ–≤–µ—Ä–∏—Ç—å —Å—Ç–∞—Ç—É—Å –¥–µ–ø–æ–∑–∏—Ç–∞');
      await ctx.answerCbQuery('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏');
    }
  });

  // –û–±—Ä–∞–±–æ—Ç–∫–∞ –¥–µ–π—Å—Ç–≤–∏–π –≤—ã–≤–æ–¥–∞ —Å—Ä–µ–¥—Å—Ç–≤
  bot.action(/^withdraw:(\d+|custom)$/, async (ctx) => {
    try {
      const amount = ctx.match[1];
      
      console.log(`–í–´–í–û–î: –û–±—Ä–∞–±–æ—Ç–∫–∞ callback withdraw:${amount}`);
      
      // –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å—É–º–º—É –≤ —Å–µ—Å—Å–∏–∏
      ctx.session = ctx.session || {};
      
      if (amount === 'custom') {
        // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ñ–ª–∞–≥ –æ–∂–∏–¥–∞–Ω–∏—è —Å—É–º–º—ã –≤—ã–≤–æ–¥–∞
        ctx.session.waitingForWithdrawAmount = true;
        
        await ctx.answerCbQuery();
        await ctx.reply(
          'üí∞ –í–≤–µ–¥–∏—Ç–µ —Å—É–º–º—É –¥–ª—è –≤—ã–≤–æ–¥–∞ (–≤ USDT):\n\n' +
          '–ú–∏–Ω–∏–º—É–º: 1 USDT\n' +
          '–ú–∞–∫—Å–∏–º—É–º: 10000 USDT\n\n' +
          '–î–ª—è –æ—Ç–º–µ–Ω—ã –≤–≤–µ–¥–∏—Ç–µ /cancel'
        );
        return;
      }
      
      // –í–∞–ª–∏–¥–∞—Ü–∏—è —Å—É–º–º—ã
      const amountFloat = parseFloat(amount);
      
      if (isNaN(amountFloat) || amountFloat <= 0) {
        await ctx.reply('‚ùå –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–∞—è —Å—É–º–º–∞ –¥–ª—è –≤—ã–≤–æ–¥–∞');
        return;
      }
      
      if (amountFloat < 1) {
        await ctx.reply('‚ùå –ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è —Å—É–º–º–∞ –≤—ã–≤–æ–¥–∞: 1 USDT');
        return;
      }
      
      if (amountFloat > 10000) {
        await ctx.reply('‚ùå –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è —Å—É–º–º–∞ –≤—ã–≤–æ–¥–∞: 10000 USDT');
        return;
      }
      
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º –±–∞–ª–∞–Ω—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
      await ctx.answerCbQuery('‚è≥ –ü—Ä–æ–≤–µ—Ä—è–µ–º –±–∞–ª–∞–Ω—Å...');
      
      const balance = await apiService.getUserBalance(ctx.from);
      
      if (balance < amountFloat) {
        await ctx.reply(`‚ùå –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å—Ä–µ–¥—Å—Ç–≤\n\n–í–∞—à –±–∞–ª–∞–Ω—Å: ${balance.toFixed(2)} USDT\n–ó–∞–ø—Ä–æ—à–µ–Ω–æ: ${amountFloat} USDT`);
        return;
      }
      
      // –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å—É–º–º—É –∏ –∑–∞–ø—Ä–∞—à–∏–≤–∞–µ–º –ø–æ–ª—É—á–∞—Ç–µ–ª—è
      ctx.session.withdrawAmount = amountFloat;
      ctx.session.waitingForWithdrawRecipient = true;
      
      await ctx.reply(
        'üì§ –ö—É–¥–∞ –≤—ã–≤–µ—Å—Ç–∏ —Å—Ä–µ–¥—Å—Ç–≤–∞?\n\n' +
        '–í–≤–µ–¥–∏—Ç–µ Telegram username –ø–æ–ª—É—á–∞—Ç–µ–ª—è (–±–µ–∑ @):\n\n' +
        '‚ö†Ô∏è –í–∞–∂–Ω–æ:\n' +
        '‚Ä¢ –ü–æ–ª—É—á–∞—Ç–µ–ª—å –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω –≤ @CryptoBot\n' +
        '‚Ä¢ Username –≤–≤–æ–¥–∏—Ç—Å—è –±–µ–∑ —Å–∏–º–≤–æ–ª–∞ @\n' +
        '‚Ä¢ –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ø—Ä–∞–≤–∏–ª—å–Ω–æ—Å—Ç—å username –ø–µ—Ä–µ–¥ –æ—Ç–ø—Ä–∞–≤–∫–æ–π\n\n' +
        '–î–ª—è –æ—Ç–º–µ–Ω—ã –≤–≤–µ–¥–∏—Ç–µ /cancel'
      );
      
    } catch (error) {
      console.error('–í–´–í–û–î: –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –¥–µ–π—Å—Ç–≤–∏—è –≤—ã–≤–æ–¥–∞:', error);
      await ctx.reply('‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.');
      await ctx.answerCbQuery('‚ùå –û—à–∏–±–∫–∞');
    }
  });

  // –û–±—Ä–∞–±–æ—Ç–∫–∞ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –≤—ã–≤–æ–¥–∞
  bot.action(/^confirm_withdraw:(.+)$/, async (ctx) => {
    try {
      const data = ctx.match[1];
      const [amount, recipient] = data.split(':');
      
      await ctx.answerCbQuery('‚è≥ –°–æ–∑–¥–∞–µ–º –∑–∞–ø—Ä–æ—Å –Ω–∞ –≤—ã–≤–æ–¥...');
      
      console.log(`–í–´–í–û–î: –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –≤—ã–≤–æ–¥–∞ ${amount} USDT –¥–ª—è ${recipient}`);
      
      try {
        // –°–æ–∑–¥–∞–µ–º –∑–∞–ø—Ä–æ—Å –Ω–∞ –≤—ã–≤–æ–¥ —á–µ—Ä–µ–∑ API
        const withdrawalData = await apiService.createWithdrawal(ctx.from, {
          amount: parseFloat(amount),
          recipient: recipient,
          recipientType: 'username',
          comment: `–í—ã–≤–æ–¥ —á–µ—Ä–µ–∑ Telegram –±–æ—Ç`
        });
        
        console.log(`–í–´–í–û–î: –ó–∞–ø—Ä–æ—Å –Ω–∞ –≤—ã–≤–æ–¥ —Å–æ–∑–¥–∞–Ω:`, withdrawalData);
        
        // –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Å—É–º–º—ã
        let message = `‚úÖ –ó–∞–ø—Ä–æ—Å –Ω–∞ –≤—ã–≤–æ–¥ —Å–æ–∑–¥–∞–Ω\n\n` +
          `üíµ –°—É–º–º–∞: ${amount} USDT\n` +
          `üì§ –ü–æ–ª—É—á–∞—Ç–µ–ª—å: @${recipient}\n` +
          `üÜî ID –≤—ã–≤–æ–¥–∞: ${withdrawalData.withdrawalId}\n`;
        
        if (withdrawalData.requiresApproval) {
          message += `\n‚è≥ –°—Ç–∞—Ç—É—Å: –¢—Ä–µ–±—É–µ—Ç –æ–¥–æ–±—Ä–µ–Ω–∏—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞\n` +
            `‚è∞ –í—Ä–µ–º—è –æ–±—Ä–∞–±–æ—Ç–∫–∏: 24-48 —á–∞—Å–æ–≤`;
        } else {
          message += `\n‚ö° –°—Ç–∞—Ç—É—Å: –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞\n` +
            `‚è∞ –í—Ä–µ–º—è –æ–±—Ä–∞–±–æ—Ç–∫–∏: 5-15 –º–∏–Ω—É—Ç`;
        }
        
        await ctx.editMessageText(message, 
          Markup.inlineKeyboard([
            [Markup.button.callback('üìä –ü—Ä–æ–≤–µ—Ä–∏—Ç—å —Å—Ç–∞—Ç—É—Å', `check_withdrawal_status:${withdrawalData.withdrawalId}`)],
            [Markup.button.callback('üìã –ò—Å—Ç–æ—Ä–∏—è –≤—ã–≤–æ–¥–æ–≤', 'withdrawals_history')]
          ])
        );
        
        // –û—á–∏—â–∞–µ–º —Å–µ—Å—Å–∏—é
        delete ctx.session.withdrawAmount;
        delete ctx.session.withdrawRecipient;
        delete ctx.session.waitingForWithdrawAmount;
        delete ctx.session.waitingForWithdrawRecipient;
        
      } catch (apiError) {
        console.error('–í–´–í–û–î: –û—à–∏–±–∫–∞ API –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –≤—ã–≤–æ–¥–∞:', apiError);
        
        let errorMessage = '‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å –∑–∞–ø—Ä–æ—Å –Ω–∞ –≤—ã–≤–æ–¥\n\n';
        
        if (apiError.message.includes('–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å—Ä–µ–¥—Å—Ç–≤')) {
          errorMessage += '–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å—Ä–µ–¥—Å—Ç–≤ –Ω–∞ –±–∞–ª–∞–Ω—Å–µ';
        } else if (apiError.message.includes('–∞–∫—Ç–∏–≤–Ω—ã–π –∑–∞–ø—Ä–æ—Å')) {
          errorMessage += '–£ –≤–∞—Å —É–∂–µ –µ—Å—Ç—å –∞–∫—Ç–∏–≤–Ω—ã–π –∑–∞–ø—Ä–æ—Å –Ω–∞ –≤—ã–≤–æ–¥';
        } else if (apiError.message.includes('username')) {
          errorMessage += '–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π username –ø–æ–ª—É—á–∞—Ç–µ–ª—è';
        } else {
          errorMessage += apiError.message || '–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ';
        }
        
        await ctx.editMessageText(errorMessage);
      }
      
    } catch (error) {
      console.error('–í–´–í–û–î: –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–∏ –≤—ã–≤–æ–¥–∞:', error);
      await ctx.reply('‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.');
      await ctx.answerCbQuery('‚ùå –û—à–∏–±–∫–∞');
    }
  });

  // –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—Ç–º–µ–Ω—ã –≤—ã–≤–æ–¥–∞
  bot.action('cancel_withdraw', async (ctx) => {
    await ctx.answerCbQuery('–û—Ç–º–µ–Ω–µ–Ω–æ');
    
    // –û—á–∏—â–∞–µ–º —Å–µ—Å—Å–∏—é
    ctx.session = ctx.session || {};
    delete ctx.session.withdrawAmount;
    delete ctx.session.withdrawRecipient;
    delete ctx.session.waitingForWithdrawAmount;
    delete ctx.session.waitingForWithdrawRecipient;
    
    await ctx.editMessageText('‚ùå –í—ã–≤–æ–¥ —Å—Ä–µ–¥—Å—Ç–≤ –æ—Ç–º–µ–Ω–µ–Ω');
  });

  // –û–±—Ä–∞–±–æ—Ç–∫–∞ –∏—Å—Ç–æ—Ä–∏–∏ –≤—ã–≤–æ–¥–æ–≤
  bot.action('withdrawals_history', async (ctx) => {
    try {
      console.log(`–ò–°–¢–û–†–ò–Ø –í–´–í–û–î–û–í: –ó–∞–ø—Ä–æ—Å –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ${ctx.from.id}`);
      
      await ctx.answerCbQuery('‚è≥ –ó–∞–≥—Ä—É–∂–∞–µ–º –∏—Å—Ç–æ—Ä–∏—é –≤—ã–≤–æ–¥–æ–≤...');
      
      // –ü–æ–ª—É—á–∞–µ–º –∏—Å—Ç–æ—Ä–∏—é –≤—ã–≤–æ–¥–æ–≤ —á–µ—Ä–µ–∑ API
      const withdrawalsData = await apiService.getUserWithdrawals(ctx.from, { limit: 10 });
      
      if (!withdrawalsData.withdrawals || withdrawalsData.withdrawals.length === 0) {
        await ctx.reply('üìã –£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç –∑–∞–ø—Ä–æ—Å–æ–≤ –Ω–∞ –≤—ã–≤–æ–¥ —Å—Ä–µ–¥—Å—Ç–≤');
        return;
      }
      
      // –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∏—Å—Ç–æ—Ä–∏–µ–π
      let message = 'üìã –ò—Å—Ç–æ—Ä–∏—è –≤—ã–≤–æ–¥–æ–≤ (–ø–æ—Å–ª–µ–¥–Ω–∏–µ 10):\n\n';
      
      for (const withdrawal of withdrawalsData.withdrawals) {
        const date = new Date(withdrawal.createdAt).toLocaleDateString('ru-RU');
        let statusEmoji = '';
        let statusText = '';
        
        switch (withdrawal.status) {
          case 'pending':
            statusEmoji = '‚è≥';
            statusText = '–û–∂–∏–¥–∞–µ—Ç';
            break;
          case 'approved':
            statusEmoji = '‚úÖ';
            statusText = '–û–¥–æ–±—Ä–µ–Ω';
            break;
          case 'processing':
            statusEmoji = '‚öôÔ∏è';
            statusText = '–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç—Å—è';
            break;
          case 'completed':
            statusEmoji = '‚úÖ';
            statusText = '–í—ã–ø–æ–ª–Ω–µ–Ω';
            break;
          case 'rejected':
            statusEmoji = '‚ùå';
            statusText = '–û—Ç–∫–ª–æ–Ω–µ–Ω';
            break;
          case 'failed':
            statusEmoji = '‚ö†Ô∏è';
            statusText = '–û—à–∏–±–∫–∞';
            break;
        }
        
        message += `${statusEmoji} ${date} - ${withdrawal.amount} USDT\n`;
        message += `   –ü–æ–ª—É—á–∞—Ç–µ–ª—å: ${withdrawal.recipient}\n`;
        message += `   –°—Ç–∞—Ç—É—Å: ${statusText}\n`;
        
        if (withdrawal.rejectionReason) {
          message += `   –ü—Ä–∏—á–∏–Ω–∞: ${withdrawal.rejectionReason}\n`;
        }
        
        message += '\n';
      }
      
      await ctx.reply(message);
      
    } catch (error) {
      console.error('–ò–°–¢–û–†–ò–Ø –í–´–í–û–î–û–í: –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∏—Å—Ç–æ—Ä–∏–∏:', error);
      await ctx.reply('‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –∏—Å—Ç–æ—Ä–∏—é –≤—ã–≤–æ–¥–æ–≤');
    }
  });
  
  // –û–±—Ä–∞–±–æ—Ç–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å—Ç–∞—Ç—É—Å–∞ –≤—ã–≤–æ–¥–∞
  bot.action(/^check_withdrawal_status:([0-9a-fA-F]{24})$/, async (ctx) => {
    try {
      const withdrawalId = ctx.match[1];
      
      console.log(`–°–¢–ê–¢–£–° –í–´–í–û–î–ê: –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç–∞—Ç—É—Å–∞ –≤—ã–≤–æ–¥–∞: ${withdrawalId}`);
      
      await ctx.answerCbQuery('‚è≥ –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç–∞—Ç—É—Å –≤—ã–≤–æ–¥–∞...');
      
      const withdrawalInfo = await apiService.getWithdrawalStatus(ctx.from, withdrawalId);
      
      let statusMessage = '';
      let statusEmoji = '';
      
      switch (withdrawalInfo.status) {
        case 'pending':
          statusEmoji = '‚è≥';
          statusMessage = withdrawalInfo.amount > 300 
            ? '–û–∂–∏–¥–∞–µ—Ç –æ–¥–æ–±—Ä–µ–Ω–∏—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞' 
            : '–û–∂–∏–¥–∞–µ—Ç –æ–±—Ä–∞–±–æ—Ç–∫–∏';
          break;
        case 'approved':
          statusEmoji = '‚úÖ';
          statusMessage = '–û–¥–æ–±—Ä–µ–Ω –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º';
          break;
        case 'processing':
          statusEmoji = '‚öôÔ∏è';
          statusMessage = '–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç—Å—è —Å–∏—Å—Ç–µ–º–æ–π';
          break;
        case 'completed':
          statusEmoji = '‚úÖ';
          statusMessage = '–£—Å–ø–µ—à–Ω–æ –≤—ã–ø–æ–ª–Ω–µ–Ω';
          break;
        case 'rejected':
          statusEmoji = '‚ùå';
          statusMessage = '–û—Ç–∫–ª–æ–Ω–µ–Ω –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º';
          break;
        case 'failed':
          statusEmoji = '‚ö†Ô∏è';
          statusMessage = '–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ';
          break;
      }
      
      let replyMessage = `üìä –°—Ç–∞—Ç—É—Å –≤—ã–≤–æ–¥–∞\n\n` +
        `üÜî ID: ${withdrawalInfo.id}\n` +
        `üíµ –°—É–º–º–∞: ${withdrawalInfo.amount} USDT\n` +
        `${statusEmoji} –°—Ç–∞—Ç—É—Å: ${statusMessage}\n` +
        `üìÖ –°–æ–∑–¥–∞–Ω: ${new Date(withdrawalInfo.createdAt).toLocaleString('ru-RU')}`;
      
      if (withdrawalInfo.processedAt) {
        replyMessage += `\n‚úÖ –û–±—Ä–∞–±–æ—Ç–∞–Ω: ${new Date(withdrawalInfo.processedAt).toLocaleString('ru-RU')}`;
      }
      
      if (withdrawalInfo.rejectionReason) {
        replyMessage += `\n\n‚ùå –ü—Ä–∏—á–∏–Ω–∞ –æ—Ç–∫–ª–æ–Ω–µ–Ω–∏—è: ${withdrawalInfo.rejectionReason}`;
      }
      
      await ctx.reply(replyMessage);
      
    } catch (error) {
      console.error('–°–¢–ê–¢–£–° –í–´–í–û–î–ê: –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ —Å—Ç–∞—Ç—É—Å–∞:', error);
      await ctx.reply('‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø—Ä–æ–≤–µ—Ä–∏—Ç—å —Å—Ç–∞—Ç—É—Å –≤—ã–≤–æ–¥–∞');
      await ctx.answerCbQuery('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏');
    }
  });

}

module.exports = {
  registerCallbackHandlers
};
