// duel.handler.js
const { Markup } = require('telegraf');
const config = require('../config');
const apiService = require('../services/api.service');

/**
 * –£–ª—É—á—à–µ–Ω–Ω–∞—è —Å–∏—Å—Ç–µ–º–∞ –¥—É—ç–ª–µ–π —á–µ—Ä–µ–∑ —ç–º–æ–¥–∂–∏ Telegram
 * –ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç –≤—Å–µ –∏–≥—Ä—ã: üé≤üéØüèÄ‚öΩüé≥üé∞
 * –í–∫–ª—é—á–∞–µ—Ç —Å–∏—Å—Ç–µ–º—É –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏ –∏ —Ñ–∏–Ω–∞–Ω—Å–æ–≤—É—é –ª–æ–≥–∏–∫—É
 */

// –ö–æ–Ω—Å—Ç–∞–Ω—Ç—ã –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏ (–ª–æ–≥–∏–∫–∞ –ø–µ—Ä–µ–Ω–µ—Å–µ–Ω–∞ –≤ Backend)
const CHALLENGE_TIMEOUT = 5 * 60 * 1000; // 5 –º–∏–Ω—É—Ç
const MOVE_TIMEOUT = 60 * 1000; // 60 —Å–µ–∫—É–Ω–¥ –Ω–∞ —Ö–æ–¥
const COOLDOWN_TIME = 30 * 1000; // 30 —Å–µ–∫—É–Ω–¥ –º–µ–∂–¥—É –¥—É—ç–ª—è–º–∏
const MAX_ACTIVE_DUELS = 3; // –º–∞–∫—Å–∏–º—É–º –∞–∫—Ç–∏–≤–Ω—ã—Ö –¥—É—ç–ª–µ–π –Ω–∞ –∏–≥—Ä–æ–∫–∞
const MIN_BET = 1;
const MAX_BET = 1000;
const CASINO_COMMISSION = 0.05; // 5% –∫–æ–º–∏—Å—Å–∏—è

// –í—Ä–µ–º–µ–Ω–Ω–æ–µ —Ö—Ä–∞–Ω–µ–Ω–∏–µ –¥–ª—è UI —Å–æ—Å—Ç–æ—è–Ω–∏–π (–ù–ï –¥–ª—è –±–∏–∑–Ω–µ—Å-–ª–æ–≥–∏–∫–∏)
const pendingDuels = new Map(); // –¢–æ–ª—å–∫–æ –¥–ª—è callback –∫–Ω–æ–ø–æ–∫

function registerDuelHandlers(bot) {
  
  // –ö–æ–º–∞–Ω–¥–∞ /duel –¥–ª—è –≥—Ä—É–ø–ø–æ–≤—ã—Ö —á–∞—Ç–æ–≤
  bot.command('duel', async (ctx) => {
    try {
      if (ctx.chat.type === 'private') {
        await ctx.reply('‚ùå –ö–æ–º–∞–Ω–¥–∞ /duel —Ä–∞–±–æ—Ç–∞–µ—Ç —Ç–æ–ª—å–∫–æ –≤ –≥—Ä—É–ø–ø–∞—Ö. –î–ª—è –ª–∏—á–Ω—ã—Ö —á–∞—Ç–æ–≤ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∏–Ω–ª–∞–π–Ω-—Ä–µ–∂–∏–º: @greenlight_bot duel');
        return;
      }

      const args = ctx.message.text.split(' ').slice(1);
      
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ñ–æ—Ä–º–∞—Ç –∫–æ–º–∞–Ω–¥—ã
      if (args.length < 2) {
        await ctx.reply(
          'üìù **–§–æ—Ä–º–∞—Ç—ã –∫–æ–º–∞–Ω–¥:**\n\n' +
          'üî∏ `/duel 50 üé≤` - –æ—Ç–∫—Ä—ã—Ç—ã–π –≤—ã–∑–æ–≤\n' +
          'üî∏ `/duel @username 100 üéØ bo3` - –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã–π –≤—ã–∑–æ–≤\n' +
          'üî∏ `/duel_help` - –ø–æ–¥—Ä–æ–±–Ω–∞—è —Å–ø—Ä–∞–≤–∫–∞',
          { parse_mode: 'Markdown' }
        );
        return;
      }

      let targetUser, amount, gameType, format;
      
      // –ü–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã–π –≤—ã–∑–æ–≤: /duel @username 100 üé≤ bo3
      if (args[0].startsWith('@')) {
        targetUser = args[0].substring(1);
        amount = parseInt(args[1]);
        gameType = args[2] || 'üé≤';
        format = args[3] || 'bo1';
      } else {
        // –û—Ç–∫—Ä—ã—Ç—ã–π –≤—ã–∑–æ–≤: /duel 50 üé≤ bo3
        amount = parseInt(args[0]);
        gameType = args[1] || 'üé≤';
        format = args[2] || 'bo1';
      }

      // –í–∞–ª–∏–¥–∞—Ü–∏—è
      const validation = validateDuelRequest(ctx.from.id, amount, gameType, format);
      if (!validation.valid) {
        await ctx.reply(`‚ùå ${validation.error}`);
        return;
      }

      // –°–æ–∑–¥–∞–µ–º –¥—É—ç–ª—å
      await createDuelChallenge(ctx, targetUser, amount, gameType, format);
      
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ –∫–æ–º–∞–Ω–¥—ã /duel:', error);
      await ctx.reply('‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –¥—É—ç–ª–∏');
    }
  });

  // –ö–æ–º–∞–Ω–¥—ã —Å–ø—Ä–∞–≤–∫–∏ –∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
  bot.command('duel_help', async (ctx) => {
    await ctx.reply(
      'üéÆ **–°–ü–†–ê–í–ö–ê –ü–û –î–£–≠–õ–Ø–ú** üéÆ\n\n' +
      '**–î–æ—Å—Ç—É–ø–Ω—ã–µ –∏–≥—Ä—ã:**\n' +
      'üé≤ –ö–æ—Å—Ç–∏ - —É –∫–æ–≥–æ –±–æ–ª—å—à–µ\n' +
      'üéØ –î–∞—Ä—Ç—Å - —Ç–æ—á–Ω–æ—Å—Ç—å (6 = —Ü–µ–Ω—Ç—Ä)\n' +
      'üèÄ –ë–∞—Å–∫–µ—Ç–±–æ–ª - –ø–æ–ø–∞–¥–∞–Ω–∏–µ (4-5 = –≥–æ–ª)\n' +
      '‚öΩ –§—É—Ç–±–æ–ª - –∑–∞–±–∏—Ç—å –≥–æ–ª (3-5 = –≥–æ–ª)\n' +
      'üé≥ –ë–æ—É–ª–∏–Ω–≥ - –±–æ–ª—å—à–µ –∫–µ–≥–ª–µ–π\n' +
      'üé∞ –°–ª–æ—Ç—ã - –ª—É—á—à–∞—è –∫–æ–º–±–∏–Ω–∞—Ü–∏—è\n\n' +
      '**–§–æ—Ä–º–∞—Ç—ã:**\n' +
      '‚Ä¢ Bo1 - –æ–¥–∏–Ω —Ä–∞—É–Ω–¥\n' +
      '‚Ä¢ Bo3 - –¥–æ 2 –ø–æ–±–µ–¥\n' +
      '‚Ä¢ Bo5 - –¥–æ 3 –ø–æ–±–µ–¥\n' +
      '‚Ä¢ Bo7 - –¥–æ 4 –ø–æ–±–µ–¥\n\n' +
      '**–ö–æ–º–∞–Ω–¥—ã:**\n' +
      '‚Ä¢ `/duel 50 üé≤` - –æ—Ç–∫—Ä—ã—Ç—ã–π –≤—ã–∑–æ–≤\n' +
      '‚Ä¢ `/duel @user 100 üéØ bo3` - –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã–π\n' +
      '‚Ä¢ `/duel_stats` - –º–æ—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞\n' +
      '‚Ä¢ `/duel_history` - –∏—Å—Ç–æ—Ä–∏—è –¥—É—ç–ª–µ–π\n' +
      '‚Ä¢ `/duel_cancel` - –æ—Ç–º–µ–Ω–∏—Ç—å –∞–∫—Ç–∏–≤–Ω—É—é –¥—É—ç–ª—å\n\n' +
      '**–õ–∏–º–∏—Ç—ã:**\n' +
      '‚Ä¢ –°—Ç–∞–≤–∫–∞: 1-1000 USDT\n' +
      '‚Ä¢ –ö–æ–º–∏—Å—Å–∏—è: 5% —Å –≤—ã–∏–≥—Ä—ã—à–∞\n' +
      '‚Ä¢ –í—Ä–µ–º—è –Ω–∞ –æ—Ç–≤–µ—Ç: 5 –º–∏–Ω—É—Ç\n' +
      '‚Ä¢ –í—Ä–µ–º—è –Ω–∞ —Ö–æ–¥: 60 —Å–µ–∫—É–Ω–¥\n' +
      '‚Ä¢ Cooldown: 30 —Å–µ–∫—É–Ω–¥ –º–µ–∂–¥—É –¥—É—ç–ª—è–º–∏',
      { parse_mode: 'Markdown' }
    );
  });

  bot.command('duel_stats', async (ctx) => {
    try {
      const stats = await apiService.getUserDuelStats(ctx.from.id);
      if (stats.success) {
        await ctx.reply(
          `üìä **–°–¢–ê–¢–ò–°–¢–ò–ö–ê –î–£–≠–õ–ï–ô** üìä\n\n` +
          `üë§ @${ctx.from.username}\n` +
          `üèÜ –ü–æ–±–µ–¥: ${stats.data.wins}\n` +
          `üòî –ü–æ—Ä–∞–∂–µ–Ω–∏–π: ${stats.data.losses}\n` +
          `üìà –í–∏–Ω—Ä–µ–π—Ç: ${((stats.data.wins / (stats.data.wins + stats.data.losses)) * 100 || 0).toFixed(1)}%\n` +
          `üí∞ –û–±—â–∏–π –≤—ã–∏–≥—Ä—ã—à: ${stats.data.totalWinnings} USDT\n` +
          `üí∏ –û–±—â–∏–π –ø—Ä–æ–∏–≥—Ä—ã—à: ${stats.data.totalLosses} USDT\n` +
          `üéÆ –õ—é–±–∏–º–∞—è –∏–≥—Ä–∞: ${getGameName(stats.data.favoriteGame)}`,
          { parse_mode: 'Markdown' }
        );
      }
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏:', error);
      await ctx.reply('‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É');
    }
  });

  bot.command('duel_cancel', async (ctx) => {
    try {
      const userId = ctx.from.id.toString();
      const userDuels = await apiService.getUserActiveDuels(userId);
      
      if (userDuels.length === 0) {
        await ctx.reply('‚ùå –£ –≤–∞—Å –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –¥—É—ç–ª–µ–π –¥–ª—è –æ—Ç–º–µ–Ω—ã');
        return;
      }

      // –û—Ç–º–µ–Ω—è–µ–º –≤—Å–µ –∞–∫—Ç–∏–≤–Ω—ã–µ –¥—É—ç–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
      for (const duel of userDuels) {
        await apiService.cancelDuel(duel.sessionId, userId);
      }

      await ctx.reply(`‚úÖ –û—Ç–º–µ–Ω–µ–Ω–æ ${userDuels.length} –∞–∫—Ç–∏–≤–Ω—ã—Ö –¥—É—ç–ª–µ–π`);
      
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ –æ—Ç–º–µ–Ω—ã –¥—É—ç–ª–∏:', error);
      await ctx.reply('‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–º–µ–Ω–µ –¥—É—ç–ª–∏');
    }
  });

  // –û–±—Ä–∞–±–æ—Ç–∫–∞ —É–ø–æ–º–∏–Ω–∞–Ω–∏—è –±–æ—Ç–∞ –≤ –≥—Ä—É–ø–ø–∞—Ö (–∏–Ω–ª–∞–π–Ω-–¥—É—ç–ª–∏)
  bot.on('text', async (ctx) => {
    try {
      const text = ctx.message.text;
      const botUsername = ctx.botInfo.username;
      
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º —É–ø–æ–º–∏–Ω–∞–Ω–∏–µ –±–æ—Ç–∞ –≤ –≥—Ä—É–ø–ø–∞—Ö/–∫–∞–Ω–∞–ª–∞—Ö
      if (ctx.chat.type !== 'private' && text.includes(`@${botUsername}`)) {
        
        // –ü–∞—Ä—Å–∏–º –∏–Ω–ª–∞–π–Ω –∫–æ–º–∞–Ω–¥—É –¥—É—ç–ª–∏: @bot duel @username 50 üé≤ bo3
        const duelMatch = text.match(/@\w+\s+duel\s+@(\w+)\s+(\d+)\s*(üé≤|üéØ|‚öΩ|üèÄ|üé∞|üé≥)?\s*(bo\d+)?/i);
        
        if (duelMatch) {
          const opponentUsername = duelMatch[1];
          const amount = parseInt(duelMatch[2]);
          const gameType = duelMatch[3] || 'üé≤';
          const format = duelMatch[4] || 'bo1';
          
          // –í–∞–ª–∏–¥–∞—Ü–∏—è
          const validation = validateDuelRequest(ctx.from.id, amount, gameType, format);
          if (!validation.valid) {
            await ctx.reply(`‚ùå ${validation.error}`);
            return;
          }
          
          await createDuelChallenge(ctx, opponentUsername, amount, gameType, format);
        }
      }
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —É–ø–æ–º–∏–Ω–∞–Ω–∏—è:', error);
    }
  });

  // –û–±—Ä–∞–±–æ—Ç–∫–∞ –ø—Ä–∏–Ω—è—Ç–∏—è –¥—É—ç–ª–∏
  bot.action(/^duel_accept_(.+)$/, async (ctx) => {
    try {
      const sessionId = ctx.match[1];
      const userId = ctx.from.id.toString();
      
      await ctx.answerCbQuery('‚è≥ –ü—Ä–∏–Ω–∏–º–∞–µ–º –¥—É—ç–ª—å...');
      
      // –ü—Ä–∏–Ω–∏–º–∞–µ–º –¥—É—ç–ª—å —á–µ—Ä–µ–∑ Backend API
      const response = await apiService.acceptDuel(sessionId, userId);
      
      if (!response.success) {
        await ctx.answerCbQuery(`‚ùå ${response.error}`, true);
        return;
      }

      // –ü–æ–ª—É—á–∞–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –¥—É—ç–ª–∏
      const duelInfo = await apiService.getDuelData(sessionId, userId);
      if (!duelInfo.success) {
        await ctx.answerCbQuery('‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö –¥—É—ç–ª–∏', true);
        return;
      }
      
      const duel = duelInfo.data;

      // –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
      await ctx.editMessageText(
        `${duel.gameType} **–î–£–≠–õ–¨ –ü–†–ò–ù–Ø–¢–ê!** ${duel.gameType}\n\n` +
        `‚öîÔ∏è @${duel.challengerUsername} VS @${duel.opponentUsername}\n` +
        `üí∞ –ë–∞–Ω–∫: ${duel.amount * 2} USDT\n` +
        `üèÜ –§–æ—Ä–º–∞—Ç: ${duel.format.toUpperCase()}\n` +
        `üéÆ –ò–≥—Ä–∞: ${getGameName(duel.gameType)}\n\n` +
        `üöÄ –ù–∞—á–∏–Ω–∞–µ–º —á–µ—Ä–µ–∑ 3 —Å–µ–∫—É–Ω–¥—ã...`,
        { parse_mode: 'Markdown' }
      );
      
      // –ó–∞–ø—É—Å–∫–∞–µ–º –∏–≥—Ä—É —á–µ—Ä–µ–∑ 3 —Å–µ–∫—É–Ω–¥—ã
      setTimeout(async () => {
        await startDuel(ctx, duel);
      }, 3000);
      
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏–Ω—è—Ç–∏—è –¥—É—ç–ª–∏:', error);
      await ctx.answerCbQuery('‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞', true);
    }
  });

  // –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—Ç–∫–ª–æ–Ω–µ–Ω–∏—è –¥—É—ç–ª–∏
  bot.action(/^duel_decline_(.+)$/, async (ctx) => {
    try {
      const sessionId = ctx.match[1];
      const duel = activeDuels.get(sessionId);
      
      if (!duel) {
        await ctx.answerCbQuery('‚ùå –î—É—ç–ª—å –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞', true);
        return;
      }

      activeDuels.delete(sessionId);
      await apiService.declineDuel(sessionId, ctx.from.id);
      
      await ctx.answerCbQuery('‚ùå –î—É—ç–ª—å –æ—Ç–∫–ª–æ–Ω–µ–Ω–∞');
      await ctx.editMessageText(
        `‚ùå **–î–£–≠–õ–¨ –û–¢–ö–õ–û–ù–ï–ù–ê** ‚ùå\n\n` +
        `@${ctx.from.username} –æ—Ç–∫–ª–æ–Ω–∏–ª(–∞) –≤—ã–∑–æ–≤`,
        { parse_mode: 'Markdown' }
      );
      
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ –æ—Ç–∫–ª–æ–Ω–µ–Ω–∏—è –¥—É—ç–ª–∏:', error);
    }
  });

  // –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ä–µ–≤–∞–Ω—à–∞
  bot.action(/^duel_rematch_(.+)$/, async (ctx) => {
    try {
      const oldSessionId = ctx.match[1];
      await createRematch(ctx, oldSessionId);
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è —Ä–µ–≤–∞–Ω—à–∞:', error);
      await ctx.answerCbQuery('‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å —Ä–µ–≤–∞–Ω—à', true);
    }
  });

  // –û—á–∏—Å—Ç–∫–∞ —É—Å—Ç–∞—Ä–µ–≤—à–∏—Ö –¥–∞–Ω–Ω—ã—Ö –∫–∞–∂–¥—ã–µ 30 —Å–µ–∫—É–Ω–¥
  setInterval(() => {
    cleanupExpiredData();
  }, 30000);
}

/**
 * –°–æ–∑–¥–∞–Ω–∏–µ –≤—ã–∑–æ–≤–∞ –Ω–∞ –¥—É—ç–ª—å
 */
async function createDuelChallenge(ctx, targetUser, amount, gameType, format) {
  try {
    const challengerId = ctx.from.id.toString();
    const challengerUsername = ctx.from.username;
    const winsRequired = getWinsRequired(format);
    
    // –°–æ–∑–¥–∞–µ–º –¥—É—ç–ª—å —á–µ—Ä–µ–∑ Backend API
    const duelData = await apiService.createDuel({
      challengerId,
      challengerUsername,
      opponentUsername: targetUser,
      amount,
      gameType,
      format,
      winsRequired,
      chatId: ctx.chat.id.toString(),
      chatType: ctx.chat.type
    });

    if (!duelData.success) {
      await ctx.reply(`‚ùå ${duelData.error}`);
      return;
    }

    const sessionId = duelData.data.sessionId;
    
    // –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ç–æ–ª—å–∫–æ –¥–ª—è UI callbacks (–≤—Ä–µ–º–µ–Ω–Ω–æ)
    pendingDuels.set(sessionId, {
      sessionId,
      challengerId,
      challengerUsername,
      opponentUsername: targetUser,
      amount,
      gameType,
      format,
      chatId: ctx.chat.id.toString(),
      messageId: null // –±—É–¥–µ—Ç —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ –ø–æ–∑–∂–µ
    });

    // –°–æ–∑–¥–∞–µ–º –∫–Ω–æ–ø–∫–∏
    const buttons = targetUser ? [
      [
        Markup.button.callback(`‚úÖ –ü—Ä–∏–Ω—è—Ç—å ${gameType}`, `duel_accept_${sessionId}`),
        Markup.button.callback('‚ùå –û—Ç–∫–ª–æ–Ω–∏—Ç—å', `duel_decline_${sessionId}`)
      ]
    ] : [
      [Markup.button.callback(`‚úÖ –ü—Ä–∏–Ω—è—Ç—å –≤—ã–∑–æ–≤ ${gameType}`, `duel_accept_${sessionId}`)]
    ];

    const challengeText = targetUser ? 
      `${gameType} **–í–´–ó–û–í –ù–ê –î–£–≠–õ–¨** ${gameType}\n\n` +
      `üë§ @${challengerUsername} –≤—ã–∑—ã–≤–∞–µ—Ç @${targetUser}!\n` +
      `üí∞ –°—Ç–∞–≤–∫–∞: ${amount} USDT (–∑–∞ –≤—Å—é —Å–µ—Ä–∏—é)\n` +
      `üéÆ –ò–≥—Ä–∞: ${getGameName(gameType)}\n` +
      `üèÜ –§–æ—Ä–º–∞—Ç: ${format.toUpperCase()} (–¥–æ ${winsRequired} –ø–æ–±–µ–¥)\n` +
      `‚è± –í—Ä–µ–º—è –Ω–∞ –æ—Ç–≤–µ—Ç: 5 –º–∏–Ω—É—Ç`
      :
      `${gameType} **–û–¢–ö–†–´–¢–´–ô –í–´–ó–û–í** ${gameType}\n\n` +
      `üë§ @${challengerUsername} –∏—â–µ—Ç –ø—Ä–æ—Ç–∏–≤–Ω–∏–∫–∞!\n` +
      `üí∞ –°—Ç–∞–≤–∫–∞: ${amount} USDT\n` +
      `üéÆ –ò–≥—Ä–∞: ${getGameName(gameType)}\n` +
      `üèÜ –§–æ—Ä–º–∞—Ç: ${format.toUpperCase()}\n` +
      `‚è± –ü–µ—Ä–≤—ã–π –Ω–∞–∂–∞–≤—à–∏–π —Å—Ç–∞–Ω–µ—Ç –ø—Ä–æ—Ç–∏–≤–Ω–∏–∫–æ–º`;

    await ctx.reply(challengeText, {
      parse_mode: 'Markdown',
      reply_markup: Markup.inlineKeyboard(buttons)
    });

    // –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∞—è –æ—Ç–º–µ–Ω–∞ —á–µ—Ä–µ–∑ 5 –º–∏–Ω—É—Ç
    setTimeout(() => {
      if (activeDuels.has(sessionId)) {
        activeDuels.delete(sessionId);
        apiService.cancelDuel(sessionId, challengerId);
      }
    }, CHALLENGE_TIMEOUT);

  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –¥—É—ç–ª–∏:', error);
    throw error;
  }
}

/**
 * –ó–∞–ø—É—Å–∫ –¥—É—ç–ª–∏
 */
async function startDuel(ctx, duel) {
  try {
    let currentRound = 0;
    let score = { challenger: 0, opponent: 0 };
    
    async function playRound() {
      currentRound++;
      
      await ctx.reply(
        `${duel.gameType} **–†–ê–£–ù–î ${currentRound}** ${duel.gameType}\n` +
        `‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ\n` +
        `üìä –°—á–µ—Ç: ${score.challenger}-${score.opponent}`,
        { parse_mode: 'Markdown' }
      );
      
      // –•–æ–¥ –ø–µ—Ä–≤–æ–≥–æ –∏–≥—Ä–æ–∫–∞
      await ctx.reply(`üë§ @${duel.challengerUsername} –±—Ä–æ—Å–∞–µ—Ç...`);
      const result1 = await ctx.replyWithDice({ emoji: duel.gameType });
      const value1 = result1.dice.value;
      
      await new Promise(resolve => setTimeout(resolve, 3000));
      
      // –•–æ–¥ –≤—Ç–æ—Ä–æ–≥–æ –∏–≥—Ä–æ–∫–∞
      await ctx.reply(`üë§ @${duel.opponentUsername} –±—Ä–æ—Å–∞–µ—Ç...`);
      const result2 = await ctx.replyWithDice({ emoji: duel.gameType });
      const value2 = result2.dice.value;
      
      await new Promise(resolve => setTimeout(resolve, 4000));
      
      // –û–ø—Ä–µ–¥–µ–ª—è–µ–º –ø–æ–±–µ–¥–∏—Ç–µ–ª—è —Ä–∞—É–Ω–¥–∞
      const roundResult = determineRoundWinner(duel.gameType, value1, value2);
      
      if (roundResult === 'player1') {
        score.challenger++;
        await ctx.reply(`‚úÖ –†–∞—É–Ω–¥ –≤—ã–∏–≥—Ä–∞–ª @${duel.challengerUsername}! ${getResultText(duel.gameType, value1, value2)}`);
      } else if (roundResult === 'player2') {
        score.opponent++;
        await ctx.reply(`‚úÖ –†–∞—É–Ω–¥ –≤—ã–∏–≥—Ä–∞–ª @${duel.opponentUsername}! ${getResultText(duel.gameType, value1, value2)}`);
      } else {
        await ctx.reply(`ü§ù –ù–∏—á—å—è! ${getResultText(duel.gameType, value1, value2)} –ü–µ—Ä–µ–∏–≥—Ä—ã–≤–∞–µ–º...`);
        setTimeout(() => playRound(), 2000);
        return;
      }
      
      // –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç —Ä–∞—É–Ω–¥–∞
      await apiService.saveDuelRound(duel.sessionId, {
        round: currentRound,
        challengerResult: value1,
        opponentResult: value2,
        winnerId: roundResult === 'player1' ? duel.challengerId : duel.opponentId
      });
      
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–±–µ–¥–∏—Ç–µ–ª—è —Å–µ—Ä–∏–∏
      if (score.challenger >= duel.winsRequired) {
        await finishDuel(ctx, duel, 'challenger', score);
      } else if (score.opponent >= duel.winsRequired) {
        await finishDuel(ctx, duel, 'opponent', score);
      } else {
        setTimeout(() => playRound(), 3000);
      }
    }
    
    await playRound();
    
  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ –≤ –¥—É—ç–ª–∏:', error);
    await ctx.reply('‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –≤–æ –≤—Ä–µ–º—è –∏–≥—Ä—ã');
  }
}

/**
 * –ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ –¥—É—ç–ª–∏
 */
async function finishDuel(ctx, duel, winner, score) {
  try {
    const winnerId = winner === 'challenger' ? duel.challengerId : duel.opponentId;
    const winnerUsername = winner === 'challenger' ? duel.challengerUsername : duel.opponentUsername;
    const loserId = winner === 'challenger' ? duel.opponentId : duel.challengerId;
    const loserUsername = winner === 'challenger' ? duel.opponentUsername : duel.challengerUsername;
    
    // –ó–∞–≤–µ—Ä—à–∞–µ–º –¥—É—ç–ª—å —á–µ—Ä–µ–∑ API
    const result = await apiService.finishDuel(duel.sessionId, winnerId);
    
    // –û—á–∏—â–∞–µ–º –∏–∑ –ø–∞–º—è—Ç–∏
    activeDuels.delete(duel.sessionId);
    
    // –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º –≤—ã–∏–≥—Ä—ã—à (95% –æ—Ç –±–∞–Ω–∫–∞)
    const totalBank = duel.amount * 2;
    const winAmount = Math.floor(totalBank * (1 - CASINO_COMMISSION));
    
    await ctx.reply(
      `üèÜ **–î–£–≠–õ–¨ –ó–ê–í–ï–†–®–ï–ù–ê** üèÜ\n` +
      `‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ\n` +
      `üëë –ü–æ–±–µ–¥–∏—Ç–µ–ª—å: @${winnerUsername}\n` +
      `üìä –§–∏–Ω–∞–ª—å–Ω—ã–π —Å—á–µ—Ç: ${score.challenger}-${score.opponent}\n` +
      `üí∞ –í—ã–∏–≥—Ä—ã—à: ${winAmount} USDT\n` +
      `üí∏ –ü—Ä–æ–∏–≥—Ä—ã—à: ${duel.amount} USDT\n` +
      `üèõ –ö–æ–º–∏—Å—Å–∏—è –∫–∞–∑–∏–Ω–æ: ${totalBank - winAmount} USDT\n\n` +
      `üéÆ GG WP!`,
      {
        parse_mode: 'Markdown',
        reply_markup: Markup.inlineKeyboard([
          [Markup.button.callback('üîÑ –†–µ–≤–∞–Ω—à', `duel_rematch_${duel.sessionId}`)]
        ])
      }
    );
    
  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –¥—É—ç–ª–∏:', error);
  }
}

/**
 * –°–æ–∑–¥–∞–Ω–∏–µ —Ä–µ–≤–∞–Ω—à–∞
 */
async function createRematch(ctx, oldSessionId) {
  try {
    const userId = ctx.from.id.toString();
    await ctx.answerCbQuery('‚è≥ –°–æ–∑–¥–∞–µ–º —Ä–µ–≤–∞–Ω—à...');
    
    const oldDuel = await apiService.getDuelData(oldSessionId, userId);
    if (!oldDuel.success) {
      await ctx.answerCbQuery('‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –¥—É—ç–ª–∏', true);
      return;
    }
    
    const oldData = oldDuel.data;
    
    // –ú–µ–Ω—è–µ–º –º–µ—Å—Ç–∞–º–∏ –∏–≥—Ä–æ–∫–æ–≤
    const isChallenger = oldData.challengerId === userId;
    const newChallenger = isChallenger ? oldData.opponentId : oldData.challengerId;
    const newChallengerUsername = isChallenger ? oldData.opponentUsername : oldData.challengerUsername;
    const newOpponent = isChallenger ? oldData.challengerId : oldData.opponentId;
    const newOpponentUsername = isChallenger ? oldData.challengerUsername : oldData.opponentUsername;
    
    // –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—É—é –¥—É—ç–ª—å
    await createDuelChallenge(ctx, newOpponentUsername, oldData.amount, oldData.gameType, oldData.format);
    
  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è —Ä–µ–≤–∞–Ω—à–∞:', error);
    throw error;
  }
}

/**
 * –ë–∞–∑–æ–≤–∞—è –≤–∞–ª–∏–¥–∞—Ü–∏—è –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤ (–æ—Å—Ç–∞–ª—å–Ω–∞—è –ª–æ–≥–∏–∫–∞ –≤ Backend)
 */
function validateDuelRequest(userId, amount, gameType, format) {
  // –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—É–º–º—ã
  if (isNaN(amount) || amount < MIN_BET || amount > MAX_BET) {
    return { valid: false, error: `–°—É–º–º–∞ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –æ—Ç ${MIN_BET} –¥–æ ${MAX_BET} USDT` };
  }
  
  // –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ç–∏–ø–∞ –∏–≥—Ä—ã
  const validGames = ['üé≤', 'üéØ', '‚öΩ', 'üèÄ', 'üé∞', 'üé≥'];
  if (!validGames.includes(gameType)) {
    return { valid: false, error: '–ù–µ–ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–π —Ç–∏–ø –∏–≥—Ä—ã' };
  }
  
  // –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ñ–æ—Ä–º–∞—Ç–∞
  const validFormats = ['bo1', 'bo3', 'bo5', 'bo7'];
  if (!validFormats.includes(format.toLowerCase())) {
    return { valid: false, error: '–ù–µ–ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–π —Ñ–æ—Ä–º–∞—Ç (bo1, bo3, bo5, bo7)' };
  }
  
  return { valid: true };
}

/**
 * –û—á–∏—Å—Ç–∫–∞ —É—Å—Ç–∞—Ä–µ–≤—à–∏—Ö UI –¥–∞–Ω–Ω—ã—Ö
 */
function cleanupExpiredData() {
  const now = Date.now();
  
  // –û—á–∏—Å—Ç–∫–∞ —É—Å—Ç–∞—Ä–µ–≤—à–∏—Ö pending –¥—É—ç–ª–µ–π (—Ç–æ–ª—å–∫–æ UI)
  for (const [sessionId, duel] of pendingDuels) {
    if (now - (duel.createdAt || 0) > CHALLENGE_TIMEOUT) {
      pendingDuels.delete(sessionId);
    }
  }
}

/**
 * –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏
 */
function getWinsRequired(format) {
  const formats = {
    'bo1': 1,
    'bo3': 2,
    'bo5': 3,
    'bo7': 4
  };
  return formats[format.toLowerCase()] || 1;
}

function getGameName(gameType) {
  const games = {
    'üé≤': '–ö–æ—Å—Ç–∏',
    'üéØ': '–î–∞—Ä—Ç—Å',
    '‚öΩ': '–§—É—Ç–±–æ–ª',
    'üèÄ': '–ë–∞—Å–∫–µ—Ç–±–æ–ª',
    'üé∞': '–°–ª–æ—Ç—ã',
    'üé≥': '–ë–æ—É–ª–∏–Ω–≥'
  };
  return games[gameType] || '–ò–≥—Ä–∞';
}

function determineRoundWinner(gameType, value1, value2) {
  switch (gameType) {
    case 'üé≤':
    case 'üé≥':
      if (value1 > value2) return 'player1';
      if (value2 > value1) return 'player2';
      return 'draw';
      
    case 'üéØ':
      if (value1 === 6 && value2 !== 6) return 'player1';
      if (value2 === 6 && value1 !== 6) return 'player2';
      if (value1 > value2) return 'player1';
      if (value2 > value1) return 'player2';
      return 'draw';
      
    case '‚öΩ':
    case 'üèÄ':
      const isGoal1 = value1 >= 4;
      const isGoal2 = value2 >= 4;
      if (isGoal1 && !isGoal2) return 'player1';
      if (isGoal2 && !isGoal1) return 'player2';
      return 'draw';
      
    case 'üé∞':
      if (value1 === 64 && value2 !== 64) return 'player1'; // –î–∂–µ–∫–ø–æ—Ç
      if (value2 === 64 && value1 !== 64) return 'player2';
      if (value1 > value2) return 'player1';
      if (value2 > value1) return 'player2';
      return 'draw';
  }
  
  return 'draw';
}

function getResultText(gameType, value1, value2) {
  switch (gameType) {
    case 'üé≤':
      return `(${value1} vs ${value2})`;
      
    case 'üéØ':
      const dart1 = value1 === 6 ? '–¶–ï–ù–¢–†!' : `${value1} –æ—á–∫–æ–≤`;
      const dart2 = value2 === 6 ? '–¶–ï–ù–¢–†!' : `${value2} –æ—á–∫–æ–≤`;
      return `(${dart1} vs ${dart2})`;
      
    case '‚öΩ':
      const goal1 = value1 >= 4 ? '–ì–û–õ!' : '–ú–∏–º–æ';
      const goal2 = value2 >= 4 ? '–ì–û–õ!' : '–ú–∏–º–æ';
      return `(${goal1} vs ${goal2})`;
      
    case 'üèÄ':
      const basket1 = value1 >= 4 ? '–ü–æ–ø–∞–ª!' : '–ú–∏–º–æ';
      const basket2 = value2 >= 4 ? '–ü–æ–ø–∞–ª!' : '–ú–∏–º–æ';
      return `(${basket1} vs ${basket2})`;
      
    case 'üé∞':
      const slot1 = value1 === 64 ? '–î–ñ–ï–ö–ü–û–¢!' : (value1 >= 32 ? '–í—ã–∏–≥—Ä—ã—à!' : '–ü—Ä–æ–∏–≥—Ä—ã—à');
      const slot2 = value2 === 64 ? '–î–ñ–ï–ö–ü–û–¢!' : (value2 >= 32 ? '–í—ã–∏–≥—Ä—ã—à!' : '–ü—Ä–æ–∏–≥—Ä—ã—à');
      return `(${slot1} vs ${slot2})`;
      
    case 'üé≥':
      return `(${value1} –∫–µ–≥–ª–µ–π vs ${value2} –∫–µ–≥–ª–µ–π)`;
      
    default:
      return `(${value1} vs ${value2})`;
  }
}

module.exports = {
  registerDuelHandlers
};