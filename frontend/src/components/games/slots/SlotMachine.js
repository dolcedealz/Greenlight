// frontend/src/components/games/slots/SlotMachine.js
import React, { useState, useEffect, useCallback, useRef } from 'react';
import '../../../styles/SlotMachine.css';

// –û–ë–ù–û–í–õ–ï–ù–ù–´–ï —Å–∏–º–≤–æ–ª—ã —Å–ª–æ—Ç–æ–≤ —Å PNG –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è–º–∏
const SLOT_SYMBOLS = [
  { symbol: 'cherry', name: 'cherry', weight: 25, payout: 4, img: '/assets/images/slots/cherry final png.png' },
  { symbol: 'lemon', name: 'lemon', weight: 20, payout: 6, img: '/assets/images/slots/lemon final png.png' },
  { symbol: 'persik', name: 'persik', weight: 15, payout: 8, img: '/assets/images/slots/persik final png.png' },
  { symbol: 'grape', name: 'grape', weight: 12, payout: 12, img: '/assets/images/slots/grape final png.png' },
  { symbol: 'bell', name: 'bell', weight: 8, payout: 18, img: '/assets/images/slots/bell final png.png' },
  { symbol: 'diamond', name: 'diamond', weight: 5, payout: 30, img: '/assets/images/slots/diamond final png.png' },
  { symbol: 'star', name: 'star', weight: 3, payout: 50, img: '/assets/images/slots/star final png.png' },
  { symbol: 'jackpot', name: 'jackpot', weight: 2, payout: 100, img: '/assets/images/slots/jackpot final png.png' }
];

const SlotMachine = ({ 
  onSpin, 
  isSpinning, 
  balance, 
  betAmount,
  lastResult,
  autoplay,
  loading,
  gameStats 
}) => {
  // –°–æ—Å—Ç–æ—è–Ω–∏–µ –±–∞—Ä–∞–±–∞–Ω–æ–≤ - –Ω–∞—á–∏–Ω–∞–µ–º —Å —Å–∏–º–≤–æ–ª–æ–≤ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
  const [reels, setReels] = useState(() => {
    return [
      ['cherry', 'lemon', 'persik', 'grape'],
      ['cherry', 'lemon', 'persik', 'grape'],
      ['cherry', 'lemon', 'persik', 'grape'],
      ['cherry', 'lemon', 'persik', 'grape']
    ];
  });
  
  // –°–æ—Å—Ç–æ—è–Ω–∏—è –¥–ª—è –∞–Ω–∏–º–∞—Ü–∏–∏
  const [isAnimating, setIsAnimating] = useState(false);
  const [animatingReels, setAnimatingReels] = useState([false, false, false, false]);
  const [winningLines, setWinningLines] = useState([]);
  const [showingResult, setShowingResult] = useState(false);
  
  // –†–µ—Ñ—ã –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è
  const lastResultRef = useRef(null);
  const animationTimeoutRefs = useRef([]);
  const winningTimeoutRef = useRef(null);
  const resultProcessedRef = useRef(false);
  
  // –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö —Å–∏–º–≤–æ–ª–∞ –ø–æ –µ–≥–æ –Ω–∞–∑–≤–∞–Ω–∏—é
  const getSymbolData = useCallback((symbolName) => {
    return SLOT_SYMBOLS.find(s => s.symbol === symbolName) || SLOT_SYMBOLS[0];
  }, []);
  
  // –§—É–Ω–∫—Ü–∏—è –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —Å–ª—É—á–∞–π–Ω–æ–≥–æ —Å–∏–º–≤–æ–ª–∞ –¥–ª—è –∞–Ω–∏–º–∞—Ü–∏–∏
  const getRandomSymbol = useCallback(() => {
    const totalWeight = SLOT_SYMBOLS.reduce((sum, s) => sum + s.weight, 0);
    let random = Math.random() * totalWeight;
    
    for (const symbolData of SLOT_SYMBOLS) {
      random -= symbolData.weight;
      if (random <= 0) {
        return symbolData.symbol;
      }
    }
    
    return SLOT_SYMBOLS[0].symbol;
  }, []);
  
  // –û—á–∏—Å—Ç–∫–∞ –∏ –∑–∞–ø—É—Å–∫ –∞–Ω–∏–º–∞—Ü–∏–∏ –ø—Ä–∏ –Ω–∞—á–∞–ª–µ —Å–ø–∏–Ω–∞
  useEffect(() => {
    if (isSpinning && !isAnimating) {
      console.log('–°–õ–û–¢–´ –§–†–û–ù–¢: –°–ø–∏–Ω –Ω–∞—á–∞–ª—Å—è - –∑–∞–ø—É—Å–∫–∞–µ–º –∞–Ω–∏–º–∞—Ü–∏—é');
      
      // –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Ñ–ª–∞–≥ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞
      resultProcessedRef.current = false;
      
      // –û—á–∏—â–∞–µ–º –ø—Ä–µ–¥—ã–¥—É—â–∏–µ —Ç–∞–π–º–∞—É—Ç—ã
      animationTimeoutRefs.current.forEach(timeout => {
        if (timeout) clearTimeout(timeout);
      });
      animationTimeoutRefs.current = [];
      
      if (winningTimeoutRef.current) {
        clearTimeout(winningTimeoutRef.current);
        winningTimeoutRef.current = null;
      }
      
      // –û—á–∏—â–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ
      setWinningLines([]);
      setShowingResult(false);
      
      // –ó–∞–ø—É—Å–∫–∞–µ–º –∞–Ω–∏–º–∞—Ü–∏—é –≤—Ä–∞—â–µ–Ω–∏—è
      setIsAnimating(true);
      setAnimatingReels([true, true, true, true]);
      
      // –ò–Ω—Ç–µ—Ä–≤–∞–ª—ã –¥–ª—è –±—ã—Å—Ç—Ä–æ–π —Å–º–µ–Ω—ã —Å–∏–º–≤–æ–ª–æ–≤ –≤–æ –≤—Ä–µ–º—è –∞–Ω–∏–º–∞—Ü–∏–∏
      const animationIntervals = [];
      
      reels.forEach((_, reelIndex) => {
        const interval = setInterval(() => {
          setReels(prev => {
            const newReels = [...prev];
            newReels[reelIndex] = [
              getRandomSymbol(),
              getRandomSymbol(),
              getRandomSymbol(),
              getRandomSymbol()
            ];
            return newReels;
          });
        }, 100); // –ë—ã—Å—Ç—Ä–∞—è —Å–º–µ–Ω–∞ –∫–∞–∂–¥—ã–µ 100–º—Å
        
        animationIntervals.push(interval);
      });
      
      // –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∞–Ω–∏–º–∞—Ü–∏—é —á–µ—Ä–µ–∑ 2 —Å–µ–∫—É–Ω–¥—ã
      const stopAnimationTimeout = setTimeout(() => {
        // –û—á–∏—â–∞–µ–º –∏–Ω—Ç–µ—Ä–≤–∞–ª—ã
        animationIntervals.forEach(interval => clearInterval(interval));
        
        // –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –±–∞—Ä–∞–±–∞–Ω—ã –ø–æ–æ—á–µ—Ä–µ–¥–Ω–æ
        const delays = [0, 200, 400, 600];
        
        delays.forEach((delay, index) => {
          const timeout = setTimeout(() => {
            setAnimatingReels(prev => {
              const newState = [...prev];
              newState[index] = false;
              return newState;
            });
            
            // –ï—Å–ª–∏ —ç—Ç–æ –ø–æ—Å–ª–µ–¥–Ω–∏–π –±–∞—Ä–∞–±–∞–Ω
            if (index === delays.length - 1) {
              setIsAnimating(false);
            }
          }, delay);
          
          animationTimeoutRefs.current.push(timeout);
        });
      }, 2000);
      
      animationTimeoutRefs.current.push(stopAnimationTimeout);
    }
  }, [isSpinning, isAnimating, getRandomSymbol]);
  
  // –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞ —Å —Å–µ—Ä–≤–µ—Ä–∞
  useEffect(() => {
    if (lastResult && 
        lastResult !== lastResultRef.current && 
        lastResult.reels && 
        !isAnimating && 
        !isSpinning &&
        !resultProcessedRef.current) {
      
      console.log('–°–õ–û–¢–´ –§–†–û–ù–¢: –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –ù–û–í–´–ô —Ä–µ–∑—É–ª—å—Ç–∞—Ç —Å —Å–µ—Ä–≤–µ—Ä–∞:', lastResult);
      
      // –ü–æ–º–µ—á–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç –∫–∞–∫ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã–π
      resultProcessedRef.current = true;
      lastResultRef.current = lastResult;
      
      // –ö–†–ò–¢–ò–ß–ù–û: –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –¢–û–ß–ù–û –¢–ï –ñ–ï –±–∞—Ä–∞–±–∞–Ω—ã, —á—Ç–æ –ø—Ä–∏—à–ª–∏ —Å —Å–µ—Ä–≤–µ—Ä–∞
      console.log('–°–õ–û–¢–´ –§–†–û–ù–¢: –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –±–∞—Ä–∞–±–∞–Ω—ã —Å —Å–µ—Ä–≤–µ—Ä–∞:', lastResult.reels);
      setReels([...lastResult.reels]); // –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—ã–π –º–∞—Å—Å–∏–≤
      
      // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
      setShowingResult(true);
      
      // –ï—Å–ª–∏ –µ—Å—Ç—å –≤—ã–∏–≥—Ä—ã—à–Ω—ã–µ –ª–∏–Ω–∏–∏, –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –∏—Ö —Å –∑–∞–¥–µ—Ä–∂–∫–æ–π
      if (lastResult.winningLines && lastResult.winningLines.length > 0) {
        console.log('–°–õ–û–¢–´ –§–†–û–ù–¢: –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –≤—ã–∏–≥—Ä—ã—à–Ω—ã–µ –ª–∏–Ω–∏–∏:', lastResult.winningLines);
        
        setTimeout(() => {
          setWinningLines([...lastResult.winningLines]);
          
          // –£–±–∏—Ä–∞–µ–º –ø–æ–¥—Å–≤–µ—Ç–∫—É —á–µ—Ä–µ–∑ 3 —Å–µ–∫—É–Ω–¥—ã
          winningTimeoutRef.current = setTimeout(() => {
            console.log('–°–õ–û–¢–´ –§–†–û–ù–¢: –£–±–∏—Ä–∞–µ–º –≤—ã–∏–≥—Ä—ã—à–Ω—ã–µ –ª–∏–Ω–∏–∏');
            setWinningLines([]);
            winningTimeoutRef.current = null;
          }, 3000);
        }, 500);
      } else {
        console.log('–°–õ–û–¢–´ –§–†–û–ù–¢: –í—ã–∏–≥—Ä—ã—à–Ω—ã—Ö –ª–∏–Ω–∏–π –Ω–µ—Ç');
      }
    }
  }, [lastResult, isAnimating, isSpinning]);
  
  // –û—á–∏—Å—Ç–∫–∞ –ø—Ä–∏ —Ä–∞–∑–º–æ–Ω—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏
  useEffect(() => {
    return () => {
      animationTimeoutRefs.current.forEach(timeout => {
        if (timeout) clearTimeout(timeout);
      });
      if (winningTimeoutRef.current) {
        clearTimeout(winningTimeoutRef.current);
      }
    };
  }, []);
  
  // –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è –∫–ª–∞—Å—Å–∞ —è—á–µ–π–∫–∏
  const getCellClass = useCallback((reelIndex, rowIndex) => {
    const baseClass = 'slot-cell';
    const position = `${reelIndex}-${rowIndex}`;
    
    // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –≤—ã–∏–≥—Ä—ã—à–Ω—ã–µ —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –µ—Å—Ç—å –∞–∫—Ç–∏–≤–Ω—ã–µ –ª–∏–Ω–∏–∏
    if (winningLines.length > 0) {
      const isWinning = winningLines.some(line => line.includes(position));
      if (isWinning) {
        return `${baseClass} winning`;
      }
    }
    
    return baseClass;
  }, [winningLines]);
  
  return (
    <div className="slot-machine">
      {/* –ò–≥—Ä–æ–≤–æ–µ –ø–æ–ª–µ 4x4 */}
      <div className="slot-display">
        <div className="slot-reels">
          {reels.map((reel, reelIndex) => (
            <div 
              key={reelIndex} 
              className={`slot-reel ${animatingReels[reelIndex] ? 'spinning' : ''}`}
            >
              {reel.map((symbolName, rowIndex) => {
                const symbolData = getSymbolData(symbolName);
                return (
                  <div
                    key={`${reelIndex}-${rowIndex}`}
                    className={getCellClass(reelIndex, rowIndex)}
                    data-position={`${reelIndex}-${rowIndex}`}
                  >
                    <img 
                      src={symbolData.img} 
                      alt={symbolData.name}
                      className="slot-symbol-img"
                      onError={(e) => {
                        // Fallback –Ω–∞ —ç–º–æ–¥–∑–∏ –µ—Å–ª–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –Ω–µ –∑–∞–≥—Ä—É–∑–∏–ª–æ—Å—å
                        const fallbackEmojis = {
                          'cherry': 'üçí',
                          'lemon': 'üçã',
                          'persik': 'üçë',
                          'grape': 'üçá',
                          'bell': 'üîî',
                          'diamond': 'üíé',
                          'star': '‚≠ê',
                          'jackpot': 'üé∞'
                        };
                        e.target.style.display = 'none';
                        e.target.parentElement.innerHTML = `<span class="slot-symbol">${fallbackEmojis[symbolName] || 'üçí'}</span>`;
                      }}
                    />
                  </div>
                );
              })}
            </div>
          ))}
        </div>
        
        {/* –õ–∏–Ω–∏–∏ –≤—ã–ø–ª–∞—Ç –¥–ª—è 4x4 –ø–æ–ª—è - –¢–û–õ–¨–ö–û –≥–æ—Ä–∏–∑–æ–Ω—Ç–∞–ª—å–Ω—ã–µ –∏ –¥–∏–∞–≥–æ–Ω–∞–ª—å–Ω—ã–µ */}
        <div className="paylines">
          {/* –ì–æ—Ä–∏–∑–æ–Ω—Ç–∞–ª—å–Ω—ã–µ –ª–∏–Ω–∏–∏ - –û–°–¢–ê–í–õ–Ø–ï–ú */}
          <div className="payline horizontal line-1"></div>
          <div className="payline horizontal line-2"></div>
          <div className="payline horizontal line-3"></div>
          <div className="payline horizontal line-4"></div>
          
          {/* –î–∏–∞–≥–æ–Ω–∞–ª—å–Ω—ã–µ –ª–∏–Ω–∏–∏ - –û–°–¢–ê–í–õ–Ø–ï–ú */}
          <div className="payline diagonal line-9"></div>
          <div className="payline diagonal line-10"></div>
        </div>
      </div>
      
      {/* –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–µ */}
      {showingResult && lastResult && lastResultRef.current === lastResult && !isSpinning && !isAnimating && (
        <div className="last-spin-info">
          {lastResult.win ? (
            <div className="win-display">
              <span className="win-text">–í–´–ò–ì–†–´–®!</span>
              <span className="win-amount">+{(Math.abs(lastResult.profit) || 0).toFixed(2)} USDT</span>
              {lastResult.winningSymbols && lastResult.winningSymbols.length > 0 && (
                <div className="winning-symbols">
                  {lastResult.winningSymbols.map((symbolName, index) => {
                    const symbolData = getSymbolData(symbolName);
                    return (
                      <img 
                        key={index} 
                        src={symbolData.img} 
                        alt={symbolData.name}
                        className="winning-symbol-img"
                        onError={(e) => {
                          const fallbackEmojis = {
                            'cherry': 'üçí',
                            'lemon': 'üçã',
                            'persik': 'üçë',
                            'grape': 'üçá',
                            'bell': 'üîî',
                            'diamond': 'üíé',
                            'star': '‚≠ê',
                            'jackpot': 'üé∞'
                          };
                          e.target.outerHTML = `<span class="winning-symbol">${fallbackEmojis[symbolName] || 'üçí'}</span>`;
                        }}
                      />
                    );
                  })}
                </div>
              )}
              {lastResult.winningLines && lastResult.winningLines.length > 0 && (
                <div className="winning-lines-count">
                  –í—ã–∏–≥—Ä—ã—à–Ω—ã—Ö –ª–∏–Ω–∏–π: {lastResult.winningLines.length} | –ú–Ω–æ–∂–∏—Ç–µ–ª—å: x{(lastResult.multiplier || 0).toFixed(2)}
                </div>
              )}
            </div>
          ) : (
            <div className="lose-display">
              <span className="lose-text">–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑!</span>
            </div>
          )}
        </div>
      )}
    </div>
  );
};

export default SlotMachine;
