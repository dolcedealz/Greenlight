// bot/src/handlers/inline.handler.js
const config = require('../config');
const apiService = require('../services/api.service');

function registerInlineHandlers(bot) {
  console.log('üîß –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º inline handlers...');
  
  bot.on('inline_query', async (ctx) => {
    try {
      const query = ctx.inlineQuery.query.toLowerCase().trim();
      const userId = ctx.from.id.toString();
      const username = ctx.from.username;
      
      console.log('üì• Inline query –ø–æ–ª—É—á–µ–Ω:', {
        query: query,
        user: username,
        userId: userId,
        rawQuery: ctx.inlineQuery.query,
        queryId: ctx.inlineQuery.id
      });
      
      const results = [];
      
      // –ü–∞—Ä—Å–∏–º –∫–æ–º–∞–Ω–¥—É –¥—É—ç–ª–∏ –¥–ª—è –ª–∏—á–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
      // –§–æ—Ä–º–∞—Ç: duel @username 50 üé≤ bo3 (–±–æ–ª–µ–µ –≥–∏–±–∫–∏–π –ø–∞—Ä—Å–∏–Ω–≥)
      const duelMatch = query.match(/^duel\s+@?(\w+)\s+(\d+)(?:\s*(üé≤|üéØ|‚öΩ|üèÄ|üé∞|üé≥))?(?:\s*(bo\d+))?/i);
      
      console.log('üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ duel match:', {
        query: query,
        matched: !!duelMatch,
        matchGroups: duelMatch
      });
      
      if (duelMatch) {
        const targetUsername = duelMatch[1].replace('@', '');
        const amount = parseInt(duelMatch[2]);
        const gameType = duelMatch[3] || 'üé≤';
        const format = duelMatch[4] || 'bo1';
        
        // –û–ø—Ä–µ–¥–µ–ª—è–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–±–µ–¥
        const winsRequired = getWinsRequired(format);
        
        results.push({
          type: 'article',
          id: `duel_${Date.now()}`,
          title: `${gameType} –î—É—ç–ª—å —Å @${targetUsername}`,
          description: `${amount} USDT, ${format.toUpperCase()} (–¥–æ ${winsRequired} –ø–æ–±–µ–¥)`,
          thumb_url: 'https://cdn-icons-png.flaticon.com/128/1055/1055815.png',
          input_message_content: {
            message_text: `${gameType} **–ü–†–ò–ì–õ–ê–®–ï–ù–ò–ï –ù–ê –î–£–≠–õ–¨** ${gameType}\n\n` +
              `@${username} –ø—Ä–∏–≥–ª–∞—à–∞–µ—Ç –≤–∞—Å –Ω–∞ –¥—É—ç–ª—å!\n` +
              `üí∞ –°—Ç–∞–≤–∫–∞: ${amount} USDT\n` +
              `üéÆ –ò–≥—Ä–∞: ${getGameName(gameType)}\n` +
              `üèÜ –§–æ—Ä–º–∞—Ç: ${format.toUpperCase()}\n\n` +
              `üì± –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ª–∏—á–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è –æ—Ç @${bot.botInfo?.username || 'Greenlightgames_bot'}`,
            parse_mode: 'Markdown'
          }
        });
      }
      
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–æ—Å—Ç—ã–µ –∫–æ–º–∞–Ω–¥—ã
      if (query.startsWith('duel') && results.length === 0) {
        results.push({
          type: 'article',
          id: 'duel_help',
          title: '‚ö†Ô∏è –ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥—É—ç–ª–∏',
          description: '–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ: duel @username —Å—É–º–º–∞',
          input_message_content: {
            message_text: `‚ùå **–ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –∫–æ–º–∞–Ω–¥—ã**\n\n` +
              `–ü—Ä–∞–≤–∏–ª—å–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç:\n` +
              `‚Ä¢ \`duel @username 50\` - –±—ã—Å—Ç—Ä–∞—è –¥—É—ç–ª—å\n` +
              `‚Ä¢ \`duel @username 100 üéØ\` - –¥–∞—Ä—Ç—Å\n` +
              `‚Ä¢ \`duel @username 50 üé≤ bo3\` - –∫–æ—Å—Ç–∏ –¥–æ 2 –ø–æ–±–µ–¥\n\n` +
              `–í–∞—à –∑–∞–ø—Ä–æ—Å: \`${ctx.inlineQuery.query}\``,
            parse_mode: 'Markdown'
          }
        });
      }
      
      // –ï—Å–ª–∏ –Ω–∏—á–µ–≥–æ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ, –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–æ–¥—Å–∫–∞–∑–∫—É
      if (results.length === 0) {
        results.push({
          type: 'article',
          id: 'help',
          title: 'üí° –ö–∞–∫ —Å–æ–∑–¥–∞—Ç—å –¥—É—ç–ª—å',
          description: '–§–æ—Ä–º–∞—Ç: duel @username —Å—É–º–º–∞ —ç–º–æ–¥–∑–∏ —Ñ–æ—Ä–º–∞—Ç',
          input_message_content: {
            message_text: `üìñ **–ö–∞–∫ —Å–æ–∑–¥–∞—Ç—å –¥—É—ç–ª—å –≤ –ª–∏—á–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏—è—Ö:**\n\n` +
              `–í–≤–µ–¥–∏—Ç–µ –≤ –ø–æ–∏—Å–∫–µ inline:\n` +
              `‚Ä¢ \`duel @username 50\` - –±—ã—Å—Ç—Ä–∞—è –∏–≥—Ä–∞ –≤ –∫–æ—Å—Ç–∏\n` +
              `‚Ä¢ \`duel @username 100 üéØ\` - –¥–∞—Ä—Ç—Å\n` +
              `‚Ä¢ \`duel @username 50 üé≤ bo3\` - –∫–æ—Å—Ç–∏ –¥–æ 2 –ø–æ–±–µ–¥\n\n` +
              `–î–æ—Å—Ç—É–ø–Ω—ã–µ –∏–≥—Ä—ã: üé≤ üéØ ‚öΩ üèÄ üé∞ üé≥\n` +
              `–§–æ—Ä–º–∞—Ç—ã: bo1, bo3, bo5, bo7, bo9`,
            parse_mode: 'Markdown'
          }
        });
      }
      
      console.log('üì§ –û—Ç–ø—Ä–∞–≤–ª—è–µ–º inline —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã:', {
        resultsCount: results.length,
        results: results.map(r => ({ id: r.id, title: r.title }))
      });
      
      await ctx.answerInlineQuery(results, {
        cache_time: 0,
        is_personal: true
      });
      
    } catch (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ inline query:', error);
      await ctx.answerInlineQuery([]);
    }
  });
  
  // –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ inline —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞ (–∫–æ–≥–¥–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ)
  bot.on('chosen_inline_result', async (ctx) => {
    try {
      console.log('‚úÖ Inline —Ä–µ–∑—É–ª—å—Ç–∞—Ç –≤—ã–±—Ä–∞–Ω:', {
        resultId: ctx.chosenInlineResult.result_id,
        query: ctx.chosenInlineResult.query,
        from: ctx.from.username,
        userId: ctx.from.id
      });
      
      const resultId = ctx.chosenInlineResult.result_id;
      const query = ctx.chosenInlineResult.query;
      
      // –ï—Å–ª–∏ —ç—Ç–æ –¥—É—ç–ª—å, –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏—è –≤ –ª–∏—á–∫—É
      if (resultId.startsWith('duel_')) {
        const duelMatch = query.match(/^duel\s+@?(\w+)\s+(\d+)(?:\s*(üé≤|üéØ|‚öΩ|üèÄ|üé∞|üé≥))?(?:\s*(bo\d+))?/i);
        
        if (duelMatch) {
          const challengerId = ctx.from.id;
          const challengerUsername = ctx.from.username;
          const targetUsername = duelMatch[1];
          const amount = parseInt(duelMatch[2]);
          const gameType = duelMatch[3] || 'üé≤';
          const format = duelMatch[4] || 'bo1';
          
          // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ–±–æ–∏–º –∏–≥—Ä–æ–∫–∞–º
          await sendDuelInvitations(bot, {
            challengerId,
            challengerUsername,
            targetUsername,
            amount,
            gameType,
            format,
            inlineMessageId: ctx.chosenInlineResult.inline_message_id
          });
        }
      }
      
    } catch (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ chosen_inline_result:', error);
    }
  });
}

/**
 * –û—Ç–ø—Ä–∞–≤–∫–∞ –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏–π –Ω–∞ –¥—É—ç–ª—å –≤ –ª–∏—á–∫—É
 */
async function sendDuelInvitations(bot, data) {
  try {
    const { challengerId, challengerUsername, targetUsername, amount, gameType, format, inlineMessageId } = data;
    
    console.log('üéØ –û—Ç–ø—Ä–∞–≤–∫–∞ –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏—è –Ω–∞ –¥—É—ç–ª—å:', data);
    
    // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∏–Ω–∏—Ü–∏–∞—Ç–æ—Ä—É –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ
    await bot.telegram.sendMessage(
      challengerId,
      `‚úÖ **–ü—Ä–∏–≥–ª–∞—à–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ!**\n\n` +
      `üéÆ –ò–≥—Ä–∞: ${getGameName(gameType)}\n` +
      `üí∞ –°—Ç–∞–≤–∫–∞: ${amount} USDT\n` +
      `üèÜ –§–æ—Ä–º–∞—Ç: ${format.toUpperCase()}\n` +
      `üë§ –û–ø–ø–æ–Ω–µ–Ω—Ç: @${targetUsername}\n\n` +
      `‚è± –û–∂–∏–¥–∞–µ–º –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –æ—Ç @${targetUsername}...\n\n` +
      `üí° –ü–æ–ø—Ä–æ—Å–∏—Ç–µ @${targetUsername} –Ω–∞–ø–∏—Å–∞—Ç—å –±–æ—Ç—É /start –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏—è`,
      {
        parse_mode: 'Markdown'
      }
    );
    
    // –°–æ—Ö—Ä–∞–Ω—è–µ–º –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏–µ –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ —ç–º–æ–¥–∑–∏ –¥—É—ç–ª–∏
    global.pendingDuelInvites = global.pendingDuelInvites || {};
    const inviteId = `invite_${Date.now()}`;
    global.pendingDuelInvites[inviteId] = {
      challengerId,
      challengerUsername,
      targetUsername,
      amount,
      gameType,
      format,
      winsRequired: getWinsRequired(format),
      timestamp: Date.now(),
      inlineMessageId
    };
    
    console.log(`üìã –ü—Ä–∏–≥–ª–∞—à–µ–Ω–∏–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–æ: ${inviteId} –¥–ª—è @${targetUsername}`);
    
    // –£–¥–∞–ª—è–µ–º —á–µ—Ä–µ–∑ 10 –º–∏–Ω—É—Ç
    setTimeout(() => {
      delete global.pendingDuelInvites[inviteId];
    }, 10 * 60 * 1000);
    
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏–π:', error);
  }
}

/**
 * –ü—Ä–æ–≤–µ—Ä–∫–∞ –∏ –æ—Ç–ø—Ä–∞–≤–∫–∞ –æ–∂–∏–¥–∞—é—â–∏—Ö –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏–π
 */
async function checkPendingInvites(bot, username, userId) {
  if (!global.pendingDuelInvites) return;
  
  // –ò—â–µ–º –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏—è –¥–ª—è —ç—Ç–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
  for (const [inviteId, invite] of Object.entries(global.pendingDuelInvites)) {
    if (invite.targetUsername === username) {
      // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏–µ
      await bot.telegram.sendMessage(
        userId,
        `${invite.gameType} **–ü–†–ò–ì–õ–ê–®–ï–ù–ò–ï –ù–ê –î–£–≠–õ–¨** ${invite.gameType}\n\n` +
        `@${invite.challengerUsername} –ø—Ä–∏–≥–ª–∞—à–∞–µ—Ç –≤–∞—Å –Ω–∞ –¥—É—ç–ª—å!\n` +
        `üí∞ –°—Ç–∞–≤–∫–∞: ${invite.amount} USDT\n` +
        `üéÆ –ò–≥—Ä–∞: ${getGameName(invite.gameType)}\n` +
        `üèÜ –§–æ—Ä–º–∞—Ç: ${invite.format.toUpperCase()} (–¥–æ ${invite.winsRequired} –ø–æ–±–µ–¥)\n\n` +
        `‚è± –ü—Ä–∏–≥–ª–∞—à–µ–Ω–∏–µ –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–æ –µ—â–µ ${Math.ceil((invite.timestamp + 5 * 60 * 1000 - Date.now()) / 60000)} –º–∏–Ω—É—Ç`,
        {
          parse_mode: 'Markdown',
          reply_markup: {
            inline_keyboard: [[
              { text: '‚úÖ –ü—Ä–∏–Ω—è—Ç—å', callback_data: `accept_private_duel_${inviteId}` },
              { text: '‚ùå –û—Ç–∫–ª–æ–Ω–∏—Ç—å', callback_data: `decline_private_duel_${inviteId}` }
            ]]
          }
        }
      );
      
      // –£–¥–∞–ª—è–µ–º –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–Ω–æ–µ –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏–µ
      delete global.pendingDuelInvites[inviteId];
    }
  }
}

/**
 * –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏
 */
function getWinsRequired(format) {
  const formats = {
    'bo1': 1,
    'bo3': 2,
    'bo5': 3,
    'bo7': 4,
    'bo9': 5
  };
  return formats[format] || 1;
}

function getGameName(gameType) {
  const games = {
    'üé≤': '–ö–æ—Å—Ç–∏',
    'üéØ': '–î–∞—Ä—Ç—Å',
    '‚öΩ': '–§—É—Ç–±–æ–ª',
    'üèÄ': '–ë–∞—Å–∫–µ—Ç–±–æ–ª',
    'üé∞': '–°–ª–æ—Ç—ã',
    'üé≥': '–ë–æ—É–ª–∏–Ω–≥'
  };
  return games[gameType] || '–ò–≥—Ä–∞';
}

module.exports = {
  registerInlineHandlers,
  checkPendingInvites
};