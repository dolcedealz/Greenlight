// frontend/src/components/pvp/PvPLobby.js
import React, { useState, useEffect } from 'react';
import { useWebApp } from '../../hooks';
import api from '../../services/api';
import '../../styles/PvPLobby.css';

const PvPLobby = ({ sessionId, userData, onGameStart, onError }) => {
  const [sessionData, setSessionData] = useState(null);
  const [loading, setLoading] = useState(true);
  const [isReady, setIsReady] = useState(false);
  const [isJoined, setIsJoined] = useState(false);
  const webApp = useWebApp();

  // –ó–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö —Å–µ—Å—Å–∏–∏
  useEffect(() => {
    const loadSession = async () => {
      try {
        setLoading(true);
        console.log('PvP: –ó–∞–≥—Ä—É–∑–∫–∞ —Å–µ—Å—Å–∏–∏', sessionId);
        
        const response = await api.get(`/pvp/session/${sessionId}`);
        if (response.data.success) {
          setSessionData(response.data.data);
          setIsJoined(response.data.data.isPlayer && 
            (response.data.data.challengerJoined || response.data.data.opponentJoined));
          setIsReady(response.data.data.isPlayer && 
            (response.data.data.challengerReady || response.data.data.opponentReady));
        } else {
          onError('–°–µ—Å—Å–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞');
        }
      } catch (error) {
        console.error('PvP: –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Å–µ—Å—Å–∏–∏:', error);
        onError(error.response?.data?.message || '–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Å–µ—Å—Å–∏–∏');
      } finally {
        setLoading(false);
      }
    };

    if (sessionId) {
      loadSession();
    }
  }, [sessionId, onError]);

  // –ü—Ä–∏—Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ –∫ —Å–µ—Å—Å–∏–∏
  const handleJoinSession = async () => {
    try {
      console.log('PvP: –ü—Ä–∏—Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ –∫ —Å–µ—Å—Å–∏–∏');
      
      const response = await api.post(`/pvp/join/${sessionId}`);
      if (response.data.success) {
        setSessionData(prev => ({ ...prev, ...response.data.data }));
        setIsJoined(true);
        webApp?.showAlert('–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –∏–≥—Ä–æ–≤—É—é –∫–æ–º–Ω–∞—Ç—É!');
      }
    } catch (error) {
      console.error('PvP: –û—à–∏–±–∫–∞ –ø—Ä–∏—Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è:', error);
      onError(error.response?.data?.message || '–û—à–∏–±–∫–∞ –ø—Ä–∏—Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è –∫ —Å–µ—Å—Å–∏–∏');
    }
  };

  // –£—Å—Ç–∞–Ω–æ–≤–∫–∞ –≥–æ—Ç–æ–≤–Ω–æ—Å—Ç–∏
  const handleSetReady = async (ready) => {
    try {
      console.log('PvP: –£—Å—Ç–∞–Ω–æ–≤–∫–∞ –≥–æ—Ç–æ–≤–Ω–æ—Å—Ç–∏:', ready);
      
      const response = await api.post(`/pvp/ready/${sessionId}`, { ready });
      if (response.data.success) {
        setSessionData(prev => ({ ...prev, ...response.data.data }));
        setIsReady(ready);
        
        if (ready) {
          webApp?.showAlert('–í—ã –≥–æ—Ç–æ–≤—ã –∫ –∏–≥—Ä–µ!');
        }
      }
    } catch (error) {
      console.error('PvP: –û—à–∏–±–∫–∞ —É—Å—Ç–∞–Ω–æ–≤–∫–∏ –≥–æ—Ç–æ–≤–Ω–æ—Å—Ç–∏:', error);
      onError(error.response?.data?.message || '–û—à–∏–±–∫–∞ —É—Å—Ç–∞–Ω–æ–≤–∫–∏ –≥–æ—Ç–æ–≤–Ω–æ—Å—Ç–∏');
    }
  };

  // –ó–∞–ø—É—Å–∫ –∏–≥—Ä—ã
  const handleStartGame = async () => {
    try {
      console.log('PvP: –ó–∞–ø—É—Å–∫ –∏–≥—Ä—ã');
      
      const response = await api.post(`/pvp/start/${sessionId}`);
      if (response.data.success) {
        console.log('PvP: –ò–≥—Ä–∞ –∑–∞–ø—É—â–µ–Ω–∞, —Ä–µ–∑—É–ª—å—Ç–∞—Ç:', response.data.data);
        onGameStart(response.data.data);
      }
    } catch (error) {
      console.error('PvP: –û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞ –∏–≥—Ä—ã:', error);
      onError(error.response?.data?.message || '–û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞ –∏–≥—Ä—ã');
    }
  };

  // –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–π –∑–∞–ø—É—Å–∫ –∏–≥—Ä—ã –∫–æ–≥–¥–∞ –æ–±–∞ –≥–æ—Ç–æ–≤—ã
  useEffect(() => {
    if (sessionData && sessionData.bothJoined && sessionData.bothReady && sessionData.status === 'accepted') {
      console.log('PvP: –û–±–∞ –∏–≥—Ä–æ–∫–∞ –≥–æ—Ç–æ–≤—ã, –∞–≤—Ç–æ–∑–∞–ø—É—Å–∫ –∏–≥—Ä—ã');
      handleStartGame();
    }
  }, [sessionData]);

  if (loading) {
    return (
      <div className="pvp-lobby loading">
        <div className="loading-spinner">
          <div className="spinner"></div>
          <p>–ó–∞–≥—Ä—É–∑–∫–∞ –∏–≥—Ä–æ–≤–æ–π –∫–æ–º–Ω–∞—Ç—ã...</p>
        </div>
      </div>
    );
  }

  if (!sessionData) {
    return (
      <div className="pvp-lobby error">
        <h2>‚ùå –°–µ—Å—Å–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞</h2>
        <p>–í–æ–∑–º–æ–∂–Ω–æ, —Å–µ—Å—Å–∏—è –∏—Å—Ç–µ–∫–ª–∞ –∏–ª–∏ –±—ã–ª–∞ –æ—Ç–º–µ–Ω–µ–Ω–∞</p>
      </div>
    );
  }

  if (sessionData.status === 'completed') {
    return (
      <div className="pvp-lobby completed">
        <h2>üèÜ –ò–≥—Ä–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞</h2>
        <div className="game-result">
          <p>–ü–æ–±–µ–¥–∏—Ç–µ–ª—å: <strong>@{sessionData.winnerUsername}</strong></p>
          <p>–†–µ–∑—É–ª—å—Ç–∞—Ç: <strong>{sessionData.coinResult === 'heads' ? '–û—Ä–µ–ª' : '–†–µ—à–∫–∞'}</strong></p>
          <p>–í—ã–∏–≥—Ä—ã—à: <strong>{sessionData.winAmount} USDT</strong></p>
        </div>
      </div>
    );
  }

  const isChallenger = sessionData.isChallenger;
  const playerData = isChallenger ? {
    username: sessionData.challengerUsername,
    joined: sessionData.challengerJoined,
    ready: sessionData.challengerReady,
    side: sessionData.challengerSide
  } : {
    username: sessionData.opponentUsername,
    joined: sessionData.opponentJoined,
    ready: sessionData.opponentReady,
    side: sessionData.opponentSide
  };

  const opponentData = isChallenger ? {
    username: sessionData.opponentUsername,
    joined: sessionData.opponentJoined,
    ready: sessionData.opponentReady,
    side: sessionData.opponentSide
  } : {
    username: sessionData.challengerUsername,
    joined: sessionData.challengerJoined,
    ready: sessionData.challengerReady,
    side: sessionData.challengerSide
  };

  return (
    <div className="pvp-lobby">
      <div className="lobby-header">
        <h1>üéØ –î—É—ç–ª—å –ú–æ–Ω–µ—Ç–æ–∫</h1>
        <div className="session-info">
          <p>–°–µ—Å—Å–∏—è: <code>{sessionId}</code></p>
          <div className="prize-pool">
            <span className="amount">{sessionData.winAmount} USDT</span>
            <span className="label">–ë–∞–Ω–∫</span>
          </div>
        </div>
      </div>

      <div className="players-grid">
        {/* –í–∞—à –∏–≥—Ä–æ–∫ */}
        <div className={`player-card your-player ${playerData.ready ? 'ready' : ''}`}>
          <div className="player-header">
            <h3>ü§∫ –í—ã</h3>
            <span className="username">@{playerData.username}</span>
          </div>
          
          <div className="player-side">
            <div className="coin-side">
              <span className="coin-emoji">{playerData.side === 'heads' ? 'ü™ô' : 'ü•à'}</span>
              <span className="side-name">{playerData.side === 'heads' ? '–û–†–ï–õ' : '–†–ï–®–ö–ê'}</span>
            </div>
          </div>

          <div className="player-status">
            {!isJoined ? (
              <button 
                className="join-button"
                onClick={handleJoinSession}
                disabled={loading}
              >
                üö™ –í–æ–π—Ç–∏ –≤ –∫–æ–º–Ω–∞—Ç—É
              </button>
            ) : !isReady ? (
              <button 
                className="ready-button"
                onClick={() => handleSetReady(true)}
                disabled={loading}
              >
                ‚úÖ –ì–æ—Ç–æ–≤ –∫ –∏–≥—Ä–µ
              </button>
            ) : (
              <div className="status-indicator ready">
                <span>‚úÖ –ì–æ—Ç–æ–≤</span>
              </div>
            )}
          </div>

          <div className="player-info">
            <div className="info-item">
              <span className="label">–°—Ç–∞–≤–∫–∞:</span>
              <span className="value">{sessionData.amount} USDT</span>
            </div>
          </div>
        </div>

        {/* VS */}
        <div className="vs-section">
          <div className="vs-circle">
            <span>VS</span>
          </div>
          <div className="coin-preview">
            <div className="coin-animation">
              ü™ô
            </div>
          </div>
        </div>

        {/* –û–ø–ø–æ–Ω–µ–Ω—Ç */}
        <div className={`player-card opponent-player ${opponentData.ready ? 'ready' : ''}`}>
          <div className="player-header">
            <h3>‚öîÔ∏è –°–æ–ø–µ—Ä–Ω–∏–∫</h3>
            <span className="username">@{opponentData.username}</span>
          </div>
          
          <div className="player-side">
            <div className="coin-side">
              <span className="coin-emoji">{opponentData.side === 'heads' ? 'ü™ô' : 'ü•à'}</span>
              <span className="side-name">{opponentData.side === 'heads' ? '–û–†–ï–õ' : '–†–ï–®–ö–ê'}</span>
            </div>
          </div>

          <div className="player-status">
            {!opponentData.joined ? (
              <div className="status-indicator waiting">
                <span>‚è≥ –û–∂–∏–¥–∞–µ—Ç –ø—Ä–∏—Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è</span>
              </div>
            ) : !opponentData.ready ? (
              <div className="status-indicator waiting">
                <span>‚è≥ –ü–æ–¥–≥–æ—Ç–∞–≤–ª–∏–≤–∞–µ—Ç—Å—è</span>
              </div>
            ) : (
              <div className="status-indicator ready">
                <span>‚úÖ –ì–æ—Ç–æ–≤</span>
              </div>
            )}
          </div>

          <div className="player-info">
            <div className="info-item">
              <span className="label">–°—Ç–∞–≤–∫–∞:</span>
              <span className="value">{sessionData.amount} USDT</span>
            </div>
          </div>
        </div>
      </div>

      {/* –°—Ç–∞—Ç—É—Å –∏–≥—Ä—ã */}
      <div className="game-status">
        {!sessionData.bothJoined ? (
          <div className="status-message waiting">
            <p>‚è≥ –û–∂–∏–¥–∞–Ω–∏–µ –∏–≥—Ä–æ–∫–æ–≤...</p>
            <p>–û–±–∞ –∏–≥—Ä–æ–∫–∞ –¥–æ–ª–∂–Ω—ã –≤–æ–π—Ç–∏ –≤ –∫–æ–º–Ω–∞—Ç—É</p>
          </div>
        ) : !sessionData.bothReady ? (
          <div className="status-message preparing">
            <p>üéÆ –ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –∫ –∏–≥—Ä–µ...</p>
            <p>–ò–≥—Ä–æ–∫–∏ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–∞—é—Ç –≥–æ—Ç–æ–≤–Ω–æ—Å—Ç—å</p>
          </div>
        ) : (
          <div className="status-message ready">
            <p>üöÄ –í—Å–µ –≥–æ—Ç–æ–≤–æ!</p>
            <p>–ò–≥—Ä–∞ –Ω–∞—á–Ω–µ—Ç—Å—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏...</p>
          </div>
        )}
      </div>

      {/* –ü—Ä–∞–≤–∏–ª–∞ */}
      <div className="game-rules">
        <h4>üìã –ü—Ä–∞–≤–∏–ª–∞ –∏–≥—Ä—ã:</h4>
        <ul>
          <li>ü™ô –ò–Ω–∏—Ü–∏–∞—Ç–æ—Ä –∏–≥—Ä–∞–µ—Ç –∑–∞ <strong>–û–†–ï–õ</strong>, –æ–ø–ø–æ–Ω–µ–Ω—Ç –∑–∞ <strong>–†–ï–®–ö–ê</strong></li>
          <li>üé≤ –†–µ–∑—É–ª—å—Ç–∞—Ç –æ–ø—Ä–µ–¥–µ–ª—è–µ—Ç—Å—è —Å–ø—Ä–∞–≤–µ–¥–ª–∏–≤—ã–º –∞–ª–≥–æ—Ä–∏—Ç–º–æ–º</li>
          <li>üèÜ –ü–æ–±–µ–¥–∏—Ç–µ–ª—å –ø–æ–ª—É—á–∞–µ—Ç <strong>{sessionData.winAmount} USDT</strong></li>
          <li>üí∞ –ö–æ–º–∏—Å—Å–∏—è —Å–æ—Å—Ç–∞–≤–ª—è–µ—Ç <strong>5%</strong> –æ—Ç –æ–±—â–µ–≥–æ –±–∞–Ω–∫–∞</li>
        </ul>
      </div>
    </div>
  );
};

export default PvPLobby;