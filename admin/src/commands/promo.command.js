// admin/src/commands/promo.command.js
const { Markup } = require('telegraf');
const axios = require('axios');

// –ü–æ–ª—É—á–∞–µ–º API URL –∏ —Ç–æ–∫–µ–Ω –∏–∑ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è
const apiUrl = process.env.API_URL || 'https://greenlight-api-ghqh.onrender.com/api';
const adminToken = process.env.ADMIN_API_TOKEN;

// –°–æ–∑–¥–∞–µ–º axios instance —Å –ø—Ä–µ–¥—É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–Ω—ã–º–∏ –∑–∞–≥–æ–ª–æ–≤–∫–∞–º–∏
const apiClient = axios.create({
  baseURL: apiUrl,
  headers: {
    'Authorization': `Bearer ${adminToken}`,
    'Content-Type': 'application/json'
  },
  timeout: 30000
});

/**
 * –ü–æ–∫–∞–∑–∞—Ç—å –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é –ø—Ä–æ–º–æ–∫–æ–¥–æ–≤
 */
async function showPromoMenu(ctx) {
  console.log('ADMIN: –ü–æ–∫–∞–∑ –º–µ–Ω—é –ø—Ä–æ–º–æ–∫–æ–¥–æ–≤');
  
  const keyboard = Markup.inlineKeyboard([
    [Markup.button.callback('‚ûï –°–æ–∑–¥–∞—Ç—å –ø—Ä–æ–º–æ–∫–æ–¥', 'promo_create')],
    [Markup.button.callback('üìã –°–ø–∏—Å–æ–∫ –ø—Ä–æ–º–æ–∫–æ–¥–æ–≤', 'promo_list')],
    [Markup.button.callback('üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø—Ä–æ–º–æ–∫–æ–¥–æ–≤', 'promo_stats')],
    [Markup.button.callback('üéÅ –ë–æ–Ω—É—Å–Ω–∞—è —Å–∏—Å—Ç–µ–º–∞', 'bonus_system')],
    [Markup.button.callback('üèÜ VIP –ø—Ä–æ–≥—Ä–∞–º–º–∞', 'vip_program')],
    [Markup.button.callback('‚óÄÔ∏è –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é', 'main_menu')]
  ]);

  const message = 'üéÅ *–°–∏—Å—Ç–µ–º–∞ –ø—Ä–æ–º–æ–∫–æ–¥–æ–≤ –∏ –±–æ–Ω—É—Å–æ–≤*\n\n–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:';
  
  try {
    if (ctx.callbackQuery) {
      await ctx.editMessageText(message, {
        parse_mode: 'Markdown',
        ...keyboard
      });
    } else {
      await ctx.reply(message, {
        parse_mode: 'Markdown',
        ...keyboard
      });
    }
  } catch (error) {
    console.error('ADMIN: –û—à–∏–±–∫–∞ –ø–æ–∫–∞–∑–∞ –º–µ–Ω—é –ø—Ä–æ–º–æ–∫–æ–¥–æ–≤:', error);
    await ctx.reply(message, {
      parse_mode: 'Markdown',
      ...keyboard
    });
  }
}

/**
 * –ù–∞—á–∞—Ç—å —Å–æ–∑–¥–∞–Ω–∏–µ –ø—Ä–æ–º–æ–∫–æ–¥–∞
 */
async function startPromoCreation(ctx) {
  console.log('ADMIN: –ù–∞—á–∞–ª–æ —Å–æ–∑–¥–∞–Ω–∏—è –ø—Ä–æ–º–æ–∫–æ–¥–∞');
  
  ctx.session = ctx.session || {};
  ctx.session.creatingPromo = {
    step: 'code'
  };
  
  const message = '‚ûï *–°–æ–∑–¥–∞–Ω–∏–µ –ø—Ä–æ–º–æ–∫–æ–¥–∞*\n\n' +
    '–®–∞–≥ 1/6: –í–≤–µ–¥–∏—Ç–µ –∫–æ–¥ –ø—Ä–æ–º–æ–∫–æ–¥–∞:\n\n' +
    '‚Ä¢ –¢–æ–ª—å–∫–æ –ª–∞—Ç–∏–Ω—Å–∫–∏–µ –±—É–∫–≤—ã –∏ —Ü–∏—Ñ—Ä—ã\n' +
    '‚Ä¢ –û—Ç 3 –¥–æ 20 —Å–∏–º–≤–æ–ª–æ–≤\n' +
    '‚Ä¢ –ë–µ–∑ –ø—Ä–æ–±–µ–ª–æ–≤\n\n' +
    '–ü—Ä–∏–º–µ—Ä: WELCOME2024, BONUS100, NEWUSER';
  
  const keyboard = Markup.inlineKeyboard([[
    Markup.button.callback('‚ùå –û—Ç–º–µ–Ω–∞', 'promo_cancel')
  ]]);
  
  if (ctx.callbackQuery) {
    await ctx.editMessageText(message, {
      parse_mode: 'Markdown',
      ...keyboard
    });
  } else {
    await ctx.reply(message, {
      parse_mode: 'Markdown',
      ...keyboard
    });
  }
}

/**
 * –û–±—Ä–∞–±–æ—Ç–∞—Ç—å —Å–æ–∑–¥–∞–Ω–∏–µ –ø—Ä–æ–º–æ–∫–æ–¥–∞
 */
async function handlePromoCreation(ctx) {
  if (!ctx.session || !ctx.session.creatingPromo) {
    return;
  }
  
  const promoData = ctx.session.creatingPromo;
  const text = ctx.message.text.trim();
  
  console.log(`ADMIN: –®–∞–≥ —Å–æ–∑–¥–∞–Ω–∏—è –ø—Ä–æ–º–æ–∫–æ–¥–∞: ${promoData.step}, —Ç–µ–∫—Å—Ç: ${text}`);
  
  switch (promoData.step) {
    case 'code':
      // –í–∞–ª–∏–¥–∞—Ü–∏—è –∫–æ–¥–∞
      if (!/^[A-Z0-9]{3,20}$/i.test(text)) {
        await ctx.reply('‚ùå –ö–æ–¥ –¥–æ–ª–∂–µ–Ω —Å–æ–¥–µ—Ä–∂–∞—Ç—å —Ç–æ–ª—å–∫–æ –ª–∞—Ç–∏–Ω—Å–∫–∏–µ –±—É–∫–≤—ã –∏ —Ü–∏—Ñ—Ä—ã (3-20 —Å–∏–º–≤–æ–ª–æ–≤):');
        return;
      }
      
      promoData.code = text.toUpperCase();
      promoData.step = 'type';
      
      await ctx.reply(
        'üéÅ –®–∞–≥ 2/6: –í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø –ø—Ä–æ–º–æ–∫–æ–¥–∞:',
        Markup.inlineKeyboard([
          [
            Markup.button.callback('üí∞ –ë–æ–Ω—É—Å –Ω–∞ –±–∞–ª–∞–Ω—Å', 'promo_type_balance'),
            Markup.button.callback('üéÆ –ë–µ—Å–ø–ª–∞—Ç–Ω—ã–µ –∏–≥—Ä—ã', 'promo_type_freespins')
          ],
          [
            Markup.button.callback('üìà –ü—Ä–æ—Ü–µ–Ω—Ç –æ—Ç –¥–µ–ø–æ–∑–∏—Ç–∞', 'promo_type_deposit'),
            Markup.button.callback('üèÜ VIP —Å—Ç–∞—Ç—É—Å', 'promo_type_vip')
          ],
          [Markup.button.callback('‚ùå –û—Ç–º–µ–Ω–∞', 'promo_cancel')]
        ])
      );
      break;
      
    case 'value':
      const value = parseFloat(text);
      
      if (isNaN(value) || value <= 0) {
        await ctx.reply('‚ùå –í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω–æ–µ —á–∏—Å–ª–æ:');
        return;
      }
      
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º –ª–∏–º–∏—Ç—ã –¥–ª—è —Ä–∞–∑–Ω—ã—Ö —Ç–∏–ø–æ–≤
      const maxValues = {
        'balance': 10000,
        'freespins': 1000,
        'deposit': 500,
        'vip': 365
      };
      
      if (value > maxValues[promoData.type]) {
        await ctx.reply(`‚ùå –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ –¥–ª—è –¥–∞–Ω–Ω–æ–≥–æ —Ç–∏–ø–∞: ${maxValues[promoData.type]}`);
        return;
      }
      
      promoData.value = value;
      promoData.step = 'usageLimit';
      
      await ctx.reply(
        `üíé –ó–Ω–∞—á–µ–Ω–∏–µ: ${value} ${getValueUnit(promoData.type)}\n\n` +
        '–®–∞–≥ 4/6: –í–≤–µ–¥–∏—Ç–µ –ª–∏–º–∏—Ç –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è:\n\n' +
        '‚Ä¢ 0 - –±–µ–∑ –ª–∏–º–∏—Ç–∞\n' +
        '‚Ä¢ –ß–∏—Å–ª–æ - –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∞–∫—Ç–∏–≤–∞—Ü–∏–π\n\n' +
        '–ü—Ä–∏–º–µ—Ä: 100 (–¥–ª—è 100 –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–π)',
        Markup.inlineKeyboard([[
          Markup.button.callback('‚ùå –û—Ç–º–µ–Ω–∞', 'promo_cancel')
        ]])
      );
      break;
      
    case 'usageLimit':
      const limit = parseInt(text);
      
      if (isNaN(limit) || limit < 0) {
        await ctx.reply('‚ùå –í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ —á–∏—Å–ª–æ (0 –∏–ª–∏ –±–æ–ª—å—à–µ):');
        return;
      }
      
      promoData.usageLimit = limit;
      promoData.step = 'duration';
      
      await ctx.reply(
        `üìä –õ–∏–º–∏—Ç –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è: ${limit === 0 ? '–ë–µ–∑ –ª–∏–º–∏—Ç–∞' : limit}\n\n` +
        '–®–∞–≥ 5/6: –í–≤–µ–¥–∏—Ç–µ —Å—Ä–æ–∫ –¥–µ–π—Å—Ç–≤–∏—è –≤ –¥–Ω—è—Ö:\n\n' +
        '‚Ä¢ 0 - –±–µ—Å—Å—Ä–æ—á–Ω—ã–π\n' +
        '‚Ä¢ –ß–∏—Å–ª–æ - –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥–Ω–µ–π —Å –º–æ–º–µ–Ω—Ç–∞ —Å–æ–∑–¥–∞–Ω–∏—è\n\n' +
        '–ü—Ä–∏–º–µ—Ä: 30 (–¥–µ–π—Å—Ç–≤—É–µ—Ç 30 –¥–Ω–µ–π)',
        Markup.inlineKeyboard([[
          Markup.button.callback('‚ùå –û—Ç–º–µ–Ω–∞', 'promo_cancel')
        ]])
      );
      break;
      
    case 'duration':
      const duration = parseInt(text);
      
      if (isNaN(duration) || duration < 0) {
        await ctx.reply('‚ùå –í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ —á–∏—Å–ª–æ (0 –∏–ª–∏ –±–æ–ª—å—à–µ):');
        return;
      }
      
      promoData.duration = duration;
      promoData.step = 'description';
      
      await ctx.reply(
        `‚è∞ –°—Ä–æ–∫ –¥–µ–π—Å—Ç–≤–∏—è: ${duration === 0 ? '–ë–µ—Å—Å—Ä–æ—á–Ω—ã–π' : duration + ' –¥–Ω–µ–π'}\n\n` +
        '–®–∞–≥ 6/6: –í–≤–µ–¥–∏—Ç–µ –æ–ø–∏—Å–∞–Ω–∏–µ –ø—Ä–æ–º–æ–∫–æ–¥–∞:\n\n' +
        '–ö—Ä–∞—Ç–∫–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π (–¥–æ 200 —Å–∏–º–≤–æ–ª–æ–≤)',
        Markup.inlineKeyboard([[
          Markup.button.callback('‚ùå –û—Ç–º–µ–Ω–∞', 'promo_cancel')
        ]])
      );
      break;
      
    case 'description':
      if (text.length > 200) {
        await ctx.reply('‚ùå –û–ø–∏—Å–∞–Ω–∏–µ –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –Ω–µ –¥–ª–∏–Ω–Ω–µ–µ 200 —Å–∏–º–≤–æ–ª–æ–≤:');
        return;
      }
      
      promoData.description = text;
      
      // –°–æ–∑–¥–∞–µ–º –ø—Ä–æ–º–æ–∫–æ–¥
      await createPromoCode(ctx, promoData);
      break;
  }
}

/**
 * –û–±—Ä–∞–±–æ—Ç–∞—Ç—å –≤—ã–±–æ—Ä —Ç–∏–ø–∞ –ø—Ä–æ–º–æ–∫–æ–¥–∞
 */
async function handlePromoTypeSelection(ctx, type) {
  console.log(`ADMIN: –í—ã–±–æ—Ä —Ç–∏–ø–∞ –ø—Ä–æ–º–æ–∫–æ–¥–∞: ${type}`);
  
  if (!ctx.session || !ctx.session.creatingPromo) {
    return ctx.answerCbQuery('‚ùå –°–µ—Å—Å–∏—è —Å–æ–∑–¥–∞–Ω–∏—è –ø—Ä–æ–º–æ–∫–æ–¥–∞ –∏—Å—Ç–µ–∫–ª–∞');
  }
  
  ctx.session.creatingPromo.type = type;
  ctx.session.creatingPromo.step = 'value';
  
  const typeNames = {
    'balance': '–ë–æ–Ω—É—Å –Ω–∞ –±–∞–ª–∞–Ω—Å',
    'freespins': '–ë–µ—Å–ø–ª–∞—Ç–Ω—ã–µ –∏–≥—Ä—ã',
    'deposit': '–ü—Ä–æ—Ü–µ–Ω—Ç –æ—Ç –¥–µ–ø–æ–∑–∏—Ç–∞',
    'vip': 'VIP —Å—Ç–∞—Ç—É—Å'
  };
  
  const valuePrompts = {
    'balance': '–í–≤–µ–¥–∏—Ç–µ —Å—É–º–º—É –±–æ–Ω—É—Å–∞ –≤ USDT (–¥–æ 10000):',
    'freespins': '–í–≤–µ–¥–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –±–µ—Å–ø–ª–∞—Ç–Ω—ã—Ö –∏–≥—Ä (–¥–æ 1000):',
    'deposit': '–í–≤–µ–¥–∏—Ç–µ –ø—Ä–æ—Ü–µ–Ω—Ç –æ—Ç –¥–µ–ø–æ–∑–∏—Ç–∞ (–¥–æ 500%):',
    'vip': '–í–≤–µ–¥–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥–Ω–µ–π VIP —Å—Ç–∞—Ç—É—Å–∞ (–¥–æ 365):'
  };
  
  await ctx.editMessageText(
    `üéÅ –¢–∏–ø: ${typeNames[type]}\n\n` +
    `–®–∞–≥ 3/6: ${valuePrompts[type]}`,
    {
      parse_mode: 'Markdown',
      ...Markup.inlineKeyboard([[
        Markup.button.callback('‚ùå –û—Ç–º–µ–Ω–∞', 'promo_cancel')
      ]])
    }
  );
  
  await ctx.answerCbQuery();
}

/**
 * –°–æ–∑–¥–∞—Ç—å –ø—Ä–æ–º–æ–∫–æ–¥
 */
async function createPromoCode(ctx, promoData) {
  console.log('ADMIN: –°–æ–∑–¥–∞–Ω–∏–µ –ø—Ä–æ–º–æ–∫–æ–¥–∞ —Å –¥–∞–Ω–Ω—ã–º–∏:', promoData);
  
  try {
    const createData = {
      code: promoData.code,
      type: promoData.type,
      value: promoData.value,
      usageLimit: promoData.usageLimit,
      duration: promoData.duration,
      description: promoData.description,
      isActive: true,
      createdBy: ctx.from.id
    };
    
    console.log('ADMIN: –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –ø—Ä–æ–º–æ–∫–æ–¥–∞:', JSON.stringify(createData, null, 2));
    
    const response = await apiClient.post('/admin/promo/create', createData);
    
    if (response.data.success) {
      const promo = response.data.data.promo;
      
      await ctx.reply(
        '‚úÖ *–ü—Ä–æ–º–æ–∫–æ–¥ —Å–æ–∑–¥–∞–Ω —É—Å–ø–µ—à–Ω–æ!*\n\n' +
        `üé´ –ö–æ–¥: \`${promo.code}\`\n` +
        `üéÅ –¢–∏–ø: ${getTypeDisplayName(promo.type)}\n` +
        `üíé –ó–Ω–∞—á–µ–Ω–∏–µ: ${promo.value} ${getValueUnit(promo.type)}\n` +
        `üìä –õ–∏–º–∏—Ç: ${promo.usageLimit === 0 ? '–ë–µ–∑ –ª–∏–º–∏—Ç–∞' : promo.usageLimit}\n` +
        `‚è∞ –°—Ä–æ–∫: ${promo.duration === 0 ? '–ë–µ—Å—Å—Ä–æ—á–Ω—ã–π' : promo.duration + ' –¥–Ω–µ–π'}\n` +
        `üìù –û–ø–∏—Å–∞–Ω–∏–µ: ${promo.description}\n` +
        `üìÖ –°–æ–∑–¥–∞–Ω: ${new Date(promo.createdAt).toLocaleString('ru-RU')}`,
        {
          parse_mode: 'Markdown',
          ...Markup.inlineKeyboard([[
            Markup.button.callback('üìã –ö —Å–ø–∏—Å–∫—É –ø—Ä–æ–º–æ–∫–æ–¥–æ–≤', 'promo_list')
          ]])
        }
      );
    } else {
      throw new Error(response.data.message);
    }
    
    // –û—á–∏—â–∞–µ–º —Å–µ—Å—Å–∏—é
    delete ctx.session.creatingPromo;
    
  } catch (error) {
    console.error('ADMIN: –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –ø—Ä–æ–º–æ–∫–æ–¥–∞:', error);
    await ctx.reply(
      `‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –ø—Ä–æ–º–æ–∫–æ–¥–∞: ${error.response?.data?.message || error.message}`,
      Markup.inlineKeyboard([[
        Markup.button.callback('üîÑ –ü–æ–ø—Ä–æ–±–æ–≤–∞—Ç—å —Å–Ω–æ–≤–∞', 'promo_create')
      ]])
    );
    delete ctx.session.creatingPromo;
  }
}

/**
 * –ü–æ–∫–∞–∑–∞—Ç—å —Å–ø–∏—Å–æ–∫ –ø—Ä–æ–º–æ–∫–æ–¥–æ–≤
 */
async function showPromoList(ctx, page = 1) {
  console.log('ADMIN: –ó–∞–ø—Ä–æ—Å —Å–ø–∏—Å–∫–∞ –ø—Ä–æ–º–æ–∫–æ–¥–æ–≤, —Å—Ç—Ä–∞–Ω–∏—Ü–∞:', page);
  
  try {
    const response = await apiClient.get('/admin/promo/list', {
      params: { 
        page: page,
        limit: 10
      }
    });
    
    if (!response.data.success) {
      throw new Error(response.data.message || '–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –ø—Ä–æ–º–æ–∫–æ–¥–æ–≤');
    }
    
    const data = response.data.data;
    const promos = data.promos;
    const pagination = data.pagination;
    
    if (promos.length === 0) {
      const message = 'üìã *–°–ø–∏—Å–æ–∫ –ø—Ä–æ–º–æ–∫–æ–¥–æ–≤*\n\n–ü—Ä–æ–º–æ–∫–æ–¥—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã.';
      const keyboard = Markup.inlineKeyboard([
        [Markup.button.callback('‚ûï –°–æ–∑–¥–∞—Ç—å –ø—Ä–æ–º–æ–∫–æ–¥', 'promo_create')],
        [Markup.button.callback('‚óÄÔ∏è –ù–∞–∑–∞–¥', 'promo_menu')]
      ]);
      
      if (ctx.callbackQuery) {
        await ctx.editMessageText(message, {
          parse_mode: 'Markdown',
          ...keyboard
        });
      } else {
        await ctx.reply(message, {
          parse_mode: 'Markdown',
          ...keyboard
        });
      }
      return;
    }
    
    let message = `üìã *–°–ø–∏—Å–æ–∫ –ø—Ä–æ–º–æ–∫–æ–¥–æ–≤* (—Å—Ç—Ä. ${pagination.current}/${pagination.pages})\n\n`;
    
    promos.forEach((promo, index) => {
      const statusEmoji = promo.isActive ? '‚úÖ' : '‚ùå';
      const typeEmoji = {
        'balance': 'üí∞',
        'freespins': 'üéÆ',
        'deposit': 'üìà',
        'vip': 'üèÜ'
      }[promo.type] || 'üéÅ';
      
      message += `${index + 1}. ${statusEmoji} ${typeEmoji} \`${promo.code}\`\n`;
      message += `   üíé ${promo.value} ${getValueUnit(promo.type)}\n`;
      message += `   üìä –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–π: ${promo.usedCount}/${promo.usageLimit === 0 ? '‚àû' : promo.usageLimit}\n`;
      message += `   üìÖ ${new Date(promo.createdAt).toLocaleDateString('ru-RU')}\n\n`;
    });
    
    // –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –∫–Ω–æ–ø–∫–∞–º–∏ –Ω–∞–≤–∏–≥–∞—Ü–∏–∏ –∏ –¥–µ–π—Å—Ç–≤–∏—è–º–∏
    const buttons = [];
    
    // –ö–Ω–æ–ø–∫–∏ –Ω–∞–≤–∏–≥–∞—Ü–∏–∏
    if (pagination.current > 1 || pagination.current < pagination.pages) {
      const navButtons = [];
      if (pagination.current > 1) {
        navButtons.push(Markup.button.callback('‚¨ÖÔ∏è –ü—Ä–µ–¥.', `promo_list_${pagination.current - 1}`));
      }
      if (pagination.current < pagination.pages) {
        navButtons.push(Markup.button.callback('–°–ª–µ–¥. ‚û°Ô∏è', `promo_list_${pagination.current + 1}`));
      }
      buttons.push(navButtons);
    }
    
    // –û—Å–Ω–æ–≤–Ω—ã–µ –¥–µ–π—Å—Ç–≤–∏—è
    buttons.push([
      Markup.button.callback('‚ûï –°–æ–∑–¥–∞—Ç—å', 'promo_create'),
      Markup.button.callback('üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞', 'promo_stats')
    ]);
    
    buttons.push([Markup.button.callback('üîÑ –û–±–Ω–æ–≤–∏—Ç—å', 'promo_list')]);
    buttons.push([Markup.button.callback('‚óÄÔ∏è –ù–∞–∑–∞–¥', 'promo_menu')]);
    
    const keyboard = Markup.inlineKeyboard(buttons);
    
    if (ctx.callbackQuery) {
      await ctx.editMessageText(message, {
        parse_mode: 'Markdown',
        ...keyboard
      });
    } else {
      await ctx.reply(message, {
        parse_mode: 'Markdown',
        ...keyboard
      });
    }
    
  } catch (error) {
    console.error('ADMIN: –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å–ø–∏—Å–∫–∞ –ø—Ä–æ–º–æ–∫–æ–¥–æ–≤:', error);
    const errorMessage = `‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –ø—Ä–æ–º–æ–∫–æ–¥–æ–≤: ${error.message}`;
    
    if (ctx.callbackQuery) {
      await ctx.answerCbQuery(errorMessage);
    } else {
      await ctx.reply(errorMessage);
    }
  }
}

/**
 * –ü–æ–∫–∞–∑–∞—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø—Ä–æ–º–æ–∫–æ–¥–æ–≤
 */
async function showPromoStats(ctx) {
  console.log('ADMIN: –ó–∞–ø—Ä–æ—Å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –ø—Ä–æ–º–æ–∫–æ–¥–æ–≤');
  
  try {
    const response = await apiClient.get('/admin/promo/stats');
    
    if (!response.data.success) {
      throw new Error(response.data.message || '–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏');
    }
    
    const stats = response.data.data;
    
    let message = 'üìä *–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø—Ä–æ–º–æ–∫–æ–¥–æ–≤*\n\n';
    
    message += `**–û–±—â–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è:**\n`;
    message += `üé´ –í—Å–µ–≥–æ –ø—Ä–æ–º–æ–∫–æ–¥–æ–≤: ${stats.totalPromos || 0}\n`;
    message += `‚úÖ –ê–∫—Ç–∏–≤–Ω—ã—Ö: ${stats.activePromos || 0}\n`;
    message += `‚ùå –ù–µ–∞–∫—Ç–∏–≤–Ω—ã—Ö: ${stats.inactivePromos || 0}\n`;
    message += `üî¢ –í—Å–µ–≥–æ –∞–∫—Ç–∏–≤–∞—Ü–∏–π: ${stats.totalActivations || 0}\n\n`;
    
    message += `**–ü–æ —Ç–∏–ø–∞–º:**\n`;
    if (stats.byType) {
      Object.entries(stats.byType).forEach(([type, count]) => {
        const typeEmoji = {
          'balance': 'üí∞',
          'freespins': 'üéÆ',
          'deposit': 'üìà',
          'vip': 'üèÜ'
        }[type] || 'üéÅ';
        
        message += `${typeEmoji} ${getTypeDisplayName(type)}: ${count}\n`;
      });
    }
    message += '\n';
    
    message += `**–ó–∞ —Å–µ–≥–æ–¥–Ω—è:**\n`;
    message += `üÜï –°–æ–∑–¥–∞–Ω–Ω—ã—Ö: ${stats.todayCreated || 0}\n`;
    message += `üéØ –ê–∫—Ç–∏–≤–∞—Ü–∏–π: ${stats.todayActivations || 0}\n\n`;
    
    message += `**–¢–æ–ø –ø—Ä–æ–º–æ–∫–æ–¥—ã:**\n`;
    if (stats.topPromos && stats.topPromos.length > 0) {
      stats.topPromos.slice(0, 5).forEach((promo, index) => {
        message += `${index + 1}. \`${promo.code}\` - ${promo.usedCount} –∞–∫—Ç–∏–≤–∞—Ü–∏–π\n`;
      });
    } else {
      message += `–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö\n`;
    }
    
    const keyboard = Markup.inlineKeyboard([
      [Markup.button.callback('üîÑ –û–±–Ω–æ–≤–∏—Ç—å', 'promo_stats')],
      [Markup.button.callback('‚óÄÔ∏è –ù–∞–∑–∞–¥', 'promo_menu')]
    ]);
    
    if (ctx.callbackQuery) {
      await ctx.editMessageText(message, {
        parse_mode: 'Markdown',
        ...keyboard
      });
    } else {
      await ctx.reply(message, {
        parse_mode: 'Markdown',
        ...keyboard
      });
    }
    
  } catch (error) {
    console.error('ADMIN: –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –ø—Ä–æ–º–æ–∫–æ–¥–æ–≤:', error);
    const errorMessage = `‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏: ${error.message}`;
    
    if (ctx.callbackQuery) {
      await ctx.answerCbQuery(errorMessage);
    } else {
      await ctx.reply(errorMessage);
    }
  }
}

// –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏
function getTypeDisplayName(type) {
  const names = {
    'balance': '–ë–æ–Ω—É—Å –Ω–∞ –±–∞–ª–∞–Ω—Å',
    'freespins': '–ë–µ—Å–ø–ª–∞—Ç–Ω—ã–µ –∏–≥—Ä—ã',
    'deposit': '–ü—Ä–æ—Ü–µ–Ω—Ç –æ—Ç –¥–µ–ø–æ–∑–∏—Ç–∞',
    'vip': 'VIP —Å—Ç–∞—Ç—É—Å'
  };
  return names[type] || type;
}

function getValueUnit(type) {
  const units = {
    'balance': 'USDT',
    'freespins': '–∏–≥—Ä',
    'deposit': '%',
    'vip': '–¥–Ω–µ–π'
  };
  return units[type] || '';
}

module.exports = {
  showPromoMenu,
  startPromoCreation,
  handlePromoCreation,
  handlePromoTypeSelection,
  showPromoList,
  showPromoStats
};