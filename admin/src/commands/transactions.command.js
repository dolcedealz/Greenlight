// admin/src/commands/transactions.command.js
const { Markup } = require('telegraf');
const axios = require('axios');

// –ü–æ–ª—É—á–∞–µ–º API URL –∏ —Ç–æ–∫–µ–Ω –∏–∑ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è
const apiUrl = process.env.API_URL || 'https://greenlight-api-ghqh.onrender.com/api';
const adminToken = process.env.ADMIN_API_TOKEN;

// –°–æ–∑–¥–∞–µ–º axios instance —Å –ø—Ä–µ–¥—É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–Ω—ã–º–∏ –∑–∞–≥–æ–ª–æ–≤–∫–∞–º–∏
const apiClient = axios.create({
  baseURL: apiUrl,
  headers: {
    'Authorization': `Bearer ${adminToken}`,
    'Content-Type': 'application/json'
  },
  timeout: 30000
});

/**
 * –ü–æ–∫–∞–∑–∞—Ç—å –æ–∂–∏–¥–∞—é—â–∏–µ –æ–¥–æ–±—Ä–µ–Ω–∏—è –≤—ã–≤–æ–¥—ã
 */
async function showPendingWithdrawals(ctx) {
  console.log('ADMIN: –ó–∞–ø—Ä–æ—Å –æ–∂–∏–¥–∞—é—â–∏—Ö –æ–¥–æ–±—Ä–µ–Ω–∏—è –≤—ã–≤–æ–¥–æ–≤');
  
  try {
    const response = await apiClient.get('/admin/withdrawals/pending');
    
    if (!response.data.success) {
      throw new Error(response.data.message || '–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –≤—ã–≤–æ–¥–æ–≤');
    }
    
    const withdrawals = response.data.data;
    
    if (withdrawals.length === 0) {
      const message = '‚è≥ *–û–∂–∏–¥–∞—é—â–∏–µ –æ–¥–æ–±—Ä–µ–Ω–∏—è*\n\n–ù–µ—Ç –≤—ã–≤–æ–¥–æ–≤, –æ–∂–∏–¥–∞—é—â–∏—Ö –æ–¥–æ–±—Ä–µ–Ω–∏—è.';
      const keyboard = Markup.inlineKeyboard([[
        Markup.button.callback('üîÑ –û–±–Ω–æ–≤–∏—Ç—å', 'transactions_pending'),
        Markup.button.callback('‚óÄÔ∏è –ù–∞–∑–∞–¥', 'transactions_menu')
      ]]);
      
      if (ctx.callbackQuery) {
        await ctx.editMessageText(message, {
          parse_mode: 'Markdown',
          ...keyboard
        });
      } else {
        await ctx.reply(message, {
          parse_mode: 'Markdown',
          ...keyboard
        });
      }
      return;
    }
    
    let message = `‚è≥ *–û–∂–∏–¥–∞—é—â–∏–µ –æ–¥–æ–±—Ä–µ–Ω–∏—è* (${withdrawals.length})\n\n`;
    
    const buttons = [];
    
    withdrawals.slice(0, 5).forEach((withdrawal, index) => {
      const user = withdrawal.user;
      const username = user.username ? `@${user.username}` : '–ù–µ—Ç username';
      const suspiciousFlag = withdrawal.metadata?.suspicious ? '‚ö†Ô∏è ' : '';
      
      message += `${index + 1}. ${suspiciousFlag}*${withdrawal.amount.toFixed(2)} USDT*\n`;
      message += `   üë§ ${user.firstName} ${user.lastName || ''} (${username})\n`;
      message += `   üì± ID: \`${user.telegramId}\`\n`;
      message += `   üè¶ –ü–æ–ª—É—á–∞—Ç–µ–ª—å: \`${withdrawal.recipient}\`\n`;
      message += `   üí∞ –ë–∞–ª–∞–Ω—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: ${user.balance.toFixed(2)} USDT\n`;
      message += `   üìÖ –°–æ–∑–¥–∞–Ω: ${new Date(withdrawal.createdAt).toLocaleString('ru-RU')}\n`;
      
      if (withdrawal.comment) {
        message += `   üí¨ –ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π: ${withdrawal.comment}\n`;
      }
      
      if (withdrawal.metadata?.suspicious) {
        message += `   ‚ö†Ô∏è –ü–æ–¥–æ–∑—Ä–∏—Ç–µ–ª—å–Ω—ã–π: ${withdrawal.metadata.suspicionReason}\n`;
      }
      
      message += '\n';
      
      // –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫–∏ –æ–¥–æ–±—Ä–µ–Ω–∏—è/–æ—Ç–∫–ª–æ–Ω–µ–Ω–∏—è
      buttons.push([
        Markup.button.callback('‚úÖ –û–¥–æ–±—Ä–∏—Ç—å', `approve_withdrawal_${withdrawal._id}`),
        Markup.button.callback('‚ùå –û—Ç–∫–ª–æ–Ω–∏—Ç—å', `reject_withdrawal_${withdrawal._id}`)
      ]);
    });
    
    if (withdrawals.length > 5) {
      message += `\n... –∏ –µ—â–µ ${withdrawals.length - 5} –≤—ã–≤–æ–¥–æ–≤`;
    }
    
    // –î–æ–±–∞–≤–ª—è–µ–º –æ–±—â–∏–µ –∫–Ω–æ–ø–∫–∏
    buttons.push([
      Markup.button.callback('üìã –í—Å–µ –≤—ã–≤–æ–¥—ã', 'transactions_history'),
      Markup.button.callback('üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞', 'transactions_stats')
    ]);
    
    buttons.push([
      Markup.button.callback('üîÑ –û–±–Ω–æ–≤–∏—Ç—å', 'transactions_pending'),
      Markup.button.callback('‚óÄÔ∏è –ù–∞–∑–∞–¥', 'transactions_menu')
    ]);
    
    const keyboard = Markup.inlineKeyboard(buttons);
    
    if (ctx.callbackQuery) {
      await ctx.editMessageText(message, {
        parse_mode: 'Markdown',
        ...keyboard
      });
    } else {
      await ctx.reply(message, {
        parse_mode: 'Markdown',
        ...keyboard
      });
    }
    
  } catch (error) {
    console.error('ADMIN: –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –æ–∂–∏–¥–∞—é—â–∏—Ö –≤—ã–≤–æ–¥–æ–≤:', error);
    const errorMessage = `‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –≤—ã–≤–æ–¥–æ–≤: ${error.message}`;
    
    if (ctx.callbackQuery) {
      await ctx.answerCbQuery(errorMessage);
    } else {
      await ctx.reply(errorMessage);
    }
  }
}

/**
 * –û–¥–æ–±—Ä–∏—Ç—å –≤—ã–≤–æ–¥
 */
async function approveWithdrawal(ctx, withdrawalId) {
  console.log('ADMIN: –û–¥–æ–±—Ä–µ–Ω–∏–µ –≤—ã–≤–æ–¥–∞:', withdrawalId);
  
  try {
    const response = await apiClient.post(`/admin/withdrawals/${withdrawalId}/approve`);
    
    if (!response.data.success) {
      throw new Error(response.data.message || '–û—à–∏–±–∫–∞ –æ–¥–æ–±—Ä–µ–Ω–∏—è –≤—ã–≤–æ–¥–∞');
    }
    
    const withdrawal = response.data.data;
    
    await ctx.answerCbQuery('‚úÖ –í—ã–≤–æ–¥ –æ–¥–æ–±—Ä–µ–Ω');
    
    // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ
    await ctx.reply(
      `‚úÖ *–í—ã–≤–æ–¥ –æ–¥–æ–±—Ä–µ–Ω –∏ –æ–±—Ä–∞–±–æ—Ç–∞–Ω*\n\n` +
      `üí∞ –°—É–º–º–∞: ${withdrawal.amount.toFixed(2)} USDT\n` +
      `üë§ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: ${withdrawal.user.firstName} ${withdrawal.user.lastName || ''}\n` +
      `üè¶ –ü–æ–ª—É—á–∞—Ç–µ–ª—å: \`${withdrawal.recipient}\`\n` +
      `üìÖ –í—Ä–µ–º—è: ${new Date().toLocaleString('ru-RU')}`,
      {
        parse_mode: 'Markdown',
        ...Markup.inlineKeyboard([[
          Markup.button.callback('‚è≥ –ö –æ–∂–∏–¥–∞—é—â–∏–º', 'transactions_pending')
        ]])
      }
    );
    
  } catch (error) {
    console.error('ADMIN: –û—à–∏–±–∫–∞ –æ–¥–æ–±—Ä–µ–Ω–∏—è –≤—ã–≤–æ–¥–∞:', error);
    await ctx.answerCbQuery(`‚ùå –û—à–∏–±–∫–∞: ${error.message}`);
  }
}

/**
 * –û—Ç–∫–ª–æ–Ω–∏—Ç—å –≤—ã–≤–æ–¥
 */
async function rejectWithdrawal(ctx, withdrawalId) {
  console.log('ADMIN: –û—Ç–∫–ª–æ–Ω–µ–Ω–∏–µ –≤—ã–≤–æ–¥–∞:', withdrawalId);
  
  ctx.session = ctx.session || {};
  ctx.session.rejectingWithdrawal = {
    withdrawalId: withdrawalId,
    step: 'reason'
  };
  
  const message = '‚ùå *–û—Ç–∫–ª–æ–Ω–µ–Ω–∏–µ –≤—ã–≤–æ–¥–∞*\n\n–í–≤–µ–¥–∏—Ç–µ –ø—Ä–∏—á–∏–Ω—É –æ—Ç–∫–ª–æ–Ω–µ–Ω–∏—è:';
  const keyboard = Markup.inlineKeyboard([[
    Markup.button.callback('üîô –û—Ç–º–µ–Ω–∞', 'transactions_pending')
  ]]);
  
  await ctx.reply(message, {
    parse_mode: 'Markdown',
    ...keyboard
  });
}

/**
 * –û–±—Ä–∞–±–æ—Ç–∞—Ç—å –æ—Ç–∫–ª–æ–Ω–µ–Ω–∏–µ –≤—ã–≤–æ–¥–∞
 */
async function handleWithdrawalRejection(ctx) {
  if (!ctx.session || !ctx.session.rejectingWithdrawal) {
    return;
  }
  
  const session = ctx.session.rejectingWithdrawal;
  const reason = ctx.message.text.trim();
  
  if (reason.length < 5) {
    await ctx.reply('‚ùå –ü—Ä–∏—á–∏–Ω–∞ –¥–æ–ª–∂–Ω–∞ —Å–æ–¥–µ—Ä–∂–∞—Ç—å –º–∏–Ω–∏–º—É–º 5 —Å–∏–º–≤–æ–ª–æ–≤:');
    return;
  }
  
  try {
    const response = await apiClient.post(`/admin/withdrawals/${session.withdrawalId}/reject`, {
      reason: reason
    });
    
    if (!response.data.success) {
      throw new Error(response.data.message || '–û—à–∏–±–∫–∞ –æ—Ç–∫–ª–æ–Ω–µ–Ω–∏—è –≤—ã–≤–æ–¥–∞');
    }
    
    const withdrawal = response.data.data;
    
    await ctx.reply(
      `‚ùå *–í—ã–≤–æ–¥ –æ—Ç–∫–ª–æ–Ω–µ–Ω*\n\n` +
      `üí∞ –°—É–º–º–∞: ${withdrawal.amount.toFixed(2)} USDT\n` +
      `üë§ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: ${withdrawal.user.firstName} ${withdrawal.user.lastName || ''}\n` +
      `üìã –ü—Ä–∏—á–∏–Ω–∞: ${reason}\n` +
      `üìÖ –í—Ä–µ–º—è: ${new Date().toLocaleString('ru-RU')}\n\n` +
      `üí∞ –°—Ä–µ–¥—Å—Ç–≤–∞ –≤–æ–∑–≤—Ä–∞—â–µ–Ω—ã –Ω–∞ –±–∞–ª–∞–Ω—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è`,
      {
        parse_mode: 'Markdown',
        ...Markup.inlineKeyboard([[
          Markup.button.callback('‚è≥ –ö –æ–∂–∏–¥–∞—é—â–∏–º', 'transactions_pending')
        ]])
      }
    );
    
    delete ctx.session.rejectingWithdrawal;
    
  } catch (error) {
    console.error('ADMIN: –û—à–∏–±–∫–∞ –æ—Ç–∫–ª–æ–Ω–µ–Ω–∏—è –≤—ã–≤–æ–¥–∞:', error);
    await ctx.reply(`‚ùå –û—à–∏–±–∫–∞ –æ—Ç–∫–ª–æ–Ω–µ–Ω–∏—è –≤—ã–≤–æ–¥–∞: ${error.message}`);
  }
}

/**
 * –ü–æ–∫–∞–∑–∞—Ç—å –∏—Å—Ç–æ—Ä–∏—é —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π
 */
async function showTransactionsHistory(ctx, page = 1) {
  console.log('ADMIN: –ó–∞–ø—Ä–æ—Å –∏—Å—Ç–æ—Ä–∏–∏ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π, —Å—Ç—Ä–∞–Ω–∏—Ü–∞:', page);
  
  try {
    const response = await apiClient.get('/admin/withdrawals', {
      params: { 
        limit: 10,
        skip: (page - 1) * 10
      }
    });
    
    if (!response.data.success) {
      throw new Error(response.data.message || '–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∏—Å—Ç–æ—Ä–∏–∏');
    }
    
    const data = response.data.data;
    const withdrawals = data.withdrawals;
    const total = data.total;
    const totalPages = data.totalPages;
    
    if (withdrawals.length === 0) {
      const message = 'üìã *–ò—Å—Ç–æ—Ä–∏—è —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π*\n\n–¢—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã.';
      const keyboard = Markup.inlineKeyboard([[
        Markup.button.callback('‚óÄÔ∏è –ù–∞–∑–∞–¥', 'transactions_menu')
      ]]);
      
      if (ctx.callbackQuery) {
        await ctx.editMessageText(message, {
          parse_mode: 'Markdown',
          ...keyboard
        });
      } else {
        await ctx.reply(message, {
          parse_mode: 'Markdown',
          ...keyboard
        });
      }
      return;
    }
    
    let message = `üìã *–ò—Å—Ç–æ—Ä–∏—è —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π* (—Å—Ç—Ä. ${page}/${totalPages})\n\n`;
    
    withdrawals.forEach((withdrawal, index) => {
      const user = withdrawal.user;
      const username = user?.username ? `@${user.username}` : '–ù–µ—Ç username';
      
      const statusEmojis = {
        'pending': '‚è≥',
        'approved': '‚úÖ',
        'processing': 'üîÑ',
        'completed': '‚úÖ',
        'rejected': '‚ùå',
        'failed': 'üí•'
      };
      
      const statusEmoji = statusEmojis[withdrawal.status] || '‚ùì';
      
      message += `${(page - 1) * 10 + index + 1}. ${statusEmoji} *${withdrawal.amount.toFixed(2)} USDT*\n`;
      message += `   üë§ ${user?.firstName || '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ'} ${user?.lastName || ''}\n`;
      message += `   üè¶ ${withdrawal.recipient}\n`;
      message += `   üìä –°—Ç–∞—Ç—É—Å: ${withdrawal.status}\n`;
      message += `   üìÖ ${new Date(withdrawal.createdAt).toLocaleDateString('ru-RU')}\n`;
      
      if (withdrawal.rejectionReason) {
        message += `   ‚ùå –ü—Ä–∏—á–∏–Ω–∞: ${withdrawal.rejectionReason}\n`;
      }
      
      message += '\n';
    });
    
    // –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –Ω–∞–≤–∏–≥–∞—Ü–∏–µ–π
    const buttons = [];
    
    // –ö–Ω–æ–ø–∫–∏ –Ω–∞–≤–∏–≥–∞—Ü–∏–∏
    if (page > 1 || page < totalPages) {
      const navButtons = [];
      if (page > 1) {
        navButtons.push(Markup.button.callback('‚¨ÖÔ∏è –ü—Ä–µ–¥.', `transactions_history_${page - 1}`));
      }
      if (page < totalPages) {
        navButtons.push(Markup.button.callback('–°–ª–µ–¥. ‚û°Ô∏è', `transactions_history_${page + 1}`));
      }
      buttons.push(navButtons);
    }
    
    // –§–∏–ª—å—Ç—Ä—ã
    buttons.push([
      Markup.button.callback('‚è≥ –û–∂–∏–¥–∞—é—â–∏–µ', 'filter_pending'),
      Markup.button.callback('‚úÖ –ó–∞–≤–µ—Ä—à–µ–Ω–Ω—ã–µ', 'filter_completed'),
      Markup.button.callback('‚ùå –û—Ç–∫–ª–æ–Ω–µ–Ω–Ω—ã–µ', 'filter_rejected')
    ]);
    
    buttons.push([
      Markup.button.callback('üîÑ –û–±–Ω–æ–≤–∏—Ç—å', 'transactions_history'),
      Markup.button.callback('‚óÄÔ∏è –ù–∞–∑–∞–¥', 'transactions_menu')
    ]);
    
    const keyboard = Markup.inlineKeyboard(buttons);
    
    if (ctx.callbackQuery) {
      await ctx.editMessageText(message, {
        parse_mode: 'Markdown',
        ...keyboard
      });
    } else {
      await ctx.reply(message, {
        parse_mode: 'Markdown',
        ...keyboard
      });
    }
    
  } catch (error) {
    console.error('ADMIN: –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∏—Å—Ç–æ—Ä–∏–∏ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π:', error);
    const errorMessage = `‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∏—Å—Ç–æ—Ä–∏–∏: ${error.message}`;
    
    if (ctx.callbackQuery) {
      await ctx.answerCbQuery(errorMessage);
    } else {
      await ctx.reply(errorMessage);
    }
  }
}

/**
 * –ü–æ–∫–∞–∑–∞—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π
 */
async function showTransactionsStats(ctx) {
  console.log('ADMIN: –ó–∞–ø—Ä–æ—Å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π');
  
  try {
    const response = await apiClient.get('/admin/withdrawals/stats');
    
    if (!response.data.success) {
      throw new Error(response.data.message || '–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏');
    }
    
    const stats = response.data.data;
    
    let message = 'üìä *–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π*\n\n';
    
    message += `**–û–±—â–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:**\n`;
    message += `üí∞ –í—Å–µ–≥–æ –≤—ã–≤–æ–¥–æ–≤: ${stats.totalWithdrawals || 0}\n`;
    message += `üíµ –û–±—â–∞—è —Å—É–º–º–∞: ${(stats.totalAmount || 0).toFixed(2)} USDT\n`;
    message += `üìà –°—Ä–µ–¥–Ω–∏–π –≤—ã–≤–æ–¥: ${(stats.averageAmount || 0).toFixed(2)} USDT\n\n`;
    
    message += `**–ü–æ —Å—Ç–∞—Ç—É—Å–∞–º:**\n`;
    message += `‚è≥ –û–∂–∏–¥–∞—é—â–∏–µ: ${stats.pending || 0} (${(stats.pendingAmount || 0).toFixed(2)} USDT)\n`;
    message += `‚úÖ –ó–∞–≤–µ—Ä—à–µ–Ω–Ω—ã–µ: ${stats.completed || 0} (${(stats.completedAmount || 0).toFixed(2)} USDT)\n`;
    message += `‚ùå –û—Ç–∫–ª–æ–Ω–µ–Ω–Ω—ã–µ: ${stats.rejected || 0} (${(stats.rejectedAmount || 0).toFixed(2)} USDT)\n`;
    message += `üí• –ù–µ—É–¥–∞—á–Ω—ã–µ: ${stats.failed || 0} (${(stats.failedAmount || 0).toFixed(2)} USDT)\n\n`;
    
    message += `**–ó–∞ —Å–µ–≥–æ–¥–Ω—è:**\n`;
    message += `üìä –í—ã–≤–æ–¥–æ–≤: ${stats.todayWithdrawals || 0}\n`;
    message += `üí∞ –°—É–º–º–∞: ${(stats.todayAmount || 0).toFixed(2)} USDT\n\n`;
    
    message += `**–ó–∞ –Ω–µ–¥–µ–ª—é:**\n`;
    message += `üìà –í—ã–≤–æ–¥–æ–≤: ${stats.weekWithdrawals || 0}\n`;
    message += `üíµ –°—É–º–º–∞: ${(stats.weekAmount || 0).toFixed(2)} USDT\n\n`;
    
    message += `**–¢—Ä–µ–±—É—é—â–∏–µ –æ–¥–æ–±—Ä–µ–Ω–∏—è:**\n`;
    message += `‚ö†Ô∏è –í –æ—á–µ—Ä–µ–¥–∏: ${stats.requiresApproval || 0}\n`;
    message += `üö® –ü–æ–¥–æ–∑—Ä–∏—Ç–µ–ª—å–Ω—ã—Ö: ${stats.suspicious || 0}`;
    
    const keyboard = Markup.inlineKeyboard([
      [Markup.button.callback('üîÑ –û–±–Ω–æ–≤–∏—Ç—å', 'transactions_stats')],
      [Markup.button.callback('‚óÄÔ∏è –ù–∞–∑–∞–¥', 'transactions_menu')]
    ]);
    
    if (ctx.callbackQuery) {
      await ctx.editMessageText(message, {
        parse_mode: 'Markdown',
        ...keyboard
      });
    } else {
      await ctx.reply(message, {
        parse_mode: 'Markdown',
        ...keyboard
      });
    }
    
  } catch (error) {
    console.error('ADMIN: –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π:', error);
    const errorMessage = `‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏: ${error.message}`;
    
    if (ctx.callbackQuery) {
      await ctx.answerCbQuery(errorMessage);
    } else {
      await ctx.reply(errorMessage);
    }
  }
}

/**
 * –ü–æ–∫–∞–∑–∞—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –¥–µ–ø–æ–∑–∏—Ç–∞—Ö
 */
async function showDepositsInfo(ctx) {
  console.log('ADMIN: –ó–∞–ø—Ä–æ—Å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –¥–µ–ø–æ–∑–∏—Ç–∞—Ö');
  
  try {
    // –ü–æ–ª—É—á–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –¥–µ–ø–æ–∑–∏—Ç–æ–≤
    const response = await apiClient.get('/admin/finance/state');
    
    if (!response.data.success) {
      throw new Error(response.data.message || '–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏');
    }
    
    const stats = response.data.data;
    
    let message = 'üè¶ *–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –¥–µ–ø–æ–∑–∏—Ç–∞—Ö*\n\n';
    
    message += `**–û–±—â–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:**\n`;
    message += `üí∞ –í—Å–µ–≥–æ –¥–µ–ø–æ–∑–∏—Ç–æ–≤: ${stats.totalDeposits || 0}\n`;
    message += `üíµ –û–±—â–∞—è —Å—É–º–º–∞: ${(stats.totalDepositAmount || 0).toFixed(2)} USDT\n`;
    message += `üìà –°—Ä–µ–¥–Ω–∏–π –¥–µ–ø–æ–∑–∏—Ç: ${(stats.averageDeposit || 0).toFixed(2)} USDT\n\n`;
    
    message += `**–ó–∞ —Å–µ–≥–æ–¥–Ω—è:**\n`;
    message += `üìä –î–µ–ø–æ–∑–∏—Ç–æ–≤: ${stats.todayDeposits || 0}\n`;
    message += `üí∞ –°—É–º–º–∞: ${(stats.todayDepositAmount || 0).toFixed(2)} USDT\n\n`;
    
    message += `**–ó–∞ –Ω–µ–¥–µ–ª—é:**\n`;
    message += `üìà –î–µ–ø–æ–∑–∏—Ç–æ–≤: ${stats.weekDeposits || 0}\n`;
    message += `üíµ –°—É–º–º–∞: ${(stats.weekDepositAmount || 0).toFixed(2)} USDT\n\n`;
    
    message += `**–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π:**\n`;
    message += `üë• –í—Å–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π —Å –¥–µ–ø–æ–∑–∏—Ç–∞–º–∏: ${stats.usersWithDeposits || 0}\n`;
    message += `üìä –ü—Ä–æ—Ü–µ–Ω—Ç –æ—Ç –æ–±—â–µ–≥–æ —á–∏—Å–ª–∞: ${((stats.usersWithDeposits || 0) / (stats.totalUsers || 1) * 100).toFixed(1)}%\n`;
    message += `üîÑ –ê–∫—Ç–∏–≤–Ω—ã—Ö –¥–µ–ø–æ–∑–∏—Ç–æ—Ä–æ–≤: ${stats.activeDepositors || 0}`;
    
    const keyboard = Markup.inlineKeyboard([
      [Markup.button.callback('üìã –ò—Å—Ç–æ—Ä–∏—è –¥–µ–ø–æ–∑–∏—Ç–æ–≤', 'deposits_history')],
      [Markup.button.callback('üë• –¢–æ–ø –¥–µ–ø–æ–∑–∏—Ç–æ—Ä—ã', 'deposits_top')],
      [Markup.button.callback('üîÑ –û–±–Ω–æ–≤–∏—Ç—å', 'transactions_deposits')],
      [Markup.button.callback('‚óÄÔ∏è –ù–∞–∑–∞–¥', 'transactions_menu')]
    ]);
    
    if (ctx.callbackQuery) {
      await ctx.editMessageText(message, {
        parse_mode: 'Markdown',
        ...keyboard
      });
    } else {
      await ctx.reply(message, {
        parse_mode: 'Markdown',
        ...keyboard
      });
    }
    
  } catch (error) {
    console.error('ADMIN: –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –¥–µ–ø–æ–∑–∏—Ç–∞—Ö:', error);
    const errorMessage = `‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏: ${error.message}`;
    
    if (ctx.callbackQuery) {
      await ctx.answerCbQuery(errorMessage);
    } else {
      await ctx.reply(errorMessage);
    }
  }
}

module.exports = {
  showPendingWithdrawals,
  approveWithdrawal,
  rejectWithdrawal,
  handleWithdrawalRejection,
  showTransactionsHistory,
  showTransactionsStats,
  showDepositsInfo
};