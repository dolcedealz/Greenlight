// bot/src/handlers/duel/inline-duel.handler.js

const { Markup } = require('telegraf');
const { validateDuelParams, generateShortId, getGameConfig, formatDuelMessage } = require('./duel-utils');
const duelGameHandler = require('./duel-game.handler');
const apiService = require('../../services/api.service');

/**
 * –û–±—Ä–∞–±–æ—Ç—á–∏–∫ inline –¥—É—ç–ª–µ–π –¥–ª—è –ª–∏—á–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
 */
class InlineDuelHandler {
  
  constructor() {
    // –í—Ä–µ–º–µ–Ω–Ω–æ–µ —Ö—Ä–∞–Ω–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö inline –¥—É—ç–ª–µ–π
    this.inlineData = new Map();
    
    // –ê–≤—Ç–æ–æ—á–∏—Å—Ç–∫–∞ —Å—Ç–∞—Ä—ã—Ö –¥–∞–Ω–Ω—ã—Ö –∫–∞–∂–¥—ã–µ 30 –º–∏–Ω—É—Ç
    setInterval(() => {
      const thirtyMinutesAgo = Date.now() - 30 * 60 * 1000;
      for (const [key, data] of this.inlineData) {
        if (data.timestamp < thirtyMinutesAgo) {
          this.inlineData.delete(key);
        }
      }
    }, 30 * 60 * 1000);
  }
  
  /**
   * –û–±—Ä–∞–±–æ—Ç–∫–∞ inline –∑–∞–ø—Ä–æ—Å–æ–≤ –¥–ª—è –¥—É—ç–ª–µ–π
   */
  handleInlineQuery(bot) {
    bot.on('inline_query', async (ctx) => {
      try {
        const query = ctx.inlineQuery.query.trim();
        const userId = ctx.from.id;
        const username = ctx.from.username;
        
        console.log(`üì• Inline query –ø–æ–ª—É—á–µ–Ω: {
  query: '${query}',
  user: '${username}',
  userId: '${userId}',
  rawQuery: '${query}',
  queryId: '${ctx.inlineQuery.id}'
}`);
        
        const results = [];
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞ duel –∫–æ–º–∞–Ω–¥—É
        const duelMatch = query.match(/^duel\s+@?(\w+)\s+(\d+)\s+([üé≤üéØ‚öΩüèÄüé≥üé∞])\s+(bo[1357])$/i);
        
        if (duelMatch) {
          console.log(`üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ duel match: {
  query: '${query}',
  matched: true,
  matchGroups: ${JSON.stringify(duelMatch, null, 2)}
}`);
          
          const [, targetUsername, amount, gameType, format] = duelMatch;
          
          // –í–∞–ª–∏–¥–∞—Ü–∏—è –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤
          const validation = validateDuelParams(targetUsername, amount, gameType, format);
          
          if (validation.isValid) {
            const gameConfig = getGameConfig(gameType);
            const shortId = generateShortId(userId, targetUsername);
            
            // –°–æ—Ö—Ä–∞–Ω—è–µ–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è –ø–æ—Å–ª–µ–¥—É—é—â–µ–≥–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è
            this.inlineData.set(shortId, {
              challengerId: userId,
              challengerUsername: username,
              targetUsername: validation.params.targetUsername,
              amount: validation.params.amount,
              gameType: validation.params.gameType,
              format: validation.params.format,
              timestamp: Date.now()
            });
            
            console.log(`üéÆ –ü–∞—Ä—Å–∏–Ω–≥ –¥—É—ç–ª–∏: {
  targetUsername: '${validation.params.targetUsername}',
  amount: ${validation.params.amount},
  gameType: '${validation.params.gameType}',
  format: '${validation.params.format}',
  challengerUsername: '${username}',
  challengerId: ${userId},
  shortId: '${shortId}'
}`);
            
            results.push({
              type: 'article',
              id: `duel_${Date.now()}_${shortId.split('_')[1]}`,
              title: `${gameConfig.emoji} –î—É—ç–ª—å —Å @${targetUsername}`,
              description: `${validation.params.amount} USDT ‚Ä¢ ${gameConfig.name} ‚Ä¢ ${format.toUpperCase()}`,
              input_message_content: {
                message_text: `üéÆ **–ü–†–ò–ì–õ–ê–®–ï–ù–ò–ï –ù–ê –î–£–≠–õ–¨** üéÆ\n\n` +
                             `üë§ –û—Ç: @${username}\n` +
                             `üéØ –í—ã–∑—ã–≤–∞–µ—Ç: @${targetUsername}\n` +
                             `${gameConfig.emoji} –ò–≥—Ä–∞: ${gameConfig.name}\n` +
                             `üí∞ –°—Ç–∞–≤–∫–∞: ${validation.params.amount} USDT –∫–∞–∂–¥—ã–π\n` +
                             `üèÜ –§–æ—Ä–º–∞—Ç: ${format.toUpperCase()}\n\n` +
                             `‚è± –í—Ä–µ–º—è –Ω–∞ –æ—Ç–≤–µ—Ç: 5 –º–∏–Ω—É—Ç`,
                parse_mode: 'Markdown'
              },
              reply_markup: {
                inline_keyboard: [
                  [
                    {
                      text: '‚úÖ –ü—Ä–∏–Ω—è—Ç—å –≤—ã–∑–æ–≤',
                      callback_data: `inline_accept_${shortId}`
                    },
                    {
                      text: '‚ùå –û—Ç–∫–ª–æ–Ω–∏—Ç—å',
                      callback_data: `inline_decline_${shortId}`
                    }
                  ],
                  [
                    {
                      text: 'üìã –ü—Ä–∞–≤–∏–ª–∞ –∏–≥—Ä—ã',
                      callback_data: `inline_rules_${validation.params.gameType}`
                    }
                  ]
                ]
              }
            });
            
            console.log(`üíæ –°–æ—Ö—Ä–∞–Ω–µ–Ω—ã –¥–∞–Ω–Ω—ã–µ –¥–ª—è shortId: ${shortId}`);
          }
        }
        
        // –í—Å–µ–≥–¥–∞ –¥–æ–±–∞–≤–ª—è–µ–º —Ç–µ—Å—Ç–æ–≤—ã–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏
        results.push({
          type: 'article',
          id: 'always_test',
          title: 'üß™ –¢–µ—Å—Ç inline mode',
          description: '–î–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è inline —Ä–µ–∂–∏–º–∞',
          input_message_content: {
            message_text: 'üß™ –¢–µ—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ inline —Ä–µ–∂–∏–º–∞\n\n–§–æ—Ä–º–∞—Ç: `duel @username —Å—É–º–º–∞ –∏–≥—Ä–∞ —Ñ–æ—Ä–º–∞—Ç`\n–ü—Ä–∏–º–µ—Ä: `duel @player 100 üé≤ bo3`',
            parse_mode: 'Markdown'
          }
        });
        
        console.log(`üì§ –û—Ç–ø—Ä–∞–≤–ª—è–µ–º inline —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã: {
  resultsCount: ${results.length},
  results: [
    ${results.map(r => `{
      id: '${r.id}',
      title: '${r.title}',
      hasButtons: ${!!r.reply_markup},
      buttonCount: ${r.reply_markup?.inline_keyboard?.flat()?.length || 0}
    }`).join(',\n    ')}
  ]
}`);
        
        await ctx.answerInlineQuery(results, {
          cache_time: 0,
          is_personal: true
        });
        
      } catch (error) {
        console.error('–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ inline query:', error);
        await ctx.answerInlineQuery([]);
      }
    });
  }
  
  /**
   * –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–Ω–æ–ø–æ–∫ inline –¥—É—ç–ª–µ–π
   */
  handleInlineCallbacks(bot) {
    // –ü—Ä–∏–Ω—è—Ç–∏–µ inline –¥—É—ç–ª–∏
    bot.action(/^inline_accept_(.+)$/, async (ctx) => {
      try {
        const shortId = ctx.match[1];
        const acceptorId = ctx.from.id.toString();
        const acceptorUsername = ctx.from.username;
        
        console.log(`üéØ –ü—Ä–∏–Ω—è—Ç–∏–µ inline –¥—É—ç–ª–∏ –ø–æ shortId: ${shortId}`);
        
        const duelData = this.inlineData.get(shortId);
        
        if (!duelData) {
          await ctx.answerCbQuery('‚ùå –ü—Ä–∏–≥–ª–∞—à–µ–Ω–∏–µ –∏—Å—Ç–µ–∫–ª–æ –∏–ª–∏ –Ω–µ–¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–æ');
          return;
        }
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ –ø—Ä–∏–Ω–∏–º–∞—é—â–∏–π - —ç—Ç–æ —Ü–µ–ª–µ–≤–æ–π –∏–≥—Ä–æ–∫
        if (duelData.targetUsername !== acceptorUsername) {
          await ctx.answerCbQuery('‚ùå –≠—Ç–æ –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏–µ –Ω–µ –¥–ª—è –≤–∞—Å');
          return;
        }
        
        console.log(`üìã –î–∞–Ω–Ω—ã–µ –¥—É—ç–ª–∏: {
  challengerId: ${duelData.challengerId},
  challengerUsername: '${duelData.challengerUsername}',
  targetUsername: '${duelData.targetUsername}',
  amount: ${duelData.amount},
  gameType: '${duelData.gameType}',
  format: '${duelData.format}',
  acceptorId: '${acceptorId}',
  acceptorUsername: '${acceptorUsername}'
}`);
        
        // –°–æ–∑–¥–∞–µ–º –¥—É—ç–ª—å —á–µ—Ä–µ–∑ API
        const createDuelData = {
          challengerId: duelData.challengerId,
          challengerUsername: duelData.challengerUsername,
          opponentId: acceptorId,
          opponentUsername: acceptorUsername,
          gameType: duelData.gameType,
          format: duelData.format,
          amount: duelData.amount,
          chatId: 'inline_private',
          chatType: 'private'
        };
        
        console.log(`üîÑ –°–æ–∑–¥–∞–Ω–∏–µ –¥—É—ç–ª–∏ —á–µ—Ä–µ–∑ API:`, createDuelData);
        
        const result = await apiService.createDuel(createDuelData);
        
        if (result.success) {
          const createdDuel = result.data.duel;
          const sessionId = result.data.sessionId;
          
          await ctx.answerCbQuery('‚úÖ –î—É—ç–ª—å –ø—Ä–∏–Ω—è—Ç–∞! –ù–∞—á–∏–Ω–∞–µ–º –∏–≥—Ä—É...');
          
          // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∏–≥—Ä–æ–≤—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è –æ–±–æ–∏–º –∏–≥—Ä–æ–∫–∞–º
          await this.sendGameMessages(ctx, createdDuel, sessionId);
          
          // –£–¥–∞–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ –≤—Ä–µ–º–µ–Ω–Ω–æ–≥–æ —Ö—Ä–∞–Ω–∏–ª–∏—â–∞
          this.inlineData.delete(shortId);
          
        } else {
          await ctx.answerCbQuery(`‚ùå ${result.error || '–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –¥—É—ç–ª–∏'}`);
        }
        
      } catch (error) {
        console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏–Ω—è—Ç–∏—è inline –¥—É—ç–ª–∏:', error);
        await ctx.answerCbQuery('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏–Ω—è—Ç–∏—è –¥—É—ç–ª–∏');
      }
    });
    
    // –û—Ç–∫–ª–æ–Ω–µ–Ω–∏–µ inline –¥—É—ç–ª–∏
    bot.action(/^inline_decline_(.+)$/, async (ctx) => {
      try {
        const shortId = ctx.match[1];
        const duelData = this.inlineData.get(shortId);
        
        if (duelData) {
          await ctx.answerCbQuery('‚ùå –í—ã –æ—Ç–∫–ª–æ–Ω–∏–ª–∏ –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏–µ');
          
          // –£–≤–µ–¥–æ–º–ª—è–µ–º –∏–Ω–∏—Ü–∏–∞—Ç–æ—Ä–∞ –æ–± –æ—Ç–∫–ª–æ–Ω–µ–Ω–∏–∏
          try {
            await ctx.telegram.sendMessage(
              duelData.challengerId,
              `üò¢ **–ü—Ä–∏–≥–ª–∞—à–µ–Ω–∏–µ –æ—Ç–∫–ª–æ–Ω–µ–Ω–æ**\n\n` +
              `@${duelData.targetUsername} –æ—Ç–∫–ª–æ–Ω–∏–ª –≤–∞—à–µ –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏–µ –Ω–∞ –¥—É—ç–ª—å\n` +
              `${getGameConfig(duelData.gameType).emoji} ${getGameConfig(duelData.gameType).name} ‚Ä¢ ${duelData.amount} USDT`,
              { parse_mode: 'Markdown' }
            );
          } catch (notifyError) {
            console.error('–û—à–∏–±–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ–± –æ—Ç–∫–ª–æ–Ω–µ–Ω–∏–∏:', notifyError);
          }
          
          this.inlineData.delete(shortId);
        } else {
          await ctx.answerCbQuery('‚ùå –ü—Ä–∏–≥–ª–∞—à–µ–Ω–∏–µ —É–∂–µ –Ω–µ–¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–æ');
        }
      } catch (error) {
        console.error('–û—à–∏–±–∫–∞ –æ—Ç–∫–ª–æ–Ω–µ–Ω–∏—è inline –¥—É—ç–ª–∏:', error);
        await ctx.answerCbQuery('‚ùå –û—à–∏–±–∫–∞ –æ—Ç–∫–ª–æ–Ω–µ–Ω–∏—è');
      }
    });
    
    // –ü—Ä–∞–≤–∏–ª–∞ –∏–≥—Ä—ã
    bot.action(/^inline_rules_(.+)$/, async (ctx) => {
      try {
        const gameType = ctx.match[1];
        const gameConfig = getGameConfig(gameType);
        
        await ctx.answerCbQuery(
          `${gameConfig.emoji} ${gameConfig.name}: ${gameConfig.rules}`,
          { show_alert: true }
        );
      } catch (error) {
        console.error('–û—à–∏–±–∫–∞ –ø–æ–∫–∞–∑–∞ –ø—Ä–∞–≤–∏–ª:', error);
        await ctx.answerCbQuery('‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –ø—Ä–∞–≤–∏–ª');
      }
    });
  }
  
  /**
   * –û—Ç–ø—Ä–∞–≤–∫–∞ –∏–≥—Ä–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π –æ–±–æ–∏–º –∏–≥—Ä–æ–∫–∞–º
   */
  async sendGameMessages(ctx, duel, sessionId) {
    try {
      const gameConfig = getGameConfig(duel.gameType);
      const messageText = formatDuelMessage(duel, true);
      
      const keyboard = Markup.inlineKeyboard([
        [Markup.button.callback(`${gameConfig.emoji} ${gameConfig.actionText}`, `play_game_${sessionId}`)],
        [Markup.button.callback('üìä –°—Ç–∞—Ç—É—Å –¥—É—ç–ª–∏', `duel_status_${sessionId}`)]
      ]);
      
      // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –ø—Ä–∏–Ω—è–≤—à–µ–º—É –∏–≥—Ä–æ–∫—É
      await ctx.reply(
        messageText + '\n\nüöÄ **–ò–≥—Ä–∞ –Ω–∞—á–∏–Ω–∞–µ—Ç—Å—è!**',
        { 
          parse_mode: 'Markdown',
          ...keyboard
        }
      );
      
      console.log(`‚úÖ –ò–≥—Ä–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –ø—Ä–∏–Ω—è–≤—à–µ–º—É –∏–≥—Ä–æ–∫—É ${duel.opponentId}`);
      
      // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –∏–Ω–∏—Ü–∏–∞—Ç–æ—Ä—É
      await ctx.telegram.sendMessage(
        duel.challengerId,
        messageText + '\n\nüöÄ **–ò–≥—Ä–∞ –Ω–∞—á–∏–Ω–∞–µ—Ç—Å—è!**',
        { 
          parse_mode: 'Markdown',
          ...keyboard
        }
      );
      
      console.log(`‚úÖ –ò–≥—Ä–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –∏–Ω–∏—Ü–∏–∞—Ç–æ—Ä—É ${duel.challengerId}`);
      
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –∏–≥—Ä–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π:', error);
    }
  }
  
  /**
   * –û–±—Ä–∞–±–æ—Ç–∫–∞ –∏–≥—Ä–æ–≤—ã—Ö –¥–µ–π—Å—Ç–≤–∏–π –¥–ª—è inline –¥—É—ç–ª–µ–π
   */
  handleGameActions(bot) {
    // –í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ —Ö–æ–¥–∞
    bot.action(/^play_game_(.+)$/, async (ctx) => {
      try {
        const sessionId = ctx.match[1];
        const userId = ctx.from.id.toString();
        const username = ctx.from.username;
        
        // –í—ã–ø–æ–ª–Ω—è–µ–º —Ö–æ–¥ —á–µ—Ä–µ–∑ –æ–±—â–∏–π –∏–≥—Ä–æ–≤–æ–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫
        const moveResult = await duelGameHandler.makeMove(ctx, sessionId, userId, username);
        
        if (!moveResult) return;
        
        const { duel, gameResult, gameConfig } = moveResult;
        
        // –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
        const resultData = duelGameHandler.formatGameResult(
          duel, gameResult, gameConfig, userId, username
        );
        
        // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç —Ç–µ–∫—É—â–µ–º—É –∏–≥—Ä–æ–∫—É
        await ctx.reply(
          resultData.message,
          { parse_mode: 'Markdown' }
        );
        
        // –£–≤–µ–¥–æ–º–ª—è–µ–º –ø—Ä–æ—Ç–∏–≤–Ω–∏–∫–∞
        if (resultData.opponentId) {
          await duelGameHandler.notifyOpponent(
            ctx, 
            resultData.opponentId, 
            duel, 
            gameConfig, 
            resultData.isCompleted,
            resultData.roundsText
          );
        }
        
      } catch (error) {
        console.error('–û—à–∏–±–∫–∞ –∏–≥—Ä–æ–≤–æ–≥–æ –¥–µ–π—Å—Ç–≤–∏—è:', error);
        await ctx.answerCbQuery('‚ùå –û—à–∏–±–∫–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —Ö–æ–¥–∞');
      }
    });
    
    // –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç–∞—Ç—É—Å–∞ –¥—É—ç–ª–∏
    bot.action(/^duel_status_(.+)$/, async (ctx) => {
      try {
        const sessionId = ctx.match[1];
        const userId = ctx.from.id.toString();
        
        const duelData = await apiService.getDuelData(sessionId, userId, ctx.from);
        
        if (duelData.success) {
          const duel = duelData.data;
          const gameConfig = getGameConfig(duel.gameType);
          
          const statusMessage = formatDuelMessage(duel, true) + 
                               `\n\nüìä **–¢–µ–∫—É—â–∏–π —Å—á—ë—Ç:** ${duel.challengerScore}:${duel.opponentScore}\n` +
                               `üéØ **–°—Ç–∞—Ç—É—Å:** ${this.getStatusText(duel.status)}`;
          
          await ctx.answerCbQuery();
          await ctx.reply(statusMessage, { parse_mode: 'Markdown' });
        } else {
          await ctx.answerCbQuery('‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞');
        }
        
      } catch (error) {
        console.error('–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞:', error);
        await ctx.answerCbQuery('‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞');
      }
    });
  }
  
  /**
   * –ü–æ–ª—É—á–µ–Ω–∏–µ —Ç–µ–∫—Å—Ç–∞ —Å—Ç–∞—Ç—É—Å–∞
   */
  getStatusText(status) {
    const statuses = {
      'pending': '‚è≥ –û–∂–∏–¥–∞–Ω–∏–µ –ø—Ä–∏–Ω—è—Ç–∏—è',
      'accepted': '‚úÖ –ü—Ä–∏–Ω—è—Ç–∞',
      'active': 'üéÆ –ò–¥–µ—Ç –∏–≥—Ä–∞',
      'completed': 'üèÜ –ó–∞–≤–µ—Ä—à–µ–Ω–∞',
      'cancelled': '‚ùå –û—Ç–º–µ–Ω–µ–Ω–∞'
    };
    
    return statuses[status] || status;
  }
}

module.exports = new InlineDuelHandler();