// backend/src/services/withdrawal.service.js - –£–õ–£–ß–®–ï–ù–ù–ê–Ø –í–ï–†–°–ò–Ø
const axios = require('axios');
const { Withdrawal, User, Transaction } = require('../models');
const mongoose = require('mongoose');

class WithdrawalService {
  constructor() {
    this.cryptoBotApiUrl = process.env.CRYPTO_PAY_API_URL || 'https://pay.crypt.bot/api';
    this.cryptoBotToken = process.env.CRYPTO_PAY_API_TOKEN;
    
    if (!this.cryptoBotToken) {
      throw new Error('CRYPTO_PAY_API_TOKEN –Ω–µ —É–∫–∞–∑–∞–Ω –≤ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è');
    }
    
    // –°–æ–∑–¥–∞–µ–º axios instance –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å CryptoBot API
    this.api = axios.create({
      baseURL: this.cryptoBotApiUrl,
      headers: {
        'Crypto-Pay-API-Token': this.cryptoBotToken,
        'Content-Type': 'application/json'
      },
      timeout: 30000
    });

    // –î–æ–±–∞–≤–ª—è–µ–º –∏–Ω—Ç–µ—Ä—Å–µ–ø—Ç–æ—Ä –¥–ª—è –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è –∑–∞–ø—Ä–æ—Å–æ–≤
    this.api.interceptors.request.use(request => {
      console.log('üöÄ CryptoBot API Request:', {
        method: request.method.toUpperCase(),
        url: request.url,
        headers: { ...request.headers, 'Crypto-Pay-API-Token': '[HIDDEN]' },
        data: request.data
      });
      return request;
    });

    // –î–æ–±–∞–≤–ª—è–µ–º –∏–Ω—Ç–µ—Ä—Å–µ–ø—Ç–æ—Ä –¥–ª—è –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è –æ—Ç–≤–µ—Ç–æ–≤
    this.api.interceptors.response.use(
      response => {
        console.log('‚úÖ CryptoBot API Response:', {
          status: response.status,
          data: response.data
        });
        return response;
      },
      error => {
        console.error('‚ùå CryptoBot API Error:', {
          status: error.response?.status,
          data: error.response?.data,
          message: error.message
        });
        return Promise.reject(error);
      }
    );
  }

  /**
   * –ü—Ä–æ–≤–µ—Ä—è–µ—Ç –±–∞–ª–∞–Ω—Å –∫–∞–∑–∏–Ω–æ –≤ CryptoBot
   */
  async checkCasinoBalance() {
    try {
      console.log('üí∞ –ü—Ä–æ–≤–µ—Ä–∫–∞ –±–∞–ª–∞–Ω—Å–∞ –∫–∞–∑–∏–Ω–æ –≤ CryptoBot...');
      const response = await this.api.get('/getBalance');
      
      if (response.data.ok) {
        const balances = response.data.result;
        console.log('üí∞ –ë–∞–ª–∞–Ω—Å—ã –∫–∞–∑–∏–Ω–æ:', balances);
        
        // –ù–∞—Ö–æ–¥–∏–º –±–∞–ª–∞–Ω—Å USDT
        const usdtBalance = balances.find(b => b.currency_code === 'USDT');
        if (usdtBalance) {
          console.log(`üí∞ –ë–∞–ª–∞–Ω—Å USDT: ${usdtBalance.available} (–¥–æ—Å—Ç—É–ø–Ω–æ), ${usdtBalance.onhold} (–∑–∞–º–æ—Ä–æ–∂–µ–Ω–æ)`);
          return parseFloat(usdtBalance.available);
        }
        
        console.warn('‚ö†Ô∏è –ë–∞–ª–∞–Ω—Å USDT –Ω–µ –Ω–∞–π–¥–µ–Ω');
        return 0;
      }
      
      return 0;
    } catch (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –±–∞–ª–∞–Ω—Å–∞:', error);
      return 0;
    }
  }

  /**
   * –°–æ–∑–¥–∞–µ—Ç –∑–∞–ø—Ä–æ—Å –Ω–∞ –≤—ã–≤–æ–¥ —Å—Ä–µ–¥—Å—Ç–≤ —Å —É–ª—É—á—à–µ–Ω–Ω–æ–π –æ–±—Ä–∞–±–æ—Ç–∫–æ–π
   */
  async createWithdrawal(userId, withdrawalData) {
    const session = await mongoose.startSession();
    session.startTransaction();
    
    try {
      console.log(`üîÑ WITHDRAWAL: –°–æ–∑–¥–∞–Ω–∏–µ –∑–∞–ø—Ä–æ—Å–∞ –Ω–∞ –≤—ã–≤–æ–¥ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ${userId}`);
      
      const { amount, recipient, recipientType, comment, metadata } = withdrawalData;
      
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
      const user = await User.findById(userId).session(session);
      if (!user) {
        throw new Error('–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω');
      }
      
      if (user.isBlocked) {
        throw new Error('–í–∞—à –∞–∫–∫–∞—É–Ω—Ç –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω');
      }
      
      console.log(`üë§ WITHDRAWAL: –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: ${user.firstName} ${user.lastName}, –±–∞–ª–∞–Ω—Å: ${user.balance}`);
      
      // –í–∞–ª–∏–¥–∞—Ü–∏—è —Å—É–º–º—ã
      if (amount < 1) {
        throw new Error('–ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è —Å—É–º–º–∞ –≤—ã–≤–æ–¥–∞: 1 USDT');
      }
      
      if (amount > 10000) {
        throw new Error('–ú–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è —Å—É–º–º–∞ –≤—ã–≤–æ–¥–∞: 10000 USDT');
      }
      
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ—Å—Ç—å –±–∞–ª–∞–Ω—Å–∞
      if (user.balance < amount) {
        throw new Error('–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å—Ä–µ–¥—Å—Ç–≤ –Ω–∞ –±–∞–ª–∞–Ω—Å–µ');
      }
      
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –¥—Ä—É–≥–∏—Ö –∞–∫—Ç–∏–≤–Ω—ã—Ö –≤—ã–≤–æ–¥–æ–≤
      const activeWithdrawals = await Withdrawal.find({
        user: userId,
        status: { $in: ['pending', 'approved', 'processing'] }
      }).session(session);
      
      if (activeWithdrawals.length > 0) {
        console.warn(`‚ö†Ô∏è WITHDRAWAL: –£ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –µ—Å—Ç—å ${activeWithdrawals.length} –∞–∫—Ç–∏–≤–Ω—ã—Ö –≤—ã–≤–æ–¥–æ–≤`);
        throw new Error('–£ –≤–∞—Å —É–∂–µ –µ—Å—Ç—å –∞–∫—Ç–∏–≤–Ω—ã–π –∑–∞–ø—Ä–æ—Å –Ω–∞ –≤—ã–≤–æ–¥. –î–æ–∂–¥–∏—Ç–µ—Å—å –µ–≥–æ –æ–±—Ä–∞–±–æ—Ç–∫–∏.');
      }
      
      // –ù–û–í–û–ï: –ü—Ä–æ–≤–µ—Ä—è–µ–º –±–∞–ª–∞–Ω—Å –∫–∞–∑–∏–Ω–æ –ø–µ—Ä–µ–¥ —Å–æ–∑–¥–∞–Ω–∏–µ–º –≤—ã–≤–æ–¥–∞
      const casinoBalance = await this.checkCasinoBalance();
      if (casinoBalance < amount * 1.1) { // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å –∑–∞–ø–∞—Å–æ–º 10%
        console.error(`‚ùå WITHDRAWAL: –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å—Ä–µ–¥—Å—Ç–≤ –∫–∞–∑–∏–Ω–æ. –¢—Ä–µ–±—É–µ—Ç—Å—è: ${amount}, –¥–æ—Å—Ç—É–ø–Ω–æ: ${casinoBalance}`);
        throw new Error('–í—Ä–µ–º–µ–Ω–Ω–æ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–æ. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ –∏–ª–∏ —É–º–µ–Ω—å—à–∏—Ç–µ —Å—É–º–º—É.');
      }
      
      // –í–∞–ª–∏–¥–∞—Ü–∏—è –ø–æ–ª—É—á–∞—Ç–µ–ª—è
      if (recipientType === 'username') {
        if (!recipient.match(/^@?[a-zA-Z0-9_]{5,32}$/)) {
          throw new Error('–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π Telegram username');
        }
      } else if (recipientType === 'wallet') {
        if (!recipient || recipient.length < 10) {
          throw new Error('–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –∞–¥—Ä–µ—Å –∫–æ—à–µ–ª—å–∫–∞');
        }
      }
      
      // –û–ø—Ä–µ–¥–µ–ª—è–µ–º, —Ç—Ä–µ–±—É–µ—Ç –ª–∏ –æ–¥–æ–±—Ä–µ–Ω–∏—è
      const requiresApproval = amount > 300;
      
      // –ê–¢–û–ú–ê–†–ù–û–ï –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –±–∞–ª–∞–Ω—Å–∞ –∏ —Å–æ–∑–¥–∞–Ω–∏–µ –∑–∞–ø–∏—Å–∏ –æ –≤—ã–≤–æ–¥–µ
      const updatedUser = await User.findOneAndUpdate(
        { 
          _id: userId,
          balance: { $gte: amount } // –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ—Å—Ç–∏ —Å—Ä–µ–¥—Å—Ç–≤
        },
        [
          {
            $set: {
              balanceBefore: '$balance',
              balance: { $subtract: ['$balance', amount] },
              lastActivity: new Date()
            }
          }
        ],
        { 
          new: true,
          session,
          runValidators: true
        }
      );
      
      if (!updatedUser) {
        throw new Error('–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å—Ä–µ–¥—Å—Ç–≤ –∏–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω');
      }
      
      // –°–æ–∑–¥–∞–µ–º –∑–∞–ø–∏—Å—å –æ –≤—ã–≤–æ–¥–µ
      const withdrawal = new Withdrawal({
        user: userId,
        amount,
        recipient: recipient.replace('@', ''),
        recipientType,
        status: requiresApproval ? 'pending' : 'approved',
        requiresApproval,
        balanceBefore: updatedUser.balanceBefore,
        balanceAfter: updatedUser.balance,
        platformFee: 0,
        netAmount: amount,
        comment,
        userIp: metadata?.userIp,
        metadata: {
          source: metadata?.source || 'web',
          sessionId: metadata?.sessionId,
          userAgent: metadata?.userAgent
        }
      });
      
      await withdrawal.save({ session });
      
      // –°–æ–∑–¥–∞–µ–º —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—é –¥–ª—è —É—á–µ—Ç–∞
      const transaction = new Transaction({
        user: userId,
        type: 'withdrawal',
        amount: -amount,
        status: 'pending',
        description: `–ó–∞–ø—Ä–æ—Å –Ω–∞ –≤—ã–≤–æ–¥ ${amount} USDT`,
        balanceBefore: updatedUser.balanceBefore,
        balanceAfter: updatedUser.balance,
        payment: {
          invoiceId: withdrawal._id.toString(),
          paymentMethod: 'cryptobot',
          externalReference: null
        }
      });
      
      await transaction.save({ session });
      
      await session.commitTransaction();
      
      console.log(`‚úÖ WITHDRAWAL: –ó–∞–ø—Ä–æ—Å –Ω–∞ –≤—ã–≤–æ–¥ —Å–æ–∑–¥–∞–Ω: ${withdrawal._id}, —Ç—Ä–µ–±—É–µ—Ç –æ–¥–æ–±—Ä–µ–Ω–∏—è: ${requiresApproval}`);
      
      // –ï—Å–ª–∏ –Ω–µ —Ç—Ä–µ–±—É–µ—Ç –æ–¥–æ–±—Ä–µ–Ω–∏—è, —Å—Ä–∞–∑—É –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º
      if (!requiresApproval) {
        console.log(`‚ö° WITHDRAWAL: –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–≤–æ–¥–∞ ${withdrawal._id}`);
        
        // –ó–∞–ø—É—Å–∫–∞–µ–º –æ–±—Ä–∞–±–æ—Ç–∫—É –≤ —Ñ–æ–Ω–µ —Å –∑–∞–¥–µ—Ä–∂–∫–æ–π
        setTimeout(() => {
          this.processWithdrawal(withdrawal._id).catch(error => {
            console.error(`‚ùå WITHDRAWAL: –û—à–∏–±–∫–∞ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–π –æ–±—Ä–∞–±–æ—Ç–∫–∏: ${error.message}`);
          });
        }, 3000); // –ó–∞–¥–µ—Ä–∂–∫–∞ 3 —Å–µ–∫—É–Ω–¥—ã
      }
      
      return {
        withdrawalId: withdrawal._id,
        amount: withdrawal.amount,
        recipient: withdrawal.recipient,
        recipientType: withdrawal.recipientType,
        status: withdrawal.status,
        requiresApproval: withdrawal.requiresApproval,
        estimatedTime: requiresApproval ? '24-48 —á–∞—Å–æ–≤' : '5-15 –º–∏–Ω—É—Ç'
      };
      
    } catch (error) {
      await session.abortTransaction();
      console.error('‚ùå WITHDRAWAL: –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –∑–∞–ø—Ä–æ—Å–∞ –Ω–∞ –≤—ã–≤–æ–¥:', error);
      throw error;
    } finally {
      session.endSession();
    }
  }

  /**
   * –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –≤—ã–≤–æ–¥ —á–µ—Ä–µ–∑ CryptoBot —Å —É–ª—É—á—à–µ–Ω–Ω–æ–π –æ–±—Ä–∞–±–æ—Ç–∫–æ–π –æ—à–∏–±–æ–∫
   */
  async processWithdrawal(withdrawalId) {
    const session = await mongoose.startSession();
    session.startTransaction();
    
    try {
      console.log(`üîÑ WITHDRAWAL: –ù–∞—á–∞–ª–æ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –≤—ã–≤–æ–¥–∞ ${withdrawalId}`);
      
      // –ü–æ–ª—É—á–∞–µ–º –∑–∞–ø—Ä–æ—Å –Ω–∞ –≤—ã–≤–æ–¥
      const withdrawal = await Withdrawal.findById(withdrawalId)
        .populate('user')
        .session(session);
      
      if (!withdrawal) {
        throw new Error('–ó–∞–ø—Ä–æ—Å –Ω–∞ –≤—ã–≤–æ–¥ –Ω–µ –Ω–∞–π–¥–µ–Ω');
      }
      
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –º–æ–∂–Ω–æ –ª–∏ –æ–±—Ä–∞–±–æ—Ç–∞—Ç—å
      if (!withdrawal.canProcess()) {
        throw new Error('–ó–∞–ø—Ä–æ—Å –Ω–∞ –≤—ã–≤–æ–¥ –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –æ–±—Ä–∞–±–æ—Ç–∞–Ω –≤ —Ç–µ–∫—É—â–µ–º —Å—Ç–∞—Ç—É—Å–µ');
      }
      
      // –ü–æ–º–µ—á–∞–µ–º –∫–∞–∫ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º—ã–π
      await withdrawal.markAsProcessing();
      
      console.log(`üì§ WITHDRAWAL: –û—Ç–ø—Ä–∞–≤–∫–∞ –ø–µ—Ä–µ–≤–æ–¥–∞ —á–µ—Ä–µ–∑ CryptoBot`);
      console.log(`- –ü–æ–ª—É—á–∞—Ç–µ–ª—å: ${withdrawal.recipient}`);
      console.log(`- –°—É–º–º–∞: ${withdrawal.amount} USDT`);
      console.log(`- –¢–∏–ø: ${withdrawal.recipientType}`);
      
      // –ù–û–í–û–ï: –ü–æ–≤—Ç–æ—Ä–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –±–∞–ª–∞–Ω—Å–∞ –ø–µ—Ä–µ–¥ –æ—Ç–ø—Ä–∞–≤–∫–æ–π
      const casinoBalance = await this.checkCasinoBalance();
      if (casinoBalance < withdrawal.amount) {
        throw new Error(`–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å—Ä–µ–¥—Å—Ç–≤ –∫–∞–∑–∏–Ω–æ –¥–ª—è –≤—ã–≤–æ–¥–∞. –î–æ—Å—Ç—É–ø–Ω–æ: ${casinoBalance} USDT`);
      }
      
      // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∑–∞–ø—Ä–æ—Å –≤ CryptoBot –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –ø–µ—Ä–µ–≤–æ–¥–∞
      const transferData = await this.createCryptoBotTransfer(withdrawal);
      
      console.log(`‚úÖ WITHDRAWAL: –ü–µ—Ä–µ–≤–æ–¥ —Å–æ–∑–¥–∞–Ω –≤ CryptoBot:`, transferData);
      
      // –û–±–Ω–æ–≤–ª—è–µ–º –∑–∞–ø–∏—Å—å —Å –¥–∞–Ω–Ω—ã–º–∏ –æ—Ç CryptoBot
      withdrawal.cryptoBotData = {
        transferId: transferData.transfer_id,
        fee: transferData.fee || 0,
        totalAmount: transferData.amount,
        createdAt: new Date(),
        responseData: transferData
      };
      
      // –ü–æ–º–µ—á–∞–µ–º –∫–∞–∫ –∑–∞–≤–µ—Ä—à–µ–Ω–Ω—ã–π
      await withdrawal.complete({
        transferId: transferData.transfer_id,
        hash: transferData.hash,
        completedAt: new Date()
      });
      
      // –û–±–Ω–æ–≤–ª—è–µ–º —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—é
      await Transaction.updateOne(
        { 
          user: withdrawal.user._id,
          'payment.invoiceId': withdrawalId.toString()
        },
        {
          $set: {
            status: 'completed',
            'payment.externalReference': transferData.transfer_id
          }
        }
      ).session(session);
      
      await session.commitTransaction();
      
      // –û–±–Ω–æ–≤–ª—è–µ–º —Ñ–∏–Ω–∞–Ω—Å–æ–≤—É—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
      const financeService = require('./casino-finance.service');
      await financeService.updateAfterUserWithdrawal({
        amount: withdrawal.amount,
        user: withdrawal.user._id
      });
      
      console.log(`‚úÖ WITHDRAWAL: –í—ã–≤–æ–¥ ${withdrawalId} —É—Å–ø–µ—à–Ω–æ –æ–±—Ä–∞–±–æ—Ç–∞–Ω`);
      
      // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ–± —É—Å–ø–µ—à–Ω–æ–º –≤—ã–≤–æ–¥–µ
      try {
        const notificationService = require('../../../bot/src/services/notification.service');
        await notificationService.notifyWithdrawalCompleted(withdrawal.user.telegramId, withdrawal);
      } catch (notifyError) {
        console.error('‚ö†Ô∏è WITHDRAWAL: –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è:', notifyError);
      }
      
      return withdrawal;
      
    } catch (error) {
      await session.abortTransaction();
      
      console.error(`‚ùå WITHDRAWAL: –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –≤—ã–≤–æ–¥–∞ ${withdrawalId}:`, error);
      console.error('üìã WITHDRAWAL: –î–µ—Ç–∞–ª–∏ –æ—à–∏–±–∫–∏:', {
        message: error.message,
        response: error.response?.data,
        stack: error.stack
      });
      
      // –°–æ—Ö—Ä–∞–Ω—è–µ–º –¥–µ—Ç–∞–ª–∏ –æ—à–∏–±–∫–∏ –≤ withdrawal
      try {
        const withdrawal = await Withdrawal.findById(withdrawalId);
        if (withdrawal) {
          withdrawal.lastError = {
            message: error.message || 'Unknown error',
            details: error.response?.data || {},
            timestamp: new Date()
          };
          await withdrawal.markAsFailed(error);
          
          // –í–æ–∑–≤—Ä–∞—â–∞–µ–º —Å—Ä–µ–¥—Å—Ç–≤–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
          await this.refundFailedWithdrawal(withdrawal);
        }
      } catch (updateError) {
        console.error('‚ùå WITHDRAWAL: –û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞:', updateError);
      }
      
      throw error;
    } finally {
      session.endSession();
    }
  }

  /**
   * –°–æ–∑–¥–∞–µ—Ç –ø–µ—Ä–µ–≤–æ–¥ —á–µ—Ä–µ–∑ CryptoBot API —Å —É–ª—É—á—à–µ–Ω–Ω–æ–π –æ–±—Ä–∞–±–æ—Ç–∫–æ–π
   */
  async createCryptoBotTransfer(withdrawal) {
    try {
      // –ü–æ–ª—É—á–∞–µ–º –ø–æ–ª–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ withdrawal —Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º
      const fullWithdrawal = await Withdrawal.findById(withdrawal._id)
        .populate('user', 'telegramId username');
      
      if (!fullWithdrawal || !fullWithdrawal.user) {
        throw new Error('–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–ª—è –≤—ã–≤–æ–¥–∞');
      }
      
      let recipientTelegramId;
      
      if (withdrawal.recipientType === 'username') {
        // –ï—Å–ª–∏ –ø–æ–ª—É—á–∞—Ç–µ–ª—å - —ç—Ç–æ —Ç–æ—Ç –∂–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å (–≤—ã–≤–æ–¥ —Å–∞–º–æ–º—É —Å–µ–±–µ)
        if (withdrawal.recipient.toLowerCase() === fullWithdrawal.user.username?.toLowerCase()) {
          recipientTelegramId = fullWithdrawal.user.telegramId;
        } else {
          // –î–ª—è –≤—ã–≤–æ–¥–∞ –¥—Ä—É–≥–æ–º—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é –Ω—É–∂–Ω–æ –Ω–∞–π—Ç–∏ –µ–≥–æ –≤ –ë–î
          const recipientUser = await User.findOne({ 
            username: new RegExp(`^${withdrawal.recipient}$`, 'i') 
          });
          
          if (!recipientUser) {
            throw new Error(`–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å @${withdrawal.recipient} –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ —Å–∏—Å—Ç–µ–º–µ. –ü–æ–ª—É—á–∞—Ç–µ–ª—å –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω –≤ –∫–∞–∑–∏–Ω–æ.`);
          }
          
          recipientTelegramId = recipientUser.telegramId;
        }
      } else {
        throw new Error('–í—ã–≤–æ–¥ –Ω–∞ –∫–æ—à–µ–ª–µ–∫ –≤—Ä–µ–º–µ–Ω–Ω–æ –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω');
      }
      
      // –í–ê–ñ–ù–û: –ò—Å–ø–æ–ª—å–∑—É–µ–º —É–Ω–∏–∫–∞–ª—å–Ω—ã–π spend_id —Å timestamp –¥–ª—è –∏–∑–±–µ–∂–∞–Ω–∏—è –∫–æ–Ω—Ñ–ª–∏–∫—Ç–æ–≤
      const spendId = `${withdrawal._id}_${Date.now()}`;
      
      const payload = {
        user_id: recipientTelegramId,
        asset: 'USDT',
        amount: withdrawal.amount.toString(),
        spend_id: spendId, // –£–Ω–∏–∫–∞–ª—å–Ω—ã–π ID —Å timestamp
        disable_send_notification: false
      };
      
      console.log('üì§ WITHDRAWAL: –û—Ç–ø—Ä–∞–≤–∫–∞ –∑–∞–ø—Ä–æ—Å–∞ transfer –≤ CryptoBot:');
      console.log(`- –ü–æ–ª—É—á–∞—Ç–µ–ª—å: @${withdrawal.recipient} (Telegram ID: ${recipientTelegramId})`);
      console.log(`- –°—É–º–º–∞: ${payload.amount} ${payload.asset}`);
      console.log(`- Spend ID: ${payload.spend_id}`);
      
      const response = await this.api.post('/transfer', payload);
      
      if (!response.data.ok) {
        const error = response.data.error || {};
        console.error('‚ùå CryptoBot API –æ—Ç–∫–ª–æ–Ω–∏–ª –∑–∞–ø—Ä–æ—Å:', error);
        throw new Error(`CryptoBot API Error: ${error.name || 'Unknown error'}`);
      }
      
      console.log('‚úÖ WITHDRAWAL: Transfer —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω:', response.data.result);
      
      return response.data.result;
      
    } catch (error) {
      if (error.response) {
        console.error('‚ùå WITHDRAWAL: CryptoBot API Error Response:', error.response.data);
        
        const errorCode = error.response.data.error?.code;
        const errorName = error.response.data.error?.name;
        
        // –î–µ—Ç–∞–ª—å–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ –æ—à–∏–±–æ–∫
        if (errorCode === 'USER_NOT_FOUND' || errorName === 'USER_NOT_FOUND') {
          throw new Error('–ü–æ–ª—É—á–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ CryptoBot. –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ –ø–æ–ª—É—á–∞—Ç–µ–ª—å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–ª @CryptoBot.');
        } else if (errorName === 'INSUFFICIENT_FUNDS') {
          throw new Error('–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å—Ä–µ–¥—Å—Ç–≤ –Ω–∞ —Å—á–µ—Ç–µ –∫–∞–∑–∏–Ω–æ –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –≤—ã–≤–æ–¥–∞');
        } else if (errorName === 'TRANSFER_LIMIT_EXCEEDED') {
          throw new Error('–ü—Ä–µ–≤—ã—à–µ–Ω –ª–∏–º–∏—Ç –ø–µ—Ä–µ–≤–æ–¥–æ–≤. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.');
        } else if (errorName === 'USER_ID_INVALID') {
          throw new Error('–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π ID –ø–æ–ª—É—á–∞—Ç–µ–ª—è. –û–±—Ä–∞—Ç–∏—Ç–µ—Å—å –≤ –ø–æ–¥–¥–µ—Ä–∂–∫—É.');
        } else if (errorName === 'SPEND_ID_DUPLICATE') {
          throw new Error('–î—É–±–ª–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–∞–ø—Ä–æ—Å–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —á–µ—Ä–µ–∑ –Ω–µ—Å–∫–æ–ª—å–∫–æ —Å–µ–∫—É–Ω–¥.');
        } else if (errorName === 'CANNOT_ATTACH_COMMENT') {
          // –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º —ç—Ç—É –æ—à–∏–±–∫—É, —Ç–∞–∫ –∫–∞–∫ comment –Ω–µ –∫—Ä–∏—Ç–∏—á–µ–Ω
          console.warn('‚ö†Ô∏è WITHDRAWAL: –ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π –Ω–µ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç—Å—è');
        }
        
        throw new Error(`CryptoBot API: ${errorName || errorCode || '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞'}`);
      }
      throw error;
    }
  }

  /**
   * –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å—Ä–µ–¥—Å—Ç–≤–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é –ø—Ä–∏ –Ω–µ—É–¥–∞—á–Ω–æ–º –≤—ã–≤–æ–¥–µ
   */
  async refundFailedWithdrawal(withdrawal) {
    const session = await mongoose.startSession();
    session.startTransaction();
    
    try {
      console.log(`üí∏ WITHDRAWAL: –í–æ–∑–≤—Ä–∞—Ç —Å—Ä–µ–¥—Å—Ç–≤ –¥–ª—è –Ω–µ—É–¥–∞—á–Ω–æ–≥–æ –≤—ã–≤–æ–¥–∞ ${withdrawal._id}`);
      
      const user = await User.findById(withdrawal.user).session(session);
      if (!user) {
        throw new Error('–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω –¥–ª—è –≤–æ–∑–≤—Ä–∞—Ç–∞ —Å—Ä–µ–¥—Å—Ç–≤');
      }
      
      // –í–æ–∑–≤—Ä–∞—â–∞–µ–º —Å—Ä–µ–¥—Å—Ç–≤–∞
      const oldBalance = user.balance;
      const newBalance = oldBalance + withdrawal.amount;
      
      user.balance = newBalance;
      await user.save({ session });
      
      // –°–æ–∑–¥–∞–µ–º —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—é –≤–æ–∑–≤—Ä–∞—Ç–∞
      const refundTransaction = new Transaction({
        user: user._id,
        type: 'deposit',
        amount: withdrawal.amount,
        status: 'completed',
        description: `–í–æ–∑–≤—Ä–∞—Ç —Å—Ä–µ–¥—Å—Ç–≤ –∑–∞ –Ω–µ—É–¥–∞—á–Ω—ã–π –≤—ã–≤–æ–¥ #${withdrawal._id}`,
        balanceBefore: oldBalance,
        balanceAfter: newBalance
      });
      
      await refundTransaction.save({ session });
      
      await session.commitTransaction();
      
      console.log(`‚úÖ WITHDRAWAL: –°—Ä–µ–¥—Å—Ç–≤–∞ (${withdrawal.amount} USDT) –≤–æ–∑–≤—Ä–∞—â–µ–Ω—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é ${user._id}`);
      
      // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
      try {
        const notificationService = require('../../../bot/src/services/notification.service');
        await notificationService.notifyWithdrawalRejected(user.telegramId, {
          ...withdrawal.toObject(),
          rejectionReason: '–¢–µ—Ö–Ω–∏—á–µ—Å–∫–∏–µ –ø—Ä–æ–±–ª–µ–º—ã. –°—Ä–µ–¥—Å—Ç–≤–∞ –≤–æ–∑–≤—Ä–∞—â–µ–Ω—ã –Ω–∞ –±–∞–ª–∞–Ω—Å.'
        });
      } catch (notifyError) {
        console.error('‚ö†Ô∏è WITHDRAWAL: –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ –≤–æ–∑–≤—Ä–∞—Ç–µ:', notifyError);
      }
      
    } catch (error) {
      await session.abortTransaction();
      console.error('‚ùå WITHDRAWAL: –û—à–∏–±–∫–∞ –≤–æ–∑–≤—Ä–∞—Ç–∞ —Å—Ä–µ–¥—Å—Ç–≤:', error);
      throw error;
    } finally {
      session.endSession();
    }
  }

  /**
   * –ü–æ–ª—É—á–∞–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –≤—ã–≤–æ–¥–µ
   */
  async getWithdrawalInfo(withdrawalId) {
    const withdrawal = await Withdrawal.findById(withdrawalId)
      .populate('user', 'telegramId username firstName lastName')
      .populate('approvedBy', 'username firstName lastName');
    
    if (!withdrawal) {
      throw new Error('–ó–∞–ø—Ä–æ—Å –Ω–∞ –≤—ã–≤–æ–¥ –Ω–µ –Ω–∞–π–¥–µ–Ω');
    }
    
    return withdrawal;
  }

  /**
   * –ü–æ–ª—É—á–∞–µ—Ç –∏—Å—Ç–æ—Ä–∏—é –≤—ã–≤–æ–¥–æ–≤ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
   */
  async getUserWithdrawals(userId, params = {}) {
    const { limit = 20, skip = 0, status } = params;
    
    const query = { user: userId };
    if (status) {
      query.status = status;
    }
    
    const withdrawals = await Withdrawal.find(query)
      .sort({ createdAt: -1 })
      .limit(Number(limit))
      .skip(Number(skip));
    
    const total = await Withdrawal.countDocuments(query);
    
    return {
      withdrawals,
      total,
      currentPage: Math.floor(skip / limit) + 1,
      totalPages: Math.ceil(total / limit)
    };
  }

  /**
   * –û–¥–æ–±—Ä—è–µ—Ç –∑–∞–ø—Ä–æ—Å –Ω–∞ –≤—ã–≤–æ–¥ (–¥–ª—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞)
   */
  async approveWithdrawal(withdrawalId, adminId) {
    const withdrawal = await Withdrawal.findById(withdrawalId);
    
    if (!withdrawal) {
      throw new Error('–ó–∞–ø—Ä–æ—Å –Ω–∞ –≤—ã–≤–æ–¥ –Ω–µ –Ω–∞–π–¥–µ–Ω');
    }
    
    if (withdrawal.status !== 'pending') {
      throw new Error('–ú–æ–∂–Ω–æ –æ–¥–æ–±—Ä–∏—Ç—å —Ç–æ–ª—å–∫–æ –∑–∞–ø—Ä–æ—Å—ã –≤ —Å—Ç–∞—Ç—É—Å–µ "pending"');
    }
    
    await withdrawal.approve(adminId);
    
    // –ó–∞–ø—É—Å–∫–∞–µ–º –æ–±—Ä–∞–±–æ—Ç–∫—É —Å –∑–∞–¥–µ—Ä–∂–∫–æ–π
    setTimeout(() => {
      this.processWithdrawal(withdrawalId).catch(error => {
        console.error(`‚ùå WITHDRAWAL: –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –ø–æ—Å–ª–µ –æ–¥–æ–±—Ä–µ–Ω–∏—è: ${error.message}`);
      });
    }, 3000);
    
    // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
    try {
      const notificationService = require('../../../bot/src/services/notification.service');
      await notificationService.notifyWithdrawalApproved(withdrawal.user.telegramId, withdrawal);
    } catch (notifyError) {
      console.error('‚ö†Ô∏è WITHDRAWAL: –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ–± –æ–¥–æ–±—Ä–µ–Ω–∏–∏:', notifyError);
    }
    
    return withdrawal;
  }

  /**
   * –û—Ç–∫–ª–æ–Ω—è–µ—Ç –∑–∞–ø—Ä–æ—Å –Ω–∞ –≤—ã–≤–æ–¥ (–¥–ª—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞)
   */
  async rejectWithdrawal(withdrawalId, adminId, reason) {
    const withdrawal = await Withdrawal.findById(withdrawalId);
    
    if (!withdrawal) {
      throw new Error('–ó–∞–ø—Ä–æ—Å –Ω–∞ –≤—ã–≤–æ–¥ –Ω–µ –Ω–∞–π–¥–µ–Ω');
    }
    
    if (withdrawal.status !== 'pending') {
      throw new Error('–ú–æ–∂–Ω–æ –æ—Ç–∫–ª–æ–Ω–∏—Ç—å —Ç–æ–ª—å–∫–æ –∑–∞–ø—Ä–æ—Å—ã –≤ —Å—Ç–∞—Ç—É—Å–µ "pending"');
    }
    
    await withdrawal.reject(adminId, reason);
    
    // –í–æ–∑–≤—Ä–∞—â–∞–µ–º —Å—Ä–µ–¥—Å—Ç–≤–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
    await this.refundFailedWithdrawal(withdrawal);
    
    return withdrawal;
  }

  /**
   * –ü–æ–ª—É—á–∞–µ—Ç –≤—ã–≤–æ–¥—ã, —Ç—Ä–µ–±—É—é—â–∏–µ –æ–¥–æ–±—Ä–µ–Ω–∏—è
   */
  async getPendingApprovals() {
    return await Withdrawal.getPendingApprovals();
  }

  /**
   * –ü–æ–ª—É—á–∞–µ—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø–æ –≤—ã–≤–æ–¥–∞–º
   */
  async getWithdrawalStats(userId = null) {
    return await Withdrawal.getWithdrawalStats(userId);
  }
}

module.exports = new WithdrawalService();