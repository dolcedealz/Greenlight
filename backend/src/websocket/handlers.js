// backend/src/websocket/handlers.js
const { User } = require('../models');

class WebSocketHandlers {
  constructor(io) {
    this.io = io;
    this.setupEventListeners();
    console.log('üîå WEBSOCKET: –û—Å–Ω–æ–≤–Ω—ã–µ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω—ã');
  }

  setupEventListeners() {
    this.io.on('connection', (socket) => {
      console.log(`üîå WEBSOCKET: –ù–æ–≤–æ–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ: ${socket.id}`);
      
      this.setupSocketHandlers(socket);
    });
  }

  setupSocketHandlers(socket) {
    // –ê—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —á–µ—Ä–µ–∑ WebSocket
    socket.on('authenticate', async (data) => {
      try {
        const { telegramId } = data;
        
        if (telegramId) {
          const user = await User.findOne({ telegramId });
          if (user) {
            socket.userId = user._id;
            socket.join(`user_${user._id}`);
            socket.emit('authenticated', { success: true, userId: user._id });
            console.log(`üîå WEBSOCKET: –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å ${user._id} –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞–Ω`);
          } else {
            socket.emit('authenticated', { success: false, message: '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω' });
          }
        }
      } catch (error) {
        console.error('üîå WEBSOCKET: –û—à–∏–±–∫–∞ –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏:', error);
        socket.emit('authenticated', { success: false, message: '–û—à–∏–±–∫–∞ –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏' });
      }
    });

    // –ü—Ä–∏—Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ –∫ –∏–≥—Ä–æ–≤–æ–π –∫–æ–º–Ω–∞—Ç–µ
    socket.on('join_game', (gameType) => {
      if (['crash', 'coin', 'mines', 'slots'].includes(gameType)) {
        socket.join(`game_${gameType}`);
        console.log(`üîå WEBSOCKET: –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å ${socket.id} –ø—Ä–∏—Å–æ–µ–¥–∏–Ω–∏–ª—Å—è –∫ –∏–≥—Ä–µ ${gameType}`);
        socket.emit('joined_game', { gameType });
      } else {
        socket.emit('error', { message: '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —Ç–∏–ø –∏–≥—Ä—ã' });
      }
    });

    // –ü–æ–∫–∏–¥–∞–Ω–∏–µ –∏–≥—Ä–æ–≤–æ–π –∫–æ–º–Ω–∞—Ç—ã
    socket.on('leave_game', (gameType) => {
      socket.leave(`game_${gameType}`);
      console.log(`üîå WEBSOCKET: –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å ${socket.id} –ø–æ–∫–∏–Ω—É–ª –∏–≥—Ä—É ${gameType}`);
      socket.emit('left_game', { gameType });
    });

    // –ü–∏–Ω–≥ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è
    socket.on('ping', () => {
      socket.emit('pong', { timestamp: Date.now() });
    });

    // –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—Ç–∫–ª—é—á–µ–Ω–∏—è
    socket.on('disconnect', (reason) => {
      console.log(`üîå WEBSOCKET: –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å ${socket.id} –æ—Ç–∫–ª—é—á–∏–ª—Å—è. –ü—Ä–∏—á–∏–Ω–∞: ${reason}`);
      
      // –û—á–∏—Å—Ç–∫–∞ –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
      if (socket.userId) {
        socket.leave(`user_${socket.userId}`);
      }
    });

    // –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—à–∏–±–æ–∫
    socket.on('error', (error) => {
      console.error(`üîå WEBSOCKET: –û—à–∏–±–∫–∞ —Å–æ–∫–µ—Ç–∞ ${socket.id}:`, error);
    });
  }

  // –ú–µ—Ç–æ–¥ –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–º—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
  notifyUser(userId, event, data) {
    this.io.to(`user_${userId}`).emit(event, data);
  }

  // –ú–µ—Ç–æ–¥ –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –≤ –∏–≥—Ä–æ–≤—É—é –∫–æ–º–Ω–∞—Ç—É
  notifyGameRoom(gameType, event, data) {
    this.io.to(`game_${gameType}`).emit(event, data);
  }

  // –ú–µ—Ç–æ–¥ –¥–ª—è —à–∏—Ä–æ–∫–æ–≤–µ—â–∞—Ç–µ–ª—å–Ω–æ–≥–æ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
  broadcast(event, data) {
    this.io.emit(event, data);
  }
}

module.exports = WebSocketHandlers;
