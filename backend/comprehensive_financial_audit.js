#!/usr/bin/env node

/**
 * –ö–û–ú–ü–õ–ï–ö–°–ù–´–ô –§–ò–ù–ê–ù–°–û–í–´–ô –ê–£–î–ò–¢
 * 
 * –ü—Ä–æ–≤–µ—Ä—è–µ—Ç –≤—Å–µ –¥–µ–Ω–µ–∂–Ω—ã–µ –ø–æ—Ç–æ–∫–∏ –∏ —Å—Ä–∞–≤–Ω–∏–≤–∞–µ—Ç —Å —Ä–µ–∞–ª—å–Ω—ã–º –±–∞–ª–∞–Ω—Å–æ–º CryptoBot
 * –°–æ–∑–¥–∞–µ—Ç –¥–µ—Ç–∞–ª—å–Ω—ã–π –æ—Ç—á–µ—Ç –æ —Ä–∞—Å—Ö–æ–∂–¥–µ–Ω–∏—è—Ö
 */

require('dotenv').config();
const mongoose = require('mongoose');
const axios = require('axios');
const { 
  User, 
  Game, 
  Transaction, 
  Deposit, 
  Withdrawal, 
  CasinoFinance,
  ReferralEarning,
  ReferralPayout,
  Duel,
  Event,
  EventBet,
  Promocode
} = require('./src/models');
const { createLogger } = require('./src/utils/logger');

const logger = createLogger('FINANCIAL_AUDIT');

class FinancialAuditor {
  constructor() {
    this.cryptoBotToken = process.env.CRYPTO_PAY_API_TOKEN;
    this.auditResults = {
      timestamp: new Date(),
      checks: {},
      balances: {},
      discrepancies: [],
      recommendations: []
    };
  }

  async connectDB() {
    try {
      await mongoose.connect(process.env.MONGODB_URI);
      logger.info('‚úÖ –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ MongoDB —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ');
    } catch (error) {
      logger.error('‚ùå –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ MongoDB:', error);
      throw error;
    }
  }

  /**
   * –ü–æ–ª—É—á–∞–µ—Ç —Ä–µ–∞–ª—å–Ω—ã–π –±–∞–ª–∞–Ω—Å CryptoBot
   */
  async getCryptoBotBalance() {
    try {
      if (!this.cryptoBotToken) {
        throw new Error('CryptoBot —Ç–æ–∫–µ–Ω –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω');
      }

      const response = await axios.get('https://pay.crypt.bot/api/getBalance', {
        headers: {
          'Crypto-Pay-API-Token': this.cryptoBotToken
        }
      });

      if (!response.data.ok) {
        throw new Error(`CryptoBot API –æ—à–∏–±–∫–∞: ${response.data.error?.name || '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞'}`);
      }

      const usdtBalance = response.data.result.find(balance => balance.currency_code === 'USDT');
      if (!usdtBalance) {
        throw new Error('USDT –±–∞–ª–∞–Ω—Å –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ CryptoBot');
      }

      return {
        available: parseFloat(usdtBalance.available),
        onhold: parseFloat(usdtBalance.onhold || 0),
        total: parseFloat(usdtBalance.available) + parseFloat(usdtBalance.onhold || 0)
      };
    } catch (error) {
      logger.error('–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –±–∞–ª–∞–Ω—Å–∞ CryptoBot:', error);
      return {
        available: 0,
        onhold: 0,
        total: 0,
        error: error.message
      };
    }
  }

  /**
   * –ê—É–¥–∏—Ç –±–∞–ª–∞–Ω—Å–æ–≤ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
   */
  async auditUserBalances() {
    logger.info('üîç –ê—É–¥–∏—Ç –±–∞–ª–∞–Ω—Å–æ–≤ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π...');
    
    const userStats = await User.aggregate([
      { $match: { isBlocked: false } },
      {
        $group: {
          _id: null,
          totalUsers: { $sum: 1 },
          totalMainBalance: { $sum: '$balance' },
          totalReferralBalance: { $sum: '$referralStats.referralBalance' },
          usersWithBalance: { $sum: { $cond: [{ $gt: ['$balance', 0] }, 1, 0] } },
          usersWithReferralBalance: { $sum: { $cond: [{ $gt: ['$referralStats.referralBalance', 0] }, 1, 0] } }
        }
      }
    ]);

    const result = userStats[0] || {
      totalUsers: 0,
      totalMainBalance: 0,
      totalReferralBalance: 0,
      usersWithBalance: 0,
      usersWithReferralBalance: 0
    };

    result.totalUserBalance = result.totalMainBalance + result.totalReferralBalance;

    this.auditResults.balances.users = result;
    logger.info(`   –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏: ${result.totalUsers}, —Å –±–∞–ª–∞–Ω—Å–æ–º: ${result.usersWithBalance}`);
    logger.info(`   –û—Å–Ω–æ–≤–Ω–æ–π –±–∞–ª–∞–Ω—Å: ${result.totalMainBalance.toFixed(2)} USDT`);
    logger.info(`   –†–µ—Ñ–µ—Ä–∞–ª—å–Ω—ã–π –±–∞–ª–∞–Ω—Å: ${result.totalReferralBalance.toFixed(2)} USDT`);
    logger.info(`   –û–±—â–∏–π –±–∞–ª–∞–Ω—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: ${result.totalUserBalance.toFixed(2)} USDT`);

    return result;
  }

  /**
   * –ê—É–¥–∏—Ç –¥–µ–ø–æ–∑–∏—Ç–æ–≤ –∏ –≤—ã–≤–æ–¥–æ–≤
   */
  async auditDepositsWithdrawals() {
    logger.info('üîç –ê—É–¥–∏—Ç –¥–µ–ø–æ–∑–∏—Ç–æ–≤ –∏ –≤—ã–≤–æ–¥–æ–≤...');

    const [depositStats, withdrawalStats] = await Promise.all([
      Deposit.aggregate([
        {
          $group: {
            _id: '$status',
            count: { $sum: 1 },
            totalAmount: { $sum: '$amount' }
          }
        }
      ]),
      Withdrawal.aggregate([
        {
          $group: {
            _id: '$status',
            count: { $sum: 1 },
            totalAmount: { $sum: '$amount' }
          }
        }
      ])
    ]);

    const deposits = {
      total: 0,
      paid: 0,
      pending: 0,
      failed: 0
    };

    const withdrawals = {
      total: 0,
      completed: 0,
      pending: 0,
      rejected: 0
    };

    depositStats.forEach(stat => {
      deposits[stat._id] = stat.totalAmount;
      if (stat._id === 'paid') deposits.total += stat.totalAmount;
    });

    withdrawalStats.forEach(stat => {
      withdrawals[stat._id] = stat.totalAmount;
      if (stat._id === 'completed') withdrawals.total += stat.totalAmount;
    });

    this.auditResults.balances.deposits = deposits;
    this.auditResults.balances.withdrawals = withdrawals;

    logger.info(`   –î–µ–ø–æ–∑–∏—Ç—ã (paid): ${deposits.paid.toFixed(2)} USDT`);
    logger.info(`   –í—ã–≤–æ–¥—ã (completed): ${withdrawals.completed.toFixed(2)} USDT`);
    logger.info(`   –ß–∏—Å—Ç—ã–π –ø—Ä–∏—Ç–æ–∫: ${(deposits.paid - withdrawals.completed).toFixed(2)} USDT`);

    return { deposits, withdrawals };
  }

  /**
   * –ê—É–¥–∏—Ç –≤—Å–µ—Ö –∏–≥—Ä –∏ –∏—Ö —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
   */
  async auditGames() {
    logger.info('üîç –ê—É–¥–∏—Ç –≤—Å–µ—Ö –∏–≥—Ä...');

    const gameStats = await Game.aggregate([
      {
        $group: {
          _id: '$gameType',
          totalGames: { $sum: 1 },
          totalBets: { $sum: '$bet' },
          totalWins: { $sum: { $cond: ['$win', { $add: ['$bet', '$profit'] }, 0] } },
          totalProfit: { $sum: '$profit' }, // –ü—Ä–∏–±—ã–ª—å –∏–≥—Ä–æ–∫–æ–≤ (–æ—Ç—Ä–∏—Ü–∞—Ç–µ–ª—å–Ω–∞—è = –ø—Ä–∏–±—ã–ª—å –∫–∞–∑–∏–Ω–æ)
          winningGames: { $sum: { $cond: ['$win', 1, 0] } }
        }
      }
    ]);

    let totalBets = 0;
    let totalWins = 0;
    let totalCasinoProfit = 0;

    const gameBreakdown = {};

    gameStats.forEach(stat => {
      const casinoProfit = stat.totalBets - stat.totalWins;
      gameBreakdown[stat._id] = {
        ...stat,
        casinoProfit,
        winRate: stat.totalGames > 0 ? (stat.winningGames / stat.totalGames * 100).toFixed(2) : 0
      };

      totalBets += stat.totalBets;
      totalWins += stat.totalWins;
      totalCasinoProfit += casinoProfit;
    });

    this.auditResults.balances.games = {
      totalBets,
      totalWins,
      totalCasinoProfit,
      breakdown: gameBreakdown
    };

    logger.info(`   –í—Å–µ–≥–æ —Å—Ç–∞–≤–æ–∫: ${totalBets.toFixed(2)} USDT`);
    logger.info(`   –í—Å–µ–≥–æ –≤—ã–∏–≥—Ä—ã—à–µ–π: ${totalWins.toFixed(2)} USDT`);
    logger.info(`   –ü—Ä–∏–±—ã–ª—å –∫–∞–∑–∏–Ω–æ –æ—Ç –∏–≥—Ä: ${totalCasinoProfit.toFixed(2)} USDT`);

    return { totalBets, totalWins, totalCasinoProfit, gameBreakdown };
  }

  /**
   * –ê—É–¥–∏—Ç –¥—É—ç–ª–µ–π
   */
  async auditDuels() {
    logger.info('üîç –ê—É–¥–∏—Ç –¥—É—ç–ª–µ–π...');

    const duelStats = await Duel.aggregate([
      { $match: { status: 'completed' } },
      {
        $group: {
          _id: null,
          totalDuels: { $sum: 1 },
          totalAmount: { $sum: '$amount' },
          totalCommissions: { $sum: '$commission' }
        }
      }
    ]);

    const result = duelStats[0] || {
      totalDuels: 0,
      totalAmount: 0,
      totalCommissions: 0
    };

    this.auditResults.balances.duels = result;

    logger.info(`   –ó–∞–≤–µ—Ä—à–µ–Ω–Ω—ã—Ö –¥—É—ç–ª–µ–π: ${result.totalDuels}`);
    logger.info(`   –û–±—â–∏–π –æ–±–æ—Ä–æ—Ç: ${(result.totalAmount * 2).toFixed(2)} USDT`);
    logger.info(`   –ö–æ–º–∏—Å—Å–∏–∏ —Å –¥—É—ç–ª–µ–π: ${result.totalCommissions.toFixed(2)} USDT`);

    return result;
  }

  /**
   * –ê—É–¥–∏—Ç —Å–æ–±—ã—Ç–∏–π
   */
  async auditEvents() {
    logger.info('üîç –ê—É–¥–∏—Ç —Å–æ–±—ã—Ç–∏–π...');

    const [eventStats, betStats] = await Promise.all([
      Event.aggregate([
        {
          $group: {
            _id: '$status',
            count: { $sum: 1 }
          }
        }
      ]),
      EventBet.aggregate([
        {
          $group: {
            _id: null,
            totalBets: { $sum: 1 },
            totalAmount: { $sum: '$amount' },
            totalPotentialWin: { $sum: '$potentialWin' }
          }
        }
      ])
    ]);

    const events = {};
    eventStats.forEach(stat => {
      events[stat._id] = stat.count;
    });

    const bets = betStats[0] || {
      totalBets: 0,
      totalAmount: 0,
      totalPotentialWin: 0
    };

    // –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º –≤—ã–ø–ª–∞—á–µ–Ω–Ω—ã–µ –≤—ã–∏–≥—Ä—ã—à–∏
    const paidWinnings = await EventBet.aggregate([
      { $match: { status: 'won' } },
      { $group: { _id: null, total: { $sum: '$potentialWin' } } }
    ]);

    bets.paidWinnings = paidWinnings[0]?.total || 0;
    bets.eventProfit = bets.totalAmount - bets.paidWinnings;

    this.auditResults.balances.events = { events, bets };

    logger.info(`   –í—Å–µ–≥–æ —Å—Ç–∞–≤–æ–∫ –Ω–∞ —Å–æ–±—ã—Ç–∏—è: ${bets.totalBets}`);
    logger.info(`   –°—É–º–º–∞ —Å—Ç–∞–≤–æ–∫: ${bets.totalAmount.toFixed(2)} USDT`);
    logger.info(`   –í—ã–ø–ª–∞—á–µ–Ω–æ –≤—ã–∏–≥—Ä—ã—à–µ–π: ${bets.paidWinnings.toFixed(2)} USDT`);
    logger.info(`   –ü—Ä–∏–±—ã–ª—å –æ—Ç —Å–æ–±—ã—Ç–∏–π: ${bets.eventProfit.toFixed(2)} USDT`);

    return { events, bets };
  }

  /**
   * –ê—É–¥–∏—Ç —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω–æ–π —Å–∏—Å—Ç–µ–º—ã
   */
  async auditReferrals() {
    logger.info('üîç –ê—É–¥–∏—Ç —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω–æ–π —Å–∏—Å—Ç–µ–º—ã...');

    const [earningsStats, payoutsStats] = await Promise.all([
      ReferralEarning.aggregate([
        {
          $group: {
            _id: '$type',
            count: { $sum: 1 },
            totalAmount: { $sum: '$calculation.earnedAmount' }
          }
        }
      ]),
      ReferralPayout.aggregate([
        {
          $group: {
            _id: '$status',
            count: { $sum: 1 },
            totalAmount: { $sum: '$amount' }
          }
        }
      ])
    ]);

    const earnings = {};
    let totalEarnings = 0;
    earningsStats.forEach(stat => {
      earnings[stat._id] = stat.totalAmount;
      totalEarnings += stat.totalAmount;
    });

    const payouts = {};
    let totalPayouts = 0;
    payoutsStats.forEach(stat => {
      payouts[stat._id] = stat.totalAmount;
      if (stat._id === 'completed') totalPayouts += stat.totalAmount;
    });

    const result = {
      earnings,
      payouts,
      totalEarnings,
      totalPayouts,
      pendingPayouts: totalEarnings - totalPayouts
    };

    this.auditResults.balances.referrals = result;

    logger.info(`   –í—Å–µ–≥–æ –Ω–∞—á–∏—Å–ª–µ–Ω–æ: ${totalEarnings.toFixed(2)} USDT`);
    logger.info(`   –í—Å–µ–≥–æ –≤—ã–ø–ª–∞—á–µ–Ω–æ: ${totalPayouts.toFixed(2)} USDT`);
    logger.info(`   –û—Å—Ç–∞–µ—Ç—Å—è –∫ –≤—ã–ø–ª–∞—Ç–µ: ${result.pendingPayouts.toFixed(2)} USDT`);

    return result;
  }

  /**
   * –ê—É–¥–∏—Ç –ø—Ä–æ–º–æ–∫–æ–¥–æ–≤
   */
  async auditPromocodes() {
    logger.info('üîç –ê—É–¥–∏—Ç –ø—Ä–æ–º–æ–∫–æ–¥–æ–≤...');

    const promoStats = await Transaction.aggregate([
      { $match: { type: 'promocode_balance', status: 'completed' } },
      {
        $group: {
          _id: null,
          count: { $sum: 1 },
          totalAmount: { $sum: '$amount' }
        }
      }
    ]);

    const result = promoStats[0] || {
      count: 0,
      totalAmount: 0
    };

    this.auditResults.balances.promocodes = result;

    logger.info(`   –ê–∫—Ç–∏–≤–∞—Ü–∏–π –ø—Ä–æ–º–æ–∫–æ–¥–æ–≤: ${result.count}`);
    logger.info(`   –û–±—â–∞—è —Å—Ç–æ–∏–º–æ—Å—Ç—å: ${result.totalAmount.toFixed(2)} USDT`);

    return result;
  }

  /**
   * –ê—É–¥–∏—Ç –∫–æ–º–∏—Å—Å–∏–π CryptoBot
   */
  async auditCryptoBotFees() {
    logger.info('üîç –ê—É–¥–∏—Ç –∫–æ–º–∏—Å—Å–∏–π CryptoBot...');

    const feeStats = await Transaction.aggregate([
      { 
        $match: { 
          'payment.fee': { $exists: true, $gt: 0 },
          status: 'completed' 
        } 
      },
      {
        $group: {
          _id: '$type',
          count: { $sum: 1 },
          totalFees: { $sum: '$payment.fee' }
        }
      }
    ]);

    let totalFees = 0;
    const feeBreakdown = {};

    feeStats.forEach(stat => {
      feeBreakdown[stat._id] = {
        count: stat.count,
        totalFees: stat.totalFees
      };
      totalFees += stat.totalFees;
    });

    this.auditResults.balances.cryptoBotFees = {
      totalFees,
      breakdown: feeBreakdown
    };

    logger.info(`   –û–±—â–∏–µ –∫–æ–º–∏—Å—Å–∏–∏ CryptoBot: ${totalFees.toFixed(2)} USDT`);

    return { totalFees, feeBreakdown };
  }

  /**
   * –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ—Ç –æ–∂–∏–¥–∞–µ–º—ã–π –±–∞–ª–∞–Ω—Å —Å–∏—Å—Ç–µ–º—ã
   */
  calculateExpectedBalance() {
    logger.info('üßÆ –†–∞—Å—á–µ—Ç –æ–∂–∏–¥–∞–µ–º–æ–≥–æ –±–∞–ª–∞–Ω—Å–∞...');

    const balances = this.auditResults.balances;

    // –§–æ—Ä–º—É–ª–∞: –î–µ–ø–æ–∑–∏—Ç—ã - –í—ã–≤–æ–¥—ã - –ë–∞–ª–∞–Ω—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π = –û–ø–µ—Ä–∞—Ç–∏–≤–Ω—ã–π –±–∞–ª–∞–Ω—Å
    const operationalBalance = balances.deposits.paid - balances.withdrawals.completed - balances.users.totalUserBalance;
    
    // –û–∂–∏–¥–∞–µ–º—ã–π –±–∞–ª–∞–Ω—Å CryptoBot = –û–ø–µ—Ä–∞—Ç–∏–≤–Ω—ã–π + –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏
    const expectedCryptoBotBalance = operationalBalance + balances.users.totalUserBalance;

    // –ê–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω—ã–π —Ä–∞—Å—á–µ—Ç —á–µ—Ä–µ–∑ –¥–µ–Ω–µ–∂–Ω—ã–µ –ø–æ—Ç–æ–∫–∏
    const alternativeCalculation = balances.deposits.paid - balances.withdrawals.completed;

    this.auditResults.calculations = {
      operationalBalance,
      expectedCryptoBotBalance,
      alternativeCalculation,
      userBalance: balances.users.totalUserBalance
    };

    logger.info(`   –û–ø–µ—Ä–∞—Ç–∏–≤–Ω—ã–π –±–∞–ª–∞–Ω—Å: ${operationalBalance.toFixed(2)} USDT`);
    logger.info(`   –û–∂–∏–¥–∞–µ–º—ã–π –±–∞–ª–∞–Ω—Å CryptoBot: ${expectedCryptoBotBalance.toFixed(2)} USDT`);
    logger.info(`   –ê–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω—ã–π —Ä–∞—Å—á–µ—Ç: ${alternativeCalculation.toFixed(2)} USDT`);

    return {
      operationalBalance,
      expectedCryptoBotBalance,
      alternativeCalculation
    };
  }

  /**
   * –°—Ä–∞–≤–Ω–∏–≤–∞–µ—Ç —Å —Ä–µ–∞–ª—å–Ω—ã–º –±–∞–ª–∞–Ω—Å–æ–º CryptoBot
   */
  async compareWithCryptoBot() {
    logger.info('‚öñÔ∏è –°—Ä–∞–≤–Ω–µ–Ω–∏–µ —Å —Ä–µ–∞–ª—å–Ω—ã–º –±–∞–ª–∞–Ω—Å–æ–º CryptoBot...');

    const cryptoBotBalance = await this.getCryptoBotBalance();
    const calculations = this.auditResults.calculations;

    this.auditResults.cryptoBotBalance = cryptoBotBalance;

    if (cryptoBotBalance.error) {
      this.auditResults.discrepancies.push({
        type: 'CRITICAL',
        message: `–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –±–∞–ª–∞–Ω—Å CryptoBot: ${cryptoBotBalance.error}`
      });
      return;
    }

    const difference = Math.abs(cryptoBotBalance.total - calculations.expectedCryptoBotBalance);
    const alternativeDifference = Math.abs(cryptoBotBalance.total - calculations.alternativeCalculation);

    logger.info(`   –†–µ–∞–ª—å–Ω—ã–π –±–∞–ª–∞–Ω—Å CryptoBot: ${cryptoBotBalance.total.toFixed(2)} USDT`);
    logger.info(`   –û–∂–∏–¥–∞–µ–º—ã–π –±–∞–ª–∞–Ω—Å: ${calculations.expectedCryptoBotBalance.toFixed(2)} USDT`);
    logger.info(`   –†–∞—Å—Ö–æ–∂–¥–µ–Ω–∏–µ: ${difference.toFixed(2)} USDT`);

    // –ê–Ω–∞–ª–∏–∑ —Ä–∞—Å—Ö–æ–∂–¥–µ–Ω–∏–π
    if (difference > 0.01) {
      const discrepancyType = difference > 1.0 ? 'CRITICAL' : 'WARNING';
      this.auditResults.discrepancies.push({
        type: discrepancyType,
        message: `–†–∞—Å—Ö–æ–∂–¥–µ–Ω–∏–µ —Å CryptoBot: ${difference.toFixed(2)} USDT`,
        details: {
          realBalance: cryptoBotBalance.total,
          expectedBalance: calculations.expectedCryptoBotBalance,
          difference
        }
      });
    }

    if (alternativeDifference < difference) {
      this.auditResults.discrepancies.push({
        type: 'INFO',
        message: `–ê–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω—ã–π —Ä–∞—Å—á–µ—Ç –±–ª–∏–∂–µ –∫ —Ä–µ–∞–ª—å–Ω–æ—Å—Ç–∏: ${alternativeDifference.toFixed(2)} USDT vs ${difference.toFixed(2)} USDT`
      });
    }
  }

  /**
   * –ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏
   */
  generateRecommendations() {
    const balances = this.auditResults.balances;
    const discrepancies = this.auditResults.discrepancies;

    // –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–æ–æ—Ç–Ω–æ—à–µ–Ω–∏—è –±–∞–ª–∞–Ω—Å–æ–≤
    if (balances.users.totalUserBalance > balances.deposits.paid * 1.1) {
      this.auditResults.recommendations.push({
        priority: 'HIGH',
        message: '–ë–∞–ª–∞–Ω—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –ø—Ä–µ–≤—ã—à–∞–µ—Ç –¥–µ–ø–æ–∑–∏—Ç—ã –±–æ–ª–µ–µ —á–µ–º –Ω–∞ 10% - –≤–æ–∑–º–æ–∂–Ω—ã —Ñ–∞–Ω—Ç–æ–º–Ω—ã–µ –±–∞–ª–∞–Ω—Å—ã'
      });
    }

    // –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω—ã—Ö –≤—ã–ø–ª–∞—Ç
    if (balances.referrals.pendingPayouts > balances.users.totalReferralBalance * 1.1) {
      this.auditResults.recommendations.push({
        priority: 'MEDIUM',
        message: '–ù–∞—á–∏—Å–ª–µ–Ω–Ω—ã–µ —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω—ã–µ –∫–æ–º–∏—Å—Å–∏–∏ –Ω–µ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—Ç –±–∞–ª–∞–Ω—Å–∞–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π'
      });
    }

    // –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏—Ö —Ä–∞—Å—Ö–æ–∂–¥–µ–Ω–∏–π
    if (discrepancies.some(d => d.type === 'CRITICAL')) {
      this.auditResults.recommendations.push({
        priority: 'CRITICAL',
        message: '–û–±–Ω–∞—Ä—É–∂–µ–Ω—ã –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏–µ —Ä–∞—Å—Ö–æ–∂–¥–µ–Ω–∏—è - —Ç—Ä–µ–±—É–µ—Ç—Å—è –Ω–µ–º–µ–¥–ª–µ–Ω–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞'
      });
    }

    // –û–±—â–∏–µ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏
    this.auditResults.recommendations.push({
      priority: 'LOW',
      message: '–†–µ–≥—É–ª—è—Ä–Ω–æ –∑–∞–ø—É—Å–∫–∞–π—Ç–µ –¥–∞–Ω–Ω—ã–π –∞—É–¥–∏—Ç –¥–ª—è –∫–æ–Ω—Ç—Ä–æ–ª—è —Ñ–∏–Ω–∞–Ω—Å–æ–≤–æ–≥–æ —Å–æ—Å—Ç–æ—è–Ω–∏—è'
    });
  }

  /**
   * –ó–∞–ø—É—Å–∫–∞–µ—Ç –ø–æ–ª–Ω—ã–π –∞—É–¥–∏—Ç
   */
  async runFullAudit() {
    try {
      logger.info('üöÄ –ù–ê–ß–ê–õ–û –ö–û–ú–ü–õ–ï–ö–°–ù–û–ì–û –§–ò–ù–ê–ù–°–û–í–û–ì–û –ê–£–î–ò–¢–ê');
      
      await this.connectDB();

      // –í—ã–ø–æ–ª–Ω—è–µ–º –≤—Å–µ –ø—Ä–æ–≤–µ—Ä–∫–∏
      await this.auditUserBalances();
      await this.auditDepositsWithdrawals();
      await this.auditGames();
      await this.auditDuels();
      await this.auditEvents();
      await this.auditReferrals();
      await this.auditPromocodes();
      await this.auditCryptoBotFees();

      // –†–∞—Å—á–µ—Ç—ã –∏ —Å—Ä–∞–≤–Ω–µ–Ω–∏—è
      this.calculateExpectedBalance();
      await this.compareWithCryptoBot();
      this.generateRecommendations();

      logger.info('‚úÖ –ê–£–î–ò–¢ –ó–ê–í–ï–†–®–ï–ù');
      
      return this.auditResults;

    } catch (error) {
      logger.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ–¥–µ–Ω–∏–∏ –∞—É–¥–∏—Ç–∞:', error);
      throw error;
    } finally {
      await mongoose.disconnect();
      logger.info('üîå –°–æ–µ–¥–∏–Ω–µ–Ω–∏–µ —Å –ë–î –∑–∞–∫—Ä—ã—Ç–æ');
    }
  }

  /**
   * –í—ã–≤–æ–¥–∏—Ç –¥–µ—Ç–∞–ª—å–Ω—ã–π –æ—Ç—á–µ—Ç
   */
  printDetailedReport() {
    const results = this.auditResults;
    
    console.log('\n');
    console.log('‚ïê'.repeat(80));
    console.log('              üìä –î–ï–¢–ê–õ–¨–ù–´–ô –§–ò–ù–ê–ù–°–û–í–´–ô –û–¢–ß–ï–¢');
    console.log('‚ïê'.repeat(80));
    console.log(`–í—Ä–µ–º—è –ø—Ä–æ–≤–µ–¥–µ–Ω–∏—è: ${results.timestamp.toLocaleString()}`);
    console.log('');

    // –ë–∞–ª–∞–Ω—Å—ã
    console.log('üí∞ –ë–ê–õ–ê–ù–°–´:');
    console.log(`   CryptoBot (—Ä–µ–∞–ª—å–Ω—ã–π): ${results.cryptoBotBalance?.total?.toFixed(2) || '–û–®–ò–ë–ö–ê'} USDT`);
    console.log(`   –û–∂–∏–¥–∞–µ–º—ã–π —Å–∏—Å—Ç–µ–º–Ω—ã–π: ${results.calculations?.expectedCryptoBotBalance?.toFixed(2) || '–û–®–ò–ë–ö–ê'} USDT`);
    console.log(`   –ë–∞–ª–∞–Ω—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: ${results.balances.users?.totalUserBalance?.toFixed(2)} USDT`);
    console.log(`   –û–ø–µ—Ä–∞—Ç–∏–≤–Ω—ã–π –±–∞–ª–∞–Ω—Å: ${results.calculations?.operationalBalance?.toFixed(2)} USDT`);
    console.log('');

    // –î–≤–∏–∂–µ–Ω–∏–µ —Å—Ä–µ–¥—Å—Ç–≤
    console.log('üí≥ –î–í–ò–ñ–ï–ù–ò–ï –°–†–ï–î–°–¢–í:');
    console.log(`   –î–µ–ø–æ–∑–∏—Ç—ã: ${results.balances.deposits?.paid?.toFixed(2)} USDT`);
    console.log(`   –í—ã–≤–æ–¥—ã: ${results.balances.withdrawals?.completed?.toFixed(2)} USDT`);
    console.log(`   –ß–∏—Å—Ç—ã–π –ø—Ä–∏—Ç–æ–∫: ${(results.balances.deposits?.paid - results.balances.withdrawals?.completed)?.toFixed(2)} USDT`);
    console.log('');

    // –ò–≥—Ä—ã
    console.log('üéÆ –ò–ì–†–´:');
    console.log(`   –û–±—â–∏–π –æ–±–æ—Ä–æ—Ç: ${results.balances.games?.totalBets?.toFixed(2)} USDT`);
    console.log(`   –í—ã–∏–≥—Ä—ã—à–∏ –∏–≥—Ä–æ–∫–æ–≤: ${results.balances.games?.totalWins?.toFixed(2)} USDT`);
    console.log(`   –ü—Ä–∏–±—ã–ª—å –∫–∞–∑–∏–Ω–æ: ${results.balances.games?.totalCasinoProfit?.toFixed(2)} USDT`);
    console.log('');

    // –†–∞—Å—Ö–æ–∂–¥–µ–Ω–∏—è
    if (results.discrepancies.length > 0) {
      console.log('‚ö†Ô∏è –û–ë–ù–ê–†–£–ñ–ï–ù–ù–´–ï –ü–†–û–ë–õ–ï–ú–´:');
      results.discrepancies.forEach((disc, i) => {
        console.log(`   ${i + 1}. [${disc.type}] ${disc.message}`);
      });
      console.log('');
    }

    // –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏
    if (results.recommendations.length > 0) {
      console.log('üí° –†–ï–ö–û–ú–ï–ù–î–ê–¶–ò–ò:');
      results.recommendations.forEach((rec, i) => {
        console.log(`   ${i + 1}. [${rec.priority}] ${rec.message}`);
      });
      console.log('');
    }

    console.log('‚ïê'.repeat(80));
    console.log('');
  }
}

// –ó–∞–ø—É—Å–∫ –∞—É–¥–∏—Ç–∞
async function main() {
  const auditor = new FinancialAuditor();
  
  try {
    const results = await auditor.runFullAudit();
    auditor.printDetailedReport();
    
    // –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –≤ —Ñ–∞–π–ª
    const fs = require('fs');
    const filename = `audit_${new Date().toISOString().slice(0, 19).replace(/:/g, '-')}.json`;
    fs.writeFileSync(filename, JSON.stringify(results, null, 2));
    console.log(`üìÑ –î–µ—Ç–∞–ª—å–Ω—ã–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –≤ ${filename}`);
    
  } catch (error) {
    console.error('üí• –ö–†–ò–¢–ò–ß–ï–°–ö–ê–Ø –û–®–ò–ë–ö–ê –ê–£–î–ò–¢–ê:', error);
    process.exit(1);
  }
}

// –≠–∫—Å–ø–æ—Ä—Ç–∏—Ä—É–µ–º –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –∫–∞–∫ –º–æ–¥—É–ª—å
module.exports = FinancialAuditor;

// –ó–∞–ø—É—Å–∫–∞–µ–º –µ—Å–ª–∏ –≤—ã–∑–≤–∞–Ω –Ω–∞–ø—Ä—è–º—É—é
if (require.main === module) {
  main();
}