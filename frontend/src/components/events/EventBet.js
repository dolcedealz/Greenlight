// frontend/src/components/events/EventBet.js
import React, { useState, useEffect } from 'react';
import '../../styles/EventBet.css';

const EventBet = ({ event, outcome, balance, onPlaceBet, onClose }) => {
  const [betAmount, setBetAmount] = useState('');
  const [isPlacing, setIsPlacing] = useState(false);
  const [error, setError] = useState('');

  // –ë—ã—Å—Ç—Ä—ã–µ –∫–Ω–æ–ø–∫–∏ —Å—É–º–º
  const quickAmounts = [1, 5, 10, 25, 50, 100];

  // –¢–µ–∫—É—â–∏–π –∫–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç –¥–ª—è –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ –∏—Å—Ö–æ–¥–∞
  const currentOdds = event.currentOdds[outcome.id];

  // –ü–æ—Ç–µ–Ω—Ü–∏–∞–ª—å–Ω—ã–π –≤—ã–∏–≥—Ä—ã—à
  const potentialWin = betAmount ? (parseFloat(betAmount) * currentOdds).toFixed(2) : '0.00';

  // –ü–æ—Ç–µ–Ω—Ü–∏–∞–ª—å–Ω–∞—è –ø—Ä–∏–±—ã–ª—å
  const potentialProfit = betAmount ? (potentialWin - parseFloat(betAmount)).toFixed(2) : '0.00';

  // –ó–∞–∫—Ä—ã—Ç–∏–µ –º–æ–¥–∞–ª—å–Ω–æ–≥–æ –æ–∫–Ω–∞ –ø—Ä–∏ –Ω–∞–∂–∞—Ç–∏–∏ ESC
  useEffect(() => {
    const handleEsc = (e) => {
      if (e.keyCode === 27) {
        onClose();
      }
    };
    document.addEventListener('keydown', handleEsc);
    return () => document.removeEventListener('keydown', handleEsc);
  }, [onClose]);

  // –í–∞–ª–∏–¥–∞—Ü–∏—è —Å—É–º–º—ã —Å—Ç–∞–≤–∫–∏
  const validateBetAmount = (amount) => {
    const numAmount = parseFloat(amount);
    
    if (isNaN(numAmount) || numAmount <= 0) {
      return '–í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—É—é —Å—É–º–º—É';
    }
    
    if (numAmount < event.minBet) {
      return `–ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è —Å—Ç–∞–≤–∫–∞: ${event.minBet} USDT`;
    }
    
    if (numAmount > event.maxBet) {
      return `–ú–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è —Å—Ç–∞–≤–∫–∞: ${event.maxBet} USDT`;
    }
    
    if (numAmount > balance) {
      return '–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å—Ä–µ–¥—Å—Ç–≤ –Ω–∞ –±–∞–ª–∞–Ω—Å–µ';
    }
    
    return '';
  };

  // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∏–∑–º–µ–Ω–µ–Ω–∏—è —Å—É–º–º—ã
  const handleAmountChange = (e) => {
    const value = e.target.value;
    
    // –†–∞–∑—Ä–µ—à–∞–µ–º —Ç–æ–ª—å–∫–æ —á–∏—Å–ª–∞ –∏ —Ç–æ—á–∫—É
    if (!/^\d*\.?\d*$/.test(value)) {
      return;
    }
    
    setBetAmount(value);
    setError(validateBetAmount(value));
  };

  // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –±—ã—Å—Ç—Ä—ã—Ö –∫–Ω–æ–ø–æ–∫
  const handleQuickAmount = (amount) => {
    setBetAmount(amount.toString());
    setError(validateBetAmount(amount.toString()));
  };

  // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ "–í—Å—ë"
  const handleMaxAmount = () => {
    const maxAmount = Math.min(balance, event.maxBet).toString();
    setBetAmount(maxAmount);
    setError(validateBetAmount(maxAmount));
  };

  // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Ä–∞–∑–º–µ—â–µ–Ω–∏—è —Å—Ç–∞–≤–∫–∏
  const handleSubmit = async (e) => {
    e.preventDefault();
    
    const validationError = validateBetAmount(betAmount);
    if (validationError) {
      setError(validationError);
      return;
    }
    
    setIsPlacing(true);
    
    try {
      await onPlaceBet({
        amount: parseFloat(betAmount),
        odds: currentOdds,
        potentialWin: parseFloat(potentialWin)
      });
    } catch (err) {
      setError(err.message || '–û—à–∏–±–∫–∞ —Ä–∞–∑–º–µ—â–µ–Ω–∏—è —Å—Ç–∞–≤–∫–∏');
    } finally {
      setIsPlacing(false);
    }
  };

  // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–ª–∏–∫–∞ –ø–æ —Ñ–æ–Ω—É (–∑–∞–∫—Ä—ã—Ç–∏–µ –º–æ–¥–∞–ª—å–Ω–æ–≥–æ –æ–∫–Ω–∞)
  const handleBackdropClick = (e) => {
    if (e.target === e.currentTarget) {
      onClose();
    }
  };

  return (
    <div className="event-bet-modal" onClick={handleBackdropClick}>
      <div className="event-bet-container">
        {/* –ó–∞–≥–æ–ª–æ–≤–æ–∫ */}
        <div className="bet-header">
          <h3>–†–∞–∑–º–µ—â–µ–Ω–∏–µ —Å—Ç–∞–≤–∫–∏</h3>
          <button className="close-button" onClick={onClose}>√ó</button>
        </div>

        {/* –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Å–æ–±—ã—Ç–∏–∏ */}
        <div className="bet-event-info">
          <div className="event-name">{event.title}</div>
          <div className="outcome-selected">
            <span className="outcome-label">–í—ã–±—Ä–∞–Ω–Ω—ã–π –∏—Å—Ö–æ–¥:</span>
            <span className="outcome-name">{outcome.name}</span>
          </div>
          <div className="current-odds">
            <span className="odds-label">–¢–µ–∫—É—â–∏–π –∫–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç:</span>
            <span className="odds-value">√ó{currentOdds.toFixed(2)}</span>
          </div>
        </div>

        {/* –§–æ—Ä–º–∞ —Å—Ç–∞–≤–∫–∏ */}
        <form onSubmit={handleSubmit} className="bet-form">
          {/* –ë–∞–ª–∞–Ω—Å */}
          <div className="balance-info">
            <span className="balance-label">–î–æ—Å—Ç—É–ø–Ω–æ:</span>
            <span className="balance-amount">{balance.toFixed(2)} USDT</span>
          </div>

          {/* –ü–æ–ª–µ –≤–≤–æ–¥–∞ —Å—É–º–º—ã */}
          <div className="amount-input-group">
            <label htmlFor="betAmount">–°—É–º–º–∞ —Å—Ç–∞–≤–∫–∏:</label>
            <div className="amount-input-container">
              <input
                type="text"
                id="betAmount"
                value={betAmount}
                onChange={handleAmountChange}
                placeholder="0.00"
                className={`amount-input ${error ? 'error' : ''}`}
                disabled={isPlacing}
              />
              <span className="currency-label">USDT</span>
            </div>
            {error && <div className="error-message">{error}</div>}
          </div>

          {/* –ë—ã—Å—Ç—Ä—ã–µ –∫–Ω–æ–ø–∫–∏ */}
          <div className="quick-amounts">
            <div className="quick-amounts-label">–ë—ã—Å—Ç—Ä—ã–π –≤—ã–±–æ—Ä:</div>
            <div className="quick-buttons">
              {quickAmounts
                .filter(amount => amount <= balance && amount <= event.maxBet)
                .map(amount => (
                  <button
                    key={amount}
                    type="button"
                    className={`quick-button ${betAmount === amount.toString() ? 'active' : ''}`}
                    onClick={() => handleQuickAmount(amount)}
                    disabled={isPlacing}
                  >
                    {amount}
                  </button>
                ))}
              <button
                type="button"
                className={`quick-button max-button ${betAmount === Math.min(balance, event.maxBet).toString() ? 'active' : ''}`}
                onClick={handleMaxAmount}
                disabled={isPlacing || balance === 0}
              >
                –í—Å—ë
              </button>
            </div>
          </div>

          {/* –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –≤—ã–∏–≥—Ä—ã—à–µ */}
          {betAmount && !error && (
            <div className="win-info">
              <div className="win-item">
                <span className="win-label">–ü–æ—Ç–µ–Ω—Ü–∏–∞–ª—å–Ω—ã–π –≤—ã–∏–≥—Ä—ã—à:</span>
                <span className="win-value">{potentialWin} USDT</span>
              </div>
              <div className="win-item">
                <span className="win-label">–ß–∏—Å—Ç–∞—è –ø—Ä–∏–±—ã–ª—å:</span>
                <span className="win-value profit">{potentialProfit} USDT</span>
              </div>
            </div>
          )}

          {/* –ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏—è */}
          <div className="bet-warnings">
            <div className="warning-item">
              ‚ö†Ô∏è –ö–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç—ã –º–æ–≥—É—Ç –∏–∑–º–µ–Ω–∏—Ç—å—Å—è –¥–æ –º–æ–º–µ–Ω—Ç–∞ —Ä–∞–∑–º–µ—â–µ–Ω–∏—è —Å—Ç–∞–≤–∫–∏
            </div>
            <div className="warning-item">
              üí° –ö–æ–º–∏—Å—Å–∏—è –∫–∞–∑–∏–Ω–æ: {event.houseEdge}% —É–∂–µ —É—á—Ç–µ–Ω–∞ –≤ –∫–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç–∞—Ö
            </div>
          </div>

          {/* –ö–Ω–æ–ø–∫–∏ */}
          <div className="bet-actions">
            <button
              type="button"
              className="cancel-button"
              onClick={onClose}
              disabled={isPlacing}
            >
              –û—Ç–º–µ–Ω–∞
            </button>
            <button
              type="submit"
              className="place-bet-button"
              disabled={!betAmount || error || isPlacing}
            >
              {isPlacing ? '–†–∞–∑–º–µ—â–µ–Ω–∏–µ...' : `–ü–æ—Å—Ç–∞–≤–∏—Ç—å ${betAmount || '0'} USDT`}
            </button>
          </div>
        </form>
      </div>
    </div>
  );
};

export default EventBet;
