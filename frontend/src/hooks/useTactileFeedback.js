// frontend/src/hooks/useTactileFeedback.js
import { useCallback } from 'react';

const useTactileFeedback = () => {
  // –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å Telegram WebApp API
  const isWebAppAvailable = () => {
    return window.Telegram && window.Telegram.WebApp && window.Telegram.WebApp.HapticFeedback;
  };

  // –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —Ç–∞–∫—Ç–∏–ª—å–Ω–æ–π –æ–±—Ä–∞—Ç–Ω–æ–π —Å–≤—è–∑–∏
  const sendHapticFeedback = useCallback((type) => {
    if (isWebAppAvailable()) {
      try {
        window.Telegram.WebApp.HapticFeedback.impactOccurred(type);

      } catch (error) {

      }
    } else {
      console.log('üîä –í–∏–±—Ä–∞—Ü–∏—è –ø—Ä–æ–ø—É—â–µ–Ω–∞ (–Ω–µ –≤ Telegram WebApp)');
    }
  }, []);

  // –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
  const sendNotificationFeedback = useCallback((type) => {
    if (isWebAppAvailable()) {
      try {
        window.Telegram.WebApp.HapticFeedback.notificationOccurred(type);

      } catch (error) {

      }
    } else {
      console.log('üîî –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –ø—Ä–æ–ø—É—â–µ–Ω–æ (–Ω–µ –≤ Telegram WebApp)');
    }
  }, []);

  // –†–∞–∑–ª–∏—á–Ω—ã–µ —Ç–∏–ø—ã –≤–∏–±—Ä–∞—Ü–∏–∏
  const buttonPressFeedback = useCallback(() => {
    sendHapticFeedback('light');
  }, [sendHapticFeedback]);

  const selectionChanged = useCallback(() => {
    sendHapticFeedback('soft');
  }, [sendHapticFeedback]);

  const navigationFeedback = useCallback(() => {
    sendHapticFeedback('medium');
  }, [sendHapticFeedback]);

  // –ò–°–ü–†–ê–í–õ–ï–ù–û: –î–æ–±–∞–≤–ª–µ–Ω—ã –Ω–µ–¥–æ—Å—Ç–∞—é—â–∏–µ —Ñ—É–Ω–∫—Ü–∏–∏
  const gameActionFeedback = useCallback(() => {
    sendHapticFeedback('medium');
  }, [sendHapticFeedback]);

  const importantActionFeedback = useCallback(() => {
    sendHapticFeedback('heavy');
  }, [sendHapticFeedback]);

  const criticalActionFeedback = useCallback(() => {
    sendHapticFeedback('rigid');
  }, [sendHapticFeedback]);

  const heavyImpact = useCallback(() => {
    sendHapticFeedback('heavy');
  }, [sendHapticFeedback]);

  const gameWinFeedback = useCallback(() => {
    sendNotificationFeedback('success');
  }, [sendNotificationFeedback]);

  const gameLoseFeedback = useCallback(() => {
    sendNotificationFeedback('error');
  }, [sendNotificationFeedback]);

  const successNotification = useCallback(() => {
    sendNotificationFeedback('success');
  }, [sendNotificationFeedback]);

  const errorNotification = useCallback(() => {
    sendNotificationFeedback('error');
  }, [sendNotificationFeedback]);

  const warningNotification = useCallback(() => {
    sendNotificationFeedback('warning');
  }, [sendNotificationFeedback]);

  return {
    // –û—Å–Ω–æ–≤–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏
    buttonPressFeedback,
    selectionChanged,
    navigationFeedback,
    gameWinFeedback,
    gameLoseFeedback,
    successNotification,
    errorNotification,
    warningNotification,
    // –ò–°–ü–†–ê–í–õ–ï–ù–û: –î–æ–±–∞–≤–ª–µ–Ω—ã –≤—Å–µ –Ω–µ–¥–æ—Å—Ç–∞—é—â–∏–µ —Ñ—É–Ω–∫—Ü–∏–∏
    gameActionFeedback,
    importantActionFeedback,
    criticalActionFeedback,
    heavyImpact
  };
};

export default useTactileFeedback;
