// bot/src/handlers/inline.handler.js
const config = require('../config');
const apiService = require('../services/api.service');
const duelService = require('../services/duel.service');

function registerInlineHandlers(bot) {
  console.log('üîß –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º inline handlers...');
  
  // –î–æ–±–∞–≤–ª—è–µ–º —Ç–µ—Å—Ç–æ–≤—ã–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏
  bot.on('inline_query', async (ctx) => {
    console.log('üî• INLINE QUERY –ü–û–õ–£–ß–ï–ù! –ü–æ–ª–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ:', JSON.stringify(ctx.inlineQuery, null, 2));
    try {
      const query = ctx.inlineQuery.query.toLowerCase().trim();
      const userId = ctx.from.id.toString();
      const username = ctx.from.username;
      
      console.log('üì• Inline query –ø–æ–ª—É—á–µ–Ω:', {
        query: query,
        user: username,
        userId: userId,
        rawQuery: ctx.inlineQuery.query,
        queryId: ctx.inlineQuery.id
      });
      
      const results = [];
      
      // –ü–∞—Ä—Å–∏–º –∫–æ–º–∞–Ω–¥—É –¥—É—ç–ª–∏ –¥–ª—è –ª–∏—á–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
      // –§–æ—Ä–º–∞—Ç: duel @username 50 üé≤ bo3 (–±–æ–ª–µ–µ –≥–∏–±–∫–∏–π –ø–∞—Ä—Å–∏–Ω–≥)
      const duelMatch = query.match(/^duel\s+@?(\w+)(?:\s+(\d+))?(?:\s*(üé≤|üéØ|‚öΩ|üèÄ|üé∞|üé≥))?(?:\s*(bo\d+))?/i);
      
      console.log('üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ duel match:', {
        query: query,
        matched: !!duelMatch,
        matchGroups: duelMatch
      });
      
      if (duelMatch) {
        const targetUsername = duelMatch[1].replace('@', '');
        const amount = duelMatch[2] ? parseInt(duelMatch[2]) : 10; // Default 10 USDT
        const gameType = duelMatch[3] || 'üé≤';
        const format = duelMatch[4] || 'bo1';
        
        // –û–ø—Ä–µ–¥–µ–ª—è–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–±–µ–¥
        const winsRequired = duelService.getWinsRequired(format);
        
        // –°–æ–∑–¥–∞–µ–º URL –¥–ª—è Deep Link
        const challengerId = ctx.from.id;
        const deepLinkData = `duel_${challengerId}_${targetUsername}_${amount}_${gameType}_${format}`;
        const botUsername = bot.botInfo?.username || 'Greenlightgames_bot';
        
        results.push({
          type: 'article',
          id: `duel_${Date.now()}`,
          title: `${gameType} –î—É—ç–ª—å —Å @${targetUsername}`,
          description: `${amount} USDT, ${format.toUpperCase()} - ${getGameName(gameType)}`,
          input_message_content: {
            message_text: `${gameType} **–ü–†–ò–ì–õ–ê–®–ï–ù–ò–ï –ù–ê –î–£–≠–õ–¨** ${gameType}\n\n` +
              `@${username} –ø—Ä–∏–≥–ª–∞—à–∞–µ—Ç @${targetUsername} –Ω–∞ –¥—É—ç–ª—å!\n` +
              `üí∞ –°—Ç–∞–≤–∫–∞: ${amount} USDT –∫–∞–∂–¥—ã–π\n` +
              `üéÆ –ò–≥—Ä–∞: ${getGameName(gameType)}\n` +
              `üèÜ –§–æ—Ä–º–∞—Ç: ${format.toUpperCase()}\n\n` +
              `‚è±Ô∏è –ù–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ –¥–ª—è –æ—Ç–≤–µ—Ç–∞`,
            parse_mode: 'Markdown'
          },
          reply_markup: {
            inline_keyboard: [[
              {
                text: `‚úÖ –ü—Ä–∏–Ω—è—Ç—å –¥—É—ç–ª—å ${gameType}`,
                callback_data: `inline_accept_${challengerId}_${username}_${targetUsername}_${amount}_${gameType}_${format}`
              },
              {
                text: '‚ùå –û—Ç–∫–ª–æ–Ω–∏—Ç—å',
                callback_data: `inline_decline_${challengerId}`
              }
            ]]
          }
        });
      }
      
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–æ—Å—Ç—ã–µ –∫–æ–º–∞–Ω–¥—ã
      if (query.startsWith('duel') && results.length === 0) {
        results.push({
          type: 'article',
          id: 'duel_help',
          title: '‚ö†Ô∏è –ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥—É—ç–ª–∏',
          description: '–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ: duel @username —Å—É–º–º–∞',
          input_message_content: {
            message_text: `‚ùå **–ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –∫–æ–º–∞–Ω–¥—ã**\n\n` +
              `–ü—Ä–∞–≤–∏–ª—å–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç:\n` +
              `‚Ä¢ \`duel @username 50\` - –±—ã—Å—Ç—Ä–∞—è –¥—É—ç–ª—å\n` +
              `‚Ä¢ \`duel @username 100 üéØ\` - –¥–∞—Ä—Ç—Å\n` +
              `‚Ä¢ \`duel @username 50 üé≤ bo3\` - –∫–æ—Å—Ç–∏ –¥–æ 2 –ø–æ–±–µ–¥\n\n` +
              `–í–∞—à –∑–∞–ø—Ä–æ—Å: \`${ctx.inlineQuery.query}\``,
            parse_mode: 'Markdown'
          }
        });
      }
      
      // –í–°–ï–ì–î–ê –¥–æ–±–∞–≤–ª—è–µ–º –±–∞–∑–æ–≤—ã–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
      results.push({
        type: 'article',
        id: 'always_test',
        title: 'üß™ –¢–µ—Å—Ç inline mode',
        description: `–ó–∞–ø—Ä–æ—Å: "${ctx.inlineQuery.query || '–ø—É—Å—Ç–æ–π'}"`,
        input_message_content: {
          message_text: `‚úÖ Inline mode —Ä–∞–±–æ—Ç–∞–µ—Ç!\n\n–í–∞—à –∑–∞–ø—Ä–æ—Å: "${ctx.inlineQuery.query}"\n–í—Ä–µ–º—è: ${new Date().toLocaleString()}`
        }
      });
      
      // –ï—Å–ª–∏ –Ω–∏—á–µ–≥–æ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ, –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–æ–¥—Å–∫–∞–∑–∫—É
      if (results.length === 1) { // 1 –ø–æ—Ç–æ–º—É —á—Ç–æ test —É–∂–µ –¥–æ–±–∞–≤–ª–µ–Ω
        results.push({
          type: 'article',
          id: 'help',
          title: 'üí° –ö–∞–∫ —Å–æ–∑–¥–∞—Ç—å –¥—É—ç–ª—å',
          description: '–§–æ—Ä–º–∞—Ç: duel @username —Å—É–º–º–∞',
          input_message_content: {
            message_text: `üìñ **–ö–∞–∫ —Å–æ–∑–¥–∞—Ç—å –¥—É—ç–ª—å:**\n\n` +
              `–í–≤–µ–¥–∏—Ç–µ: \`duel @username 50\`\n` +
              `–î–æ—Å—Ç—É–ø–Ω—ã–µ –∏–≥—Ä—ã: üé≤ üéØ ‚öΩ üèÄ üé∞ üé≥`,
            parse_mode: 'Markdown'
          }
        });
      }
      
      // –î–æ–±–∞–≤–ª—è–µ–º —Ç–µ—Å—Ç–æ–≤—ã–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏
      if (query.includes('test')) {
        results.unshift({
          type: 'article',
          id: 'test_result',
          title: 'üß™ –¢–µ—Å—Ç–æ–≤—ã–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç',
          description: '–ü—Ä–æ–≤–µ—Ä–∫–∞ inline mode',
          input_message_content: {
            message_text: '–¢–µ—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç inline –±–æ—Ç–∞'
          }
        });
      }
      
      console.log('üì§ –û—Ç–ø—Ä–∞–≤–ª—è–µ–º inline —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã:', {
        resultsCount: results.length,
        results: results.map(r => ({ 
          id: r.id, 
          title: r.title,
          hasButtons: !!r.reply_markup?.inline_keyboard,
          buttonCount: r.reply_markup?.inline_keyboard?.[0]?.length || 0
        }))
      });
      
      await ctx.answerInlineQuery(results, {
        cache_time: 0,
        is_personal: true
      });
      
    } catch (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ inline query:', error);
      await ctx.answerInlineQuery([]);
    }
  });
  
  // –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ inline —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞ (–∫–æ–≥–¥–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ)
  bot.on('chosen_inline_result', async (ctx) => {
    try {
      console.log('‚úÖ Inline —Ä–µ–∑—É–ª—å—Ç–∞—Ç –≤—ã–±—Ä–∞–Ω:', {
        resultId: ctx.chosenInlineResult.result_id,
        query: ctx.chosenInlineResult.query,
        from: ctx.from.username,
        userId: ctx.from.id,
        inlineMessageId: ctx.chosenInlineResult.inline_message_id,
        fullEvent: ctx.chosenInlineResult
      });
      
      const resultId = ctx.chosenInlineResult.result_id;
      const query = ctx.chosenInlineResult.query;
      
      // Inline —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –¥—É—ç–ª–µ–π –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞—é—Ç—Å—è —á–µ—Ä–µ–∑ callback –∫–Ω–æ–ø–∫–∏
      console.log('‚úÖ Inline —Ä–µ–∑—É–ª—å—Ç–∞—Ç –≤—ã–±—Ä–∞–Ω (–æ–±—Ä–∞–±–æ—Ç–∫–∞ —á–µ—Ä–µ–∑ callback –∫–Ω–æ–ø–∫–∏)');
      
    } catch (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ chosen_inline_result:', error);
    }
  });
}

/**
 * –ü–æ–ª—É—á–∞–µ–º –Ω–∞–∑–≤–∞–Ω–∏–µ –∏–≥—Ä—ã –ø–æ —ç–º–æ–¥–∑–∏
 */
function getGameName(gameType) {
  const gameNames = {
    'üé≤': '–ö–æ—Å—Ç–∏',
    'üéØ': '–î–∞—Ä—Ç—Å', 
    '‚öΩ': '–§—É—Ç–±–æ–ª',
    'üèÄ': '–ë–∞—Å–∫–µ—Ç–±–æ–ª',
    'üé∞': '–°–ª–æ—Ç—ã',
    'üé≥': '–ë–æ—É–ª–∏–Ω–≥'
  };
  return gameNames[gameType] || '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∏–≥—Ä–∞';
}

module.exports = {
  registerInlineHandlers
};