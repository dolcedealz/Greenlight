#!/usr/bin/env node

/**
 * –ü–û–õ–ù–´–ô –°–ë–†–û–° –¢–ï–°–¢–û–í–´–• –î–ê–ù–ù–´–•
 * 
 * –≠—Ç–æ—Ç —Å–∫—Ä–∏–ø—Ç —É–¥–∞–ª—è–µ—Ç –í–°–ï —Ç–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ –∏–∑ –±–∞–∑—ã –∏ –≥–æ—Ç–æ–≤–∏—Ç —Å–∏—Å—Ç–µ–º—É 
 * –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å —Ä–µ–∞–ª—å–Ω—ã–º–∏ –¥–µ–Ω—å–≥–∞–º–∏.
 * 
 * –í–ù–ò–ú–ê–ù–ò–ï: –û–ø–µ—Ä–∞—Ü–∏—è –Ω–µ–æ–±—Ä–∞—Ç–∏–º–∞!
 */

const mongoose = require('mongoose');
require('dotenv').config();

// –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º –≤—Å–µ –º–æ–¥–µ–ª–∏
const User = require('./src/models/user.model');
const Game = require('./src/models/game.model');
const Transaction = require('./src/models/transaction.model');
const Deposit = require('./src/models/deposit.model');
const Withdrawal = require('./src/models/withdrawal.model');
const CasinoFinance = require('./src/models/casino-finance.model');
const ReferralEarning = require('./src/models/referral-earning.model');
const ReferralPayout = require('./src/models/referral-payout.model');
const Promocode = require('./src/models/promocode.model');
const CrashRound = require('./src/models/crash-round.model');
const CrashHistory = require('./src/models/crash-history.model');
const Duel = require('./src/models/duel.model');
const DuelRound = require('./src/models/duel-round.model');
const DuelInvitation = require('./src/models/duel-invitation.model');
const Event = require('./src/models/Event');
const EventBet = require('./src/models/EventBet');
const PartnerLog = require('./src/models/partner-log.model');

class DataResetService {
  constructor() {
    this.resetLog = [];
  }

  log(message) {
    const timestamp = new Date().toISOString();
    const logMessage = `[${timestamp}] ${message}`;
    console.log(logMessage);
    this.resetLog.push(logMessage);
  }

  async connectDB() {
    try {
      await mongoose.connect(process.env.MONGODB_URI);
      this.log('‚úÖ –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ MongoDB —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ');
    } catch (error) {
      this.log(`‚ùå –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ MongoDB: ${error.message}`);
      throw error;
    }
  }

  async resetUsers() {
    this.log('üîÑ –°–±—Ä–æ—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π...');
    
    // –°–±—Ä–∞—Å—ã–≤–∞–µ–º –±–∞–ª–∞–Ω—Å—ã –∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É, –Ω–æ –æ—Å—Ç–∞–≤–ª—è–µ–º –æ—Å–Ω–æ–≤–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é
    const result = await User.updateMany(
      {},
      {
        $set: {
          balance: 0,
          totalWagered: 0,
          totalWon: 0,
          totalGames: 0,
          totalDeposited: 0,
          totalWithdrawn: 0,
          'referralStats.referralBalance': 0,
          'referralStats.totalEarned': 0,
          'referralStats.totalWithdrawn': 0,
          'referralStats.totalReferrals': 0,
          'referralStats.activeReferrals': 0,
          'referralStats.level': 'bronze',
          'referralStats.commissionPercent': 5,
          freespins: {},
          activeDepositBonuses: [],
          lockedFunds: [],
          'gameStats.totalGames': 0,
          'gameStats.totalWagered': 0,
          'gameStats.totalWon': 0,
          'gameStats.winRate': 0,
          'gameStats.biggestWin': 0,
          'gameStats.currentStreak': 0,
          'gameStats.bestStreak': 0,
          'gameStats.favoriteGame': null,
          'gameStats.lastGame': null,
          // –°–±—Ä–∞—Å—ã–≤–∞–µ–º –º–æ–¥–∏—Ñ–∏–∫–∞—Ç–æ—Ä—ã —à–∞–Ω—Å–æ–≤ –≤—ã–∏–≥—Ä—ã—à–∞
          'gameSettings.coinWinChance': 50,
          'gameSettings.minesWinModifier': 1,
          'gameSettings.slotsWinModifier': 1
        }
      }
    );
    
    this.log(`‚úÖ –°–±—Ä–æ—à–µ–Ω–æ ${result.modifiedCount} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π`);
  }

  async resetGames() {
    this.log('üîÑ –£–¥–∞–ª–µ–Ω–∏–µ –≤—Å–µ—Ö –∏–≥—Ä...');
    
    const gamesCount = await Game.countDocuments();
    await Game.deleteMany({});
    
    this.log(`‚úÖ –£–¥–∞–ª–µ–Ω–æ ${gamesCount} –∏–≥—Ä`);
  }

  async resetTransactions() {
    this.log('üîÑ –£–¥–∞–ª–µ–Ω–∏–µ –≤—Å–µ—Ö —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π...');
    
    const transactionsCount = await Transaction.countDocuments();
    await Transaction.deleteMany({});
    
    this.log(`‚úÖ –£–¥–∞–ª–µ–Ω–æ ${transactionsCount} —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π`);
  }

  async resetDepositsWithdrawals() {
    this.log('üîÑ –£–¥–∞–ª–µ–Ω–∏–µ –¥–µ–ø–æ–∑–∏—Ç–æ–≤ –∏ –≤—ã–≤–æ–¥–æ–≤...');
    
    const depositsCount = await Deposit.countDocuments();
    const withdrawalsCount = await Withdrawal.countDocuments();
    
    await Deposit.deleteMany({});
    await Withdrawal.deleteMany({});
    
    this.log(`‚úÖ –£–¥–∞–ª–µ–Ω–æ ${depositsCount} –¥–µ–ø–æ–∑–∏—Ç–æ–≤ –∏ ${withdrawalsCount} –≤—ã–≤–æ–¥–æ–≤`);
  }

  async resetReferralData() {
    this.log('üîÑ –°–±—Ä–æ—Å —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö...');
    
    const earningsCount = await ReferralEarning.countDocuments();
    const payoutsCount = await ReferralPayout.countDocuments();
    const partnerLogsCount = await PartnerLog.countDocuments();
    
    await ReferralEarning.deleteMany({});
    await ReferralPayout.deleteMany({});
    await PartnerLog.deleteMany({});
    
    this.log(`‚úÖ –£–¥–∞–ª–µ–Ω–æ ${earningsCount} –Ω–∞—á–∏—Å–ª–µ–Ω–∏–π, ${payoutsCount} –≤—ã–ø–ª–∞—Ç, ${partnerLogsCount} –ª–æ–≥–æ–≤`);
  }

  async resetPromocodes() {
    this.log('üîÑ –°–±—Ä–æ—Å –ø—Ä–æ–º–æ–∫–æ–¥–æ–≤...');
    
    // –û—á–∏—â–∞–µ–º –∞–∫—Ç–∏–≤–∞—Ü–∏–∏ –ø—Ä–æ–º–æ–∫–æ–¥–æ–≤, –Ω–æ –æ—Å—Ç–∞–≤–ª—è–µ–º —Å–∞–º–∏ –ø—Ä–æ–º–æ–∫–æ–¥—ã
    const result = await Promocode.updateMany(
      {},
      {
        $set: {
          usedCount: 0,
          activatedBy: [],
          'stats.totalActivated': 0,
          'stats.totalValue': 0,
          'stats.averageUserValue': 0,
          'stats.successRate': 0,
          'stats.lastActivation': null
        }
      }
    );
    
    this.log(`‚úÖ –°–±—Ä–æ—à–µ–Ω–æ ${result.modifiedCount} –ø—Ä–æ–º–æ–∫–æ–¥–æ–≤`);
  }

  async resetCrashData() {
    this.log('üîÑ –£–¥–∞–ª–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö Crash –∏–≥—Ä—ã...');
    
    const roundsCount = await CrashRound.countDocuments();
    const historyCount = await CrashHistory.countDocuments();
    
    await CrashRound.deleteMany({});
    await CrashHistory.deleteMany({});
    
    this.log(`‚úÖ –£–¥–∞–ª–µ–Ω–æ ${roundsCount} —Ä–∞—É–Ω–¥–æ–≤ –∏ ${historyCount} –∑–∞–ø–∏—Å–µ–π –∏—Å—Ç–æ—Ä–∏–∏ Crash`);
  }

  async resetDuels() {
    this.log('üîÑ –£–¥–∞–ª–µ–Ω–∏–µ –¥—É—ç–ª–µ–π...');
    
    const duelsCount = await Duel.countDocuments();
    const duelRoundsCount = await DuelRound.countDocuments();
    const invitationsCount = await DuelInvitation.countDocuments();
    
    await Duel.deleteMany({});
    await DuelRound.deleteMany({});
    await DuelInvitation.deleteMany({});
    
    this.log(`‚úÖ –£–¥–∞–ª–µ–Ω–æ ${duelsCount} –¥—É—ç–ª–µ–π, ${duelRoundsCount} —Ä–∞—É–Ω–¥–æ–≤, ${invitationsCount} –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏–π`);
  }

  async resetEvents() {
    this.log('üîÑ –£–¥–∞–ª–µ–Ω–∏–µ —Å–æ–±—ã—Ç–∏–π –∏ —Å—Ç–∞–≤–æ–∫...');
    
    const eventsCount = await Event.countDocuments();
    const eventBetsCount = await EventBet.countDocuments();
    
    await Event.deleteMany({});
    await EventBet.deleteMany({});
    
    this.log(`‚úÖ –£–¥–∞–ª–µ–Ω–æ ${eventsCount} —Å–æ–±—ã—Ç–∏–π –∏ ${eventBetsCount} —Å—Ç–∞–≤–æ–∫`);
  }

  async resetCasinoFinance() {
    this.log('üîÑ –°–±—Ä–æ—Å —Ñ–∏–Ω–∞–Ω—Å–æ–≤ –∫–∞–∑–∏–Ω–æ...');
    
    // –ü–æ–ª–Ω–æ—Å—Ç—å—é –ø–µ—Ä–µ—Å–æ–∑–¥–∞–µ–º –∑–∞–ø–∏—Å—å casino-finance
    await CasinoFinance.deleteMany({});
    
    const newFinance = new CasinoFinance({
      totalUserBalance: 0,
      operationalBalance: 0,
      reserveBalance: 0,
      availableForWithdrawal: 0,
      reservePercentage: 30,
      totalBets: 0,
      totalWins: 0,
      totalCommissions: 0,
      commissionBreakdown: {
        duels: 0,
        events: 0
      },
      totalPromocodeExpenses: 0,
      totalDeposits: 0,
      totalWithdrawals: 0,
      totalOwnerWithdrawals: 0,
      totalReferralPayments: 0,
      gameStats: {
        coin: { totalBets: 0, totalWins: 0, totalGames: 0, profit: 0 },
        mines: { totalBets: 0, totalWins: 0, totalGames: 0, profit: 0 },
        slots: { totalBets: 0, totalWins: 0, totalGames: 0, profit: 0 },
        crash: { totalBets: 0, totalWins: 0, totalGames: 0, profit: 0 },
        events: { totalBets: 0, totalWins: 0, totalGames: 0, profit: 0, totalEventBets: 0, totalPayouts: 0 }
      },
      balanceHistory: [],
      warnings: {
        lowReserve: false,
        highRiskRatio: false,
        negativeOperational: false
      },
      lastCalculated: new Date(),
      lastOwnerWithdrawal: null
    });
    
    await newFinance.save();
    
    this.log('‚úÖ –§–∏–Ω–∞–Ω—Å—ã –∫–∞–∑–∏–Ω–æ –ø–æ–ª–Ω–æ—Å—Ç—å—é —Å–±—Ä–æ—à–µ–Ω—ã');
  }

  async verifyReset() {
    this.log('üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ —Å–±—Ä–æ—Å–∞...');
    
    const stats = {
      users: await User.countDocuments(),
      usersWithBalance: await User.countDocuments({ balance: { $gt: 0 } }),
      games: await Game.countDocuments(),
      transactions: await Transaction.countDocuments(),
      deposits: await Deposit.countDocuments(),
      withdrawals: await Withdrawal.countDocuments(),
      referralEarnings: await ReferralEarning.countDocuments(),
      referralPayouts: await ReferralPayout.countDocuments(),
      crashRounds: await CrashRound.countDocuments(),
      duels: await Duel.countDocuments(),
      events: await Event.countDocuments(),
      eventBets: await EventBet.countDocuments()
    };
    
    this.log('üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ—Å–ª–µ —Å–±—Ä–æ—Å–∞:');
    this.log(`   –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏: ${stats.users} (—Å –±–∞–ª–∞–Ω—Å–æ–º: ${stats.usersWithBalance})`);
    this.log(`   –ò–≥—Ä—ã: ${stats.games}`);
    this.log(`   –¢—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏: ${stats.transactions}`);
    this.log(`   –î–µ–ø–æ–∑–∏—Ç—ã: ${stats.deposits}`);
    this.log(`   –í—ã–≤–æ–¥—ã: ${stats.withdrawals}`);
    this.log(`   –†–µ—Ñ–µ—Ä–∞–ª—å–Ω—ã–µ –Ω–∞—á–∏—Å–ª–µ–Ω–∏—è: ${stats.referralEarnings}`);
    this.log(`   –†–µ—Ñ–µ—Ä–∞–ª—å–Ω—ã–µ –≤—ã–ø–ª–∞—Ç—ã: ${stats.referralPayouts}`);
    this.log(`   Crash —Ä–∞—É–Ω–¥—ã: ${stats.crashRounds}`);
    this.log(`   –î—É—ç–ª–∏: ${stats.duels}`);
    this.log(`   –°–æ–±—ã—Ç–∏—è: ${stats.events}`);
    this.log(`   –°—Ç–∞–≤–∫–∏ –Ω–∞ —Å–æ–±—ã—Ç–∏—è: ${stats.eventBets}`);
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ñ–∏–Ω–∞–Ω—Å—ã
    const finance = await CasinoFinance.findOne();
    this.log(`üí∞ –§–∏–Ω–∞–Ω—Å—ã –∫–∞–∑–∏–Ω–æ:`);
    this.log(`   –ë–∞–ª–∞–Ω—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: ${finance.totalUserBalance} USDT`);
    this.log(`   –û–ø–µ—Ä–∞—Ç–∏–≤–Ω—ã–π –±–∞–ª–∞–Ω—Å: ${finance.operationalBalance} USDT`);
    this.log(`   –†–µ–∑–µ—Ä–≤: ${finance.reserveBalance} USDT`);
    
    return stats;
  }

  async performFullReset() {
    try {
      this.log('üöÄ –ù–ê–ß–ê–õ–û –ü–û–õ–ù–û–ì–û –°–ë–†–û–°–ê –î–ê–ù–ù–´–•');
      this.log('‚ö†Ô∏è  –í—Å–µ —Ç–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ –±—É–¥—É—Ç —É–¥–∞–ª–µ–Ω—ã!');
      
      await this.connectDB();
      
      // –í—ã–ø–æ–ª–Ω—è–µ–º —Å–±—Ä–æ—Å –≤ –ø—Ä–∞–≤–∏–ª—å–Ω–æ–º –ø–æ—Ä—è–¥–∫–µ
      await this.resetGames();
      await this.resetTransactions();
      await this.resetDepositsWithdrawals();
      await this.resetReferralData();
      await this.resetPromocodes();
      await this.resetCrashData();
      await this.resetDuels();
      await this.resetEvents();
      await this.resetUsers();
      await this.resetCasinoFinance();
      
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
      const stats = await this.verifyReset();
      
      this.log('‚úÖ –ü–û–õ–ù–´–ô –°–ë–†–û–° –ó–ê–í–ï–†–®–ï–ù –£–°–ü–ï–®–ù–û');
      this.log('üéØ –°–∏—Å—Ç–µ–º–∞ –≥–æ—Ç–æ–≤–∞ –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å —Ä–µ–∞–ª—å–Ω—ã–º–∏ –¥–µ–Ω—å–≥–∞–º–∏');
      
      return {
        success: true,
        stats,
        log: this.resetLog
      };
      
    } catch (error) {
      this.log(`‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–±—Ä–æ—Å–µ: ${error.message}`);
      throw error;
    } finally {
      await mongoose.disconnect();
      this.log('üîå –°–æ–µ–¥–∏–Ω–µ–Ω–∏–µ —Å –ë–î –∑–∞–∫—Ä—ã—Ç–æ');
    }
  }
}

// –§—É–Ω–∫—Ü–∏—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è
function askConfirmation() {
  return new Promise((resolve) => {
    const readline = require('readline');
    const rl = readline.createInterface({
      input: process.stdin,
      output: process.stdout
    });
    
    console.log('\n‚ö†Ô∏è  –í–ù–ò–ú–ê–ù–ò–ï! ‚ö†Ô∏è');
    console.log('–í—ã —Å–æ–±–∏—Ä–∞–µ—Ç–µ—Å—å —É–¥–∞–ª–∏—Ç—å –í–°–ï —Ç–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ:');
    console.log('- –í—Å–µ –∏–≥—Ä—ã –∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É');
    console.log('- –í—Å–µ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏');
    console.log('- –í—Å–µ –¥–µ–ø–æ–∑–∏—Ç—ã –∏ –≤—ã–≤–æ–¥—ã');
    console.log('- –í—Å–µ —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ');
    console.log('- –ë–∞–ª–∞–Ω—Å—ã –≤—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π');
    console.log('- –§–∏–Ω–∞–Ω—Å–æ–≤—É—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –∫–∞–∑–∏–Ω–æ');
    console.log('\n–≠—Ç–æ –¥–µ–π—Å—Ç–≤–∏–µ –ù–ï–û–ë–†–ê–¢–ò–ú–û!\n');
    
    rl.question('–í—ã —É–≤–µ—Ä–µ–Ω—ã? –í–≤–µ–¥–∏—Ç–µ "YES" –¥–ª—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è: ', (answer) => {
      rl.close();
      resolve(answer === 'YES');
    });
  });
}

// –û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è
async function main() {
  try {
    console.log('üé∞ GREENLIGHT CASINO - –°–ë–†–û–° –¢–ï–°–¢–û–í–´–• –î–ê–ù–ù–´–•\n');
    
    const confirmed = await askConfirmation();
    
    if (!confirmed) {
      console.log('‚ùå –û–ø–µ—Ä–∞—Ü–∏—è –æ—Ç–º–µ–Ω–µ–Ω–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º');
      process.exit(0);
    }
    
    const resetService = new DataResetService();
    const result = await resetService.performFullReset();
    
    console.log('\nüìù –û–¢–ß–ï–¢ –û –°–ë–†–û–°–ï:');
    result.log.forEach(logEntry => console.log(logEntry));
    
    console.log('\nüéâ –°–∏—Å—Ç–µ–º–∞ –≥–æ—Ç–æ–≤–∞ –∫ —Ä–∞–±–æ—Ç–µ —Å —Ä–µ–∞–ª—å–Ω—ã–º–∏ –¥–µ–Ω—å–≥–∞–º–∏!');
    console.log('üí° –¢–µ–ø–µ—Ä—å –º–æ–∂–µ—Ç–µ –ø–æ–ø–æ–ª–Ω–∏—Ç—å —Ä–µ–∞–ª—å–Ω—ã–π –±–∞–ª–∞–Ω—Å –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è');
    
  } catch (error) {
    console.error('\nüí• –ö–†–ò–¢–ò–ß–ï–°–ö–ê–Ø –û–®–ò–ë–ö–ê:', error);
    console.error('\nüÜò –û–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ —Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫—É!');
    process.exit(1);
  }
}

// –≠–∫—Å–ø–æ—Ä—Ç–∏—Ä—É–µ–º –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –∫–∞–∫ –º–æ–¥—É–ª—å
module.exports = DataResetService;

// –ó–∞–ø—É—Å–∫–∞–µ–º –µ—Å–ª–∏ –≤—ã–∑–≤–∞–Ω –Ω–∞–ø—Ä—è–º—É—é
if (require.main === module) {
  main();
}