#!/usr/bin/env node

/**
 * –°–∫—Ä–∏–ø—Ç –¥–ª—è –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Ñ–∏–Ω–∞–Ω—Å–æ–≤–æ–π –ª–æ–≥–∏–∫–∏
 * 
 * –ü—Ä–∞–≤–∏–ª—å–Ω–∞—è —Ñ–æ—Ä–º—É–ª–∞:
 * –ë–∞–ª–∞–Ω—Å CryptoBot = –û–ø–µ—Ä–∞—Ç–∏–≤–Ω—ã–π –±–∞–ª–∞–Ω—Å + –ë–∞–ª–∞–Ω—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
 * 
 * –ì–¥–µ:
 * - –û–ø–µ—Ä–∞—Ç–∏–≤–Ω—ã–π –±–∞–ª–∞–Ω—Å = –î–µ–ø–æ–∑–∏—Ç—ã - –í—ã–≤–æ–¥—ã - –ë–∞–ª–∞–Ω—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
 * - –ë–∞–ª–∞–Ω—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π = –°—É–º–º–∞ –≤—Å–µ—Ö –±–∞–ª–∞–Ω—Å–æ–≤ (–æ—Å–Ω–æ–≤–Ω–æ–π + —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω—ã–π)
 */

require('dotenv').config();
const mongoose = require('mongoose');
const { CasinoFinance, User, Deposit, Withdrawal, Game, Transaction } = require('./src/models');
const { createLogger } = require('./src/utils/logger');

const logger = createLogger('FIX_FINANCE');

async function connectDB() {
  try {
    await mongoose.connect(process.env.MONGODB_URI);
    logger.info('‚úÖ –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ MongoDB —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ');
  } catch (error) {
    logger.error('‚ùå –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ MongoDB:', error);
    process.exit(1);
  }
}

async function fixFinancialLogic() {
  try {
    logger.info('üîß –ù–∞—á–∏–Ω–∞–µ–º –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Ñ–∏–Ω–∞–Ω—Å–æ–≤–æ–π –ª–æ–≥–∏–∫–∏...');
    
    // –ü–æ–ª—É—á–∞–µ–º –∏–ª–∏ —Å–æ–∑–¥–∞–µ–º –∑–∞–ø–∏—Å—å —Ñ–∏–Ω–∞–Ω—Å–æ–≤
    let finance = await CasinoFinance.findOne();
    if (!finance) {
      finance = new CasinoFinance();
      logger.info('üìù –°–æ–∑–¥–∞–Ω–∞ –Ω–æ–≤–∞—è –∑–∞–ø–∏—Å—å —Ñ–∏–Ω–∞–Ω—Å–æ–≤ –∫–∞–∑–∏–Ω–æ');
    }
    
    // 1. –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º –æ–±—â–∏–π –±–∞–ª–∞–Ω—Å –≤—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
    const userBalanceResult = await User.aggregate([
      { $match: { isBlocked: false } },
      { 
        $group: { 
          _id: null, 
          regularBalance: { $sum: '$balance' },
          referralBalance: { $sum: '$referralStats.referralBalance' }
        } 
      }
    ]);
    
    const regularBalance = userBalanceResult[0]?.regularBalance || 0;
    const referralBalance = userBalanceResult[0]?.referralBalance || 0;
    const totalUserBalance = regularBalance + referralBalance;
    
    logger.info(`üí∞ –ë–∞–ª–∞–Ω—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π:`);
    logger.info(`   - –û—Å–Ω–æ–≤–Ω–æ–π: ${regularBalance.toFixed(2)} USDT`);
    logger.info(`   - –†–µ—Ñ–µ—Ä–∞–ª—å–Ω—ã–π: ${referralBalance.toFixed(2)} USDT`);
    logger.info(`   - –û–±—â–∏–π: ${totalUserBalance.toFixed(2)} USDT`);
    
    // 2. –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º —Å—É–º–º—ã –¥–µ–ø–æ–∑–∏—Ç–æ–≤ –∏ –≤—ã–≤–æ–¥–æ–≤
    const [depositStats, withdrawalStats] = await Promise.all([
      Deposit.aggregate([
        { $match: { status: 'paid' } },
        { $group: { _id: null, total: { $sum: '$amount' } } }
      ]),
      Withdrawal.aggregate([
        { $match: { status: 'completed' } },
        { $group: { _id: null, total: { $sum: '$amount' } } }
      ])
    ]);
    
    const totalDeposits = depositStats[0]?.total || 0;
    const totalWithdrawals = withdrawalStats[0]?.total || 0;
    
    logger.info(`üí≥ –î–≤–∏–∂–µ–Ω–∏–µ —Å—Ä–µ–¥—Å—Ç–≤:`);
    logger.info(`   - –í—Å–µ–≥–æ –¥–µ–ø–æ–∑–∏—Ç–æ–≤: ${totalDeposits.toFixed(2)} USDT`);
    logger.info(`   - –í—Å–µ–≥–æ –≤—ã–≤–æ–¥–æ–≤: ${totalWithdrawals.toFixed(2)} USDT`);
    
    // 3. –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π –æ–ø–µ—Ä–∞—Ç–∏–≤–Ω—ã–π –±–∞–ª–∞–Ω—Å
    const operationalBalance = totalDeposits - totalWithdrawals - totalUserBalance;
    
    logger.info(`üìä –†–∞—Å—á–µ—Ç –æ–ø–µ—Ä–∞—Ç–∏–≤–Ω–æ–≥–æ –±–∞–ª–∞–Ω—Å–∞:`);
    logger.info(`   –§–æ—Ä–º—É–ª–∞: –î–µ–ø–æ–∑–∏—Ç—ã - –í—ã–≤–æ–¥—ã - –ë–∞–ª–∞–Ω—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π`);
    logger.info(`   ${totalDeposits.toFixed(2)} - ${totalWithdrawals.toFixed(2)} - ${totalUserBalance.toFixed(2)} = ${operationalBalance.toFixed(2)} USDT`);
    
    // 4. –û–∂–∏–¥–∞–µ–º—ã–π –±–∞–ª–∞–Ω—Å CryptoBot
    const expectedCryptoBotBalance = operationalBalance + totalUserBalance;
    
    logger.info(`üéØ –û–∂–∏–¥–∞–µ–º—ã–π –±–∞–ª–∞–Ω—Å CryptoBot:`);
    logger.info(`   –§–æ—Ä–º—É–ª–∞: –û–ø–µ—Ä–∞—Ç–∏–≤–Ω—ã–π + –ë–∞–ª–∞–Ω—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π`);
    logger.info(`   ${operationalBalance.toFixed(2)} + ${totalUserBalance.toFixed(2)} = ${expectedCryptoBotBalance.toFixed(2)} USDT`);
    
    // 5. –û–±–Ω–æ–≤–ª—è–µ–º –∑–∞–ø–∏—Å—å —Ñ–∏–Ω–∞–Ω—Å–æ–≤
    finance.totalUserBalance = totalUserBalance;
    finance.totalDeposits = totalDeposits;
    finance.totalWithdrawals = totalWithdrawals;
    finance.operationalBalance = operationalBalance;
    
    // 6. –¢–∞–∫–∂–µ –æ–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –∏–≥—Ä –¥–ª—è –ø–æ–ª–Ω–æ—Ç—ã –∫–∞—Ä—Ç–∏–Ω—ã
    const gameStats = await Game.aggregate([
      {
        $group: {
          _id: '$gameType',
          totalBets: { $sum: '$bet' },
          totalWins: { $sum: { $cond: ['$win', { $add: ['$bet', '$profit'] }, 0] } },
          totalGames: { $sum: 1 }
        }
      }
    ]);
    
    finance.totalBets = 0;
    finance.totalWins = 0;
    
    gameStats.forEach(stat => {
      if (finance.gameStats[stat._id]) {
        finance.gameStats[stat._id].totalBets = stat.totalBets;
        finance.gameStats[stat._id].totalWins = stat.totalWins;
        finance.gameStats[stat._id].totalGames = stat.totalGames;
        finance.gameStats[stat._id].profit = stat.totalBets - stat.totalWins;
        
        finance.totalBets += stat.totalBets;
        finance.totalWins += stat.totalWins;
      }
    });
    
    const gameProfit = finance.totalBets - finance.totalWins;
    logger.info(`üéÆ –ü—Ä–∏–±—ã–ª—å –æ—Ç –∏–≥—Ä: ${gameProfit.toFixed(2)} USDT`);
    logger.info(`   (–≠—Ç–æ —É–∂–µ —É—á—Ç–µ–Ω–æ –≤ –±–∞–ª–∞–Ω—Å–∞—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π)`);
    
    // 7. –ü–µ—Ä–µ—Å—á–∏—Ç—ã–≤–∞–µ–º —Ä–µ–∑–µ—Ä–≤
    finance.calculateReserve();
    finance.checkWarnings();
    finance.lastCalculated = new Date();
    
    await finance.save();
    
    logger.info('‚úÖ –§–∏–Ω–∞–Ω—Å–æ–≤–∞—è –ª–æ–≥–∏–∫–∞ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∞!');
    
    // 8. –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
    logger.info('');
    logger.info('üìã –ò–¢–û–ì–û–í–´–ô –û–¢–ß–ï–¢:');
    logger.info(`   –ë–∞–ª–∞–Ω—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: ${finance.totalUserBalance.toFixed(2)} USDT`);
    logger.info(`   –û–ø–µ—Ä–∞—Ç–∏–≤–Ω—ã–π –±–∞–ª–∞–Ω—Å: ${finance.operationalBalance.toFixed(2)} USDT`);
    logger.info(`   –û–∂–∏–¥–∞–µ–º—ã–π –±–∞–ª–∞–Ω—Å CryptoBot: ${expectedCryptoBotBalance.toFixed(2)} USDT`);
    logger.info(`   –†–µ–∑–µ—Ä–≤ (${finance.reservePercentage}%): ${finance.reserveBalance.toFixed(2)} USDT`);
    logger.info(`   –î–æ—Å—Ç—É–ø–Ω–æ –¥–ª—è –≤—ã–≤–æ–¥–∞: ${finance.availableForWithdrawal.toFixed(2)} USDT`);
    
    return {
      success: true,
      totalUserBalance,
      operationalBalance,
      expectedCryptoBotBalance,
      totalDeposits,
      totalWithdrawals
    };
    
  } catch (error) {
    logger.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–∏ —Ñ–∏–Ω–∞–Ω—Å–æ–≤–æ–π –ª–æ–≥–∏–∫–∏:', error);
    throw error;
  }
}

async function main() {
  await connectDB();
  await fixFinancialLogic();
  await mongoose.disconnect();
  logger.info('üîå –°–æ–µ–¥–∏–Ω–µ–Ω–∏–µ —Å –ë–î –∑–∞–∫—Ä—ã—Ç–æ');
  process.exit(0);
}

// –ó–∞–ø—É—Å–∫ —Å–∫—Ä–∏–ø—Ç–∞
main().catch(error => {
  logger.error('‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞:', error);
  process.exit(1);
});