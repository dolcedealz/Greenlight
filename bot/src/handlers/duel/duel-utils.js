// bot/src/handlers/duel/duel-utils.js

/**
 * –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ –∏–≥—Ä –¥–ª—è –¥—É—ç–ª–µ–π
 */
function getGameConfig(gameType) {
  const gameConfigs = {
    'üé≤': {
      emoji: 'üé≤',
      name: '–ö–æ—Å—Ç–∏',
      actionText: '–ë—Ä–æ—Å–∏—Ç—å –∫–æ—Å—Ç—å',
      processText: '–ë—Ä–æ—Å–∞–µ–º –∫–æ—Å—Ç—å...',
      resultText: '–†–µ–∑—É–ª—å—Ç–∞—Ç –±—Ä–æ—Å–∫–∞ –∫–æ—Å—Ç–∏',
      maxValue: 6,
      rules: '–ë–æ–ª—å—à–µ –∑–Ω–∞—á–µ–Ω–∏–µ - –ø–æ–±–µ–¥–∞'
    },
    'üéØ': {
      emoji: 'üéØ',
      name: '–î–∞—Ä—Ç—Å',
      actionText: '–ë—Ä–æ—Å–∏—Ç—å –¥–∞—Ä—Ç—Å',
      processText: '–ë—Ä–æ—Å–∞–µ–º –¥–∞—Ä—Ç—Å...',
      resultText: '–†–µ–∑—É–ª—å—Ç–∞—Ç –±—Ä–æ—Å–∫–∞ –¥–∞—Ä—Ç—Å–∞',
      maxValue: 6,
      rules: '–¶–µ–Ω—Ç—Ä (6) –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç, –ø–æ—Ç–æ–º –±–æ–ª—å—à–µ –∑–Ω–∞—á–µ–Ω–∏–µ'
    },
    '‚öΩ': {
      emoji: '‚öΩ',
      name: '–§—É—Ç–±–æ–ª',
      actionText: '–£–¥–∞—Ä –ø–æ –º—è—á—É',
      processText: '–ë—å–µ–º –ø–æ –º—è—á—É...',
      resultText: '–†–µ–∑—É–ª—å—Ç–∞—Ç —É–¥–∞—Ä–∞',
      maxValue: 5,
      rules: '–ì–æ–ª –ø—Ä–∏ –∑–Ω–∞—á–µ–Ω–∏–∏ 4-5'
    },
    '‚öΩÔ∏è': {
      emoji: '‚öΩÔ∏è',
      name: '–§—É—Ç–±–æ–ª',
      actionText: '–£–¥–∞—Ä –ø–æ –º—è—á—É',
      processText: '–ë—å–µ–º –ø–æ –º—è—á—É...',
      resultText: '–†–µ–∑—É–ª—å—Ç–∞—Ç —É–¥–∞—Ä–∞',
      maxValue: 5,
      rules: '–ì–æ–ª –ø—Ä–∏ –∑–Ω–∞—á–µ–Ω–∏–∏ 4-5'
    },
    'üèÄ': {
      emoji: 'üèÄ',
      name: '–ë–∞—Å–∫–µ—Ç–±–æ–ª',
      actionText: '–ë—Ä–æ—Å–æ–∫ –≤ –∫–æ—Ä–∑–∏–Ω—É',
      processText: '–ë—Ä–æ—Å–∞–µ–º –≤ –∫–æ—Ä–∑–∏–Ω—É...',
      resultText: '–†–µ–∑—É–ª—å—Ç–∞—Ç –±—Ä–æ—Å–∫–∞',
      maxValue: 5,
      rules: '–ü–æ–ø–∞–¥–∞–Ω–∏–µ –ø—Ä–∏ –∑–Ω–∞—á–µ–Ω–∏–∏ 4-5'
    },
    'üé≥': {
      emoji: 'üé≥',
      name: '–ë–æ—É–ª–∏–Ω–≥',
      actionText: '–ë—Ä–æ—Å–æ–∫ –≤ –±–æ—É–ª–∏–Ω–≥–µ',
      processText: '–ë—Ä–æ—Å–∞–µ–º –±–æ—É–ª–∏–Ω–≥...',
      resultText: '–†–µ–∑—É–ª—å—Ç–∞—Ç –≤ –±–æ—É–ª–∏–Ω–≥–µ',
      maxValue: 6,
      rules: '–ë–æ–ª—å—à–µ —Å–±–∏—Ç—ã—Ö –∫–µ–≥–ª–µ–π - –ø–æ–±–µ–¥–∞'
    },
    'üé∞': {
      emoji: 'üé∞',
      name: '–°–ª–æ—Ç—ã',
      actionText: '–ö—Ä—É—Ç–∏—Ç—å —Å–ª–æ—Ç—ã',
      processText: '–ö—Ä—É—Ç–∏–º —Å–ª–æ—Ç—ã...',
      resultText: '–†–µ–∑—É–ª—å—Ç–∞—Ç —Å–ª–æ—Ç–æ–≤',
      maxValue: 64,
      rules: '–õ—É—á—à–∞—è –∫–æ–º–±–∏–Ω–∞—Ü–∏—è –ø–æ–±–µ–∂–¥–∞–µ—Ç'
    }
  };

  return gameConfigs[gameType] || gameConfigs['üé≤']; // –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é –∫–æ—Å—Ç–∏
}

/**
 * –ü–æ–ª—É—á–µ–Ω–∏–µ –∏–º–µ–Ω–∏ –∏–≥—Ä—ã
 */
function getGameName(gameType) {
  return getGameConfig(gameType).name;
}

/**
 * –ü–æ–ª—É—á–µ–Ω–∏–µ —ç–º–æ–¥–∑–∏ –¥–ª—è Telegram Dice API (–±–∞–∑–æ–≤—ã–µ —ç–º–æ–¥–∑–∏ –±–µ–∑ variation selector)
 */
function getTelegramDiceEmoji(gameType) {
  const telegramEmojiMap = {
    'üé≤': 'üé≤',
    'üéØ': 'üéØ',
    '‚öΩ': '‚öΩ',
    '‚öΩÔ∏è': '‚öΩ', // –í–∞–∂–Ω–æ: Telegram API —Ç—Ä–µ–±—É–µ—Ç –±–∞–∑–æ–≤—ã–π —ç–º–æ–¥–∑–∏
    'üèÄ': 'üèÄ',
    'üé≥': 'üé≥',
    'üé∞': 'üé∞'
  };
  
  const result = telegramEmojiMap[gameType];
  if (!result) {
    console.error(`–ù–µ–ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–π gameType: ${gameType}, –∏—Å–ø–æ–ª—å–∑—É–µ–º fallback üé≤`);
    return 'üé≤';
  }
  
  return result;
}

/**
 * –ö–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏—è —Ç–µ–∫—Å—Ç–æ–≤–æ–≥–æ –Ω–∞–∑–≤–∞–Ω–∏—è –∏–≥—Ä—ã –≤ —ç–º–æ–¥–∑–∏
 */
function convertGameNameToEmoji(gameName) {
  if (!gameName) return 'üé≤'; // –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é –∫–æ—Å—Ç–∏
  
  const gameMap = {
    'dice': 'üé≤',
    'darts': 'üéØ', 
    'football': '‚öΩÔ∏è',
    'basketball': 'üèÄ',
    'bowling': 'üé≥',
    'slots': 'üé∞',
    'slot': 'üé∞',
    // –ü–æ–¥–¥–µ—Ä–∂–∫–∞ –ø—Ä—è–º—ã—Ö —ç–º–æ–¥–∑–∏
    'üé≤': 'üé≤',
    'üéØ': 'üéØ',
    '‚öΩ': '‚öΩÔ∏è',
    '‚öΩÔ∏è': '‚öΩÔ∏è',
    'üèÄ': 'üèÄ',
    'üé≥': 'üé≥',
    'üé∞': 'üé∞'
  };
  
  const normalizedName = gameName.toLowerCase();
  return gameMap[normalizedName] || gameMap[gameName] || gameName;
}

/**
 * –§–æ—Ä–º–∞—Ç—ã –¥—É—ç–ª–µ–π
 */
function getFormatConfig(format) {
  const formats = {
    'bo1': { name: 'Bo1', winsRequired: 1, description: '–¥–æ 1 –ø–æ–±–µ–¥—ã' },
    'bo3': { name: 'Bo3', winsRequired: 2, description: '–¥–æ 2 –ø–æ–±–µ–¥' },
    'bo5': { name: 'Bo5', winsRequired: 3, description: '–¥–æ 3 –ø–æ–±–µ–¥' },
    'bo7': { name: 'Bo7', winsRequired: 4, description: '–¥–æ 4 –ø–æ–±–µ–¥' }
  };
  
  return formats[(format || 'bo1').toLowerCase()] || formats['bo1'];
}

/**
 * –í–∞–ª–∏–¥–∞—Ü–∏—è –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤ –¥—É—ç–ª–∏
 */
function validateDuelParams(targetUsername, amount, gameType, format) {
  const errors = [];
  
  // –°—Ç—Ä–æ–≥–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ username (—Ç–æ–ª—å–∫–æ –±—É–∫–≤—ã, —Ü–∏—Ñ—Ä—ã, –ø–æ–¥—á–µ—Ä–∫–∏–≤–∞–Ω–∏—è)
  if (!targetUsername || !/^[a-zA-Z0-9_]{3,32}$/.test(targetUsername)) {
    errors.push('Username –¥–æ–ª–∂–µ–Ω —Å–æ–¥–µ—Ä–∂–∞—Ç—å 3-32 —Å–∏–º–≤–æ–ª–∞ (–±—É–∫–≤—ã, —Ü–∏—Ñ—Ä—ã, _)');
  }
  
  // –°—Ç—Ä–æ–≥–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ —Å—É–º–º—ã - —Ç–æ–ª—å–∫–æ —Ü–µ–ª—ã–µ —á–∏—Å–ª–∞
  const numAmount = Number(amount);
  if (!Number.isInteger(numAmount) || numAmount < 1 || numAmount > 1000) {
    errors.push('–°—É–º–º–∞ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å —Ü–µ–ª—ã–º —á–∏—Å–ª–æ–º –æ—Ç 1 –¥–æ 1000 USDT');
  }
  
  // Whitelist –ø—Ä–æ–≤–µ—Ä–∫–∞ —Ç–∏–ø–∞ –∏–≥—Ä—ã
  const validGameTypes = ['üé≤', 'üéØ', '‚öΩ', '‚öΩÔ∏è', 'üèÄ', 'üé≥', 'üé∞'];
  if (!validGameTypes.includes(gameType)) {
    errors.push('–ù–µ–¥–æ–ø—É—Å—Ç–∏–º—ã–π —Ç–∏–ø –∏–≥—Ä—ã');
  }
  
  // Whitelist –ø—Ä–æ–≤–µ—Ä–∫–∞ —Ñ–æ—Ä–º–∞—Ç–∞
  const validFormats = ['bo1', 'bo3', 'bo5', 'bo7'];
  const normalizedFormat = String(format).toLowerCase();
  if (!validFormats.includes(normalizedFormat)) {
    errors.push('–ù–µ–¥–æ–ø—É—Å—Ç–∏–º—ã–π —Ñ–æ—Ä–º–∞—Ç');
  }
  
  return {
    isValid: errors.length === 0,
    errors,
    params: {
      targetUsername: String(targetUsername).replace('@', '').toLowerCase(),
      amount: numAmount,
      gameType,
      format: normalizedFormat
    }
  };
}

/**
 * –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –±–µ–∑–æ–ø–∞—Å–Ω–æ–≥–æ ID –¥–ª—è inline –¥–∞–Ω–Ω—ã—Ö
 */
function generateShortId(challengerId, targetUsername) {
  const crypto = require('crypto');
  
  // –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –∫—Ä–∏–ø—Ç–æ–≥—Ä–∞—Ñ–∏—á–µ—Å–∫–∏ —Å—Ç–æ–π–∫–∏–π —Å–ª—É—á–∞–π–Ω—ã–π ID
  const randomBytes = crypto.randomBytes(8);
  const timestamp = Date.now();
  
  // –°–æ–∑–¥–∞–µ–º —Ö–µ—à –¥–ª—è –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ–π –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏
  const hash = crypto.createHash('sha256')
    .update(`${challengerId}_${targetUsername}_${timestamp}_${randomBytes.toString('hex')}`)
    .digest('hex')
    .substring(0, 12);
  
  return `${challengerId}_${hash}`;
}

/**
 * –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è –æ –¥—É—ç–ª–∏
 */
function formatDuelMessage(duel, isPersonal = false) {
  const gameConfig = getGameConfig(duel.gameType);
  const formatConfig = getFormatConfig(duel.format);
  
  const header = `${gameConfig.emoji} **–î–£–≠–õ–¨** ${gameConfig.emoji}`;
  const participants = isPersonal 
    ? `‚öîÔ∏è @${duel.challengerUsername} VS @${duel.opponentUsername}`
    : `üë§ –í—ã–∑–æ–≤ –æ—Ç: @${duel.challengerUsername}${duel.opponentUsername ? `\nüéØ –ü—Ä–æ—Ç–∏–≤: @${duel.opponentUsername}` : ''}`;
  
  const gameInfo = [
    `üéÆ –ò–≥—Ä–∞: ${gameConfig.name}`,
    `üí∞ –°—Ç–∞–≤–∫–∞: ${duel.amount} USDT –∫–∞–∂–¥—ã–π`,
    `üèÜ –§–æ—Ä–º–∞—Ç: ${formatConfig.name} (${formatConfig.description})`,
    `üíé –û–±—â–∏–π –±–∞–Ω–∫: ${duel.totalAmount || duel.amount * 2} USDT`,
    `üéØ –í—ã–∏–≥—Ä—ã—à: ${duel.winAmount || (duel.amount * 2 * 0.95)} USDT`
  ].join('\n');
  
  return `${header}\n\n${participants}\n\n${gameInfo}`;
}

/**
 * –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ —Ä–∞—É–Ω–¥–∞
 */
function formatRoundResults(rounds, challengerUsername, opponentUsername, duel = null) {
  if (!rounds || rounds.length === 0) return '';
  
  let result = 'üìç **–†–µ–∑—É–ª—å—Ç–∞—Ç—ã —Ä–∞—É–Ω–¥–æ–≤:**\n';
  
  rounds.forEach((round, index) => {
    if (round.challengerResult !== null && round.opponentResult !== null) {
      let resultIcon = 'ü§ù'; // –Ω–∏—á—å—è –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
      
      // –û–ø—Ä–µ–¥–µ–ª—è–µ–º –ø–æ–±–µ–¥–∏—Ç–µ–ª—è —Ä–∞—É–Ω–¥–∞
      if (round.winnerId) {
        if (duel) {
          // –ï—Å–ª–∏ –ø–µ—Ä–µ–¥–∞–Ω –æ–±—ä–µ–∫—Ç –¥—É—ç–ª–∏, –∏—Å–ø–æ–ª—å–∑—É–µ–º –µ–≥–æ –¥–ª—è –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è –ø–æ–±–µ–¥–∏—Ç–µ–ª—è
          if (round.winnerId === duel.challengerId) {
            resultIcon = '‚úÖ';
          } else if (round.winnerId === duel.opponentId) {
            resultIcon = '‚ùå';
          }
        } else {
          // –ò–Ω–∞—á–µ –ø—Ä–æ—Å—Ç–æ –ø–æ–∫–∞–∑—ã–≤–∞–µ–º —á—Ç–æ –µ—Å—Ç—å –ø–æ–±–µ–¥–∏—Ç–µ–ª—å
          resultIcon = '‚≠ê';
        }
      }
      
      result += `‚Ä¢ –†–∞—É–Ω–¥ ${index + 1}: @${challengerUsername} [${round.challengerResult}] vs @${opponentUsername} [${round.opponentResult}] ${resultIcon}\n`;
    }
  });
  
  return result;
}

module.exports = {
  getGameConfig,
  getGameName,
  getTelegramDiceEmoji,
  convertGameNameToEmoji,
  getFormatConfig,
  validateDuelParams,
  generateShortId,
  formatDuelMessage,
  formatRoundResults
};