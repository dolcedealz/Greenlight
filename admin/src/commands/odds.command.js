// admin/src/commands/odds.command.js
const { Markup } = require('telegraf');
const adminService = require('../services/admin.service');

/**
 * –ö–æ–º–∞–Ω–¥–∞ –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —à–∞–Ω—Å–∞–º–∏ –≤ –∏–≥—Ä–∞—Ö
 */
const oddsCommand = {
  // –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —à–∞–Ω—Å–∞–º–∏
  async showOddsMenu(ctx) {
    const keyboard = Markup.inlineKeyboard([
      [Markup.button.callback('üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –º–æ–¥–∏—Ñ–∏–∫–∞—Ç–æ—Ä–æ–≤', 'odds_stats')],
      [Markup.button.callback('üë§ –ú–æ–¥–∏—Ñ–∏–∫–∞—Ç–æ—Ä—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è', 'odds_user')],
      [Markup.button.callback('üéÆ –£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –º–æ–¥–∏—Ñ–∏–∫–∞—Ç–æ—Ä', 'odds_set')],
      [Markup.button.callback('üë• –ú–∞—Å—Å–æ–≤–∞—è —É—Å—Ç–∞–Ω–æ–≤–∫–∞', 'odds_bulk')],
      [Markup.button.callback('üîÑ –°–±—Ä–æ—Å–∏—Ç—å –º–æ–¥–∏—Ñ–∏–∫–∞—Ç–æ—Ä—ã', 'odds_reset')],
      [Markup.button.callback('‚óÄÔ∏è –ù–∞–∑–∞–¥', 'admin_menu')]
    ]);

    await ctx.editMessageText(
      '‚öôÔ∏è *–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —à–∞–Ω—Å–∞–º–∏ –≤ –∏–≥—Ä–∞—Ö*\n\n' +
      '–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:',
      {
        parse_mode: 'Markdown',
        ...keyboard
      }
    );
  },

  // –ü–æ–∫–∞–∑–∞—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –º–æ–¥–∏—Ñ–∏–∫–∞—Ç–æ—Ä–æ–≤
  async showOddsStats(ctx) {
    try {
      const stats = await adminService.getOddsStatistics();
      
      let message = 'üìä *–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –º–æ–¥–∏—Ñ–∏–∫–∞—Ç–æ—Ä–æ–≤*\n\n';
      message += `üë• –í—Å–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: ${stats.totalUsers}\n`;
      message += `üîß –° –º–æ–¥–∏—Ñ–∏–∫–∞—Ç–æ—Ä–∞–º–∏: ${stats.modifiedUsers}\n\n`;

      // –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ –∏–≥—Ä–∞–º
      Object.entries(stats.gameStats).forEach(([game, data]) => {
        if (data.modified > 0) {
          const gameEmoji = {
            coin: 'ü™ô',
            slots: 'üé∞',
            mines: 'üí£',
            crash: 'üìà'
          }[game];

          message += `${gameEmoji} *${game.toUpperCase()}*\n`;
          message += `  –ò–∑–º–µ–Ω–µ–Ω–æ: ${data.modified}\n`;
          message += `  –°—Ä–µ–¥–Ω–∏–π: ${data.avgModifier.toFixed(1)}%\n`;
          message += `  –ú–∏–Ω/–ú–∞–∫—Å: ${data.minModifier}% / ${data.maxModifier}%\n\n`;
        }
      });

      const keyboard = Markup.inlineKeyboard([
        [Markup.button.callback('‚óÄÔ∏è –ù–∞–∑–∞–¥', 'odds_menu')]
      ]);

      await ctx.editMessageText(message, {
        parse_mode: 'Markdown',
        ...keyboard
      });
    } catch (error) {
      await ctx.answerCbQuery('‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏');
    }
  },

  // –ó–∞–ø—Ä–æ—Å–∏—Ç—å ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
  async requestUserId(ctx, action) {
    ctx.session.oddsAction = action;
    
    await ctx.editMessageText(
      'üë§ *–í–≤–µ–¥–∏—Ç–µ ID –∏–ª–∏ @username –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:*',
      {
        parse_mode: 'Markdown',
        ...Markup.inlineKeyboard([[
          Markup.button.callback('‚óÄÔ∏è –û—Ç–º–µ–Ω–∞', 'odds_menu')
        ]])
      }
    );
  },

  // –ü–æ–∫–∞–∑–∞—Ç—å –º–æ–¥–∏—Ñ–∏–∫–∞—Ç–æ—Ä—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
  async showUserModifiers(ctx, userId) {
    try {
      const data = await adminService.getUserModifiers(userId);
      
      let message = `üë§ *–ú–æ–¥–∏—Ñ–∏–∫–∞—Ç–æ—Ä—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è*\n\n`;
      message += `ID: \`${data.userId}\`\n`;
      message += `Username: ${data.username || '–ù–µ —É–∫–∞–∑–∞–Ω'}\n\n`;

      const gameSettings = data.gameSettings || {};
      
      message += 'üéÆ *–ù–∞—Å—Ç—Ä–æ–π–∫–∏ –∏–≥—Ä:*\n';
      message += `ü™ô –ú–æ–Ω–µ—Ç–∫–∞: ${gameSettings.coin?.winChanceModifier || 0}%\n`;
      message += `üé∞ –°–ª–æ—Ç—ã RTP: ${gameSettings.slots?.rtpModifier || 0}%\n`;
      message += `üí£ –ú–∏–Ω—ã: ${gameSettings.mines?.mineChanceModifier || 0}%\n`;
      message += `üìà –ö—Ä–∞—à: ${gameSettings.crash?.crashModifier || 0}%\n`;

      const keyboard = Markup.inlineKeyboard([
        [Markup.button.callback('üîß –ò–∑–º–µ–Ω–∏—Ç—å', `odds_set_user_${userId}`)],
        [Markup.button.callback('üîÑ –°–±—Ä–æ—Å–∏—Ç—å', `odds_reset_user_${userId}`)],
        [Markup.button.callback('‚óÄÔ∏è –ù–∞–∑–∞–¥', 'odds_menu')]
      ]);

      await ctx.editMessageText(message, {
        parse_mode: 'Markdown',
        ...keyboard
      });
    } catch (error) {
      await ctx.answerCbQuery('‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω');
    }
  },

  // –í—ã–±–æ—Ä –∏–≥—Ä—ã –¥–ª—è —É—Å—Ç–∞–Ω–æ–≤–∫–∏ –º–æ–¥–∏—Ñ–∏–∫–∞—Ç–æ—Ä–∞
  async selectGame(ctx, userId) {
    const keyboard = Markup.inlineKeyboard([
      [
        Markup.button.callback('ü™ô –ú–æ–Ω–µ—Ç–∫–∞', `odds_game_coin_${userId}`),
        Markup.button.callback('üé∞ –°–ª–æ—Ç—ã', `odds_game_slots_${userId}`)
      ],
      [
        Markup.button.callback('üí£ –ú–∏–Ω—ã', `odds_game_mines_${userId}`),
        Markup.button.callback('üìà –ö—Ä–∞—à', `odds_game_crash_${userId}`)
      ],
      [Markup.button.callback('‚óÄÔ∏è –ù–∞–∑–∞–¥', userId ? `odds_user_show_${userId}` : 'odds_menu')]
    ]);

    await ctx.editMessageText(
      'üéÆ *–í—ã–±–µ—Ä–∏—Ç–µ –∏–≥—Ä—É:*',
      {
        parse_mode: 'Markdown',
        ...keyboard
      }
    );
  },

  // –£—Å—Ç–∞–Ω–æ–≤–∫–∞ –º–æ–¥–∏—Ñ–∏–∫–∞—Ç–æ—Ä–∞
  async setModifier(ctx, gameType, userId) {
    ctx.session.oddsGame = gameType;
    ctx.session.oddsUserId = userId;

    const gameNames = {
      coin: '–ú–æ–Ω–µ—Ç–∫–∞ (—à–∞–Ω—Å –≤—ã–∏–≥—Ä—ã—à–∞)',
      slots: '–°–ª–æ—Ç—ã (RTP)',
      mines: '–ú–∏–Ω—ã (–∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –º–∏–Ω)',
      crash: '–ö—Ä–∞—à (–≤–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç—å —Ä–∞–Ω–Ω–µ–≥–æ –∫—Ä–∞—à–∞)'
    };

    const limits = {
      coin: { min: -47.5, max: 52.5 },
      slots: { min: -30, max: 20 },
      mines: { min: -20, max: 30 },
      crash: { min: -20, max: 50 }
    };

    const limit = limits[gameType];

    await ctx.editMessageText(
      `üîß *–£—Å—Ç–∞–Ω–æ–≤–∫–∞ –º–æ–¥–∏—Ñ–∏–∫–∞—Ç–æ—Ä–∞*\n\n` +
      `–ò–≥—Ä–∞: ${gameNames[gameType]}\n` +
      `–ü—Ä–µ–¥–µ–ª—ã: –æ—Ç ${limit.min}% –¥–æ ${limit.max}%\n\n` +
      `–í–≤–µ–¥–∏—Ç–µ –∑–Ω–∞—á–µ–Ω–∏–µ –º–æ–¥–∏—Ñ–∏–∫–∞—Ç–æ—Ä–∞ –≤ –ø—Ä–æ—Ü–µ–Ω—Ç–∞—Ö:`,
      {
        parse_mode: 'Markdown',
        ...Markup.inlineKeyboard([[
          Markup.button.callback('‚óÄÔ∏è –û—Ç–º–µ–Ω–∞', `odds_set_user_${userId}`)
        ]])
      }
    );
  },

  // –ü—Ä–∏–º–µ–Ω–∏—Ç—å –º–æ–¥–∏—Ñ–∏–∫–∞—Ç–æ—Ä
  async applyModifier(ctx, value) {
    const { oddsGame, oddsUserId } = ctx.session;
    
    try {
      const modifierType = {
        coin: 'winChanceModifier',
        slots: 'rtpModifier',
        mines: 'mineChanceModifier',
        crash: 'crashModifier'
      }[oddsGame];

      await adminService.setUserGameModifier(oddsUserId, oddsGame, modifierType, value);
      
      await ctx.reply('‚úÖ –ú–æ–¥–∏—Ñ–∏–∫–∞—Ç–æ—Ä —É—Å–ø–µ—à–Ω–æ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω!');
      
      // –í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –∫ –ø—Ä–æ—Å–º–æ—Ç—Ä—É –º–æ–¥–∏—Ñ–∏–∫–∞—Ç–æ—Ä–æ–≤ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
      await this.showUserModifiers(ctx, oddsUserId);
      
      // –û—á–∏—â–∞–µ–º —Å–µ—Å—Å–∏—é
      delete ctx.session.oddsGame;
      delete ctx.session.oddsUserId;
    } catch (error) {
      await ctx.reply(`‚ùå –û—à–∏–±–∫–∞: ${error.message}`);
    }
  },

  // –°–±—Ä–æ—Å –º–æ–¥–∏—Ñ–∏–∫–∞—Ç–æ—Ä–æ–≤ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
  async resetUserModifiers(ctx, userId) {
    try {
      await adminService.resetUserModifiers(userId);
      
      await ctx.answerCbQuery('‚úÖ –ú–æ–¥–∏—Ñ–∏–∫–∞—Ç–æ—Ä—ã —Å–±—Ä–æ—à–µ–Ω—ã');
      await this.showUserModifiers(ctx, userId);
    } catch (error) {
      await ctx.answerCbQuery('‚ùå –û—à–∏–±–∫–∞ —Å–±—Ä–æ—Å–∞ –º–æ–¥–∏—Ñ–∏–∫–∞—Ç–æ—Ä–æ–≤');
    }
  }
};

module.exports = oddsCommand;