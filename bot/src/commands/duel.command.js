const { Markup } = require('telegraf');
const apiService = require('../services/api.service');
const config = require('../config');

// –ò–≥—Ä—ã –∏ –∏—Ö —ç–º–æ–¥–∑–∏
const GAMES = {
  'üé≤': { name: '–ö–æ—Å—Ç–∏', emoji: 'üé≤', rules: '–£ –∫–æ–≥–æ –±–æ–ª—å—à–µ - —Ç–æ—Ç –≤—ã–∏–≥—Ä–∞–ª' },
  'üéØ': { name: '–î–∞—Ä—Ç—Å', emoji: 'üéØ', rules: '6 = —Ü–µ–Ω—Ç—Ä –º–∏—à–µ–Ω–∏, –ø–æ–±–µ–∂–¥–∞–µ—Ç —Ç–æ—á–Ω–æ—Å—Ç—å' },
  '‚öΩ': { name: '–§—É—Ç–±–æ–ª', emoji: '‚öΩ', rules: '4-5 = –≥–æ–ª, –ø–æ–±–µ–∂–¥–∞–µ—Ç –º–µ—Ç–∫–æ—Å—Ç—å' },
  'üèÄ': { name: '–ë–∞—Å–∫–µ—Ç–±–æ–ª', emoji: 'üèÄ', rules: '4-5 = –ø–æ–ø–∞–¥–∞–Ω–∏–µ, –ø–æ–±–µ–∂–¥–∞–µ—Ç —Ç–æ—á–Ω–æ—Å—Ç—å' },
  'üé≥': { name: '–ë–æ—É–ª–∏–Ω–≥', emoji: 'üé≥', rules: '–£ –∫–æ–≥–æ –±–æ–ª—å—à–µ –∫–µ–≥–ª–µ–π - —Ç–æ—Ç –≤—ã–∏–≥—Ä–∞–ª' },
  'üé∞': { name: '–°–ª–æ—Ç—ã', emoji: 'üé∞', rules: '–õ—É—á—à–∞—è –∫–æ–º–±–∏–Ω–∞—Ü–∏—è –ø–æ–±–µ–∂–¥–∞–µ—Ç' }
};

// –§–æ—Ä–º–∞—Ç—ã –¥—É—ç–ª–µ–π
const FORMATS = {
  'bo1': { name: 'Bo1', description: '1 —Ä–∞—É–Ω–¥', wins: 1 },
  'bo3': { name: 'Bo3', description: '–¥–æ 2 –ø–æ–±–µ–¥', wins: 2 },
  'bo5': { name: 'Bo5', description: '–¥–æ 3 –ø–æ–±–µ–¥', wins: 3 },
  'bo7': { name: 'Bo7', description: '–¥–æ 4 –ø–æ–±–µ–¥', wins: 4 }
};

/**
 * –°–æ–∑–¥–∞–Ω–∏–µ –æ—Ç–∫—Ä—ã—Ç–æ–π –¥—É—ç–ª–∏ –≤ –≥—Ä—É–ø–ø–µ
 * –°–∏–Ω—Ç–∞–∫—Å–∏—Å: /duel [—Å—Ç–∞–≤–∫–∞] [–∏–≥—Ä–∞] [—Ñ–æ—Ä–º–∞—Ç]
 * –ü—Ä–∏–º–µ—Ä: /duel 50 üé≤ bo3
 */
async function createOpenDuel(ctx) {
  try {
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ –∫–æ–º–∞–Ω–¥–∞ –≤ –≥—Ä—É–ø–ø–µ
    if (ctx.chat.type === 'private') {
      return ctx.reply(
        '‚ùå –ö–æ–º–∞–Ω–¥–∞ /duel —Ä–∞–±–æ—Ç–∞–µ—Ç —Ç–æ–ª—å–∫–æ –≤ –≥—Ä—É–ø–ø–∞—Ö\n\n' +
        'üí° –î–ª—è –ª–∏—á–Ω—ã—Ö –¥—É—ç–ª–µ–π –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ inline-—Ä–µ–∂–∏–º:\n' +
        'üëâ @greenlight_bot duel @username 100 üé≤'
      );
    }

    const args = ctx.message.text.split(' ').slice(1);
    
    if (args.length === 0) {
      return showDuelHelp(ctx);
    }

    const amount = parseFloat(args[0]);
    const gameType = args[1] || 'üé≤';
    const format = args[2] || 'bo1';

    // –í–∞–ª–∏–¥–∞—Ü–∏—è
    if (isNaN(amount) || amount < 1 || amount > 1000) {
      return ctx.reply('‚ùå –°—Ç–∞–≤–∫–∞ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –æ—Ç 1 –¥–æ 1000 USDT');
    }

    if (!GAMES[gameType]) {
      return ctx.reply(
        '‚ùå –ù–µ–ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º–∞—è –∏–≥—Ä–∞\n\n' +
        'üéÆ –î–æ—Å—Ç—É–ø–Ω—ã–µ –∏–≥—Ä—ã:\n' +
        Object.entries(GAMES).map(([emoji, game]) => 
          `${emoji} ${game.name} - ${game.rules}`
        ).join('\n')
      );
    }

    if (!FORMATS[format]) {
      return ctx.reply(
        '‚ùå –ù–µ–ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–π —Ñ–æ—Ä–º–∞—Ç\n\n' +
        'üèÜ –î–æ—Å—Ç—É–ø–Ω—ã–µ —Ñ–æ—Ä–º–∞—Ç—ã:\n' +
        Object.entries(FORMATS).map(([key, fmt]) => 
          `${key} - ${fmt.description}`
        ).join('\n')
      );
    }

    // –°–æ–∑–¥–∞–µ–º –¥—É—ç–ª—å —á–µ—Ä–µ–∑ API
    const duelData = await apiService.createDuel({
      challengerId: ctx.from.id.toString(),
      challengerUsername: ctx.from.username,
      gameType,
      format,
      amount,
      chatId: ctx.chat.id.toString(),
      chatType: ctx.chat.type,
      messageId: ctx.message.message_id
    });

    if (!duelData.success) {
      throw new Error(duelData.error || '–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å –¥—É—ç–ª—å');
    }

    const sessionId = duelData.data.sessionId;
    const game = GAMES[gameType];
    const formatInfo = FORMATS[format];

    // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –¥—É—ç–ª—å—é
    const message = await ctx.reply(
      `${gameType} **–û–¢–ö–†–´–¢–´–ô –í–´–ó–û–í –ù–ê –î–£–≠–õ–¨** ${gameType}\n\n` +
      `üéÆ –ò–≥—Ä–∞: ${game.name}\n` +
      `üí∞ –°—Ç–∞–≤–∫–∞: ${amount} USDT –∫–∞–∂–¥—ã–π\n` +
      `üèÜ –§–æ—Ä–º–∞—Ç: ${formatInfo.name} (${formatInfo.description})\n` +
      `üë§ –ò–Ω–∏—Ü–∏–∞—Ç–æ—Ä: @${ctx.from.username}\n\n` +
      `üìã –ü—Ä–∞–≤–∏–ª–∞: ${game.rules}\n` +
      `‚è± –û–∂–∏–¥–∞–Ω–∏–µ –ø—Ä–æ—Ç–∏–≤–Ω–∏–∫–∞...`,
      {
        parse_mode: 'Markdown',
        reply_markup: Markup.inlineKeyboard([
          [Markup.button.callback('‚öîÔ∏è –ü—Ä–∏–Ω—è—Ç—å –≤—ã–∑–æ–≤', `accept_open_duel_${sessionId}`)],
          [Markup.button.callback('üìä –ü—Ä–∞–≤–∏–ª–∞ –∏–≥—Ä—ã', `duel_rules_${gameType}`)],
          [Markup.button.callback('‚ùå –û—Ç–º–µ–Ω–∏—Ç—å', `cancel_duel_${sessionId}`)]
        ])
      }
    );

    // –°–æ—Ö—Ä–∞–Ω—è–µ–º ID —Å–æ–æ–±—â–µ–Ω–∏—è (–∑–∞–≥–ª—É—à–∫–∞, —Ç–∞–∫ –∫–∞–∫ –º–µ—Ç–æ–¥ updateDuelMessage –Ω–µ —Ä–µ–∞–ª–∏–∑–æ–≤–∞–Ω)
    // TODO: –†–µ–∞–ª–∏–∑–æ–≤–∞—Ç—å –º–µ—Ç–æ–¥ updateDuelMessage –µ—Å–ª–∏ –Ω—É–∂–Ω–æ

  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –æ—Ç–∫—Ä—ã—Ç–æ–π –¥—É—ç–ª–∏:', error);
    ctx.reply('‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å –¥—É—ç–ª—å. ' + (error.message || '–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.'));
  }
}

/**
 * –°–æ–∑–¥–∞–Ω–∏–µ –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω–æ–≥–æ –≤—ã–∑–æ–≤–∞ –≤ –≥—Ä—É–ø–ø–µ
 * –°–∏–Ω—Ç–∞–∫—Å–∏—Å: /duel @username [—Å—Ç–∞–≤–∫–∞] [–∏–≥—Ä–∞] [—Ñ–æ—Ä–º–∞—Ç]
 * –ü—Ä–∏–º–µ—Ä: /duel @ivan 100 üéØ bo3
 */
async function createPersonalDuel(ctx) {
  try {
    const args = ctx.message.text.split(' ').slice(1);
    
    if (args.length < 2) {
      return ctx.reply(
        '‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –∫–æ–º–∞–Ω–¥—ã\n\n' +
        'üìù –ü—Ä–∞–≤–∏–ª—å–Ω–æ: /duel @username —Å—Ç–∞–≤–∫–∞ –∏–≥—Ä–∞ [—Ñ–æ—Ä–º–∞—Ç]\n' +
        'üìù –ü—Ä–∏–º–µ—Ä: /duel @ivan 100 üé≤ bo3'
      );
    }

    let targetUsername = args[0];
    const amount = parseFloat(args[1]);
    const gameType = args[2] || 'üé≤';
    const format = args[3] || 'bo1';

    // –û—á–∏—â–∞–µ–º username
    if (targetUsername.startsWith('@')) {
      targetUsername = targetUsername.slice(1);
    }

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ –Ω–µ –≤—ã–∑—ã–≤–∞–µ—Ç —Å–µ–±—è
    if (targetUsername === ctx.from.username) {
      return ctx.reply('‚ùå –ù–µ–ª—å–∑—è –≤—ã–∑–≤–∞—Ç—å —Å–∞–º–æ–≥–æ —Å–µ–±—è –Ω–∞ –¥—É—ç–ª—å');
    }

    // –í–∞–ª–∏–¥–∞—Ü–∏—è (–∞–Ω–∞–ª–æ–≥–∏—á–Ω–æ –æ—Ç–∫—Ä—ã—Ç–æ–π –¥—É—ç–ª–∏)
    if (isNaN(amount) || amount < 1 || amount > 1000) {
      return ctx.reply('‚ùå –°—Ç–∞–≤–∫–∞ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –æ—Ç 1 –¥–æ 1000 USDT');
    }

    if (!GAMES[gameType] || !FORMATS[format]) {
      return showDuelHelp(ctx);
    }

    // –°–æ–∑–¥–∞–µ–º –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—É—é –¥—É—ç–ª—å
    const duelData = await apiService.createDuel({
      challengerId: ctx.from.id.toString(),
      challengerUsername: ctx.from.username,
      opponentUsername: targetUsername,
      gameType,
      format,
      amount,
      chatId: ctx.chat.id.toString(),
      chatType: ctx.chat.type,
      messageId: ctx.message.message_id
    });

    if (!duelData.success) {
      throw new Error(duelData.error || '–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å –¥—É—ç–ª—å');
    }

    const sessionId = duelData.data.sessionId;
    const game = GAMES[gameType];
    const formatInfo = FORMATS[format];

    const message = await ctx.reply(
      `${gameType} **–ü–ï–†–°–û–ù–ê–õ–¨–ù–´–ô –í–´–ó–û–í** ${gameType}\n\n` +
      `üéØ @${ctx.from.username} –≤—ã–∑—ã–≤–∞–µ—Ç @${targetUsername}\n` +
      `üéÆ –ò–≥—Ä–∞: ${game.name}\n` +
      `üí∞ –°—Ç–∞–≤–∫–∞: ${amount} USDT –∫–∞–∂–¥—ã–π\n` +
      `üèÜ –§–æ—Ä–º–∞—Ç: ${formatInfo.name} (${formatInfo.description})\n\n` +
      `üìã –ü—Ä–∞–≤–∏–ª–∞: ${game.rules}\n` +
      `‚è± –û–∂–∏–¥–∞–Ω–∏–µ –æ—Ç–≤–µ—Ç–∞...`,
      {
        parse_mode: 'Markdown',
        reply_markup: Markup.inlineKeyboard([
          [
            Markup.button.callback('‚úÖ –ü—Ä–∏–Ω—è—Ç—å', `accept_personal_duel_${sessionId}`),
            Markup.button.callback('‚ùå –û—Ç–∫–ª–æ–Ω–∏—Ç—å', `decline_personal_duel_${sessionId}`)
          ],
          [Markup.button.callback('üìä –ü—Ä–∞–≤–∏–ª–∞ –∏–≥—Ä—ã', `duel_rules_${gameType}`)]
        ])
      }
    );

    // TODO: –°–æ—Ö—Ä–∞–Ω–∏—Ç—å ID —Å–æ–æ–±—â–µ–Ω–∏—è –µ—Å–ª–∏ –Ω—É–∂–Ω–æ

  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω–æ–π –¥—É—ç–ª–∏:', error);
    ctx.reply('‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å –¥—É—ç–ª—å. ' + (error.message || '–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.'));
  }
}

/**
 * –ü–æ–∫–∞–∑–∞—Ç—å —Å–ø—Ä–∞–≤–∫—É –ø–æ –¥—É—ç–ª—è–º
 */
async function showDuelHelp(ctx) {
  const helpText = `üéÆ **–°–ü–†–ê–í–ö–ê –ü–û –î–£–≠–õ–Ø–ú** üéÆ\n\n` +
    `**üìù –ö–æ–º–∞–Ω–¥—ã –≤ –≥—Ä—É–ø–ø–∞—Ö:**\n` +
    `‚Ä¢ /duel [—Å—Ç–∞–≤–∫–∞] [–∏–≥—Ä–∞] [—Ñ–æ—Ä–º–∞—Ç] - –æ—Ç–∫—Ä—ã—Ç—ã–π –≤—ã–∑–æ–≤\n` +
    `‚Ä¢ /duel @username [—Å—Ç–∞–≤–∫–∞] [–∏–≥—Ä–∞] [—Ñ–æ—Ä–º–∞—Ç] - –ª–∏—á–Ω—ã–π –≤—ã–∑–æ–≤\n\n` +
    `**üìù –ö–æ–º–∞–Ω–¥—ã –≤ –ª–∏—á–∫–µ:**\n` +
    `‚Ä¢ /duel_help - —ç—Ç–∞ —Å–ø—Ä–∞–≤–∫–∞\n` +
    `‚Ä¢ /duel_stats - –º–æ—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞\n` +
    `‚Ä¢ /duel_history - –∏—Å—Ç–æ—Ä–∏—è –¥—É—ç–ª–µ–π\n\n` +
    `**üéÆ –î–æ—Å—Ç—É–ø–Ω—ã–µ –∏–≥—Ä—ã:**\n` +
    Object.entries(GAMES).map(([emoji, game]) => 
      `${emoji} ${game.name} - ${game.rules}`
    ).join('\n') + '\n\n' +
    `**üèÜ –§–æ—Ä–º–∞—Ç—ã –¥—É—ç–ª–µ–π:**\n` +
    Object.entries(FORMATS).map(([key, fmt]) => 
      `${key} - ${fmt.description}`
    ).join('\n') + '\n\n' +
    `**üí∞ –°—Ç–∞–≤–∫–∏:**\n` +
    `‚Ä¢ –ú–∏–Ω–∏–º—É–º: 1 USDT\n` +
    `‚Ä¢ –ú–∞–∫—Å–∏–º—É–º: 1000 USDT\n` +
    `‚Ä¢ –ö–æ–º–∏—Å—Å–∏—è: 5% —Å –≤—ã–∏–≥—Ä—ã—à–∞\n\n` +
    `**üìã –ü—Ä–∏–º–µ—Ä—ã:**\n` +
    `‚Ä¢ /duel 50 üé≤ - –æ—Ç–∫—Ä—ã—Ç—ã–µ –∫–æ—Å—Ç–∏ –∑–∞ 50 USDT\n` +
    `‚Ä¢ /duel @ivan 100 üéØ bo3 - –≤—ã–∑–æ–≤ –ò–≤–∞–Ω–∞ –Ω–∞ –¥–∞—Ä—Ç—Å Bo3\n\n` +
    `**‚ö° Inline —Ä–µ–∂–∏–º –¥–ª—è –ª–∏—á–Ω—ã—Ö —á–∞—Ç–æ–≤:**\n` +
    `@greenlight_bot duel @username —Å—Ç–∞–≤–∫–∞ –∏–≥—Ä–∞`;

  return ctx.reply(helpText, { parse_mode: 'Markdown' });
}

/**
 * –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –¥—É—ç–ª–µ–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
 */
async function showDuelStats(ctx) {
  try {
    const stats = await apiService.getUserDuelStats(ctx.from.id.toString());
    
    if (!stats.data || !stats.data.total) {
      return ctx.reply(
        'üìä **–°–¢–ê–¢–ò–°–¢–ò–ö–ê –î–£–≠–õ–ï–ô** üìä\n\n' +
        'üö´ –£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç –∑–∞–≤–µ—Ä—à–µ–Ω–Ω—ã—Ö –¥—É—ç–ª–µ–π\n\n' +
        'üí° –°–æ–∑–¥–∞–π—Ç–µ –ø–µ—Ä–≤—É—é –¥—É—ç–ª—å:\n' +
        'üëâ /duel 10 üé≤'
      );
    }

    const { total, byGame } = stats.data;
    const winRate = total.totalGames > 0 ? 
      ((total.totalWins / total.totalGames) * 100).toFixed(1) : 0;

    let statsText = `üìä **–°–¢–ê–¢–ò–°–¢–ò–ö–ê –î–£–≠–õ–ï–ô** üìä\n\n` +
      `üéÆ –í—Å–µ–≥–æ –∏–≥—Ä: ${total.totalGames}\n` +
      `üèÜ –ü–æ–±–µ–¥: ${total.totalWins}\n` +
      `üìâ –ü–æ—Ä–∞–∂–µ–Ω–∏–π: ${total.totalGames - total.totalWins}\n` +
      `üìà –í–∏–Ω—Ä–µ–π—Ç: ${winRate}%\n` +
      `üí∞ –û–±—â–∏–π P&L: ${total.totalProfit > 0 ? '+' : ''}${total.totalProfit} USDT\n\n`;

    if (byGame && byGame.length > 0) {
      statsText += `**üìä –ü–æ –∏–≥—Ä–∞–º:**\n`;
      byGame.forEach(game => {
        const gameInfo = GAMES[game.gameType];
        const gameWinRate = game.totalGames > 0 ? 
          ((game.wins / game.totalGames) * 100).toFixed(1) : 0;
        
        statsText += `${game.gameType} ${gameInfo?.name}: ${game.totalGames} –∏–≥—Ä, ` +
          `${gameWinRate}% –ø–æ–±–µ–¥, ${game.totalProfit > 0 ? '+' : ''}${game.totalProfit} USDT\n`;
      });
    }

    return ctx.reply(statsText, { parse_mode: 'Markdown' });

  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏:', error);
    ctx.reply('‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É');
  }
}

/**
 * –ò—Å—Ç–æ—Ä–∏—è –¥—É—ç–ª–µ–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
 */
async function showDuelHistory(ctx) {
  try {
    const history = await apiService.getUserDuelHistory(ctx.from.id.toString(), 10, 0); // –ü–æ—Å–ª–µ–¥–Ω–∏–µ 10 –¥—É—ç–ª–µ–π
    
    if (!history.data || !history.data.duels || history.data.duels.length === 0) {
      return ctx.reply(
        'üìö **–ò–°–¢–û–†–ò–Ø –î–£–≠–õ–ï–ô** üìö\n\n' +
        'üö´ –£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç –∑–∞–≤–µ—Ä—à–µ–Ω–Ω—ã—Ö –¥—É—ç–ª–µ–π\n\n' +
        'üí° –°–æ–∑–¥–∞–π—Ç–µ –ø–µ—Ä–≤—É—é –¥—É—ç–ª—å:\n' +
        'üëâ /duel 10 üé≤'
      );
    }

    let historyText = `üìö **–ò–°–¢–û–†–ò–Ø –î–£–≠–õ–ï–ô** üìö\n\n`;
    
    history.data.duels.forEach((duel, index) => {
      const game = GAMES[duel.gameType];
      const isWinner = duel.winnerId === ctx.from.id.toString();
      const opponent = duel.challengerId === ctx.from.id.toString() ? 
        duel.opponentUsername : duel.challengerUsername;
      
      const result = isWinner ? 'üèÜ –ü–æ–±–µ–¥–∞' : 'üòî –ü–æ—Ä–∞–∂–µ–Ω–∏–µ';
      const profit = isWinner ? `+${duel.winAmount}` : `-${duel.amount}`;
      const date = new Date(duel.completedAt).toLocaleString('ru-RU', {
        day: '2-digit',
        month: '2-digit',
        hour: '2-digit',
        minute: '2-digit'
      });
      
      historyText += `${index + 1}. ${duel.gameType} vs @${opponent}\n` +
        `   ${result} ‚Ä¢ ${profit} USDT ‚Ä¢ ${date}\n` +
        `   –°—á–µ—Ç: ${duel.challengerScore}-${duel.opponentScore}\n\n`;
    });

    if (history.data.total > 10) {
      historyText += `üìä –ü–æ–∫–∞–∑–∞–Ω–æ 10 –∏–∑ ${history.data.total} –¥—É—ç–ª–µ–π`;
    }

    return ctx.reply(historyText, { parse_mode: 'Markdown' });

  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∏—Å—Ç–æ—Ä–∏–∏:', error);
    ctx.reply('‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –∏—Å—Ç–æ—Ä–∏—é –¥—É—ç–ª–µ–π');
  }
}

/**
 * –û—Ç–º–µ–Ω–∞ —Å–æ–±—Å—Ç–≤–µ–Ω–Ω–æ–π –¥—É—ç–ª–∏
 */
async function cancelDuel(ctx) {
  try {
    // TODO: –†–µ–∞–ª–∏–∑–æ–≤–∞—Ç—å –ø–æ–ª—É—á–µ–Ω–∏–µ –∞–∫—Ç–∏–≤–Ω—ã—Ö –¥—É—ç–ª–µ–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    // const activeDuels = await apiService.getActiveDuels();
    return ctx.reply('‚ùå –§—É–Ω–∫—Ü–∏—è –æ—Ç–º–µ–Ω—ã –¥—É—ç–ª–µ–π –≤—Ä–µ–º–µ–Ω–Ω–æ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞');
    
    if (!activeDuels.data || !activeDuels.data.duels || activeDuels.data.duels.length === 0) {
      return ctx.reply('‚ùå –£ –≤–∞—Å –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –¥—É—ç–ª–µ–π –¥–ª—è –æ—Ç–º–µ–Ω—ã');
    }

    // –ù–∞—Ö–æ–¥–∏–º –¥—É—ç–ª–∏ –∫–æ—Ç–æ—Ä—ã–µ –º–æ–∂–Ω–æ –æ—Ç–º–µ–Ω–∏—Ç—å (—Ç–æ–ª—å–∫–æ pending –∏ —Ç–æ–ª—å–∫–æ —Å–≤–æ–∏)
    const cancelableDuels = activeDuels.data.duels.filter(duel => 
      duel.status === 'pending' && duel.challengerId === ctx.from.id.toString()
    );

    if (cancelableDuels.length === 0) {
      return ctx.reply('‚ùå –ù–µ—Ç –¥—É—ç–ª–µ–π –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –¥–ª—è –æ—Ç–º–µ–Ω—ã');
    }

    // –ï—Å–ª–∏ –æ–¥–Ω–∞ –¥—É—ç–ª—å - –æ—Ç–º–µ–Ω—è–µ–º —Å—Ä–∞–∑—É
    if (cancelableDuels.length === 1) {
      const duel = cancelableDuels[0];
      await apiService.cancelDuel(duel.sessionId);
      
      return ctx.reply(
        `‚úÖ –î—É—ç–ª—å –æ—Ç–º–µ–Ω–µ–Ω–∞\n\n` +
        `üéÆ –ò–≥—Ä–∞: ${GAMES[duel.gameType]?.name}\n` +
        `üí∞ –°—Ç–∞–≤–∫–∞: ${duel.amount} USDT\n` +
        `‚è± –°—Ä–µ–¥—Å—Ç–≤–∞ —Ä–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω—ã`
      );
    }

    // –ï—Å–ª–∏ –Ω–µ—Å–∫–æ–ª—å–∫–æ –¥—É—ç–ª–µ–π - –ø–æ–∫–∞–∑—ã–≤–∞–µ–º —Å–ø–∏—Å–æ–∫ –¥–ª—è –≤—ã–±–æ—Ä–∞
    const buttons = cancelableDuels.map(duel => [
      Markup.button.callback(
        `${duel.gameType} ${duel.amount} USDT`,
        `cancel_my_duel_${duel.sessionId}`
      )
    ]);

    return ctx.reply(
      '‚ùå **–û–¢–ú–ï–ù–ê –î–£–≠–õ–ò** ‚ùå\n\n' +
      '–í—ã–±–µ—Ä–∏—Ç–µ –¥—É—ç–ª—å –¥–ª—è –æ—Ç–º–µ–Ω—ã:',
      {
        parse_mode: 'Markdown',
        reply_markup: Markup.inlineKeyboard(buttons)
      }
    );

  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ –æ—Ç–º–µ–Ω—ã –¥—É—ç–ª–∏:', error);
    ctx.reply('‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–º–µ–Ω–∏—Ç—å –¥—É—ç–ª—å');
  }
}

module.exports = {
  createOpenDuel,
  createPersonalDuel,
  showDuelHelp,
  showDuelStats,
  showDuelHistory,
  cancelDuel,
  GAMES,
  FORMATS
};