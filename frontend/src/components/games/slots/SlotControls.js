// frontend/src/components/games/slots/SlotControls.js
import React, { useState, useEffect } from 'react';
import '../../../styles/SlotControls.css';

const SlotControls = ({ 
  balance, 
  onSpin, 
  isSpinning, 
  betAmount,
  setBetAmount,
  autoplay,
  setAutoplay,
  autoplayCount,
  setAutoplayCount,
  loading,
  autoplayRemaining
}) => {
  const [maxWin, setMaxWin] = useState(0);
  
  // –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º –º–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–π –≤–æ–∑–º–æ–∂–Ω—ã–π –≤—ã–∏–≥—Ä—ã—à
  useEffect(() => {
    const jackpotMultiplier = 50; // –ú–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–π –º–Ω–æ–∂–∏—Ç–µ–ª—å –¥–ª—è üé∞
    setMaxWin(betAmount * jackpotMultiplier);
  }, [betAmount]);
  
  // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∏–∑–º–µ–Ω–µ–Ω–∏—è —Å—É–º–º—ã —Å—Ç–∞–≤–∫–∏
  const handleBetAmountChange = (e) => {
    const inputValue = e.target.value;
    
    if (inputValue === '' || inputValue === '0') {
      setBetAmount(inputValue);
      return;
    }
    
    const value = parseFloat(inputValue);
    if (!isNaN(value) && value >= 0 && value <= balance) {
      setBetAmount(value);
    }
  };
  
  // –ë—ã—Å—Ç—Ä—ã–µ —Å—Ç–∞–≤–∫–∏
  const handleQuickBet = (multiplier) => {
    const quickBet = Math.min(balance, Math.max(0.1, Math.floor(balance * multiplier * 100) / 100));
    setBetAmount(quickBet);
  };
  
  // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ "–ö—Ä—É—Ç–∏—Ç—å"
  const handleSpinClick = () => {
    if (betAmount <= 0 || betAmount > balance || isSpinning || loading) return;
    onSpin();
  };
  
  // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∞–≤—Ç–æ–∏–≥—Ä—ã
  const handleAutoplayToggle = () => {
    setAutoplay(!autoplay);
  };
  
  // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∏–∑–º–µ–Ω–µ–Ω–∏—è –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –∞–≤—Ç–æ—Å–ø–∏–Ω–æ–≤
  const handleAutoplayCountChange = (count) => {
    setAutoplayCount(count);
  };
  
  return (
    <div className="slot-controls">
      {/* –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Å—Ç–∞–≤–∫–æ–π */}
      <div className="bet-section">
        <div className="bet-control">
          <label>–°—Ç–∞–≤–∫–∞ (USDT):</label>
          <div className="bet-input-container">
            <input
              type="number"
              min="0.1"
              max={balance}
              step="0.1"
              value={betAmount}
              onChange={handleBetAmountChange}
              disabled={isSpinning || loading || autoplay}
            />
          </div>
        </div>
        
        <div className="quick-bets">
          <button 
            onClick={() => handleQuickBet(0.1)} 
            disabled={isSpinning || loading || autoplay}
            className="quick-bet-btn"
          >
            10%
          </button>
          <button 
            onClick={() => handleQuickBet(0.25)} 
            disabled={isSpinning || loading || autoplay}
            className="quick-bet-btn"
          >
            25%
          </button>
          <button 
            onClick={() => handleQuickBet(0.5)} 
            disabled={isSpinning || loading || autoplay}
            className="quick-bet-btn"
          >
            50%
          </button>
          <button 
            onClick={() => handleQuickBet(1)} 
            disabled={isSpinning || loading || autoplay}
            className="quick-bet-btn"
          >
            MAX
          </button>
        </div>
      </div>
      
      {/* –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –≤—ã–∏–≥—Ä—ã—à–µ */}
      <div className={`win-info ${autoplay && autoplayRemaining > 0 ? 'has-autoplay' : ''}`}>
        <div className="info-item">
          <span className="info-label">–ú–∞–∫—Å. –≤—ã–∏–≥—Ä—ã—à:</span>
          <span className="info-value">{maxWin.toFixed(2)} USDT</span>
        </div>
        <div className="info-item">
          <span className="info-label">–ë–∞–ª–∞–Ω—Å:</span>
          <span className="info-value">{balance.toFixed(2)} USDT</span>
        </div>
        {autoplay && autoplayRemaining > 0 && (
          <div className="info-item autoplay-info">
            <span className="info-label">–û—Å—Ç–∞–ª–æ—Å—å:</span>
            <span className="info-value">{autoplayRemaining} —Å–ø–∏–Ω–æ–≤</span>
          </div>
        )}
      </div>
      
      {/* –ö–Ω–æ–ø–∫–∞ —Å–ø–∏–Ω–∞ */}
      <div className="spin-section">
        <button 
          className={`spin-button ${isSpinning ? 'spinning' : ''} ${autoplay ? 'autoplay-active' : ''}`}
          onClick={handleSpinClick}
          disabled={isSpinning || loading || betAmount <= 0 || betAmount > balance || autoplay}
        >
          {isSpinning ? (
            <span className="spin-text spinning-text">
              <span className="spinner">üé∞</span> –ö—Ä—É—Ç–∏–º...
            </span>
          ) : autoplay ? (
            <span className="spin-text">
              ü§ñ –ê–í–¢–û–ò–ì–†–ê –ê–ö–¢–ò–í–ù–ê
            </span>
          ) : (
            <span className="spin-text">
              üé∞ –ö–†–£–¢–ò–¢–¨ ({betAmount} USDT)
            </span>
          )}
        </button>
      </div>
      
      {/* –ê–≤—Ç–æ–∏–≥—Ä–∞ */}
      <div className="autoplay-section">
        <div className="autoplay-toggle">
          <label className="toggle-switch">
            <input
              type="checkbox"
              checked={autoplay}
              onChange={handleAutoplayToggle}
              disabled={isSpinning || loading}
            />
            <span className="toggle-slider"></span>
            <span className="toggle-text">–ê–≤—Ç–æ–∏–≥—Ä–∞</span>
          </label>
          {autoplay && (
            <button 
              className="stop-autoplay-btn"
              onClick={() => setAutoplay(false)}
              disabled={loading}
            >
              –û—Å—Ç–∞–Ω–æ–≤–∏—Ç—å
            </button>
          )}
        </div>
        
        {!autoplay && (
          <div className="autoplay-settings">
            <div className="autoplay-count">
              <label>–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–ø–∏–Ω–æ–≤:</label>
              <div className="count-buttons">
                {[10, 25, 50, 100].map(count => (
                  <button
                    key={count}
                    className={`count-btn ${autoplayCount === count ? 'active' : ''}`}
                    onClick={() => handleAutoplayCountChange(count)}
                    disabled={isSpinning || loading}
                  >
                    {count}
                  </button>
                ))}
              </div>
            </div>
            
            <div className="autoplay-info">
              <small>
                –ê–≤—Ç–æ–∏–≥—Ä–∞ –æ—Å—Ç–∞–Ω–æ–≤–∏—Ç—Å—è –ø—Ä–∏ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–∏ –ª–∏–º–∏—Ç–∞ —Å–ø–∏–Ω–æ–≤, –Ω–µ–¥–æ—Å—Ç–∞—Ç–∫–µ —Å—Ä–µ–¥—Å—Ç–≤ –∏–ª–∏ –±–æ–ª—å—à–æ–º –≤—ã–∏–≥—Ä—ã—à–µ
              </small>
            </div>
          </div>
        )}
      </div>
      
      {/* –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –∫–Ω–æ–ø–∫–∏ */}
      <div className="additional-controls">
        <button 
          className="control-btn"
          onClick={() => setBetAmount(Math.max(0.1, betAmount / 2))}
          disabled={isSpinning || loading || autoplay}
        >
          √∑2 –°—Ç–∞–≤–∫–∞
        </button>
        <button 
          className="control-btn"
          onClick={() => setBetAmount(Math.min(balance, betAmount * 2))}
          disabled={isSpinning || loading || autoplay}
        >
          √ó2 –°—Ç–∞–≤–∫–∞
        </button>
      </div>
    </div>
  );
};

export default SlotControls;
