// backend/src/websocket/middleware.js
const { User } = require('../models');
const authService = require('../services/auth.service');

/**
 * Middleware –¥–ª—è –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏ WebSocket —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–π –≤ Telegram Mini App
 */
const authMiddleware = async (socket, next) => {
  try {
    // –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏ –∏–∑ handshake
    const { telegramId, token, initData } = socket.handshake.auth || {};
    
    console.log(`üîí WEBSOCKET AUTH: –ü–æ–ø—ã—Ç–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è —Å –¥–∞–Ω–Ω—ã–º–∏:`, {
      telegramId: telegramId || '–æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç',
      hasToken: !!token,
      hasInitData: !!initData
    });
    
    // –ï—Å–ª–∏ –µ—Å—Ç—å Telegram initData, –≤–∞–ª–∏–¥–∏—Ä—É–µ–º —á–µ—Ä–µ–∑ auth service
    if (initData) {
      console.log('üîí WEBSOCKET AUTH: –í–∞–ª–∏–¥–∞—Ü–∏—è —á–µ—Ä–µ–∑ Telegram initData');
      
      const telegramData = authService.validateTelegramWebAppData(
        initData, 
        process.env.TELEGRAM_BOT_TOKEN
      );
      
      if (!telegramData) {
        console.error('üîí WEBSOCKET AUTH: –ù–µ–≤–∞–ª–∏–¥–Ω—ã–µ Telegram –¥–∞–Ω–Ω—ã–µ');
        return next(new Error('–ù–µ–≤–∞–ª–∏–¥–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏'));
      }
      
      // –ü–æ–ª—É—á–∞–µ–º –∏–ª–∏ —Å–æ–∑–¥–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
      const user = await authService.getOrCreateUser(telegramData);
      
      if (user.isBlocked) {
        console.log(`üîí WEBSOCKET AUTH: –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å ${user._id} –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω`);
        return next(new Error('–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω'));
      }
      
      // –ü—Ä–∏–≤—è–∑—ã–≤–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∫ —Å–æ–∫–µ—Ç—É
      socket.userId = user._id;
      socket.telegramId = user.telegramId;
      socket.user = user;
      
      console.log(`‚úÖ WEBSOCKET AUTH: –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å ${user.username || user.telegramId} –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞–Ω —á–µ—Ä–µ–∑ initData`);
      return next();
    }
    
    // –ï—Å–ª–∏ –µ—Å—Ç—å JWT —Ç–æ–∫–µ–Ω, –≤–∞–ª–∏–¥–∏—Ä—É–µ–º –µ–≥–æ
    if (token) {
      console.log('üîí WEBSOCKET AUTH: –í–∞–ª–∏–¥–∞—Ü–∏—è —á–µ—Ä–µ–∑ JWT —Ç–æ–∫–µ–Ω');
      
      const decoded = authService.validateJWT(token);
      if (!decoded) {
        console.error('üîí WEBSOCKET AUTH: –ù–µ–≤–∞–ª–∏–¥–Ω—ã–π JWT —Ç–æ–∫–µ–Ω');
        return next(new Error('–ù–µ–≤–∞–ª–∏–¥–Ω—ã–π —Ç–æ–∫–µ–Ω'));
      }
      
      const user = await User.findById(decoded.userId);
      if (!user) {
        console.error('üîí WEBSOCKET AUTH: –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∏–∑ —Ç–æ–∫–µ–Ω–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω');
        return next(new Error('–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω'));
      }
      
      if (user.isBlocked) {
        console.log(`üîí WEBSOCKET AUTH: –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å ${user._id} –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω`);
        return next(new Error('–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω'));
      }
      
      // –ü—Ä–∏–≤—è–∑—ã–≤–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∫ —Å–æ–∫–µ—Ç—É
      socket.userId = user._id;
      socket.telegramId = user.telegramId;
      socket.user = user;
      
      console.log(`‚úÖ WEBSOCKET AUTH: –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å ${user.username || user.telegramId} –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞–Ω —á–µ—Ä–µ–∑ JWT`);
      return next();
    }
    
    // –ï—Å–ª–∏ –µ—Å—Ç—å —Ç–æ–ª—å–∫–æ telegramId (legacy)
    if (telegramId) {
      console.log('üîí WEBSOCKET AUTH: –í–∞–ª–∏–¥–∞—Ü–∏—è —á–µ—Ä–µ–∑ Telegram ID (legacy)');
      
      const user = await User.findOne({ telegramId });
      if (!user) {
        console.log(`üîí WEBSOCKET AUTH: –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å Telegram ID ${telegramId} –Ω–µ –Ω–∞–π–¥–µ–Ω`);
        return next(new Error('–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω'));
      }
      
      if (user.isBlocked) {
        console.log(`üîí WEBSOCKET AUTH: –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å ${user._id} –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω`);
        return next(new Error('–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω'));
      }
      
      // –ü—Ä–∏–≤—è–∑—ã–≤–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∫ —Å–æ–∫–µ—Ç—É
      socket.userId = user._id;
      socket.telegramId = user.telegramId;
      socket.user = user;
      
      console.log(`‚úÖ WEBSOCKET AUTH: –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å ${user.username || user.telegramId} –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞–Ω —á–µ—Ä–µ–∑ telegramId`);
      return next();
    }
    
    // –†–∞–∑—Ä–µ—à–∞–µ–º –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –±–µ–∑ –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏ –¥–ª—è –æ–±—â–∏—Ö —Å–æ–±—ã—Ç–∏–π
    console.log('‚ö†Ô∏è WEBSOCKET AUTH: –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –±–µ–∑ –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏ (—Ç–æ–ª—å–∫–æ –¥–ª—è —á—Ç–µ–Ω–∏—è)');
    socket.isGuest = true;
    next();
    
  } catch (error) {
    console.error('‚ùå WEBSOCKET AUTH: –û—à–∏–±–∫–∞ –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏:', error);
    next(new Error('–û—à–∏–±–∫–∞ –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏'));
  }
};

/**
 * Middleware –¥–ª—è –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è —Å–∫–æ—Ä–æ—Å—Ç–∏ (rate limiting)
 */
const rateLimitMiddleware = (socket, next) => {
  // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º —Å—á–µ—Ç—á–∏–∫ —Å–æ–±—ã—Ç–∏–π –¥–ª—è —Å–æ–∫–µ—Ç–∞
  if (!socket.eventCounts) {
    socket.eventCounts = new Map();
  }
  
  // –û—á–∏—â–∞–µ–º —Å—á–µ—Ç—á–∏–∫–∏ –∫–∞–∂–¥—É—é –º–∏–Ω—É—Ç—É
  const interval = setInterval(() => {
    if (socket.eventCounts) {
      socket.eventCounts.clear();
    }
  }, 60000);
  
  // –û—á–∏—â–∞–µ–º –∏–Ω—Ç–µ—Ä–≤–∞–ª –ø—Ä–∏ –æ—Ç–∫–ª—é—á–µ–Ω–∏–∏
  socket.on('disconnect', () => {
    clearInterval(interval);
  });
  
  next();
};

/**
 * Middleware –¥–ª—è –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–π
 */
const loggingMiddleware = (socket, next) => {
  const startTime = Date.now();
  const clientIP = socket.handshake.address;
  const userAgent = socket.handshake.headers['user-agent'];
  
  console.log(`üìä WEBSOCKET LOG: –ù–æ–≤–æ–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ ${socket.id} —Å IP ${clientIP}`);
  
  // –õ–æ–≥–∏—Ä—É–µ–º –æ—Ç–∫–ª—é—á–µ–Ω–∏–µ
  socket.on('disconnect', (reason) => {
    const duration = Date.now() - startTime;
    console.log(`üìä WEBSOCKET LOG: –û—Ç–∫–ª—é—á–µ–Ω–∏–µ ${socket.id} –ø–æ—Å–ª–µ ${duration}–º—Å. –ü—Ä–∏—á–∏–Ω–∞: ${reason}`);
  });
  
  next();
};

/**
 * Middleware –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –æ—à–∏–±–æ–∫
 */
const errorHandlingMiddleware = (socket, next) => {
  socket.on('error', (error) => {
    console.error(`‚ùå WEBSOCKET ERROR: –û—à–∏–±–∫–∞ —Å–æ–∫–µ—Ç–∞ ${socket.id}:`, error);
  });
  
  next();
};

/**
 * –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–π —Å–æ–±—ã—Ç–∏–π
 */
const checkEventLimit = (socket, eventName, limit = 30) => {
  if (!socket.eventCounts) {
    socket.eventCounts = new Map();
  }
  
  const currentCount = socket.eventCounts.get(eventName) || 0;
  
  if (currentCount >= limit) {
    console.warn(`‚ö†Ô∏è WEBSOCKET LIMIT: –ü—Ä–µ–≤—ã—à–µ–Ω –ª–∏–º–∏—Ç —Å–æ–±—ã—Ç–∏–π ${eventName} –¥–ª—è —Å–æ–∫–µ—Ç–∞ ${socket.id}`);
    return false;
  }
  
  socket.eventCounts.set(eventName, currentCount + 1);
  return true;
};

/**
 * Middleware –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø—Ä–∞–≤ –¥–æ—Å—Ç—É–ø–∞ –∫ –∏–≥—Ä–µ
 */
const gameAccessMiddleware = (gameType) => {
  return (socket, next) => {
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –∏–≥—Ä–∞ –¥–æ—Å—Ç—É–ø–Ω–∞
    const availableGames = ['crash', 'coin', 'mines', 'slots'];
    
    if (!availableGames.includes(gameType)) {
      return next(new Error('–ò–≥—Ä–∞ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞'));
    }
    
    // –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –ø—Ä–æ–≤–µ—Ä–∫–∏ –º–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –∑–¥–µ—Å—å
    // –ù–∞–ø—Ä–∏–º–µ—Ä, –ø—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, –±–ª–æ–∫–∏—Ä–æ–≤–∫–∏ –∏ —Ç.–¥.
    
    next();
  };
};

module.exports = {
  authMiddleware,
  rateLimitMiddleware,
  loggingMiddleware,
  errorHandlingMiddleware,
  gameAccessMiddleware,
  checkEventLimit
};
