// frontend/src/components/games/slots/SlotMachine.js
import React, { useState, useEffect, useCallback, useRef } from 'react';
import '../../../styles/SlotMachine.css';

// –°–∏–º–≤–æ–ª—ã —Å–ª–æ—Ç–æ–≤ —Ç–æ–ª—å–∫–æ —Å —ç–º–æ–¥–∑–∏
const SLOT_SYMBOLS = [
  { symbol: 'cherry', name: 'cherry', weight: 25, payout: 4, emoji: 'üçí' },
  { symbol: 'lemon', name: 'lemon', weight: 20, payout: 6, emoji: 'üçã' },
  { symbol: 'persik', name: 'persik', weight: 15, payout: 8, emoji: 'üçë' },
  { symbol: 'grape', name: 'grape', weight: 12, payout: 12, emoji: 'üçá' },
  { symbol: 'bell', name: 'bell', weight: 8, payout: 18, emoji: 'üîî' },
  { symbol: 'diamond', name: 'diamond', weight: 5, payout: 30, emoji: 'üíé' },
  { symbol: 'star', name: 'star', weight: 3, payout: 50, emoji: '‚≠ê' },
  { symbol: 'jackpot', name: 'jackpot', weight: 2, payout: 100, emoji: 'üé∞' }
];

const SlotMachine = ({ 
  onSpin, 
  isSpinning, 
  balance, 
  betAmount,
  lastResult,
  autoplay,
  loading,
  gameStats,
  onAnimationComplete // –ù–û–í–´–ô PROP –¥–ª—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–∏ –∞–Ω–∏–º–∞—Ü–∏–∏
}) => {
  // –ù–∞—á–∞–ª—å–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –±–∞—Ä–∞–±–∞–Ω–æ–≤
  const [reels, setReels] = useState(() => [
    ['cherry', 'lemon', 'persik', 'grape'],
    ['cherry', 'lemon', 'persik', 'grape'],
    ['cherry', 'lemon', 'persik', 'grape'],
    ['cherry', 'lemon', 'persik', 'grape']
  ]);
  
  // –°–æ—Å—Ç–æ—è–Ω–∏—è –∞–Ω–∏–º–∞—Ü–∏–∏
  const [isAnimating, setIsAnimating] = useState(false);
  const [animatingReels, setAnimatingReels] = useState([false, false, false, false]);
  const [winningLines, setWinningLines] = useState([]);
  const [showingResult, setShowingResult] = useState(false);
  const [spinPhase, setSpinPhase] = useState('idle');
  
  // –†–µ—Ñ—ã –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –∞–Ω–∏–º–∞—Ü–∏–µ–π
  const animationIntervals = useRef([]);
  const animationTimeouts = useRef([]);
  const lastResultRef = useRef(null);
  const finalResultRef = useRef(null);
  const isStoppingRef = useRef(false);
  const animationCompleteRef = useRef(false);
  
  // –ü–æ–ª—É—á–∏—Ç—å –¥–∞–Ω–Ω—ã–µ —Å–∏–º–≤–æ–ª–∞
  const getSymbolData = useCallback((symbolName) => {
    return SLOT_SYMBOLS.find(s => s.symbol === symbolName) || SLOT_SYMBOLS[0];
  }, []);
  
  // –ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Å–ª—É—á–∞–π–Ω–æ–≥–æ —Å–∏–º–≤–æ–ª–∞ –¥–ª—è –∞–Ω–∏–º–∞—Ü–∏–∏
  const getRandomSymbol = useCallback(() => {
    const totalWeight = SLOT_SYMBOLS.reduce((sum, s) => sum + s.weight, 0);
    let random = Math.random() * totalWeight;
    
    for (const symbolData of SLOT_SYMBOLS) {
      random -= symbolData.weight;
      if (random <= 0) {
        return symbolData.symbol;
      }
    }
    
    return SLOT_SYMBOLS[0].symbol;
  }, []);
  
  // –û—á–∏—Å—Ç–∫–∞ —Ç–∞–π–º–∞—É—Ç–æ–≤ –∏ –∏–Ω—Ç–µ—Ä–≤–∞–ª–æ–≤
  const clearAnimations = useCallback(() => {
    console.log('–°–õ–û–¢–´: –û—á–∏—â–∞–µ–º –≤—Å–µ –∞–Ω–∏–º–∞—Ü–∏–∏');
    
    animationIntervals.current.forEach((interval, index) => {
      if (interval) {
        clearInterval(interval);
        console.log(`–°–õ–û–¢–´: –û—á–∏—â–µ–Ω –∏–Ω—Ç–µ—Ä–≤–∞–ª ${index}`);
      }
    });
    animationIntervals.current = [];
    
    animationTimeouts.current.forEach((timeout, index) => {
      if (timeout) {
        clearTimeout(timeout);
        console.log(`–°–õ–û–¢–´: –û—á–∏—â–µ–Ω —Ç–∞–π–º–∞—É—Ç ${index}`);
      }
    });
    animationTimeouts.current = [];
  }, []);
  
  // –ù–û–í–ê–Ø —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–ª–Ω–æ–π –æ—Å—Ç–∞–Ω–æ–≤–∫–∏ –∞–Ω–∏–º–∞—Ü–∏–∏
  const stopAllAnimations = useCallback(() => {
    console.log('–°–õ–û–¢–´: –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–∞—è –æ—Å—Ç–∞–Ω–æ–≤–∫–∞ –≤—Å–µ—Ö –∞–Ω–∏–º–∞—Ü–∏–π');
    
    clearAnimations();
    setIsAnimating(false);
    setAnimatingReels([false, false, false, false]);
    setSpinPhase('stopped');
    isStoppingRef.current = false;
    animationCompleteRef.current = true;
    
  }, [clearAnimations]);
  
  // –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–ª–∞–≤–Ω–æ–π –æ—Å—Ç–∞–Ω–æ–≤–∫–∏ –±–∞—Ä–∞–±–∞–Ω–∞ –Ω–∞ –Ω—É–∂–Ω–æ–º —Å–∏–º–≤–æ–ª–µ
  const stopReelWithResult = useCallback((reelIndex, targetColumn, delay) => {
    const timeout = setTimeout(() => {
      console.log(`–°–õ–û–¢–´: –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –±–∞—Ä–∞–±–∞–Ω ${reelIndex} –Ω–∞ —Å–∏–º–≤–æ–ª–∞—Ö:`, targetColumn);
      
      // –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∏–Ω—Ç–µ—Ä–≤–∞–ª –¥–ª—è —ç—Ç–æ–≥–æ –±–∞—Ä–∞–±–∞–Ω–∞
      if (animationIntervals.current[reelIndex]) {
        clearInterval(animationIntervals.current[reelIndex]);
        animationIntervals.current[reelIndex] = null;
      }
      
      // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ñ–∏–Ω–∞–ª—å–Ω—ã–µ —Å–∏–º–≤–æ–ª—ã –¥–ª—è —ç—Ç–æ–≥–æ –±–∞—Ä–∞–±–∞–Ω–∞
      setReels(prevReels => {
        const newReels = [...prevReels];
        newReels[reelIndex] = [...targetColumn];
        return newReels;
      });
      
      // –û—Ç–∫–ª—é—á–∞–µ–º –∞–Ω–∏–º–∞—Ü–∏—é –¥–ª—è –±–∞—Ä–∞–±–∞–Ω–∞
      setAnimatingReels(prev => {
        const newState = [...prev];
        newState[reelIndex] = false;
        return newState;
      });
      
      // –ï—Å–ª–∏ —ç—Ç–æ –ø–æ—Å–ª–µ–¥–Ω–∏–π –±–∞—Ä–∞–±–∞–Ω
      if (reelIndex === 3) {
        console.log('–°–õ–û–¢–´: –í—Å–µ –±–∞—Ä–∞–±–∞–Ω—ã –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã');
        
        // –ó–∞–≤–µ—Ä—à–∞–µ–º –∞–Ω–∏–º–∞—Ü–∏—é
        setIsAnimating(false);
        setSpinPhase('stopped');
        isStoppingRef.current = false;
        animationCompleteRef.current = true;
        
        // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç —á–µ—Ä–µ–∑ –∫–æ—Ä–æ—Ç–∫—É—é –∑–∞–¥–µ—Ä–∂–∫—É
        setTimeout(() => {
          setShowingResult(true);
          
          if (finalResultRef.current && finalResultRef.current.winningLines && finalResultRef.current.winningLines.length > 0) {
            setTimeout(() => {
              setWinningLines([...finalResultRef.current.winningLines]);
              
              // –£–±–∏—Ä–∞–µ–º –ø–æ–¥—Å–≤–µ—Ç–∫—É —á–µ—Ä–µ–∑ 4 —Å–µ–∫—É–Ω–¥—ã
              setTimeout(() => {
                setWinningLines([]);
              }, 4000);
            }, 300);
          }
          
          // –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï: –£–≤–µ–¥–æ–º–ª—è–µ–º —Ä–æ–¥–∏—Ç–µ–ª—å—Å–∫–∏–π –∫–æ–º–ø–æ–Ω–µ–Ω—Ç –ü–û–°–õ–ï –≤–∏–∑—É–∞–ª—å–Ω–æ–≥–æ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è
          setTimeout(() => {
            if (onAnimationComplete) {
              console.log('–°–õ–û–¢–´: –í—ã–∑—ã–≤–∞–µ–º onAnimationComplete –ø–æ—Å–ª–µ –ø–æ–∫–∞–∑–∞ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞');
              onAnimationComplete();
            }
          }, 800); // –ó–∞–¥–µ—Ä–∂–∫–∞ –¥–ª—è –ø–æ–ª–Ω–æ–≥–æ –≤–∏–∑—É–∞–ª—å–Ω–æ–≥–æ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è
        }, 200);
      }
    }, delay);
    
    animationTimeouts.current.push(timeout);
  }, [onAnimationComplete]);
  
  // –°–±—Ä–æ—Å —Å–æ—Å—Ç–æ—è–Ω–∏—è –ø—Ä–∏ –Ω–∞—á–∞–ª–µ –Ω–æ–≤–æ–≥–æ —Å–ø–∏–Ω–∞
  useEffect(() => {
    if (isSpinning && !isAnimating && !animationCompleteRef.current) {
      console.log('–°–õ–û–¢–´: –ó–∞–ø—É—Å–∫ –Ω–æ–≤–æ–π –∞–Ω–∏–º–∞—Ü–∏–∏');
      
      // –°–±—Ä–∞—Å—ã–≤–∞–µ–º –≤—Å–µ —Å–æ—Å—Ç–æ—è–Ω–∏—è
      clearAnimations();
      setWinningLines([]);
      setShowingResult(false);
      setIsAnimating(true);
      setSpinPhase('spinning');
      setAnimatingReels([true, true, true, true]);
      isStoppingRef.current = false;
      finalResultRef.current = null;
      lastResultRef.current = null;
      animationCompleteRef.current = false;
      
      // –ó–∞–ø—É—Å–∫–∞–µ–º –∞–Ω–∏–º–∞—Ü–∏—é –±—ã—Å—Ç—Ä–æ–π —Å–º–µ–Ω—ã —Å–∏–º–≤–æ–ª–æ–≤
      const intervals = [];
      
      for (let reelIndex = 0; reelIndex < 4; reelIndex++) {
        const interval = setInterval(() => {
          // –ù–µ –æ–±–Ω–æ–≤–ª—è–µ–º –±–∞—Ä–∞–±–∞–Ω –µ—Å–ª–∏ —É–∂–µ –Ω–∞—á–∞–ª—Å—è –ø—Ä–æ—Ü–µ—Å—Å –æ—Å—Ç–∞–Ω–æ–≤–∫–∏
          if (isStoppingRef.current || animationCompleteRef.current) {
            return;
          }
          
          setReels(prevReels => {
            const newReels = [...prevReels];
            newReels[reelIndex] = Array(4).fill().map(() => getRandomSymbol());
            return newReels;
          });
        }, 100); // –§–∏–∫—Å–∏—Ä–æ–≤–∞–Ω–Ω–∞—è —Å–∫–æ—Ä–æ—Å—Ç—å
        
        intervals.push(interval);
      }
      
      animationIntervals.current = intervals;
    }
  }, [isSpinning, isAnimating, getRandomSymbol, clearAnimations, stopReelWithResult]);
  
  // –ò–°–ü–†–ê–í–õ–ï–ù–ù–ê–Ø –æ–±—Ä–∞–±–æ—Ç–∫–∞ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞ —Å —Å–µ—Ä–≤–µ—Ä–∞
  useEffect(() => {
    if (lastResult && 
        lastResult !== lastResultRef.current && 
        lastResult.reels && 
        isAnimating && 
        !isStoppingRef.current &&
        !animationCompleteRef.current) {
      
      console.log('–°–õ–û–¢–´: –ü–æ–ª—É—á–µ–Ω —Ä–µ–∑—É–ª—å—Ç–∞—Ç —Å —Å–µ—Ä–≤–µ—Ä–∞, –Ω–∞—á–∏–Ω–∞–µ–º –æ—Å—Ç–∞–Ω–æ–≤–∫—É:', lastResult);
      
      lastResultRef.current = lastResult;
      finalResultRef.current = lastResult;
      isStoppingRef.current = true;
      
      setSpinPhase('stopping');
      
      // –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –±–∞—Ä–∞–±–∞–Ω—ã –ø–æ–æ—á–µ—Ä–µ–¥–Ω–æ —Å –ø—Ä–∞–≤–∏–ª—å–Ω—ã–º–∏ —Å–∏–º–≤–æ–ª–∞–º–∏
      const stopDelays = [400, 600, 800, 1000];
      
      lastResult.reels.forEach((targetColumn, reelIndex) => {
        stopReelWithResult(reelIndex, targetColumn, stopDelays[reelIndex]);
      });
    }
  }, [lastResult, isAnimating, stopReelWithResult]);
  
  // –°–±—Ä–æ—Å —Å–æ—Å—Ç–æ—è–Ω–∏—è –∞–Ω–∏–º–∞—Ü–∏–∏ –ø—Ä–∏ –æ—Å—Ç–∞–Ω–æ–≤–∫–µ —Å–ø–∏–Ω–∞
  useEffect(() => {
    if (!isSpinning && animationCompleteRef.current) {
      console.log('–°–õ–û–¢–´: –°–ø–∏–Ω –∑–∞–≤–µ—Ä—à–µ–Ω, —Å–±—Ä–∞—Å—ã–≤–∞–µ–º —Ñ–ª–∞–≥ –∞–Ω–∏–º–∞—Ü–∏–∏');
      animationCompleteRef.current = false;
    }
  }, [isSpinning]);
  
  // –ê–≤–∞—Ä–∏–π–Ω–∞—è –æ—Å—Ç–∞–Ω–æ–≤–∫–∞ –∞–Ω–∏–º–∞—Ü–∏–∏
  useEffect(() => {
    if (!isSpinning && isAnimating) {
      console.log('–°–õ–û–¢–´: –ê–≤–∞—Ä–∏–π–Ω–∞—è –æ—Å—Ç–∞–Ω–æ–≤–∫–∞ –∞–Ω–∏–º–∞—Ü–∏–∏');
      const emergencyTimeout = setTimeout(() => {
        stopAllAnimations();
      }, 500);
      
      return () => clearTimeout(emergencyTimeout);
    }
  }, [isSpinning, isAnimating, stopAllAnimations]);
  
  // –û—á–∏—Å—Ç–∫–∞ –ø—Ä–∏ —Ä–∞–∑–º–æ–Ω—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏
  useEffect(() => {
    return () => {
      console.log('–°–õ–û–¢–´: –†–∞–∑–º–æ–Ω—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–∞, –æ—á–∏—â–∞–µ–º –≤—Å–µ');
      clearAnimations();
    };
  }, [clearAnimations]);
  
  // –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –∫–ª–∞—Å—Å–∞ —è—á–µ–π–∫–∏
  const getCellClass = useCallback((reelIndex, rowIndex) => {
    const baseClass = 'slot-cell';
    const position = `${reelIndex}-${rowIndex}`;
    
    if (winningLines.length > 0) {
      const isWinning = winningLines.some(line => line.includes(position));
      if (isWinning) {
        return `${baseClass} winning`;
      }
    }
    
    return baseClass;
  }, [winningLines]);
  
  // –ö–æ–º–ø–æ–Ω–µ–Ω—Ç —Å–∏–º–≤–æ–ª–∞
  const SymbolComponent = React.memo(({ symbolName }) => {
    const symbolData = getSymbolData(symbolName);
    return <span className="slot-symbol">{symbolData.emoji}</span>;
  });
  
  return (
    <div className="slot-machine">
      {/* –ò–≥—Ä–æ–≤–æ–µ –ø–æ–ª–µ 4x4 */}
      <div className="slot-display">
        <div className="slot-reels">
          {reels.map((reel, reelIndex) => (
            <div 
              key={reelIndex} 
              className={`slot-reel ${animatingReels[reelIndex] ? 'spinning' : ''} ${spinPhase}`}
            >
              {reel.map((symbolName, rowIndex) => (
                <div
                  key={`${reelIndex}-${rowIndex}`}
                  className={getCellClass(reelIndex, rowIndex)}
                  data-position={`${reelIndex}-${rowIndex}`}
                >
                  <SymbolComponent symbolName={symbolName} />
                </div>
              ))}
            </div>
          ))}
        </div>
        
        {/* –õ–∏–Ω–∏–∏ –≤—ã–ø–ª–∞—Ç */}
        <div className="paylines">
          {/* –ì–æ—Ä–∏–∑–æ–Ω—Ç–∞–ª—å–Ω—ã–µ –ª–∏–Ω–∏–∏ */}
          <div className={`payline horizontal line-1 ${winningLines.some(line => line.includes('0-0') && line.includes('1-0')) ? 'active' : ''}`}></div>
          <div className={`payline horizontal line-2 ${winningLines.some(line => line.includes('0-1') && line.includes('1-1')) ? 'active' : ''}`}></div>
          <div className={`payline horizontal line-3 ${winningLines.some(line => line.includes('0-2') && line.includes('1-2')) ? 'active' : ''}`}></div>
          <div className={`payline horizontal line-4 ${winningLines.some(line => line.includes('0-3') && line.includes('1-3')) ? 'active' : ''}`}></div>
          
          {/* –î–∏–∞–≥–æ–Ω–∞–ª—å–Ω—ã–µ –ª–∏–Ω–∏–∏ */}
          <div className={`payline diagonal line-main ${winningLines.some(line => line.includes('0-0') && line.includes('1-1') && line.includes('2-2')) ? 'active' : ''}`}></div>
          <div className={`payline diagonal line-anti ${winningLines.some(line => line.includes('0-3') && line.includes('1-2') && line.includes('2-1')) ? 'active' : ''}`}></div>
        </div>
      </div>
      
      {/* –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–µ */}
      {showingResult && finalResultRef.current && !isSpinning && !isAnimating && (
        <div className="last-spin-info">
          {finalResultRef.current.win ? (
            <div className="win-display">
              <span className="win-text">üí∞ –í–´–ò–ì–†–´–®! üí∞</span>
              <span className="win-amount">+{(Math.abs(finalResultRef.current.profit) || 0).toFixed(2)} USDT</span>
              {finalResultRef.current.winningSymbols && finalResultRef.current.winningSymbols.length > 0 && (
                <div className="winning-symbols">
                  {finalResultRef.current.winningSymbols.map((symbolName, index) => {
                    const symbolData = getSymbolData(symbolName);
                    return (
                      <span key={index} className="winning-symbol">
                        {symbolData.emoji}
                      </span>
                    );
                  })}
                </div>
              )}
              {finalResultRef.current.winningLines && finalResultRef.current.winningLines.length > 0 && (
                <>
                  <div className="winning-lines-count">
                    üéØ –í—ã–∏–≥—Ä—ã—à–Ω—ã—Ö –ª–∏–Ω–∏–π: {finalResultRef.current.winningLines.length} | –ú–Ω–æ–∂–∏—Ç–µ–ª—å: √ó{(finalResultRef.current.multiplier || 0).toFixed(2)}
                  </div>
                  <div className="winning-lines-details">
                    {finalResultRef.current.winningLines.map((line, index) => {
                      // –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ç–∏–ø –ª–∏–Ω–∏–∏
                      let lineType = '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è';
                      if (line.length >= 3) {
                        const firstPos = line[0].split('-');
                        const lastPos = line[line.length - 1].split('-');
                        
                        // –ü—Ä–æ–≤–µ—Ä—è–µ–º –≥–æ—Ä–∏–∑–æ–Ω—Ç–∞–ª—å–Ω—É—é –ª–∏–Ω–∏—é
                        if (firstPos[1] === lastPos[1]) {
                          lineType = `–°—Ç—Ä–æ–∫–∞ ${parseInt(firstPos[1]) + 1}`;
                        }
                        // –ü—Ä–æ–≤–µ—Ä—è–µ–º –≥–ª–∞–≤–Ω—É—é –¥–∏–∞–≥–æ–Ω–∞–ª—å
                        else if (line.every((pos, i) => {
                          const [col, row] = pos.split('-');
                          return col === String(i) && row === String(i);
                        })) {
                          lineType = '–ì–ª–∞–≤–Ω–∞—è –¥–∏–∞–≥–æ–Ω–∞–ª—å';
                        }
                        // –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–±–æ—á–Ω—É—é –¥–∏–∞–≥–æ–Ω–∞–ª—å
                        else if (line.every((pos, i) => {
                          const [col, row] = pos.split('-');
                          return col === String(i) && row === String(3 - i);
                        })) {
                          lineType = '–ü–æ–±–æ—á–Ω–∞—è –¥–∏–∞–≥–æ–Ω–∞–ª—å';
                        }
                      }
                      
                      return (
                        <div key={index} className="line-detail">
                          ‚Ä¢ {lineType}: {line.length} –≤ —Ä—è–¥
                        </div>
                      );
                    })}
                  </div>
                </>
              )}
            </div>
          ) : (
            <div className="lose-display">
              <span className="lose-text">üéØ –£–¥–∞—á–∞ –≤ —Å–ª–µ–¥—É—é—â–∏–π —Ä–∞–∑!</span>
            </div>
          )}
        </div>
      )}
    </div>
  );
};

export default SlotMachine;
