// callback.handler.js
const { Markup } = require('telegraf');
const config = require('../config');
const apiService = require('../services/api.service');

/**
 * –û–±—Ä–∞–±–æ—Ç—á–∏–∫ callback –∑–∞–ø—Ä–æ—Å–æ–≤ (–Ω–∞–∂–∞—Ç–∏—è –Ω–∞ inline –∫–Ω–æ–ø–∫–∏)
 * @param {Object} bot - –≠–∫–∑–µ–º–ø–ª—è—Ä –±–æ—Ç–∞ Telegraf
 */
function registerCallbackHandlers(bot) {
  
  // –û–±—Ä–∞–±–æ—Ç–∫–∞ –¥–µ–π—Å—Ç–≤–∏–π –ø–æ–ø–æ–ª–Ω–µ–Ω–∏—è –±–∞–ª–∞–Ω—Å–∞
  bot.action(/^deposit:(\d+|custom)$/, async (ctx) => {
    try {
      const amount = ctx.match[1];
      
      console.log(`–î–ï–ü–û–ó–ò–¢: –û–±—Ä–∞–±–æ—Ç–∫–∞ callback deposit:${amount}`);
      
      if (amount === 'custom') {
        // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ñ–ª–∞–≥ –æ–∂–∏–¥–∞–Ω–∏—è —Å—É–º–º—ã –¥–µ–ø–æ–∑–∏—Ç–∞
        ctx.session = ctx.session || {};
        ctx.session.waitingForDepositAmount = true;
        
        await ctx.answerCbQuery();
        await ctx.reply(
          'üí∞ –í–≤–µ–¥–∏—Ç–µ —Å—É–º–º—É –¥–ª—è –ø–æ–ø–æ–ª–Ω–µ–Ω–∏—è (–≤ USDT):\n\n' +
          '–ú–∏–Ω–∏–º—É–º: 1 USDT\n' +
          '–ú–∞–∫—Å–∏–º—É–º: 10000 USDT\n\n' +
          '–î–ª—è –æ—Ç–º–µ–Ω—ã –≤–≤–µ–¥–∏—Ç–µ /cancel'
        );
        return;
      }
      
      // –í–∞–ª–∏–¥–∞—Ü–∏—è —Å—É–º–º—ã
      const amountFloat = parseFloat(amount);
      console.log(`–î–ï–ü–û–ó–ò–¢: Parsed amount = ${amountFloat}`);
      
      if (isNaN(amountFloat) || amountFloat <= 0) {
        await ctx.reply('‚ùå –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–∞—è —Å—É–º–º–∞ –¥–ª—è –ø–æ–ø–æ–ª–Ω–µ–Ω–∏—è');
        return;
      }
      
      if (amountFloat < 1) {
        await ctx.reply('‚ùå –ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è —Å—É–º–º–∞ –ø–æ–ø–æ–ª–Ω–µ–Ω–∏—è: 1 USDT');
        return;
      }
      
      if (amountFloat > 10000) {
        await ctx.reply('‚ùå –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è —Å—É–º–º–∞ –ø–æ–ø–æ–ª–Ω–µ–Ω–∏—è: 10000 USDT');
        return;
      }
      
      // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä –∑–∞–≥—Ä—É–∑–∫–∏
      await ctx.answerCbQuery('‚è≥ –°–æ–∑–¥–∞–µ–º —Å—á–µ—Ç –¥–ª—è –æ–ø–ª–∞—Ç—ã...');
      
      console.log(`–î–ï–ü–û–ó–ò–¢: –°–æ–∑–¥–∞–Ω–∏–µ –¥–µ–ø–æ–∑–∏—Ç–∞ —á–µ—Ä–µ–∑ API –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ${ctx.from.id} –Ω–∞ —Å—É–º–º—É ${amountFloat} USDT`);
      
      try {
        // –°–æ–∑–¥–∞–µ–º –¥–µ–ø–æ–∑–∏—Ç —á–µ—Ä–µ–∑ API backend'–∞
        const depositData = await apiService.createDeposit(ctx.from, amountFloat, {
          source: 'bot',
          description: `–ü–æ–ø–æ–ª–Ω–µ–Ω–∏–µ —á–µ—Ä–µ–∑ Telegram –±–æ—Ç –Ω–∞ ${amountFloat} USDT`
        });
        
        console.log(`–î–ï–ü–û–ó–ò–¢: –î–µ–ø–æ–∑–∏—Ç —Å–æ–∑–¥–∞–Ω —á–µ—Ä–µ–∑ API:`, depositData);
        
        // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é —Å—Å—ã–ª–∫—É –Ω–∞ –æ–ø–ª–∞—Ç—É
        await ctx.reply(
          `üí∞ –°–æ–∑–¥–∞–Ω —Å—á–µ—Ç –Ω–∞ –ø–æ–ø–æ–ª–Ω–µ–Ω–∏–µ –±–∞–ª–∞–Ω—Å–∞\n\n` +
          `üíµ –°—É–º–º–∞: ${amountFloat} USDT\n` +
          `üÜî ID –¥–µ–ø–æ–∑–∏—Ç–∞: ${depositData.depositId}\n` +
          `üßæ ID –∏–Ω–≤–æ–π—Å–∞: ${depositData.invoiceId}\n` +
          `‚è∞ –°—Ä–æ–∫ –¥–µ–π—Å—Ç–≤–∏—è: 1 —á–∞—Å\n\n` +
          `–ù–∞–∂–º–∏—Ç–µ –Ω–∞ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ –¥–ª—è –æ–ø–ª–∞—Ç—ã:`,
          Markup.inlineKeyboard([
            [Markup.button.url('üí≥ –û–ø–ª–∞—Ç–∏—Ç—å', depositData.payUrl)],
            [Markup.button.callback('üìã –°—Ç–∞—Ç—É—Å –ø–ª–∞—Ç–µ–∂–∞', `check_deposit_status:${depositData.depositId}`)]
          ])
        );
        
      } catch (apiError) {
        console.error('–î–ï–ü–û–ó–ò–¢: –û—à–∏–±–∫–∞ API –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –¥–µ–ø–æ–∑–∏—Ç–∞:', apiError);
        await ctx.reply('‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å —Å—á–µ—Ç –¥–ª—è –æ–ø–ª–∞—Ç—ã. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.');
      }
      
    } catch (error) {
      console.error('–î–ï–ü–û–ó–ò–¢: –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –¥–µ–π—Å—Ç–≤–∏—è –ø–æ–ø–æ–ª–Ω–µ–Ω–∏—è:', error);
      await ctx.reply('‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.');
      await ctx.answerCbQuery('‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è —Å—á–µ—Ç–∞');
    }
  });
  
  // –û–±—Ä–∞–±–æ—Ç–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å—Ç–∞—Ç—É—Å–∞ –¥–µ–ø–æ–∑–∏—Ç–∞
  bot.action(/^check_deposit_status:([0-9a-fA-F]{24})$/, async (ctx) => {
    try {
      const depositId = ctx.match[1];
      
      console.log(`–°–¢–ê–¢–£–°: –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç–∞—Ç—É—Å–∞ –¥–µ–ø–æ–∑–∏—Ç–∞: ${depositId}`);
      
      await ctx.answerCbQuery('‚è≥ –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç–∞—Ç—É—Å –¥–µ–ø–æ–∑–∏—Ç–∞...');
      
      const depositInfo = await apiService.getDepositStatus(ctx.from, depositId);
      
      let statusMessage = '';
      let statusEmoji = '';
      
      switch (depositInfo.status) {
        case 'pending':
          statusEmoji = '‚è≥';
          statusMessage = '–û–∂–∏–¥–∞–µ—Ç –æ–ø–ª–∞—Ç—ã';
          break;
        case 'paid':
          statusEmoji = '‚úÖ';
          statusMessage = '–û–ø–ª–∞—á–µ–Ω - —Å—Ä–µ–¥—Å—Ç–≤–∞ –∑–∞—á–∏—Å–ª–µ–Ω—ã –Ω–∞ –±–∞–ª–∞–Ω—Å';
          break;
        case 'expired':
          statusEmoji = '‚è∞';
          statusMessage = '–ò—Å—Ç–µ–∫ —Å—Ä–æ–∫ –¥–µ–π—Å—Ç–≤–∏—è';
          break;
        default:
          statusEmoji = '‚ùì';
          statusMessage = '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —Å—Ç–∞—Ç—É—Å';
      }
      
      await ctx.reply(
        `üìä –°—Ç–∞—Ç—É—Å –¥–µ–ø–æ–∑–∏—Ç–∞\n\n` +
        `üÜî ID: ${depositInfo.id}\n` +
        `üíµ –°—É–º–º–∞: ${depositInfo.amount} USDT\n` +
        `${statusEmoji} –°—Ç–∞—Ç—É—Å: ${statusMessage}\n` +
        `üìÖ –°–æ–∑–¥–∞–Ω: ${new Date(depositInfo.createdAt).toLocaleString('ru-RU')}`
      );
      
    } catch (error) {
      console.error('–°–¢–ê–¢–£–°: –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ —Å—Ç–∞—Ç—É—Å–∞ –¥–µ–ø–æ–∑–∏—Ç–∞:', error);
      await ctx.reply('‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø—Ä–æ–≤–µ—Ä–∏—Ç—å —Å—Ç–∞—Ç—É—Å –¥–µ–ø–æ–∑–∏—Ç–∞');
      await ctx.answerCbQuery('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏');
    }
  });

  // –û–±—Ä–∞–±–æ—Ç–∫–∞ –¥–µ–π—Å—Ç–≤–∏–π –≤—ã–≤–æ–¥–∞ —Å—Ä–µ–¥—Å—Ç–≤
  bot.action(/^withdraw:(\d+|custom)$/, async (ctx) => {
    try {
      const amount = ctx.match[1];
      
      console.log(`–í–´–í–û–î: –û–±—Ä–∞–±–æ—Ç–∫–∞ callback withdraw:${amount}`);
      
      // –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å—É–º–º—É –≤ —Å–µ—Å—Å–∏–∏
      ctx.session = ctx.session || {};
      
      if (amount === 'custom') {
        // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ñ–ª–∞–≥ –æ–∂–∏–¥–∞–Ω–∏—è —Å—É–º–º—ã –≤—ã–≤–æ–¥–∞
        ctx.session.waitingForWithdrawAmount = true;
        
        await ctx.answerCbQuery();
        await ctx.reply(
          'üí∞ –í–≤–µ–¥–∏—Ç–µ —Å—É–º–º—É –¥–ª—è –≤—ã–≤–æ–¥–∞ (–≤ USDT):\n\n' +
          '–ú–∏–Ω–∏–º—É–º: 1 USDT\n' +
          '–ú–∞–∫—Å–∏–º—É–º: 10000 USDT\n\n' +
          '–î–ª—è –æ—Ç–º–µ–Ω—ã –≤–≤–µ–¥–∏—Ç–µ /cancel'
        );
        return;
      }
      
      // –í–∞–ª–∏–¥–∞—Ü–∏—è —Å—É–º–º—ã
      const amountFloat = parseFloat(amount);
      
      if (isNaN(amountFloat) || amountFloat <= 0) {
        await ctx.reply('‚ùå –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–∞—è —Å—É–º–º–∞ –¥–ª—è –≤—ã–≤–æ–¥–∞');
        return;
      }
      
      if (amountFloat < 1) {
        await ctx.reply('‚ùå –ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è —Å—É–º–º–∞ –≤—ã–≤–æ–¥–∞: 1 USDT');
        return;
      }
      
      if (amountFloat > 10000) {
        await ctx.reply('‚ùå –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è —Å—É–º–º–∞ –≤—ã–≤–æ–¥–∞: 10000 USDT');
        return;
      }
      
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º –±–∞–ª–∞–Ω—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
      await ctx.answerCbQuery('‚è≥ –ü—Ä–æ–≤–µ—Ä—è–µ–º –±–∞–ª–∞–Ω—Å...');
      
      const balance = await apiService.getUserBalance(ctx.from);
      
      if (balance < amountFloat) {
        await ctx.reply(`‚ùå –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å—Ä–µ–¥—Å—Ç–≤\n\n–í–∞—à –±–∞–ª–∞–Ω—Å: ${balance.toFixed(2)} USDT\n–ó–∞–ø—Ä–æ—à–µ–Ω–æ: ${amountFloat} USDT`);
        return;
      }
      
      // –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å—É–º–º—É –∏ –∑–∞–ø—Ä–∞—à–∏–≤–∞–µ–º –ø–æ–ª—É—á–∞—Ç–µ–ª—è
      ctx.session.withdrawAmount = amountFloat;
      ctx.session.waitingForWithdrawRecipient = true;
      
      await ctx.reply(
        'üì§ –ö—É–¥–∞ –≤—ã–≤–µ—Å—Ç–∏ —Å—Ä–µ–¥—Å—Ç–≤–∞?\n\n' +
        '–í–≤–µ–¥–∏—Ç–µ Telegram username –ø–æ–ª—É—á–∞—Ç–µ–ª—è (–±–µ–∑ @):\n\n' +
        '‚ö†Ô∏è –í–∞–∂–Ω–æ:\n' +
        '‚Ä¢ –ü–æ–ª—É—á–∞—Ç–µ–ª—å –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω –≤ @CryptoBot\n' +
        '‚Ä¢ Username –≤–≤–æ–¥–∏—Ç—Å—è –±–µ–∑ —Å–∏–º–≤–æ–ª–∞ @\n' +
        '‚Ä¢ –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ø—Ä–∞–≤–∏–ª—å–Ω–æ—Å—Ç—å username –ø–µ—Ä–µ–¥ –æ—Ç–ø—Ä–∞–≤–∫–æ–π\n\n' +
        '–î–ª—è –æ—Ç–º–µ–Ω—ã –≤–≤–µ–¥–∏—Ç–µ /cancel'
      );
      
    } catch (error) {
      console.error('–í–´–í–û–î: –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –¥–µ–π—Å—Ç–≤–∏—è –≤—ã–≤–æ–¥–∞:', error);
      await ctx.reply('‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.');
      await ctx.answerCbQuery('‚ùå –û—à–∏–±–∫–∞');
    }
  });

  // –û–±—Ä–∞–±–æ—Ç–∫–∞ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –≤—ã–≤–æ–¥–∞
  bot.action(/^confirm_withdraw:(.+)$/, async (ctx) => {
    try {
      const data = ctx.match[1];
      const [amount, recipient] = data.split(':');
      
      await ctx.answerCbQuery('‚è≥ –°–æ–∑–¥–∞–µ–º –∑–∞–ø—Ä–æ—Å –Ω–∞ –≤—ã–≤–æ–¥...');
      
      console.log(`–í–´–í–û–î: –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –≤—ã–≤–æ–¥–∞ ${amount} USDT –¥–ª—è ${recipient}`);
      
      try {
        // –°–æ–∑–¥–∞–µ–º –∑–∞–ø—Ä–æ—Å –Ω–∞ –≤—ã–≤–æ–¥ —á–µ—Ä–µ–∑ API
        const withdrawalData = await apiService.createWithdrawal(ctx.from, {
          amount: parseFloat(amount),
          recipient: recipient,
          recipientType: 'username',
          comment: `–í—ã–≤–æ–¥ —á–µ—Ä–µ–∑ Telegram –±–æ—Ç`
        });
        
        console.log(`–í–´–í–û–î: –ó–∞–ø—Ä–æ—Å –Ω–∞ –≤—ã–≤–æ–¥ —Å–æ–∑–¥–∞–Ω:`, withdrawalData);
        
        // –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Å—É–º–º—ã
        let message = `‚úÖ –ó–∞–ø—Ä–æ—Å –Ω–∞ –≤—ã–≤–æ–¥ —Å–æ–∑–¥–∞–Ω\n\n` +
          `üíµ –°—É–º–º–∞: ${amount} USDT\n` +
          `üì§ –ü–æ–ª—É—á–∞—Ç–µ–ª—å: @${recipient}\n` +
          `üÜî ID –≤—ã–≤–æ–¥–∞: ${withdrawalData.withdrawalId}\n`;
        
        if (withdrawalData.requiresApproval) {
          message += `\n‚è≥ –°—Ç–∞—Ç—É—Å: –¢—Ä–µ–±—É–µ—Ç –æ–¥–æ–±—Ä–µ–Ω–∏—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞\n` +
            `‚è∞ –í—Ä–µ–º—è –æ–±—Ä–∞–±–æ—Ç–∫–∏: 24-48 —á–∞—Å–æ–≤`;
        } else {
          message += `\n‚ö° –°—Ç–∞—Ç—É—Å: –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞\n` +
            `‚è∞ –í—Ä–µ–º—è –æ–±—Ä–∞–±–æ—Ç–∫–∏: 5-15 –º–∏–Ω—É—Ç`;
        }
        
        await ctx.editMessageText(message, 
          Markup.inlineKeyboard([
            [Markup.button.callback('üìä –ü—Ä–æ–≤–µ—Ä–∏—Ç—å —Å—Ç–∞—Ç—É—Å', `check_withdrawal_status:${withdrawalData.withdrawalId}`)],
            [Markup.button.callback('üìã –ò—Å—Ç–æ—Ä–∏—è –≤—ã–≤–æ–¥–æ–≤', 'withdrawals_history')]
          ])
        );
        
        // –û—á–∏—â–∞–µ–º —Å–µ—Å—Å–∏—é
        delete ctx.session.withdrawAmount;
        delete ctx.session.withdrawRecipient;
        delete ctx.session.waitingForWithdrawAmount;
        delete ctx.session.waitingForWithdrawRecipient;
        
      } catch (apiError) {
        console.error('–í–´–í–û–î: –û—à–∏–±–∫–∞ API –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –≤—ã–≤–æ–¥–∞:', apiError);
        
        let errorMessage = '‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å –∑–∞–ø—Ä–æ—Å –Ω–∞ –≤—ã–≤–æ–¥\n\n';
        
        if (apiError.message.includes('–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å—Ä–µ–¥—Å—Ç–≤')) {
          errorMessage += '–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å—Ä–µ–¥—Å—Ç–≤ –Ω–∞ –±–∞–ª–∞–Ω—Å–µ';
        } else if (apiError.message.includes('–∞–∫—Ç–∏–≤–Ω—ã–π –∑–∞–ø—Ä–æ—Å')) {
          errorMessage += '–£ –≤–∞—Å —É–∂–µ –µ—Å—Ç—å –∞–∫—Ç–∏–≤–Ω—ã–π –∑–∞–ø—Ä–æ—Å –Ω–∞ –≤—ã–≤–æ–¥';
        } else if (apiError.message.includes('username')) {
          errorMessage += '–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π username –ø–æ–ª—É—á–∞—Ç–µ–ª—è';
        } else {
          errorMessage += apiError.message || '–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ';
        }
        
        await ctx.editMessageText(errorMessage);
      }
      
    } catch (error) {
      console.error('–í–´–í–û–î: –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–∏ –≤—ã–≤–æ–¥–∞:', error);
      await ctx.reply('‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.');
      await ctx.answerCbQuery('‚ùå –û—à–∏–±–∫–∞');
    }
  });

  // –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—Ç–º–µ–Ω—ã –≤—ã–≤–æ–¥–∞
  bot.action('cancel_withdraw', async (ctx) => {
    await ctx.answerCbQuery('–û—Ç–º–µ–Ω–µ–Ω–æ');
    
    // –û—á–∏—â–∞–µ–º —Å–µ—Å—Å–∏—é
    ctx.session = ctx.session || {};
    delete ctx.session.withdrawAmount;
    delete ctx.session.withdrawRecipient;
    delete ctx.session.waitingForWithdrawAmount;
    delete ctx.session.waitingForWithdrawRecipient;
    
    await ctx.editMessageText('‚ùå –í—ã–≤–æ–¥ —Å—Ä–µ–¥—Å—Ç–≤ –æ—Ç–º–µ–Ω–µ–Ω');
  });

  // –û–±—Ä–∞–±–æ—Ç–∫–∞ –∏—Å—Ç–æ—Ä–∏–∏ –≤—ã–≤–æ–¥–æ–≤
  bot.action('withdrawals_history', async (ctx) => {
    try {
      console.log(`–ò–°–¢–û–†–ò–Ø –í–´–í–û–î–û–í: –ó–∞–ø—Ä–æ—Å –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ${ctx.from.id}`);
      
      await ctx.answerCbQuery('‚è≥ –ó–∞–≥—Ä—É–∂–∞–µ–º –∏—Å—Ç–æ—Ä–∏—é –≤—ã–≤–æ–¥–æ–≤...');
      
      // –ü–æ–ª—É—á–∞–µ–º –∏—Å—Ç–æ—Ä–∏—é –≤—ã–≤–æ–¥–æ–≤ —á–µ—Ä–µ–∑ API
      const withdrawalsData = await apiService.getUserWithdrawals(ctx.from, { limit: 10 });
      
      if (!withdrawalsData.withdrawals || withdrawalsData.withdrawals.length === 0) {
        await ctx.reply('üìã –£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç –∑–∞–ø—Ä–æ—Å–æ–≤ –Ω–∞ –≤—ã–≤–æ–¥ —Å—Ä–µ–¥—Å—Ç–≤');
        return;
      }
      
      // –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∏—Å—Ç–æ—Ä–∏–µ–π
      let message = 'üìã –ò—Å—Ç–æ—Ä–∏—è –≤—ã–≤–æ–¥–æ–≤ (–ø–æ—Å–ª–µ–¥–Ω–∏–µ 10):\n\n';
      
      for (const withdrawal of withdrawalsData.withdrawals) {
        const date = new Date(withdrawal.createdAt).toLocaleDateString('ru-RU');
        let statusEmoji = '';
        let statusText = '';
        
        switch (withdrawal.status) {
          case 'pending':
            statusEmoji = '‚è≥';
            statusText = '–û–∂–∏–¥–∞–µ—Ç';
            break;
          case 'approved':
            statusEmoji = '‚úÖ';
            statusText = '–û–¥–æ–±—Ä–µ–Ω';
            break;
          case 'processing':
            statusEmoji = '‚öôÔ∏è';
            statusText = '–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç—Å—è';
            break;
          case 'completed':
            statusEmoji = '‚úÖ';
            statusText = '–í—ã–ø–æ–ª–Ω–µ–Ω';
            break;
          case 'rejected':
            statusEmoji = '‚ùå';
            statusText = '–û—Ç–∫–ª–æ–Ω–µ–Ω';
            break;
          case 'failed':
            statusEmoji = '‚ö†Ô∏è';
            statusText = '–û—à–∏–±–∫–∞';
            break;
        }
        
        message += `${statusEmoji} ${date} - ${withdrawal.amount} USDT\n`;
        message += `   –ü–æ–ª—É—á–∞—Ç–µ–ª—å: ${withdrawal.recipient}\n`;
        message += `   –°—Ç–∞—Ç—É—Å: ${statusText}\n`;
        
        if (withdrawal.rejectionReason) {
          message += `   –ü—Ä–∏—á–∏–Ω–∞: ${withdrawal.rejectionReason}\n`;
        }
        
        message += '\n';
      }
      
      await ctx.reply(message);
      
    } catch (error) {
      console.error('–ò–°–¢–û–†–ò–Ø –í–´–í–û–î–û–í: –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∏—Å—Ç–æ—Ä–∏–∏:', error);
      await ctx.reply('‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –∏—Å—Ç–æ—Ä–∏—é –≤—ã–≤–æ–¥–æ–≤');
    }
  });
  
  // –û–±—Ä–∞–±–æ—Ç–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å—Ç–∞—Ç—É—Å–∞ –≤—ã–≤–æ–¥–∞
  bot.action(/^check_withdrawal_status:([0-9a-fA-F]{24})$/, async (ctx) => {
    try {
      const withdrawalId = ctx.match[1];
      
      console.log(`–°–¢–ê–¢–£–° –í–´–í–û–î–ê: –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç–∞—Ç—É—Å–∞ –≤—ã–≤–æ–¥–∞: ${withdrawalId}`);
      
      await ctx.answerCbQuery('‚è≥ –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç–∞—Ç—É—Å –≤—ã–≤–æ–¥–∞...');
      
      const withdrawalInfo = await apiService.getWithdrawalStatus(ctx.from, withdrawalId);
      
      let statusMessage = '';
      let statusEmoji = '';
      
      switch (withdrawalInfo.status) {
        case 'pending':
          statusEmoji = '‚è≥';
          statusMessage = withdrawalInfo.amount > 300 
            ? '–û–∂–∏–¥–∞–µ—Ç –æ–¥–æ–±—Ä–µ–Ω–∏—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞' 
            : '–û–∂–∏–¥–∞–µ—Ç –æ–±—Ä–∞–±–æ—Ç–∫–∏';
          break;
        case 'approved':
          statusEmoji = '‚úÖ';
          statusMessage = '–û–¥–æ–±—Ä–µ–Ω –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º';
          break;
        case 'processing':
          statusEmoji = '‚öôÔ∏è';
          statusMessage = '–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç—Å—è —Å–∏—Å—Ç–µ–º–æ–π';
          break;
        case 'completed':
          statusEmoji = '‚úÖ';
          statusMessage = '–£—Å–ø–µ—à–Ω–æ –≤—ã–ø–æ–ª–Ω–µ–Ω';
          break;
        case 'rejected':
          statusEmoji = '‚ùå';
          statusMessage = '–û—Ç–∫–ª–æ–Ω–µ–Ω –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º';
          break;
        case 'failed':
          statusEmoji = '‚ö†Ô∏è';
          statusMessage = '–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ';
          break;
      }
      
      let replyMessage = `üìä –°—Ç–∞—Ç—É—Å –≤—ã–≤–æ–¥–∞\n\n` +
        `üÜî ID: ${withdrawalInfo.id}\n` +
        `üíµ –°—É–º–º–∞: ${withdrawalInfo.amount} USDT\n` +
        `${statusEmoji} –°—Ç–∞—Ç—É—Å: ${statusMessage}\n` +
        `üìÖ –°–æ–∑–¥–∞–Ω: ${new Date(withdrawalInfo.createdAt).toLocaleString('ru-RU')}`;
      
      if (withdrawalInfo.processedAt) {
        replyMessage += `\n‚úÖ –û–±—Ä–∞–±–æ—Ç–∞–Ω: ${new Date(withdrawalInfo.processedAt).toLocaleString('ru-RU')}`;
      }
      
      if (withdrawalInfo.rejectionReason) {
        replyMessage += `\n\n‚ùå –ü—Ä–∏—á–∏–Ω–∞ –æ—Ç–∫–ª–æ–Ω–µ–Ω–∏—è: ${withdrawalInfo.rejectionReason}`;
      }
      
      await ctx.reply(replyMessage);
      
    } catch (error) {
      console.error('–°–¢–ê–¢–£–° –í–´–í–û–î–ê: –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ —Å—Ç–∞—Ç—É—Å–∞:', error);
      await ctx.reply('‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø—Ä–æ–≤–µ—Ä–∏—Ç—å —Å—Ç–∞—Ç—É—Å –≤—ã–≤–æ–¥–∞');
      await ctx.answerCbQuery('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏');
    }
  });

  // ===== PvP –î–£–≠–õ–ò –û–ë–†–ê–ë–û–¢–ß–ò–ö–ò =====

  // –û–±—Ä–∞–±–æ—Ç–∫–∞ –ø—Ä–∏–Ω—è—Ç–∏—è –¥—É—ç–ª–∏
  bot.action(/^accept_duel_(\d+)_(\d+)$/, async (ctx) => {
    try {
      const challengerId = ctx.match[1];
      const amount = parseFloat(ctx.match[2]);
      const opponentId = ctx.from.id.toString();
      
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —ç—Ç–æ –Ω–µ —Ç–æ—Ç –∂–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å
      if (challengerId === opponentId) {
        await ctx.answerCbQuery('‚ùå –ù–µ–ª—å–∑—è –ø—Ä–∏–Ω—è—Ç—å —Å–≤–æ–π —Å–æ–±—Å—Ç–≤–µ–Ω–Ω—ã–π –≤—ã–∑–æ–≤', true);
        return;
      }
      
      await ctx.answerCbQuery('‚è≥ –°–æ–∑–¥–∞–µ–º –¥—É—ç–ª—å...');
      
      // –ò–∑–≤–ª–µ–∫–∞–µ–º challenger username –∏–∑ —Å–æ–æ–±—â–µ–Ω–∏—è
      let challengerUsername = 'Unknown';
      const messageText = ctx.callbackQuery.message.text;
      const usernameMatch = messageText.match(/@(\w+)\s+(?:–≤—ã–∑—ã–≤–∞–µ—Ç|–±—Ä–æ—Å–∞–µ—Ç)/);
      if (usernameMatch) {
        challengerUsername = usernameMatch[1];
      }
      
      // –°–æ–∑–¥–∞–µ–º –¥—É—ç–ª—å
      const duel = await apiService.createPvPChallenge({
        challengerId,
        challengerUsername,
        opponentId,
        opponentUsername: ctx.from.username,
        amount,
        chatId: ctx.chat.id,
        messageId: ctx.callbackQuery.message.message_id
      });
      
      // –ü—Ä–∏–Ω–∏–º–∞–µ–º –¥—É—ç–ª—å
      const response = await apiService.respondToPvPChallenge(
        duel.data.duelId,
        opponentId,
        'accept'
      );
      
      // –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
      await ctx.editMessageText(
        `ü™ô **–î–£–≠–õ–¨ –ü–†–ò–ù–Ø–¢–ê!** ü™ô\n\n` +
        `‚öîÔ∏è –ò–≥—Ä–æ–∫–∏ –≥–æ—Ç–æ–≤—è—Ç—Å—è –∫ –±–∏—Ç–≤–µ!\n` +
        `üÜî –°–µ—Å—Å–∏—è: ${response.data.sessionId}\n\n` +
        `üëá –í–æ–π–¥–∏—Ç–µ –≤ –∏–≥—Ä–æ–≤—É—é –∫–æ–º–Ω–∞—Ç—É:`,
        {
          parse_mode: 'Markdown',
          reply_markup: Markup.inlineKeyboard([[
            Markup.button.webApp(
              'üéÆ –í–æ–π—Ç–∏ –≤ –∏–≥—Ä—É', 
              `${config.webAppUrl}?pvp=${response.data.sessionId}`
            )
          ]])
        }
      );
      
    } catch (error) {
      console.error('PVP: –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–∏–Ω—è—Ç–∏–∏ –¥—É—ç–ª–∏:', error);
      await ctx.answerCbQuery('‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞', true);
      
      let errorMessage = '‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø—Ä–∏–Ω—è—Ç—å –¥—É—ç–ª—å\n\n';
      if (error.message?.includes('–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å—Ä–µ–¥—Å—Ç–≤')) {
        errorMessage += '–£ –≤–∞—Å –Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å—Ä–µ–¥—Å—Ç–≤ –¥–ª—è –¥—É—ç–ª–∏';
      } else if (error.message?.includes('–∞–∫—Ç–∏–≤–Ω–∞—è –¥—É—ç–ª—å')) {
        errorMessage += '–£ –≤–∞—Å —É–∂–µ –µ—Å—Ç—å –∞–∫—Ç–∏–≤–Ω–∞—è –¥—É—ç–ª—å —Å —ç—Ç–∏–º –∏–≥—Ä–æ–∫–æ–º';
      } else {
        errorMessage += error.message || '–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ';
      }
      
      try {
        await ctx.editMessageText(errorMessage);
      } catch (editError) {
        await ctx.reply(errorMessage);
      }
    }
  });

  // –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—Ç–∫–ª–æ–Ω–µ–Ω–∏—è –¥—É—ç–ª–∏
  bot.action(/^decline_duel_(\d+)$/, async (ctx) => {
    try {
      const challengerId = ctx.match[1];
      const opponentId = ctx.from.id.toString();
      const opponentUsername = ctx.from.username;
      
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —ç—Ç–æ –Ω–µ —Ç–æ—Ç –∂–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å
      if (challengerId === opponentId) {
        await ctx.answerCbQuery('‚ùå –ù–µ–ª—å–∑—è –æ—Ç–∫–ª–æ–Ω–∏—Ç—å —Å–≤–æ–π —Å–æ–±—Å—Ç–≤–µ–Ω–Ω—ã–π –≤—ã–∑–æ–≤', true);
        return;
      }
      
      await ctx.answerCbQuery('‚ùå –î—É—ç–ª—å –æ—Ç–∫–ª–æ–Ω–µ–Ω–∞');
      
      await ctx.editMessageText(
        `ü™ô **–î–£–≠–õ–¨ –û–¢–ö–õ–û–ù–ï–ù–ê** ü™ô\n\n` +
        `‚ùå @${opponentUsername} –æ—Ç–∫–ª–æ–Ω–∏–ª(–∞) –≤—ã–∑–æ–≤\n\n` +
        `üí° –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø—Ä–µ–¥–ª–æ–∂–∏—Ç—å –¥—É—ç–ª—å –¥—Ä—É–≥–æ–º—É –∏–≥—Ä–æ–∫—É!`,
        { parse_mode: 'Markdown' }
      );
      
    } catch (error) {
      console.error('PVP: –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–∫–ª–æ–Ω–µ–Ω–∏–∏ –¥—É—ç–ª–∏:', error);
      await ctx.answerCbQuery('‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞', true);
    }
  });

  // –¢–µ—Å—Ç–æ–≤—ã–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫
  bot.action('test_button', async (ctx) => {
    await ctx.answerCbQuery('‚úÖ –ö–Ω–æ–ø–∫–∞ —Ä–∞–±–æ—Ç–∞–µ—Ç!');
    await ctx.reply('üéâ Callback —Ä–∞–±–æ—Ç–∞–µ—Ç! –í—ã –Ω–∞–∂–∞–ª–∏ –∫–Ω–æ–ø–∫—É.');
  });

  // –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—Ö–æ–¥–∞ –≤ PvP –∫–æ–º–Ω–∞—Ç—É (–Ω–æ–≤–∞—è —É–ø—Ä–æ—â–µ–Ω–Ω–∞—è –ª–æ–≥–∏–∫–∞)
  bot.action(/^pvp_join_(\d+)_(\d+(?:\.\d+)?)_(.*)$/, async (ctx) => {
    try {
      const challengerId = ctx.match[1];
      const amount = parseFloat(ctx.match[2]);
      const targetUsername = ctx.match[3] || '';
      const playerId = ctx.from.id.toString();
      const playerUsername = ctx.from.username;

      console.log(`PVP: ${playerUsername} (${playerId}) –≤—Ö–æ–¥–∏—Ç –≤ –∫–æ–º–Ω–∞—Ç—É –¥—É—ç–ª–∏ –æ—Ç ${challengerId} –Ω–∞ ${amount} USDT`);

      await ctx.answerCbQuery('‚è≥ –°–æ–∑–¥–∞–µ–º –∏–≥—Ä–æ–≤—É—é –∫–æ–º–Ω–∞—Ç—É...');

      // –ï—Å–ª–∏ —ç—Ç–æ –∏–Ω–∏—Ü–∏–∞—Ç–æ—Ä, —Å–æ–∑–¥–∞–µ–º –¥—É—ç–ª—å
      let duelData, sessionId;
      
      if (challengerId === playerId) {
        // –ò–Ω–∏—Ü–∏–∞—Ç–æ—Ä —Å–æ–∑–¥–∞–µ—Ç –¥—É—ç–ª—å
        if (!targetUsername) {
          // –û—Ç–∫—Ä—ã—Ç–∞—è –¥—É—ç–ª—å - –ø–æ–∫–∞ —Å–æ–∑–¥–∞–µ–º —Å –≤—Ä–µ–º–µ–Ω–Ω—ã–º –æ–ø–ø–æ–Ω–µ–Ω—Ç–æ–º
          await ctx.answerCbQuery('‚è≥ –û–∂–∏–¥–∞–Ω–∏–µ –≤—Ç–æ—Ä–æ–≥–æ –∏–≥—Ä–æ–∫–∞...', true);
          return;
        }
        
        // –°–æ–∑–¥–∞–µ–º –¥—É—ç–ª—å —á–µ—Ä–µ–∑ API
        duelData = await apiService.createPvPChallenge({
          challengerId,
          challengerUsername: playerUsername,
          opponentId: 'pending', // –ë—É–¥–µ—Ç –∑–∞–ø–æ–ª–Ω–µ–Ω–æ –∫–æ–≥–¥–∞ –æ–ø–ø–æ–Ω–µ–Ω—Ç –ø—Ä–∏—Å–æ–µ–¥–∏–Ω–∏—Ç—Å—è
          opponentUsername: targetUsername,
          amount,
          chatId: ctx.chat.id.toString(),
          chatType: ctx.chat.type,
          messageId: ctx.callbackQuery.message.message_id
        });

        sessionId = duelData.data.sessionId;
        console.log('PVP: –î—É—ç–ª—å —Å–æ–∑–¥–∞–Ω–∞ –∏–Ω–∏—Ü–∏–∞—Ç–æ—Ä–æ–º:', duelData);
      } else {
        // –í—Ç–æ—Ä–æ–π –∏–≥—Ä–æ–∫ –ø—Ä–∏—Å–æ–µ–¥–∏–Ω—è–µ—Ç—Å—è –∫ –¥—É—ç–ª–∏
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –≤—ã–∑–æ–≤ –∞–¥—Ä–µ—Å–æ–≤–∞–Ω —ç—Ç–æ–º—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é –∏–ª–∏ —ç—Ç–æ –æ—Ç–∫—Ä—ã—Ç—ã–π –≤—ã–∑–æ–≤
        if (targetUsername && targetUsername !== playerUsername) {
          await ctx.answerCbQuery('‚ùå –≠—Ç–æ—Ç –≤—ã–∑–æ–≤ –∞–¥—Ä–µ—Å–æ–≤–∞–Ω –¥—Ä—É–≥–æ–º—É –∏–≥—Ä–æ–∫—É', true);
          return;
        }

        // –ù–∞—Ö–æ–¥–∏–º —Å—É—â–µ—Å—Ç–≤—É—é—â—É—é –¥—É—ç–ª—å –∏–ª–∏ —Å–æ–∑–¥–∞–µ–º –Ω–æ–≤—É—é –∫–∞–∫ –æ–ø–ø–æ–Ω–µ–Ω—Ç
        try {
          duelData = await apiService.createPvPChallenge({
            challengerId,
            challengerUsername: '', // –ü–æ–ª—É—á–∏–º –∏–∑ API
            opponentId: playerId,
            opponentUsername: playerUsername,
            amount,
            chatId: ctx.chat.id.toString(),
            chatType: ctx.chat.type,
            messageId: ctx.callbackQuery.message.message_id
          });

          sessionId = duelData.data.sessionId;
          console.log('PVP: –î—É—ç–ª—å —Å–æ–∑–¥–∞–Ω–∞ –æ–ø–ø–æ–Ω–µ–Ω—Ç–æ–º:', duelData);
        } catch (error) {
          if (error.message.includes('—É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç')) {
            // –î—É—ç–ª—å —É–∂–µ —Å–æ–∑–¥–∞–Ω–∞, –ø—Ä–∏—Å–æ–µ–¥–∏–Ω—è–µ–º—Å—è
            // TODO: –†–µ–∞–ª–∏–∑–æ–≤–∞—Ç—å –ø–æ–ª—É—á–µ–Ω–∏–µ —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–π —Å–µ—Å—Å–∏–∏
            await ctx.answerCbQuery('‚ùå –î—É—ç–ª—å —É–∂–µ —Å–æ–∑–¥–∞–Ω–∞', true);
            return;
          }
          throw error;
        }
      }

      // –ü–µ—Ä–µ–Ω–∞–ø—Ä–∞–≤–ª—è–µ–º –≤ WebApp
      const { webAppUrl } = config;
      const gameUrl = `${webAppUrl}?pvp=${sessionId}`;

      await ctx.editMessageText(
        `üéØ **–ò–ì–†–û–í–ê–Ø –ö–û–ú–ù–ê–¢–ê –ê–ö–¢–ò–í–ù–ê** ü™ô\n\n` +
        `üí∞ –°—Ç–∞–≤–∫–∞: ${amount} USDT –∫–∞–∂–¥—ã–π\n` +
        `üèÜ –ë–∞–Ω–∫: ${(amount * 2 * 0.95).toFixed(2)} USDT (5% –∫–æ–º–∏—Å—Å–∏—è)\n` +
        `üÜî –°–µ—Å—Å–∏—è: ${sessionId}\n\n` +
        `üö™ –ò–≥—Ä–æ–∫–∏ –≤—Ö–æ–¥—è—Ç –≤ –∫–æ–º–Ω–∞—Ç—É...`,
        {
          parse_mode: 'Markdown',
          reply_markup: Markup.inlineKeyboard([
            [Markup.button.webApp('üéÆ –í–æ–π—Ç–∏ –≤ –∏–≥—Ä—É', gameUrl)],
            [Markup.button.callback('üìä –û–±–Ω–æ–≤–∏—Ç—å —Å—Ç–∞—Ç—É—Å', `pvp_status_${sessionId}`)]
          ])
        }
      );

      console.log(`PVP: –ü–µ—Ä–µ–Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –≤ WebApp: ${gameUrl}`);

    } catch (error) {
      console.error('PVP: –û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—Ö–æ–¥–µ –≤ –∫–æ–º–Ω–∞—Ç—É:', error);
      await ctx.answerCbQuery('‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –∫–æ–º–Ω–∞—Ç—ã', true);
    }
  });



  // –û–±—Ä–∞–±–æ—Ç–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å—Ç–∞—Ç—É—Å–∞ PvP –∏–≥—Ä—ã
  bot.action(/^pvp_status_(.+)$/, async (ctx) => {
    try {
      const sessionId = ctx.match[1];
      const userId = ctx.from.id.toString();

      console.log(`PVP: –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç–∞—Ç—É—Å–∞ —Å–µ—Å—Å–∏–∏ ${sessionId} –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ${userId}`);

      await ctx.answerCbQuery('‚è≥ –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç–∞—Ç—É—Å –∏–≥—Ä—ã...');

      try {
        const sessionData = await apiService.getPvPSession(sessionId, userId);
        
        let statusMessage = `üéØ **–°—Ç–∞—Ç—É—Å –¥—É—ç–ª–∏** ü™ô\n\n`;
        statusMessage += `üÜî –°–µ—Å—Å–∏—è: ${sessionId}\n`;
        statusMessage += `üë• –ò–≥—Ä–æ–∫–∏:\n`;
        statusMessage += `   ‚Ä¢ ${sessionData.data.challengerUsername} ${sessionData.data.challengerJoined ? '‚úÖ' : '‚è≥'} ${sessionData.data.challengerReady ? 'üü¢' : 'üî¥'}\n`;
        statusMessage += `   ‚Ä¢ ${sessionData.data.opponentUsername} ${sessionData.data.opponentJoined ? '‚úÖ' : '‚è≥'} ${sessionData.data.opponentReady ? 'üü¢' : 'üî¥'}\n\n`;
        statusMessage += `üí∞ –°—Ç–∞–≤–∫–∞: ${sessionData.data.amount} USDT –∫–∞–∂–¥—ã–π\n`;
        statusMessage += `üèÜ –ë–∞–Ω–∫: ${sessionData.data.winAmount} USDT\n\n`;

        switch (sessionData.data.status) {
          case 'accepted':
            statusMessage += `üìä –°—Ç–∞—Ç—É—Å: –û–∂–∏–¥–∞–Ω–∏–µ –∏–≥—Ä–æ–∫–æ–≤\n`;
            if (!sessionData.data.bothJoined) {
              statusMessage += `‚è≥ –ò–≥—Ä–æ–∫–∏ –¥–æ–ª–∂–Ω—ã –≤–æ–π—Ç–∏ –≤ –∫–æ–º–Ω–∞—Ç—É\n`;
            } else if (!sessionData.data.bothReady) {
              statusMessage += `‚è≥ –ò–≥—Ä–æ–∫–∏ –¥–æ–ª–∂–Ω—ã –ø–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å –≥–æ—Ç–æ–≤–Ω–æ—Å—Ç—å\n`;
            } else {
              statusMessage += `‚úÖ –ì–æ—Ç–æ–≤—ã –∫ –∏–≥—Ä–µ!\n`;
            }
            break;
          case 'active':
            statusMessage += `üìä –°—Ç–∞—Ç—É—Å: –ò–≥—Ä–∞ –∏–¥–µ—Ç...\n`;
            break;
          case 'completed':
            statusMessage += `üìä –°—Ç–∞—Ç—É—Å: –ò–≥—Ä–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞\n`;
            statusMessage += `üèÜ –ü–æ–±–µ–¥–∏—Ç–µ–ª—å: @${sessionData.data.winnerUsername}\n`;
            statusMessage += `ü™ô –†–µ–∑—É–ª—å—Ç–∞—Ç: ${sessionData.data.coinResult === 'heads' ? '–û—Ä–µ–ª' : '–†–µ—à–∫–∞'}\n`;
            break;
          default:
            statusMessage += `üìä –°—Ç–∞—Ç—É—Å: ${sessionData.data.status}\n`;
        }

        const { webAppUrl } = config;
        const sessionUrl = `${webAppUrl}?pvp=${sessionId}`;

        const buttons = [];
        if (sessionData.data.status === 'accepted') {
          buttons.push([Markup.button.webApp('üö™ –í–æ–π—Ç–∏ –≤ –∫–æ–º–Ω–∞—Ç—É', sessionUrl)]);
        }
        buttons.push([Markup.button.callback('üîÑ –û–±–Ω–æ–≤–∏—Ç—å', `pvp_status_${sessionId}`)]);

        await ctx.reply(statusMessage, {
          parse_mode: 'Markdown',
          reply_markup: Markup.inlineKeyboard(buttons)
        });

      } catch (apiError) {
        console.error('PVP: –û—à–∏–±–∫–∞ API –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å—Ç–∞—Ç—É—Å–∞:', apiError);
        await ctx.reply('‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Å—Ç–∞—Ç—É—Å –∏–≥—Ä—ã\n\n–í–æ–∑–º–æ–∂–Ω–æ, —Å–µ—Å—Å–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –∏–ª–∏ –∏—Å—Ç–µ–∫–ª–∞');
      }

    } catch (error) {
      console.error('PVP: –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ —Å—Ç–∞—Ç—É—Å–∞:', error);
      await ctx.answerCbQuery('‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞', true);
    }
  });

  // –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å—Ç–∞—Ç—É—Å–∞ –∏–≥—Ä–æ–≤–æ–π –∫–æ–º–Ω–∞—Ç—ã (–¥–ª—è inline –∫–Ω–æ–ø–æ–∫)
  bot.action(/^pvp_room_status_(\d+)_(\d+(?:\.\d+)?)$/, async (ctx) => {
    try {
      const challengerId = ctx.match[1];
      const amount = parseFloat(ctx.match[2]);

      await ctx.answerCbQuery('üìä –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å—Ç–∞—Ç—É—Å –∫–æ–º–Ω–∞—Ç—ã...');

      await ctx.reply(
        `üìä **–°—Ç–∞—Ç—É—Å –∏–≥—Ä–æ–≤–æ–π –∫–æ–º–Ω–∞—Ç—ã**\n\n` +
        `üë§ –ò–Ω–∏—Ü–∏–∞—Ç–æ—Ä: ${challengerId}\n` +
        `üí∞ –°—Ç–∞–≤–∫–∞: ${amount} USDT –∫–∞–∂–¥—ã–π\n` +
        `üèÜ –ë–∞–Ω–∫: ${(amount * 2 * 0.95).toFixed(2)} USDT\n\n` +
        `‚è≥ –û–∂–∏–¥–∞–Ω–∏–µ –≤—Ö–æ–¥–∞ –∏–≥—Ä–æ–∫–æ–≤ –≤ –∫–æ–º–Ω–∞—Ç—É...`,
        {
          parse_mode: 'Markdown',
          reply_markup: Markup.inlineKeyboard([
            [Markup.button.callback('üîÑ –û–±–Ω–æ–≤–∏—Ç—å —Å—Ç–∞—Ç—É—Å', `pvp_room_status_${challengerId}_${amount}`)]
          ])
        }
      );

    } catch (error) {
      console.error('PVP: –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∫–∞–∑–µ —Å—Ç–∞—Ç—É—Å–∞ –∫–æ–º–Ω–∞—Ç—ã:', error);
      await ctx.answerCbQuery('‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞', true);
    }
  });
  
  return bot;
}

module.exports = {
  registerCallbackHandlers
};
