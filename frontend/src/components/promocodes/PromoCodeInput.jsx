import React, { useState } from 'react';
import { Button, Input, Modal } from '../common';
import { activatePromoCode, validatePromoCode } from '../../services/api';
import './PromoCodeInput.css';

const PromoCodeInput = ({ onActivation }) => {
  const [code, setCode] = useState('');
  const [isLoading, setIsLoading] = useState(false);
  const [error, setError] = useState('');
  const [validation, setValidation] = useState(null);
  const [showConfirmModal, setShowConfirmModal] = useState(false);

  const handleCodeChange = async (value) => {
    const upperCode = value.toUpperCase().replace(/[^A-Z0-9]/g, '');
    setCode(upperCode);
    setError('');

    // –í–∞–ª–∏–¥–∞—Ü–∏—è –≤ —Ä–µ–∞–ª—å–Ω–æ–º –≤—Ä–µ–º–µ–Ω–∏ –ø—Ä–∏ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–∏ –º–∏–Ω–∏–º–∞–ª—å–Ω–æ–π –¥–ª–∏–Ω—ã
    if (upperCode.length >= 3) {
      try {
        const result = await validatePromoCode(upperCode);
        if (result.success) {
          setValidation(result.data);
        } else {
          setValidation(null);
        }
      } catch (err) {
        setValidation(null);
      }
    } else {
      setValidation(null);
    }
  };

  const handleActivate = async () => {
    if (!code || code.length < 3) {
      setError('–í–≤–µ–¥–∏—Ç–µ –ø—Ä–æ–º–æ–∫–æ–¥ (–º–∏–Ω–∏–º—É–º 3 —Å–∏–º–≤–æ–ª–∞)');
      return;
    }

    // –ï—Å–ª–∏ –µ—Å—Ç—å –≤–∞–ª–∏–¥–∞—Ü–∏—è, –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ
    if (validation && validation.canUse) {
      setShowConfirmModal(true);
      return;
    }

    await executeActivation();
  };

  const executeActivation = async () => {
    setIsLoading(true);
    setError('');

    try {
      const result = await activatePromoCode(code);

      if (result.success) {
        // –£–≤–µ–¥–æ–º–ª—è–µ–º —Ä–æ–¥–∏—Ç–µ–ª—å—Å–∫–∏–π –∫–æ–º–ø–æ–Ω–µ–Ω—Ç –æ–± —É—Å–ø–µ—à–Ω–æ–π –∞–∫—Ç–∏–≤–∞—Ü–∏–∏
        if (onActivation) {
          onActivation(result.data);
        }

        // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —É—Å–ø–µ—à–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
        showSuccessMessage(result.data);

        // –û—á–∏—â–∞–µ–º —Ñ–æ—Ä–º—É
        setCode('');
        setValidation(null);
      } else {
        setError(result.message || '–û—à–∏–±–∫–∞ –∞–∫—Ç–∏–≤–∞—Ü–∏–∏ –ø—Ä–æ–º–æ–∫–æ–¥–∞');
      }
    } catch (err) {
      setError(err.response?.data?.message || '–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∞–∫—Ç–∏–≤–∞—Ü–∏–∏');
    } finally {
      setIsLoading(false);
      setShowConfirmModal(false);
    }
  };

  const showSuccessMessage = (data) => {
    const { reward, promocode } = data;
    let message = `üéâ –ü—Ä–æ–º–æ–∫–æ–¥ "${promocode.code}" —É—Å–ø–µ—à–Ω–æ –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω!\n\n`;

    switch (reward.type) {
      case 'balance':
        message += `üí∞ –ü–æ–ª—É—á–µ–Ω –±–æ–Ω—É—Å: ${reward.amount} ${reward.currency}`;
        break;
      case 'freespins':
        message += `üéÆ –ü–æ–ª—É—á–µ–Ω–æ —Ñ—Ä–∏—Å–ø–∏–Ω–æ–≤: ${reward.count} –≤ –∏–≥—Ä–µ ${reward.game}`;
        break;
      case 'deposit_bonus':
        message += `üìà –ë–æ–Ω—É—Å –∫ –¥–µ–ø–æ–∑–∏—Ç—É: ${reward.percentage}%`;
        if (reward.maxBonus) {
          message += ` (–º–∞–∫—Å. ${reward.maxBonus} USDT)`;
        }
        break;
      case 'vip':
        message += `üèÜ VIP —Å—Ç–∞—Ç—É—Å –ø—Ä–æ–¥–ª–µ–Ω –Ω–∞ ${reward.days} –¥–Ω–µ–π`;
        break;
      default:
        message += 'üéÅ –ë–æ–Ω—É—Å –ø–æ–ª—É—á–µ–Ω!';
    }

    // –ò—Å–ø–æ–ª—å–∑—É–µ–º –≤—Å—Ç—Ä–æ–µ–Ω–Ω—ã–π alert –∏–ª–∏ –∫–∞—Å—Ç–æ–º–Ω–æ–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ
    if (window.Telegram?.WebApp?.showAlert) {
      window.Telegram.WebApp.showAlert(message);
    } else {
      alert(message);
    }
  };

  const getValidationStatus = () => {
    if (!validation) return null;

    if (validation.canUse) {
      return {
        type: 'success',
        message: `‚úÖ ${getRewardDescription(validation.rewardPreview)}`
      };
    } else {
      return {
        type: 'error',
        message: `‚ùå ${validation.reason}`
      };
    }
  };

  const getRewardDescription = (reward) => {
    if (!reward) return '–ü—Ä–æ–º–æ–∫–æ–¥ –≥–æ—Ç–æ–≤ –∫ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—é';

    switch (reward.type) {
      case 'balance':
        return `–ë–æ–Ω—É—Å ${reward.amount} ${reward.currency}`;
      case 'freespins':
        return `${reward.count} —Ñ—Ä–∏—Å–ø–∏–Ω–æ–≤ –≤ ${reward.game}`;
      case 'deposit_bonus':
        return `–ë–æ–Ω—É—Å ${reward.percentage}% –∫ –¥–µ–ø–æ–∑–∏—Ç—É`;
      case 'vip':
        return `VIP —Å—Ç–∞—Ç—É—Å –Ω–∞ ${reward.days} –¥–Ω–µ–π`;
      default:
        return '–°–ø–µ—Ü–∏–∞–ª—å–Ω—ã–π –±–æ–Ω—É—Å';
    }
  };

  const validationStatus = getValidationStatus();

  return (
    <div className="promo-code-input">
      <div className="input-section">
        <Input
          type="text"
          value={code}
          onChange={handleCodeChange}
          placeholder="–í–≤–µ–¥–∏—Ç–µ –ø—Ä–æ–º–æ–∫–æ–¥"
          maxLength={20}
          disabled={isLoading}
          className={`promo-input ${
            validationStatus?.type === 'success' ? 'success' : 
            validationStatus?.type === 'error' ? 'error' : ''
          }`}
        />

        <Button
          onClick={handleActivate}
          disabled={isLoading || !code || code.length < 3}
          loading={isLoading}
          className="activate-button"
        >
          {isLoading ? '–ê–∫—Ç–∏–≤–∞—Ü–∏—è...' : '–ê–∫—Ç–∏–≤–∏—Ä–æ–≤–∞—Ç—å'}
        </Button>
      </div>

      {validationStatus && (
        <div className={`validation-message ${validationStatus.type}`}>
          {validationStatus.message}
        </div>
      )}

      {error && (
        <div className="error-message">
          ‚ùå {error}
        </div>
      )}

      {/* –ú–æ–¥–∞–ª—å–Ω–æ–µ –æ–∫–Ω–æ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è */}
      {showConfirmModal && validation && (
        <Modal
          isOpen={showConfirmModal}
          onClose={() => setShowConfirmModal(false)}
          title="–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –∞–∫—Ç–∏–≤–∞—Ü–∏–∏"
        >
          <div className="confirmation-content">
            <p><strong>–ü—Ä–æ–º–æ–∫–æ–¥:</strong> {code}</p>
            <p><strong>–¢–∏–ø:</strong> {validation.type}</p>
            {validation.description && (
              <p><strong>–û–ø–∏—Å–∞–Ω–∏–µ:</strong> {validation.description}</p>
            )}
            <p><strong>–ù–∞–≥—Ä–∞–¥–∞:</strong> {getRewardDescription(validation.rewardPreview)}</p>

            <div className="confirmation-actions">
              <Button
                onClick={executeActivation}
                loading={isLoading}
                className="confirm-button"
              >
                –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å –∞–∫—Ç–∏–≤–∞—Ü–∏—é
              </Button>
              <Button
                onClick={() => setShowConfirmModal(false)}
                variant="secondary"
                disabled={isLoading}
              >
                –û—Ç–º–µ–Ω–∞
              </Button>
            </div>
          </div>
        </Modal>
      )}
    </div>
  );
};

export default PromoCodeInput;