// bot/src/handlers/duel/duel-game.handler.js

const { getGameConfig, getFormatConfig, formatRoundResults, getTelegramDiceEmoji } = require('./duel-utils');
const apiService = require('../../services/api.service');

/**
 * –û–±—â–∞—è –ª–æ–≥–∏–∫–∞ –∏–≥—Ä—ã –≤ –¥—É—ç–ª–∏
 */
class DuelGameHandler {
  
  /**
   * –í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ —Ö–æ–¥–∞ –≤ –¥—É—ç–ª–∏
   */
  async makeMove(ctx, sessionId, userId, username) {
    try {
      // –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –¥—É—ç–ª–∏
      const duelData = await apiService.getDuelData(sessionId, userId, ctx.from);
      
      if (!duelData.success) {
        await ctx.answerCbQuery('‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö –¥—É—ç–ª–∏');
        return null;
      }
      
      const duel = duelData.data;
      
      // DEBUG: –õ–æ–≥–∏—Ä—É–µ–º –ø–æ–ª—É—á–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –¥—É—ç–ª–∏
      console.log('üîç DEBUG: –ü–æ–ª—É—á–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –¥—É—ç–ª–∏:', {
        sessionId: duel.sessionId,
        gameType: duel.gameType,
        format: duel.format,
        status: duel.status,
        challengerId: duel.challengerId,
        opponentId: duel.opponentId,
        duelKeys: Object.keys(duel),
        fullDuel: JSON.stringify(duel, null, 2)
      });
      
      const gameConfig = getGameConfig(duel.gameType);
      const telegramEmoji = getTelegramDiceEmoji(duel.gameType);
      
      console.log(`üé≤ DEBUG DICE: –ò—Å–ø–æ–ª—å–∑—É–µ–º gameType="${duel.gameType}" -> display="${gameConfig.emoji}" -> telegram="${telegramEmoji}" (${gameConfig.name})`);
      console.log(`üîç DEBUG DETAILED: gameType bytes=[${Array.from(duel.gameType).map(c => c.charCodeAt(0)).join(',')}], telegramEmoji bytes=[${Array.from(telegramEmoji).map(c => c.charCodeAt(0)).join(',')}]`);
      
      await ctx.answerCbQuery(`${gameConfig.emoji} ${gameConfig.processText}`);
      
      // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–∏–π Telegram dice
      // –í–ê–ñ–ù–û: replyWithDice –ø—Ä–∏–Ω–∏–º–∞–µ—Ç –±–∞–∑–æ–≤—ã–π emoji –±–µ–∑ variation selector
      
      // –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –¥–ª—è —Ñ—É—Ç–±–æ–ª–∞
      if (telegramEmoji === '‚öΩ') {
        console.log(`üîç FOOTBALL CHECK: –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∏–º–µ–Ω–Ω–æ —Ñ—É—Ç–±–æ–ª—å–Ω—ã–π dice ‚öΩ`);
        console.log(`üîç gameType was: "${duel.gameType}", converted to: "${telegramEmoji}"`);
      }
      
      // –ü–æ–ø—Ä–æ–±—É–µ–º —Ä–∞–∑–Ω—ã–µ —Å–ø–æ—Å–æ–±—ã –æ—Ç–ø—Ä–∞–≤–∫–∏ dice
      console.log(`üöÄ TRYING: ctx.replyWithDice("${telegramEmoji}")`);
      let diceMessage;
      
      try {
        // –°–ø–æ—Å–æ–± 1: –ß–µ—Ä–µ–∑ replyWithDice —Å emoji –≤ –æ–ø—Ü–∏—è—Ö
        diceMessage = await ctx.replyWithDice({ emoji: telegramEmoji });
        console.log(`‚úÖ SUCCESS: replyWithDice —Å emoji –≤ –æ–ø—Ü–∏—è—Ö`);
      } catch (error) {
        console.log(`‚ùå FAILED: replyWithDice —Å emoji –≤ –æ–ø—Ü–∏—è—Ö:`, error.message);
        
        try {
          // –°–ø–æ—Å–æ–± 2: –ß–µ—Ä–µ–∑ –ø—Ä—è–º–æ–π –≤—ã–∑–æ–≤ sendDice API
          diceMessage = await ctx.telegram.sendDice(ctx.chat.id, telegramEmoji);
          console.log(`‚úÖ SUCCESS: sendDice —Å emoji –∫–∞–∫ –≤—Ç–æ—Ä–æ–π –ø–∞—Ä–∞–º–µ—Ç—Ä`);
        } catch (error2) {
          console.log(`‚ùå FAILED: sendDice –∫–∞–∫ –≤—Ç–æ—Ä–æ–π –ø–∞—Ä–∞–º–µ—Ç—Ä:`, error2.message);
          
          try {
            // –°–ø–æ—Å–æ–± 3: –ß–µ—Ä–µ–∑ sendDice —Å –æ–±—ä–µ–∫—Ç–æ–º
            diceMessage = await ctx.telegram.sendDice(ctx.chat.id, { emoji: telegramEmoji });
            console.log(`‚úÖ SUCCESS: sendDice —Å emoji –æ–±—ä–µ–∫—Ç–æ–º`);
          } catch (error3) {
            console.log(`‚ùå FAILED: sendDice —Å emoji –æ–±—ä–µ–∫—Ç–æ–º:`, error3.message);
            
            // –°–ø–æ—Å–æ–± 4: Fallback –Ω–∞ –±–∞–∑–æ–≤—ã–π replyWithDice (–≤—Å–µ–≥–¥–∞ –∫–æ—Å—Ç–∏)
            diceMessage = await ctx.replyWithDice();
            console.log(`‚ö†Ô∏è FALLBACK: –±–∞–∑–æ–≤—ã–π replyWithDice –±–µ–∑ –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤ - –≤—Å–µ–≥–¥–∞ –∫–æ—Å—Ç–∏!`);
          }
        }
      }
      console.log(`üé≤ DEBUG DICE: –û—Ç–ø—Ä–∞–≤–ª–µ–Ω ${telegramEmoji}, –ø–æ–ª—É—á–µ–Ω —Ä–µ–∑—É–ª—å—Ç–∞—Ç ${diceMessage.dice.value}`);
      console.log(`üîç DICE OBJECT:`, JSON.stringify(diceMessage.dice, null, 2));
      let gameResult = diceMessage.dice.value;
      
      // –ö–æ—Ä—Ä–µ–∫—Ç–∏—Ä—É–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç –¥–ª—è –∏–≥—Ä —Å –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–Ω—ã–º –¥–∏–∞–ø–∞–∑–æ–Ω–æ–º
      if (gameResult > gameConfig.maxValue) {
        gameResult = gameConfig.maxValue;
        console.log(`üîß –†–µ–∑—É–ª—å—Ç–∞—Ç ${diceMessage.dice.value} –æ–±—Ä–µ–∑–∞–Ω –¥–æ ${gameResult} –¥–ª—è –∏–≥—Ä—ã ${duel.gameType}`);
      }
      
      console.log(`üéÆ –ò–≥—Ä–æ–∫ ${username} (${userId}) —Å—ã–≥—Ä–∞–ª ${duel.gameType}: ${gameResult} –≤ –¥—É—ç–ª–∏ ${sessionId}`);
      
      // –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç –≤ API
      const roundData = {
        userId,
        username,
        gameType: duel.gameType,
        result: gameResult,
        timestamp: Date.now()
      };
      
      const saveResult = await apiService.saveDuelRound(sessionId, roundData);
      
      if (!saveResult.success) {
        console.error('–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è —Ö–æ–¥–∞:', saveResult.error);
        return null;
      }
      
      // –ü–æ–ª—É—á–∞–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –¥—É—ç–ª–∏
      const updatedDuelData = await apiService.getDuelData(sessionId, userId, ctx.from);
      
      if (updatedDuelData.success) {
        return {
          duel: updatedDuelData.data,
          gameResult,
          gameConfig
        };
      }
      
      return null;
      
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —Ö–æ–¥–∞:', error);
      await ctx.answerCbQuery('‚ùå –û—à–∏–±–∫–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —Ö–æ–¥–∞');
      return null;
    }
  }
  
  /**
   * –ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –¥—É—ç–ª–∏ –∏ —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞
   */
  formatGameResult(duel, gameResult, gameConfig, currentUserId, currentUsername) {
    const isCompleted = duel.status === 'completed';
    const opponentId = duel.challengerId === currentUserId ? duel.opponentId : duel.challengerId;
    const opponentUsername = duel.challengerId === currentUserId ? duel.opponentUsername : duel.challengerUsername;
    
    if (isCompleted) {
      // –î—É—ç–ª—å –∑–∞–≤–µ—Ä—à–µ–Ω–∞
      const isWinner = duel.winnerId === currentUserId;
      const winnerUsername = duel.winnerId === currentUserId ? currentUsername : opponentUsername;
      const roundsText = formatRoundResults(duel.rounds, duel.challengerUsername, duel.opponentUsername);
      
      return {
        isCompleted: true,
        isWinner,
        message: `üèÜ **–î–£–≠–õ–¨ –ó–ê–í–ï–†–®–ï–ù–ê!** üèÜ\n\n` +
                `${isWinner ? 'üéâ **–ü–û–ó–î–†–ê–í–õ–Ø–ï–ú!**' : 'üò¢ **–ö –°–û–ñ–ê–õ–ï–ù–ò–Æ...**'}\n\n` +
                `${gameConfig.emoji} –ò–≥—Ä–∞: ${gameConfig.name}\n` +
                `üìä –§–∏–Ω–∞–ª—å–Ω—ã–π —Å—á—ë—Ç: ${duel.challengerScore}:${duel.opponentScore}\n` +
                `üëë –ü–æ–±–µ–¥–∏—Ç–µ–ª—å: @${winnerUsername}\n` +
                `üí∞ –í—ã–∏–≥—Ä—ã—à: ${duel.winAmount} USDT\n\n` +
                `üéØ –í–∞—à —Ä–µ–∑—É–ª—å—Ç–∞—Ç: **${gameResult}**\n\n` +
                `${roundsText}\n` +
                `üìã ID –¥—É—ç–ª–∏: \`${duel.sessionId}\``,
        opponentId,
        opponentUsername,
        roundsText
      };
    } else {
      // –î—É—ç–ª—å –ø—Ä–æ–¥–æ–ª–∂–∞–µ—Ç—Å—è
      const formatConfig = getFormatConfig(duel.format);
      
      return {
        isCompleted: false,
        message: `${gameConfig.emoji} **${gameConfig.resultText}**\n\n` +
                `üéØ –í–∞—à —Ä–µ–∑—É–ª—å—Ç–∞—Ç: **${gameResult}**\n` +
                `üìä –¢–µ–∫—É—â–∏–π —Å—á—ë—Ç: ${duel.challengerScore}:${duel.opponentScore}\n` +
                `üèÜ –ò–≥—Ä–∞–µ–º –¥–æ: ${formatConfig.winsRequired} ${formatConfig.winsRequired === 1 ? '–ø–æ–±–µ–¥—ã' : '–ø–æ–±–µ–¥'}\n` +
                `üìã –°–µ—Å—Å–∏—è: \`${duel.sessionId}\`\n\n` +
                `‚è≥ –û–∂–∏–¥–∞–Ω–∏–µ —Ö–æ–¥–∞ –ø—Ä–æ—Ç–∏–≤–Ω–∏–∫–∞...`,
        opponentId,
        opponentUsername
      };
    }
  }
  
  /**
   * –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –ø—Ä–æ—Ç–∏–≤–Ω–∏–∫–∞ –æ —Ö–æ–¥–µ/–∑–∞–≤–µ—Ä—à–µ–Ω–∏–∏
   */
  async notifyOpponent(ctx, opponentId, duel, gameConfig, isCompleted, roundsText = '') {
    try {
      if (isCompleted) {
        // –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–∏ –¥—É—ç–ª–∏
        const isOpponentWinner = duel.winnerId === opponentId;
        const winnerUsername = isOpponentWinner ? duel.opponentUsername : duel.challengerUsername;
        
        await ctx.telegram.sendMessage(
          opponentId,
          `üèÜ **–î–£–≠–õ–¨ –ó–ê–í–ï–†–®–ï–ù–ê!** üèÜ\n\n` +
          `${isOpponentWinner ? 'üéâ **–ü–û–ó–î–†–ê–í–õ–Ø–ï–ú!**' : 'üò¢ **–ö –°–û–ñ–ê–õ–ï–ù–ò–Æ...**'}\n\n` +
          `${gameConfig.emoji} –ò–≥—Ä–∞: ${gameConfig.name}\n` +
          `üìä –§–∏–Ω–∞–ª—å–Ω—ã–π —Å—á—ë—Ç: ${duel.challengerScore}:${duel.opponentScore}\n` +
          `üëë –ü–æ–±–µ–¥–∏—Ç–µ–ª—å: @${winnerUsername}\n` +
          `üí∞ –í—ã–∏–≥—Ä—ã—à: ${duel.winAmount} USDT\n\n` +
          `${roundsText}\n` +
          `üìã ID –¥—É—ç–ª–∏: \`${duel.sessionId}\``,
          { parse_mode: 'Markdown' }
        );
      } else {
        // –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ —Ö–æ–¥–µ –ø—Ä–æ—Ç–∏–≤–Ω–∏–∫–∞
        const formatConfig = getFormatConfig(duel.format);
        
        await ctx.telegram.sendMessage(
          opponentId,
          `üéØ **–ü—Ä–æ—Ç–∏–≤–Ω–∏–∫ —Å–¥–µ–ª–∞–ª —Ö–æ–¥!**\n\n` +
          `${gameConfig.emoji} –ò–≥—Ä–∞: ${gameConfig.name}\n` +
          `üìä –¢–µ–∫—É—â–∏–π —Å—á—ë—Ç: ${duel.challengerScore}:${duel.opponentScore}\n` +
          `üèÜ –ò–≥—Ä–∞–µ–º –¥–æ: ${formatConfig.winsRequired} ${formatConfig.winsRequired === 1 ? '–ø–æ–±–µ–¥—ã' : '–ø–æ–±–µ–¥'}\n\n` +
          `‚è∞ –í–∞—à —Ö–æ–¥!`,
          { parse_mode: 'Markdown' }
        );
      }
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –ø—Ä–æ—Ç–∏–≤–Ω–∏–∫–∞:', error.message);
    }
  }
  
  /**
   * –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —Ç–µ–∫—É—â–µ–≥–æ –∏–≥—Ä–æ–∫–∞ –≤ –æ—á–µ—Ä–µ–¥–∏ (–¥–ª—è –≥—Ä—É–ø–ø–æ–≤—ã—Ö –¥—É—ç–ª–µ–π)
   */
  getCurrentPlayer(duel) {
    if (!duel.rounds || duel.rounds.length === 0) {
      // –ü–µ—Ä–≤—ã–π —Ä–∞—É–Ω–¥ - —Ö–æ–¥–∏—Ç challenger
      return {
        currentPlayerId: duel.challengerId,
        currentPlayerUsername: duel.challengerUsername,
        isChallenger: true
      };
    }
    
    const currentRound = duel.rounds[duel.rounds.length - 1];
    
    // –ï—Å–ª–∏ challenger –µ—â–µ –Ω–µ —Ö–æ–¥–∏–ª
    if (currentRound.challengerResult === null) {
      return {
        currentPlayerId: duel.challengerId,
        currentPlayerUsername: duel.challengerUsername,
        isChallenger: true
      };
    }
    
    // –ï—Å–ª–∏ opponent –µ—â–µ –Ω–µ —Ö–æ–¥–∏–ª
    if (currentRound.opponentResult === null) {
      return {
        currentPlayerId: duel.opponentId,
        currentPlayerUsername: duel.opponentUsername,
        isChallenger: false
      };
    }
    
    // –û–±–∞ –ø–æ—Ö–æ–¥–∏–ª–∏ - —Ä–∞—É–Ω–¥ –∑–∞–≤–µ—Ä—à–µ–Ω, –Ω—É–∂–µ–Ω –Ω–æ–≤—ã–π —Ä–∞—É–Ω–¥
    return {
      currentPlayerId: duel.challengerId,
      currentPlayerUsername: duel.challengerUsername,
      isChallenger: true
    };
  }
  
  /**
   * –ü—Ä–æ–≤–µ—Ä–∫–∞ –º–æ–∂–µ—Ç –ª–∏ –∏–≥—Ä–æ–∫ —Å–¥–µ–ª–∞—Ç—å —Ö–æ–¥
   */
  canPlayerMove(duel, userId) {
    const currentPlayer = this.getCurrentPlayer(duel);
    return currentPlayer.currentPlayerId === userId;
  }
}

module.exports = new DuelGameHandler();