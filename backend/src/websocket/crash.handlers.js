// backend/src/websocket/crash.handlers.js
const crashService = require('../services/crash.service');

class CrashWebSocketHandlers {
  constructor(io) {
    this.io = io;
    this.setupEventListeners();
    console.log('üöÄ CRASH WEBSOCKET: –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω—ã');
  }

  setupEventListeners() {
    // –°–ª—É—à–∞–µ–º —Å–æ–±—ã—Ç–∏—è –æ—Ç crash service
    crashService.on('roundCreated', (data) => {
      this.io.to('crash').emit('round_created', data);
    });

    crashService.on('countdownUpdate', (data) => {
      this.io.to('crash').emit('countdown_update', data);
    });

    crashService.on('gameStarted', (data) => {
      this.io.to('crash').emit('game_started', data);
    });

    crashService.on('multiplierUpdate', (data) => {
      this.io.to('crash').emit('multiplier_update', data);
    });

    crashService.on('gameCrashed', (data) => {
      this.io.to('crash').emit('game_crashed', data);
    });

    crashService.on('betPlaced', (data) => {
      this.io.to('crash').emit('bet_placed', data);
    });

    crashService.on('autoCashOut', (data) => {
      this.io.to('crash').emit('auto_cash_out', data);
    });

    crashService.on('manualCashOut', (data) => {
      this.io.to('crash').emit('manual_cash_out', data);
    });

    crashService.on('roundCompleted', (data) => {
      this.io.to('crash').emit('round_completed', data);
    });

    // –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–π
    this.io.on('connection', (socket) => {
      this.setupSocketHandlers(socket);
    });
  }

  setupSocketHandlers(socket) {
    // –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –∫—Ä–∞—à –∏–≥—Ä–µ
    socket.on('join_crash', () => {
      socket.join('crash');
      console.log(`CRASH WEBSOCKET: –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å ${socket.id} –ø–æ–¥–∫–ª—é—á–∏–ª—Å—è –∫ –∫—Ä–∞—à –∏–≥—Ä–µ`);
      
      // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ç–µ–∫—É—â–µ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –∏–≥—Ä—ã
      const gameState = crashService.getCurrentGameState();
      socket.emit('game_state', gameState);
    });

    // –û—Ç–∫–ª—é—á–µ–Ω–∏–µ –æ—Ç –∫—Ä–∞—à –∏–≥—Ä—ã
    socket.on('leave_crash', () => {
      socket.leave('crash');
      console.log(`CRASH WEBSOCKET: –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å ${socket.id} –æ—Ç–∫–ª—é—á–∏–ª—Å—è –æ—Ç –∫—Ä–∞—à –∏–≥—Ä—ã`);
    });

    // –ó–∞–ø—Ä–æ—Å —Ç–µ–∫—É—â–µ–≥–æ —Å–æ—Å—Ç–æ—è–Ω–∏—è –∏–≥—Ä—ã
    socket.on('get_game_state', () => {
      const gameState = crashService.getCurrentGameState();
      socket.emit('game_state', gameState);
    });

    // –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—Ç–∫–ª—é—á–µ–Ω–∏—è
    socket.on('disconnect', () => {
      // –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –ø–æ–∫–∏–Ω–µ—Ç –≤—Å–µ –∫–æ–º–Ω–∞—Ç—ã
    });
  }
}

module.exports = CrashWebSocketHandlers;
