// backend/src/services/pvp.service.js
const mongoose = require('mongoose');
const { PvPDuel, User, Transaction, ReferralEarning } = require('../models');
const { userService, referralService } = require('./');
const crypto = require('crypto');

class PvPService {
  constructor() {
    this.activeSessions = new Map(); // –ö—ç—à –∞–∫—Ç–∏–≤–Ω—ã—Ö —Å–µ—Å—Å–∏–π
  }

  /**
   * –°–æ–∑–¥–∞—Ç—å –≤—ã–∑–æ–≤ –Ω–∞ –¥—É—ç–ª—å
   * @param {Object} challengeData
   * @param {string} challengeData.challengerId - ID –∏–Ω–∏—Ü–∏–∞—Ç–æ—Ä–∞
   * @param {string} challengeData.challengerUsername - Username –∏–Ω–∏—Ü–∏–∞—Ç–æ—Ä–∞
   * @param {string} challengeData.opponentId - ID –æ–ø–ø–æ–Ω–µ–Ω—Ç–∞
   * @param {string} challengeData.opponentUsername - Username –æ–ø–ø–æ–Ω–µ–Ω—Ç–∞
   * @param {number} challengeData.amount - –†–∞–∑–º–µ—Ä —Å—Ç–∞–≤–∫–∏
   * @param {string} challengeData.gameType - –¢–∏–ø –∏–≥—Ä—ã (—ç–º–æ–¥–∑–∏)
   * @param {string} challengeData.format - –§–æ—Ä–º–∞—Ç —Å–µ—Ä–∏–∏ (bo1, bo3, etc)
   * @param {number} challengeData.winsRequired - –ü–æ–±–µ–¥ –¥–ª—è –≤—ã–∏–≥—Ä—ã—à–∞
   * @param {string} challengeData.chatId - ID —á–∞—Ç–∞
   * @param {string} challengeData.chatType - –¢–∏–ø —á–∞—Ç–∞
   * @param {number} challengeData.messageId - ID —Å–æ–æ–±—â–µ–Ω–∏—è
   * @returns {Promise<Object>}
   */
  async createChallenge(challengeData) {
    const {
      challengerId,
      challengerUsername,
      opponentId,
      opponentUsername,
      amount,
      gameType = 'üé≤',
      format = 'bo1',
      winsRequired = 1,
      chatId,
      chatType,
      messageId
    } = challengeData;

    // –í–∞–ª–∏–¥–∞—Ü–∏—è
    await this.validateChallenge(challengerId, opponentId, amount);

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω—É—é —Å–≤—è–∑—å
    const challengerUser = await User.findOne({ telegramId: challengerId });
    const opponentUser = await User.findOne({ telegramId: opponentId });

    if (!challengerUser || !opponentUser) {
      throw new Error('–û–¥–∏–Ω –∏–∑ –∏–≥—Ä–æ–∫–æ–≤ –Ω–µ –Ω–∞–π–¥–µ–Ω');
    }

    // –°–æ–∑–¥–∞–µ–º –¥—É—ç–ª—å
    const duel = new PvPDuel({
      challengerId,
      challengerUsername,
      opponentId,
      opponentUsername,
      amount,
      gameType,
      format,
      winsRequired,
      chatId,
      chatType: chatType || 'private',
      messageId,
      challengerReferrerId: challengerUser.referrerId,
      opponentReferrerId: opponentUser.referrerId
    });

    await duel.save();

    return {
      success: true,
      data: {
        duelId: duel._id,
        challengerId: duel.challengerId,
        challengerUsername: duel.challengerUsername,
        opponentId: duel.opponentId,
        opponentUsername: duel.opponentUsername,
        amount: duel.amount,
        totalBank: duel.totalBank,
        commission: duel.commission,
        winAmount: duel.winAmount,
        expiresAt: duel.expiresAt,
        status: duel.status
      }
    };
  }

  /**
   * –í–∞–ª–∏–¥–∏—Ä–æ–≤–∞—Ç—å –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å —Å–æ–∑–¥–∞–Ω–∏—è –≤—ã–∑–æ–≤–∞
   * @param {string} challengerId
   * @param {string} opponentId
   * @param {number} amount
   */
  async validateChallenge(challengerId, opponentId, amount) {
    // –ü—Ä–æ–≤–µ—Ä–∫–∞ –ª–∏–º–∏—Ç–æ–≤ —Å—É–º–º—ã
    if (amount < 1 || amount > 1000) {
      throw new Error('–°—É–º–º–∞ —Å—Ç–∞–≤–∫–∏ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –æ—Ç 1 –¥–æ 1000 USDT');
    }

    // –ü—Ä–æ–≤–µ—Ä–∫–∞, —á—Ç–æ –∏–≥—Ä–æ–∫ –Ω–µ –≤—ã–∑—ã–≤–∞–µ—Ç —Å–∞–º —Å–µ–±—è
    if (challengerId === opponentId) {
      throw new Error('–ù–µ–ª—å–∑—è –≤—ã–∑–≤–∞—Ç—å —Å–∞–º–æ–≥–æ —Å–µ–±—è –Ω–∞ –¥—É—ç–ª—å');
    }

    // –ü—Ä–æ–≤–µ—Ä–∫–∞ –±–∞–ª–∞–Ω—Å–æ–≤
    const challenger = await User.findOne({ telegramId: challengerId });
    const opponent = await User.findOne({ telegramId: opponentId });

    if (!challenger || !opponent) {
      throw new Error('–û–¥–∏–Ω –∏–∑ –∏–≥—Ä–æ–∫–æ–≤ –Ω–µ –Ω–∞–π–¥–µ–Ω');
    }

    if (challenger.balance < amount) {
      throw new Error('–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å—Ä–µ–¥—Å—Ç–≤ –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –¥—É—ç–ª–∏');
    }

    if (opponent.balance < amount) {
      throw new Error('–£ –æ–ø–ø–æ–Ω–µ–Ω—Ç–∞ –Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å—Ä–µ–¥—Å—Ç–≤ –¥–ª—è –¥—É—ç–ª–∏');
    }

    // –ü—Ä–æ–≤–µ—Ä–∫–∞ –ª–∏–º–∏—Ç–∞ –∞–∫—Ç–∏–≤–Ω—ã—Ö –¥—É—ç–ª–µ–π (–º–∞–∫—Å–∏–º—É–º 3)
    const activeDuels = await PvPDuel.findActiveByUser(challengerId);
    if (activeDuels.length >= 3) {
      throw new Error('–ú–∞–∫—Å–∏–º—É–º 3 –∞–∫—Ç–∏–≤–Ω—ã—Ö –¥—É—ç–ª–∏ –æ–¥–Ω–æ–≤—Ä–µ–º–µ–Ω–Ω–æ');
    }

    // –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫—É–ª–¥–∞—É–Ω–∞ (30 —Å–µ–∫—É–Ω–¥ –º–µ–∂–¥—É –≤—ã–∑–æ–≤–∞–º–∏)
    const recentChallenge = await PvPDuel.findOne({
      challengerId,
      createdAt: { $gt: new Date(Date.now() - 30000) }
    });

    if (recentChallenge) {
      throw new Error('–°–ª–∏—à–∫–æ–º —á–∞—Å—Ç—ã–µ –≤—ã–∑–æ–≤—ã. –ü–æ–¥–æ–∂–¥–∏—Ç–µ 30 —Å–µ–∫—É–Ω–¥');
    }

    // –ü—Ä–æ–≤–µ—Ä–∫–∞, –Ω–µ—Ç –ª–∏ —É–∂–µ –∞–∫—Ç–∏–≤–Ω–æ–π –¥—É—ç–ª–∏ –º–µ–∂–¥—É —ç—Ç–∏–º–∏ –∏–≥—Ä–æ–∫–∞–º–∏
    const existingDuel = await PvPDuel.findOne({
      $or: [
        { challengerId, opponentId },
        { challengerId: opponentId, opponentId: challengerId }
      ],
      status: { $in: ['pending', 'accepted', 'active'] }
    });

    if (existingDuel) {
      throw new Error('–£ –≤–∞—Å —É–∂–µ –µ—Å—Ç—å –∞–∫—Ç–∏–≤–Ω–∞—è –¥—É—ç–ª—å —Å —ç—Ç–∏–º –∏–≥—Ä–æ–∫–æ–º');
    }
  }

  /**
   * –û—Ç–≤–µ—Ç–∏—Ç—å –Ω–∞ –≤—ã–∑–æ–≤ (–ø—Ä–∏–Ω—è—Ç—å –∏–ª–∏ –æ—Ç–∫–ª–æ–Ω–∏—Ç—å)
   * @param {string} duelId
   * @param {string} userId
   * @param {string} action - 'accept' –∏–ª–∏ 'decline'
   * @returns {Promise<Object>}
   */
  async respondToChallenge(duelId, userId, action) {
    const duel = await PvPDuel.findById(duelId);
    
    if (!duel) {
      throw new Error('–î—É—ç–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω–∞');
    }

    if (duel.opponentId !== userId) {
      throw new Error('–¢–æ–ª—å–∫–æ –æ–ø–ø–æ–Ω–µ–Ω—Ç –º–æ–∂–µ—Ç –æ—Ç–≤–µ—Ç–∏—Ç—å –Ω–∞ –≤—ã–∑–æ–≤');
    }

    if (duel.status !== 'pending') {
      throw new Error('–î—É—ç–ª—å —É–∂–µ –Ω–µ –æ–∂–∏–¥–∞–µ—Ç –æ—Ç–≤–µ—Ç–∞');
    }

    if (duel.isExpired) {
      await duel.expire();
      throw new Error('–í—Ä–µ–º—è –æ–∂–∏–¥–∞–Ω–∏—è –∏—Å—Ç–µ–∫–ª–æ');
    }

    if (action === 'decline') {
      await duel.decline();
      return {
        success: true,
        data: {
          duelId: duel._id,
          status: 'declined',
          message: '–î—É—ç–ª—å –æ—Ç–∫–ª–æ–Ω–µ–Ω–∞'
        }
      };
    }

    if (action === 'accept') {
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º –±–∞–ª–∞–Ω—Å—ã –µ—â–µ —Ä–∞–∑
      await this.validateChallenge(duel.challengerId, duel.opponentId, duel.amount);

      await duel.accept();

      return {
        success: true,
        data: {
          duelId: duel._id,
          sessionId: duel.sessionId,
          status: 'accepted',
          message: '–î—É—ç–ª—å –ø—Ä–∏–Ω—è—Ç–∞! –í–æ–π–¥–∏—Ç–µ –≤ –∏–≥—Ä–æ–≤—É—é –∫–æ–º–Ω–∞—Ç—É'
        }
      };
    }

    throw new Error('–ù–µ–≤–µ—Ä–Ω–æ–µ –¥–µ–π—Å—Ç–≤–∏–µ');
  }

  /**
   * –ü—Ä–∏—Å–æ–µ–¥–∏–Ω–∏—Ç—å—Å—è –∫ –∏–≥—Ä–æ–≤–æ–π —Å–µ—Å—Å–∏–∏
   * @param {string} sessionId
   * @param {string} userId
   * @returns {Promise<Object>}
   */
  async joinSession(sessionId, userId) {
    const duel = await PvPDuel.findBySession(sessionId);
    
    if (!duel) {
      throw new Error('–°–µ—Å—Å–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞');
    }

    if (!duel.participants.includes(userId)) {
      throw new Error('–í—ã –Ω–µ —É—á–∞—Å—Ç–≤—É–µ—Ç–µ –≤ —ç—Ç–æ–π –¥—É—ç–ª–∏');
    }

    if (duel.status !== 'accepted') {
      throw new Error('–î—É—ç–ª—å –Ω–µ –≥–æ—Ç–æ–≤–∞ –∫ –∏–≥—Ä–µ');
    }

    await duel.setPlayerJoined(userId, true);

    // –ï—Å–ª–∏ –æ–±–∞ –ø—Ä–∏—Å–æ–µ–¥–∏–Ω–∏–ª–∏—Å—å, –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –ø–æ–ª–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é
    const updatedDuel = await PvPDuel.findBySession(sessionId);
    
    return {
      success: true,
      data: {
        sessionId: updatedDuel.sessionId,
        challengerId: updatedDuel.challengerId,
        challengerUsername: updatedDuel.challengerUsername,
        challengerJoined: updatedDuel.challengerJoined,
        challengerReady: updatedDuel.challengerReady,
        opponentId: updatedDuel.opponentId,
        opponentUsername: updatedDuel.opponentUsername,
        opponentJoined: updatedDuel.opponentJoined,
        opponentReady: updatedDuel.opponentReady,
        amount: updatedDuel.amount,
        winAmount: updatedDuel.winAmount,
        status: updatedDuel.status,
        bothJoined: updatedDuel.bothJoined
      }
    };
  }

  /**
   * –£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –≥–æ—Ç–æ–≤–Ω–æ—Å—Ç—å –∏–≥—Ä–æ–∫–∞
   * @param {string} sessionId
   * @param {string} userId
   * @param {boolean} ready
   * @returns {Promise<Object>}
   */
  async setReady(sessionId, userId, ready = true) {
    const duel = await PvPDuel.findBySession(sessionId);
    
    if (!duel) {
      throw new Error('–°–µ—Å—Å–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞');
    }

    if (!duel.participants.includes(userId)) {
      throw new Error('–í—ã –Ω–µ —É—á–∞—Å—Ç–≤—É–µ—Ç–µ –≤ —ç—Ç–æ–π –¥—É—ç–ª–∏');
    }

    if (duel.status !== 'accepted') {
      throw new Error('–î—É—ç–ª—å –Ω–µ –≥–æ—Ç–æ–≤–∞ –∫ –∏–≥—Ä–µ');
    }

    await duel.setPlayerReady(userId, ready);
    const updatedDuel = await PvPDuel.findBySession(sessionId);

    return {
      success: true,
      data: {
        sessionId: updatedDuel.sessionId,
        challengerReady: updatedDuel.challengerReady,
        opponentReady: updatedDuel.opponentReady,
        bothReady: updatedDuel.bothReady,
        canStart: updatedDuel.bothJoined && updatedDuel.bothReady
      }
    };
  }

  /**
   * –°–æ—Ö—Ä–∞–Ω–∏—Ç—å —Ä–µ–∑—É–ª—å—Ç–∞—Ç —Ä–∞—É–Ω–¥–∞
   * @param {string} sessionId
   * @param {Object} roundData
   * @returns {Promise<Object>}
   */
  async saveRound(sessionId, roundData) {
    const duel = await PvPDuel.findBySession(sessionId);
    
    if (!duel) {
      throw new Error('–°–µ—Å—Å–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞');
    }
    
    if (duel.status !== 'active') {
      throw new Error('–î—É—ç–ª—å –Ω–µ –∞–∫—Ç–∏–≤–Ω–∞');
    }
    
    // –î–æ–±–∞–≤–ª—è–µ–º —Ä–∞—É–Ω–¥
    duel.rounds.push({
      number: roundData.round,
      challengerResult: roundData.challengerResult,
      opponentResult: roundData.opponentResult,
      winnerId: roundData.winnerId
    });
    
    // –û–±–Ω–æ–≤–ª—è–µ–º —Å—á–µ—Ç
    if (roundData.winnerId === duel.challengerId) {
      duel.score.challenger++;
    } else {
      duel.score.opponent++;
    }
    
    await duel.save();
    
    return {
      success: true,
      data: {
        score: duel.score,
        rounds: duel.rounds.length,
        winsRequired: duel.winsRequired
      }
    };
  }

  /**
   * –ó–∞–≤–µ—Ä—à–∏—Ç—å –¥—É—ç–ª—å —Å –ø–æ–±–µ–¥–∏—Ç–µ–ª–µ–º
   * @param {string} sessionId
   * @param {string} winnerId
   * @returns {Promise<Object>}
   */
  async finishDuel(sessionId, winnerId) {
    const duel = await PvPDuel.findBySession(sessionId);
    
    if (!duel) {
      throw new Error('–°–µ—Å—Å–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞');
    }
    
    // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –ø–æ–±–µ–¥–∏—Ç–µ–ª—è
    duel.winnerId = winnerId;
    duel.winnerUsername = winnerId === duel.challengerId ? duel.challengerUsername : duel.opponentUsername;
    duel.loserId = winnerId === duel.challengerId ? duel.opponentId : duel.challengerId;
    duel.loserUsername = winnerId === duel.challengerId ? duel.opponentUsername : duel.challengerUsername;
    duel.status = 'completed';
    duel.completedAt = new Date();
    
    await duel.save();
    
    // –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –≤—ã–ø–ª–∞—Ç—ã
    await this.processPayouts(duel);
    
    // –°–æ–∑–¥–∞–µ–º –∑–∞–ø–∏—Å–∏ –≤ –∏—Å—Ç–æ—Ä–∏–∏ –∏–≥—Ä –¥–ª—è –æ–±–æ–∏—Ö –∏–≥—Ä–æ–∫–æ–≤
    await this.createGameHistoryRecords(duel, session);
    
    // –û–±–Ω–æ–≤–ª—è–µ–º —Ñ–∏–Ω–∞–Ω—Å–æ–≤—É—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –∫–∞–∑–∏–Ω–æ
    await this.updateCasinoFinances(duel);
    
    return {
      success: true,
      data: {
        winnerId: duel.winnerId,
        winnerUsername: duel.winnerUsername,
        loserId: duel.loserId,
        loserUsername: duel.loserUsername,
        winAmount: duel.winAmount,
        finalScore: duel.score
      }
    };
  }

  /**
   * –ó–∞–ø—É—Å—Ç–∏—Ç—å –∏–≥—Ä—É
   * @param {string} sessionId
   * @param {string} userId
   * @returns {Promise<Object>}
   */
  async startGame(sessionId, userId) {
    const duel = await PvPDuel.findBySession(sessionId);
    
    if (!duel) {
      throw new Error('–°–µ—Å—Å–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞');
    }

    if (!duel.participants.includes(userId)) {
      throw new Error('–í—ã –Ω–µ —É—á–∞—Å—Ç–≤—É–µ—Ç–µ –≤ —ç—Ç–æ–π –¥—É—ç–ª–∏');
    }

    if (duel.status !== 'accepted') {
      throw new Error('–î—É—ç–ª—å –Ω–µ –≥–æ—Ç–æ–≤–∞ –∫ –∑–∞–ø—É—Å–∫—É');
    }

    if (!duel.bothJoined || !duel.bothReady) {
      throw new Error('–û–±–∞ –∏–≥—Ä–æ–∫–∞ –¥–æ–ª–∂–Ω—ã –ø—Ä–∏—Å–æ–µ–¥–∏–Ω–∏—Ç—å—Å—è –∏ –±—ã—Ç—å –≥–æ—Ç–æ–≤—ã–º–∏');
    }

    // –†–µ–∑–µ—Ä–≤–∏—Ä—É–µ–º —Å—Ä–µ–¥—Å—Ç–≤–∞ —É –æ–±–æ–∏—Ö –∏–≥—Ä–æ–∫–æ–≤
    await this.reserveFunds(duel);

    // –ó–∞–ø—É—Å–∫–∞–µ–º –∏–≥—Ä—É
    await duel.start();

    // –ù–û–í–û–ï: –ò—Å–ø–æ–ª—å–∑—É–µ–º —Ç–æ—Ç –∂–µ –º–µ—Ö–∞–Ω–∏–∑–º –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏, —á—Ç–æ –∏ –≤ –æ–±—ã—á–Ω–æ–π –º–æ–Ω–µ—Ç–∫–µ
    const randomService = require('./random.service');
    const serverSeed = randomService.generateServerSeed();
    const clientSeed = `pvp_${sessionId}`;
    const nonce = 1;
    
    // –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç —á–µ—Å—Ç–Ω–æ
    const randomValue = randomService.generateRandomNumber(serverSeed, clientSeed, nonce);
    const result = randomValue < 0.5 ? 'heads' : 'tails';
    
    // –°–æ—Ö—Ä–∞–Ω—è–µ–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è –≤–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏–∏
    duel.gameData = {
      serverSeed,
      serverSeedHashed: randomService.hashServerSeed(serverSeed),
      clientSeed,
      nonce,
      randomValue
    };
    
    // –°–æ—Ö—Ä–∞–Ω—è–µ–º gameData –≤ –±–∞–∑–µ
    await duel.save();

    // –ó–∞–≤–µ—Ä—à–∞–µ–º –∏–≥—Ä—É
    await duel.complete(result);

    // –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –≤—ã–ø–ª–∞—Ç—ã
    await this.processPayouts(duel);
    
    // –°–æ–∑–¥–∞–µ–º –∑–∞–ø–∏—Å–∏ –≤ –∏—Å—Ç–æ—Ä–∏–∏ –∏–≥—Ä –¥–ª—è –æ–±–æ–∏—Ö –∏–≥—Ä–æ–∫–æ–≤
    await this.createGameHistoryRecords(duel, session);
    
    // –û–±–Ω–æ–≤–ª—è–µ–º —Ñ–∏–Ω–∞–Ω—Å–æ–≤—É—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –∫–∞–∑–∏–Ω–æ
    await this.updateCasinoFinances(duel);

    return {
      success: true,
      data: {
        sessionId: duel.sessionId,
        result: duel.coinResult,
        winnerId: duel.winnerId,
        winnerUsername: duel.winnerUsername,
        loserId: duel.loserId,
        loserUsername: duel.loserUsername,
        winAmount: duel.winAmount,
        commission: duel.commission,
        challengerSide: duel.challengerSide,
        opponentSide: duel.opponentSide,
        serverSeedHashed: duel.gameData.serverSeedHashed,
        status: 'completed'
      }
    };
  }


  /**
   * –†–µ–∑–µ—Ä–≤–∏—Ä–æ–≤–∞—Ç—å —Å—Ä–µ–¥—Å—Ç–≤–∞ —É –∏–≥—Ä–æ–∫–æ–≤
   * @param {Object} duel
   */
  async reserveFunds(duel) {
    const session = await mongoose.startSession();
    session.startTransaction();

    try {
      // –°–ø–∏—Å—ã–≤–∞–µ–º —Å—Ä–µ–¥—Å—Ç–≤–∞ —É –æ–±–æ–∏—Ö –∏–≥—Ä–æ–∫–æ–≤
      const challenger = await User.findOneAndUpdate(
        { 
          telegramId: duel.challengerId,
          balance: { $gte: duel.amount }
        },
        { $inc: { balance: -duel.amount } },
        { new: true, session }
      );

      if (!challenger) {
        throw new Error('–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å—Ä–µ–¥—Å—Ç–≤ —É –∏–Ω–∏—Ü–∏–∞—Ç–æ—Ä–∞');
      }

      const opponent = await User.findOneAndUpdate(
        { 
          telegramId: duel.opponentId,
          balance: { $gte: duel.amount }
        },
        { $inc: { balance: -duel.amount } },
        { new: true, session }
      );

      if (!opponent) {
        throw new Error('–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å—Ä–µ–¥—Å—Ç–≤ —É –æ–ø–ø–æ–Ω–µ–Ω—Ç–∞');
      }

      // –°–æ–∑–¥–∞–µ–º —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏
      await Transaction.create([
        {
          userId: duel.challengerId,
          type: 'pvp_bet',
          amount: -duel.amount,
          description: `PvP –¥—É—ç–ª—å –ø—Ä–æ—Ç–∏–≤ ${duel.opponentUsername}`,
          balanceAfter: challenger.balance,
          metadata: {
            duelId: duel._id,
            sessionId: duel.sessionId,
            opponentId: duel.opponentId
          }
        },
        {
          userId: duel.opponentId,
          type: 'pvp_bet',
          amount: -duel.amount,
          description: `PvP –¥—É—ç–ª—å –ø—Ä–æ—Ç–∏–≤ ${duel.challengerUsername}`,
          balanceAfter: opponent.balance,
          metadata: {
            duelId: duel._id,
            sessionId: duel.sessionId,
            opponentId: duel.challengerId
          }
        }
      ], { session });

      await session.commitTransaction();
    } catch (error) {
      await session.abortTransaction();
      throw error;
    } finally {
      session.endSession();
    }
  }

  /**
   * –û–±—Ä–∞–±–æ—Ç–∞—Ç—å –≤—ã–ø–ª–∞—Ç—ã –ø–æ—Å–ª–µ –∏–≥—Ä—ã
   * @param {Object} duel
   */
  async processPayouts(duel) {
    const session = await mongoose.startSession();
    session.startTransaction();

    try {
      // –í—ã–ø–ª–∞—á–∏–≤–∞–µ–º –≤—ã–∏–≥—Ä—ã—à –ø–æ–±–µ–¥–∏—Ç–µ–ª—é
      const winner = await User.findOneAndUpdate(
        { telegramId: duel.winnerId },
        { $inc: { balance: duel.winAmount } },
        { new: true, session }
      );

      // –°–æ–∑–¥–∞–µ–º —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—é –≤—ã–∏–≥—Ä—ã—à–∞
      await Transaction.create([{
        userId: duel.winnerId,
        type: 'pvp_win',
        amount: duel.winAmount,
        description: `–í—ã–∏–≥—Ä—ã—à –≤ PvP –¥—É—ç–ª–∏ –ø—Ä–æ—Ç–∏–≤ ${duel.loserId === duel.challengerId ? duel.challengerUsername : duel.opponentUsername}`,
        balanceAfter: winner.balance,
        metadata: {
          duelId: duel._id,
          sessionId: duel.sessionId,
          opponentId: duel.loserId
        }
      }], { session });

      // –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω—ã–µ –≤—ã–ø–ª–∞—Ç—ã
      await this.processReferralPayouts(duel, session);

      await session.commitTransaction();
    } catch (error) {
      await session.abortTransaction();
      throw error;
    } finally {
      session.endSession();
    }
  }

  /**
   * –û–±—Ä–∞–±–æ—Ç–∞—Ç—å —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω—ã–µ –≤—ã–ø–ª–∞—Ç—ã (–ø—Ä–æ—Ü–µ–Ω—Ç —Å –∫–æ–º–∏—Å—Å–∏–∏ –∫–∞–∑–∏–Ω–æ)
   * @param {Object} duel
   * @param {Object} session
   */
  async processReferralPayouts(duel, session) {
    // –í PvP —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω–∞—è –≤—ã–ø–ª–∞—Ç–∞ –±–µ—Ä–µ—Ç—Å—è –∏–∑ –∫–æ–º–∏—Å—Å–∏–∏ –∫–∞–∑–∏–Ω–æ
    // –ò—Å–ø–æ–ª—å–∑—É–µ–º –∑–∞—è–≤–ª–µ–Ω–Ω—ã–µ –ø—Ä–æ—Ü–µ–Ω—Ç—ã —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω–æ–π —Å–∏—Å—Ç–µ–º—ã
    
    const loserId = duel.loserId;
    const loserReferrerId = loserId === duel.challengerId ? duel.challengerReferrerId : duel.opponentReferrerId;
    
    if (!loserReferrerId) {
      console.log('PvP: –£ –ø—Ä–æ–∏–≥—Ä–∞–≤—à–µ–≥–æ –∏–≥—Ä–æ–∫–∞ –Ω–µ—Ç —Ä–µ—Ñ–µ—Ä–µ—Ä–∞');
      return;
    }

    // –ü–æ–ª—É—á–∞–µ–º —Ä–µ—Ñ–µ—Ä–µ—Ä–∞ –ø—Ä–æ–∏–≥—Ä–∞–≤—à–µ–≥–æ
    const referrer = await User.findOne({ telegramId: loserReferrerId }).session(session);
    if (!referrer) {
      console.log('PvP: –†–µ—Ñ–µ—Ä–µ—Ä –ø—Ä–æ–∏–≥—Ä–∞–≤—à–µ–≥–æ –Ω–µ –Ω–∞–π–¥–µ–Ω');
      return;
    }

    // –ò—Å–ø–æ–ª—å–∑—É–µ–º –∑–∞—è–≤–ª–µ–Ω–Ω—ã–π –ø—Ä–æ—Ü–µ–Ω—Ç —Ä–µ—Ñ–µ—Ä–µ—Ä–∞ (5-15% –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —É—Ä–æ–≤–Ω—è)
    const commission = duel.commission; // 5% –æ—Ç –æ–±—â–µ–≥–æ –±–∞–Ω–∫–∞
    const commissionPercent = referrer.referralStats?.commissionPercent || 5; // –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é 5% (–±—Ä–æ–Ω–∑–∞)
    const referralAmount = commission * (commissionPercent / 100);

    // –ù–∞—á–∏—Å–ª—è–µ–º —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω—É—é –∫–æ–º–∏—Å—Å–∏—é
    await this.payReferral(loserReferrerId, referralAmount, duel, 'pvp_loss', session);
    
    duel.referralPayouts.push({
      userId: loserReferrerId,
      amount: referralAmount,
      type: 'loser_referral',
      commissionPercent: commissionPercent,
      baseAmount: commission,
      source: 'casino_commission' // –£–∫–∞–∑—ã–≤–∞–µ–º, —á—Ç–æ –≤—ã–ø–ª–∞—Ç–∞ –∏–∑ –∫–æ–º–∏—Å—Å–∏–∏
    });

    console.log(`PvP —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω–∞—è –∫–æ–º–∏—Å—Å–∏—è: ${referralAmount.toFixed(4)} USDT (${commissionPercent}% —Å –∫–æ–º–∏—Å—Å–∏–∏ ${commission} USDT) –¥–ª—è —Ä–µ—Ñ–µ—Ä–µ—Ä–∞ ${loserReferrerId}`);
  }

  /**
   * –í—ã–ø–ª–∞—Ç–∏—Ç—å —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω—É—é –∫–æ–º–∏—Å—Å–∏—é —á–µ—Ä–µ–∑ –æ—Å–Ω–æ–≤–Ω—É—é —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω—É—é —Å–∏—Å—Ç–µ–º—É
   * @param {string} referrerId
   * @param {number} amount
   * @param {Object} duel
   * @param {string} type
   * @param {Object} session
   */
  async payReferral(referrerId, amount, duel, type, session) {
    try {
      // –ù–∞—Ö–æ–¥–∏–º —Ä–µ—Ñ–µ—Ä–µ—Ä–∞ –ø–æ telegramId
      const referrer = await User.findOne({ telegramId: referrerId }).session(session);
      if (!referrer) {
        console.log(`PvP: –†–µ—Ñ–µ—Ä–µ—Ä ${referrerId} –Ω–µ –Ω–∞–π–¥–µ–Ω`);
        return;
      }

      // –ù–∞—á–∏—Å–ª—è–µ–º –Ω–∞ —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω—ã–π –±–∞–ª–∞–Ω—Å (–∫–∞–∫ –≤ –æ—Å–Ω–æ–≤–Ω–æ–π —Å–∏—Å—Ç–µ–º–µ)
      referrer.referralStats.referralBalance += amount;
      referrer.referralStats.totalEarned += amount;
      await referrer.save({ session });

      // –°–æ–∑–¥–∞–µ–º –∑–∞–ø–∏—Å—å –æ —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω–æ–º –¥–æ—Ö–æ–¥–µ —á–µ—Ä–µ–∑ –æ—Å–Ω–æ–≤–Ω—É—é –º–æ–¥–µ–ª—å
      await ReferralEarning.create([{
        partner: referrer._id,
        referral: duel.loserId === duel.challengerId ? 
          await User.findOne({ telegramId: duel.challengerId }).select('_id').session(session) :
          await User.findOne({ telegramId: duel.opponentId }).select('_id').session(session),
        game: null, // PvP –Ω–µ –∏–º–µ–µ—Ç game ID
        type: 'pvp_commission',
        calculation: {
          baseAmount: duel.commission, // –ë–∞–∑–∞ —Ä–∞—Å—á–µ—Ç–∞ - –∫–æ–º–∏—Å—Å–∏—è –∫–∞–∑–∏–Ω–æ
          partnerLevel: referrer.referralStats.level,
          commissionPercent: referrer.referralStats.commissionPercent,
          earnedAmount: amount
        },
        status: 'credited',
        balanceBefore: referrer.referralStats.referralBalance - amount,
        balanceAfter: referrer.referralStats.referralBalance,
        metadata: {
          source: 'pvp',
          duelId: duel._id.toString(),
          sessionId: duel.sessionId,
          gameType: duel.gameType || 'coin',
          format: duel.format || 'bo1',
          lossAmount: duel.amount, // –¢–∞–∫–∂–µ —É–∫–∞–∑—ã–≤–∞–µ–º —Å—É–º–º—É –ø—Ä–æ–∏–≥—Ä—ã—à–∞ –¥–ª—è —Å–ø—Ä–∞–≤–∫–∏
          payout_source: 'casino_commission' // –ò—Å—Ç–æ—á–Ω–∏–∫ - –∫–æ–º–∏—Å—Å–∏—è –∫–∞–∑–∏–Ω–æ
        },
        creditedAt: new Date()
      }], { session });

      console.log(`PvP: –ù–∞—á–∏—Å–ª–µ–Ω–æ ${amount.toFixed(4)} USDT –Ω–∞ —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω—ã–π –±–∞–ª–∞–Ω—Å –ø–∞—Ä—Ç–Ω–µ—Ä–∞ ${referrer._id}`);

    } catch (error) {
      console.error('PvP: –û—à–∏–±–∫–∞ –Ω–∞—á–∏—Å–ª–µ–Ω–∏—è —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω–æ–π –∫–æ–º–∏—Å—Å–∏–∏:', error);
      // –ù–µ –ø—Ä–µ—Ä—ã–≤–∞–µ–º —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—é –∏–∑-–∑–∞ –æ—à–∏–±–∫–∏ —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω—ã—Ö –≤—ã–ø–ª–∞—Ç
    }
  }

  /**
   * –ü–æ–ª—É—á–∏—Ç—å –∞–∫—Ç–∏–≤–Ω—ã–µ –¥—É—ç–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
   * @param {string} userId
   * @returns {Promise<Object>}
   */
  async getActiveDuels(userId) {
    const duels = await PvPDuel.findActiveByUser(userId);
    
    return {
      success: true,
      data: duels.map(duel => ({
        duelId: duel._id,
        challengerId: duel.challengerId,
        challengerUsername: duel.challengerUsername,
        opponentId: duel.opponentId,
        opponentUsername: duel.opponentUsername,
        amount: duel.amount,
        status: duel.status,
        sessionId: duel.sessionId,
        createdAt: duel.createdAt,
        expiresAt: duel.expiresAt,
        isChallenger: duel.challengerId === userId
      }))
    };
  }

  /**
   * –ü–æ–ª—É—á–∏—Ç—å –∏—Å—Ç–æ—Ä–∏—é PvP –∏–≥—Ä –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
   * @param {string} userId
   * @param {number} limit
   * @returns {Promise<Object>}
   */
  async getHistory(userId, limit = 20) {
    const history = await PvPDuel.findHistoryByUser(userId, limit);
    
    return {
      success: true,
      data: history.map(duel => ({
        duelId: duel._id,
        challengerId: duel.challengerId,
        challengerUsername: duel.challengerUsername,
        opponentId: duel.opponentId,
        opponentUsername: duel.opponentUsername,
        amount: duel.amount,
        winAmount: duel.winAmount,
        commission: duel.commission,
        status: duel.status,
        coinResult: duel.coinResult,
        winnerId: duel.winnerId,
        winnerUsername: duel.winnerUsername,
        isWinner: duel.winnerId === userId,
        createdAt: duel.createdAt,
        completedAt: duel.completedAt
      }))
    };
  }

  /**
   * –ü–æ–ª—É—á–∏—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É PvP –∏–≥—Ä –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
   * @param {string} userId
   * @returns {Promise<Object>}
   */
  async getStats(userId) {
    const stats = await PvPDuel.getUserStats(userId);
    
    if (stats.length === 0) {
      return {
        success: true,
        data: {
          totalGames: 0,
          wins: 0,
          losses: 0,
          winRate: 0,
          totalWinnings: 0,
          totalLosses: 0,
          netProfit: 0
        }
      };
    }

    return {
      success: true,
      data: stats[0]
    };
  }

  /**
   * –û—Ç–º–µ–Ω–∏—Ç—å —Å–≤–æ–π –≤—ã–∑–æ–≤
   * @param {string} duelId
   * @param {string} userId
   * @returns {Promise<Object>}
   */
  async cancelChallenge(duelId, userId) {
    const duel = await PvPDuel.findById(duelId);
    
    if (!duel) {
      throw new Error('–î—É—ç–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω–∞');
    }

    if (duel.challengerId !== userId) {
      throw new Error('–¢–æ–ª—å–∫–æ –∏–Ω–∏—Ü–∏–∞—Ç–æ—Ä –º–æ–∂–µ—Ç –æ—Ç–º–µ–Ω–∏—Ç—å –≤—ã–∑–æ–≤');
    }

    if (duel.status !== 'pending') {
      throw new Error('–ú–æ–∂–Ω–æ –æ—Ç–º–µ–Ω–∏—Ç—å —Ç–æ–ª—å–∫–æ –æ–∂–∏–¥–∞—é—â–∏–µ –≤—ã–∑–æ–≤—ã');
    }

    await duel.cancel();

    return {
      success: true,
      data: {
        duelId: duel._id,
        status: 'cancelled',
        message: '–í—ã–∑–æ–≤ –æ—Ç–º–µ–Ω–µ–Ω'
      }
    };
  }

  /**
   * –°–æ–∑–¥–∞—Ç—å —Ä–µ–≤–∞–Ω—à
   * @param {string} originalDuelId
   * @param {string} userId
   * @returns {Promise<Object>}
   */
  async createRematch(originalDuelId, userId) {
    const originalDuel = await PvPDuel.findById(originalDuelId);
    
    if (!originalDuel) {
      throw new Error('–û—Ä–∏–≥–∏–Ω–∞–ª—å–Ω–∞—è –¥—É—ç–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω–∞');
    }

    if (!originalDuel.participants.includes(userId)) {
      throw new Error('–í—ã –Ω–µ —É—á–∞—Å—Ç–≤–æ–≤–∞–ª–∏ –≤ —ç—Ç–æ–π –¥—É—ç–ª–∏');
    }

    if (originalDuel.status !== 'completed') {
      throw new Error('–ú–æ–∂–Ω–æ —Å–æ–∑–¥–∞—Ç—å —Ä–µ–≤–∞–Ω—à —Ç–æ–ª—å–∫–æ –¥–ª—è –∑–∞–≤–µ—Ä—à–µ–Ω–Ω—ã—Ö –¥—É—ç–ª–µ–π');
    }

    // –û–ø—Ä–µ–¥–µ–ª—è–µ–º –Ω–æ–≤–æ–≥–æ –∏–Ω–∏—Ü–∏–∞—Ç–æ—Ä–∞ –∏ –æ–ø–ø–æ–Ω–µ–Ω—Ç–∞ (–º–µ–Ω—è–µ–º –º–µ—Å—Ç–∞–º–∏)
    const isOriginalChallenger = originalDuel.challengerId === userId;
    const newChallengerId = userId;
    const newChallengerUsername = isOriginalChallenger ? originalDuel.challengerUsername : originalDuel.opponentUsername;
    const newOpponentId = isOriginalChallenger ? originalDuel.opponentId : originalDuel.challengerId;
    const newOpponentUsername = isOriginalChallenger ? originalDuel.opponentUsername : originalDuel.challengerUsername;

    // –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—ã–π –≤—ã–∑–æ–≤
    return await this.createChallenge({
      challengerId: newChallengerId,
      challengerUsername: newChallengerUsername,
      opponentId: newOpponentId,
      opponentUsername: newOpponentUsername,
      amount: originalDuel.amount,
      chatId: originalDuel.chatId,
      chatType: originalDuel.chatType,
      messageId: 0 // –ë—É–¥–µ—Ç —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ –±–æ—Ç–æ–º
    });
  }

  /**
   * –û—á–∏—Å—Ç–∏—Ç—å –∏—Å—Ç–µ–∫—à–∏–µ –¥—É—ç–ª–∏
   * @returns {Promise<number>}
   */
  async cleanupExpired() {
    return await PvPDuel.cleanupExpired();
  }

  /**
   * –ü–æ–ª—É—á–∏—Ç—å —Å–µ—Å—Å–∏—é –ø–æ ID
   * @param {string} sessionId
   * @param {string} userId
   * @returns {Promise<Object>}
   */
  async getSession(sessionId, userId) {
    const duel = await PvPDuel.findBySession(sessionId);
    
    if (!duel) {
      throw new Error('–°–µ—Å—Å–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞');
    }

    if (!duel.participants.includes(userId)) {
      throw new Error('–í—ã –Ω–µ —É—á–∞—Å—Ç–≤—É–µ—Ç–µ –≤ —ç—Ç–æ–π –¥—É—ç–ª–∏');
    }

    return {
      success: true,
      data: {
        sessionId: duel.sessionId,
        challengerId: duel.challengerId,
        challengerUsername: duel.challengerUsername,
        challengerJoined: duel.challengerJoined,
        challengerReady: duel.challengerReady,
        challengerSide: duel.challengerSide,
        opponentId: duel.opponentId,
        opponentUsername: duel.opponentUsername,
        opponentJoined: duel.opponentJoined,
        opponentReady: duel.opponentReady,
        opponentSide: duel.opponentSide,
        amount: duel.amount,
        winAmount: duel.winAmount,
        commission: duel.commission,
        status: duel.status,
        bothJoined: duel.bothJoined,
        bothReady: duel.bothReady,
        coinResult: duel.coinResult,
        winnerId: duel.winnerId,
        winnerUsername: duel.winnerUsername,
        isPlayer: duel.participants.includes(userId),
        isChallenger: duel.challengerId === userId
      }
    };
  }

  /**
   * –°–æ–∑–¥–∞–µ—Ç –∑–∞–ø–∏—Å–∏ –≤ –∏—Å—Ç–æ—Ä–∏–∏ –∏–≥—Ä –¥–ª—è –æ–±–æ–∏—Ö —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ PvP –¥—É—ç–ª–∏
   * @param {Object} duel - –û–±—ä–µ–∫—Ç –¥—É—ç–ª–∏
   * @param {Object} session - MongoDB —Å–µ—Å—Å–∏—è
   */
  async createGameHistoryRecords(duel, session) {
    try {
      const { Game, User } = require('../models');
      
      // –ü–æ–ª—É—á–∞–µ–º –æ–±—ä–µ–∫—Ç—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
      const challenger = await User.findOne({ telegramId: duel.challengerId }).session(session);
      const opponent = await User.findOne({ telegramId: duel.opponentId }).session(session);
      
      if (!challenger || !opponent) {
        console.log('PvP: –ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –∏–≥—Ä–æ–≤—ã—Ö –∑–∞–ø–∏—Å–µ–π');
        return;
      }

      // –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –∏–≥—Ä–æ–∫–∞
      const challengerWon = duel.winnerId === duel.challengerId;
      const opponentWon = duel.winnerId === duel.opponentId;

      // –°–æ–∑–¥–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç –¥—É—ç–ª–∏
      const duelResult = {
        duelId: duel._id,
        sessionId: duel.sessionId,
        gameType: duel.gameType || 'coin',
        format: duel.format || 'bo1',
        score: duel.score,
        rounds: duel.rounds,
        opponent: {
          challengerId: duel.challengerId,
          challengerUsername: duel.challengerUsername,
          opponentId: duel.opponentId, 
          opponentUsername: duel.opponentUsername
        },
        totalBank: duel.totalBank,
        commission: duel.commission
      };

      // –ó–∞–ø–∏—Å—å –¥–ª—è challenger
      const challengerGame = new Game({
        user: challenger._id,
        gameType: 'pvp',
        bet: duel.amount,
        multiplier: challengerWon ? (duel.winAmount / duel.amount) : 0,
        result: {
          ...duelResult,
          playerRole: 'challenger',
          opponentUsername: duel.opponentUsername
        },
        win: challengerWon,
        profit: challengerWon ? (duel.winAmount - duel.amount) : -duel.amount,
        balanceBefore: challenger.balance - (challengerWon ? (duel.winAmount - duel.amount) : -duel.amount),
        balanceAfter: challenger.balance,
        clientSeed: `pvp_${duel.sessionId}_challenger`,
        serverSeed: duel.gameData?.serverSeed || `pvp_server_${duel.sessionId}`,
        nonce: 1,
        metadata: {
          pvpDuel: true,
          opponentId: duel.opponentId,
          format: duel.format,
          finalScore: `${duel.score.challenger}-${duel.score.opponent}`
        }
      });

      // –ó–∞–ø–∏—Å—å –¥–ª—è opponent  
      const opponentGame = new Game({
        user: opponent._id,
        gameType: 'pvp',
        bet: duel.amount,
        multiplier: opponentWon ? (duel.winAmount / duel.amount) : 0,
        result: {
          ...duelResult,
          playerRole: 'opponent',
          opponentUsername: duel.challengerUsername
        },
        win: opponentWon,
        profit: opponentWon ? (duel.winAmount - duel.amount) : -duel.amount,
        balanceBefore: opponent.balance - (opponentWon ? (duel.winAmount - duel.amount) : -duel.amount),
        balanceAfter: opponent.balance,
        clientSeed: `pvp_${duel.sessionId}_opponent`,
        serverSeed: duel.gameData?.serverSeed || `pvp_server_${duel.sessionId}`,
        nonce: 2,
        metadata: {
          pvpDuel: true,
          opponentId: duel.challengerId,
          format: duel.format,
          finalScore: `${duel.score.opponent}-${duel.score.challenger}`
        }
      });

      // –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ–±–µ –∑–∞–ø–∏—Å–∏
      await Game.create([challengerGame, opponentGame], { session });

      console.log(`PvP: –°–æ–∑–¥–∞–Ω—ã –∏–≥—Ä–æ–≤—ã–µ –∑–∞–ø–∏—Å–∏ –¥–ª—è –¥—É—ç–ª–∏ ${duel.sessionId}`);
      
    } catch (error) {
      console.error('PvP: –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –∏–≥—Ä–æ–≤—ã—Ö –∑–∞–ø–∏—Å–µ–π:', error);
      // –ù–µ –ø—Ä–µ—Ä—ã–≤–∞–µ–º –æ—Å–Ω–æ–≤–Ω—É—é —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—é –∏–∑-–∑–∞ –æ—à–∏–±–∫–∏ –∏—Å—Ç–æ—Ä–∏–∏
    }
  }

  /**
   * –û–±–Ω–æ–≤–ª—è–µ—Ç —Ñ–∏–Ω–∞–Ω—Å–æ–≤—É—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –∫–∞–∑–∏–Ω–æ –ø–æ—Å–ª–µ PvP –¥—É—ç–ª–∏
   * @param {Object} duel - –û–±—ä–µ–∫—Ç –¥—É—ç–ª–∏
   */
  async updateCasinoFinances(duel) {
    try {
      const casinoFinanceService = require('./casino-finance.service');
      
      // –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø–æ –∫–∞–∂–¥–æ–º—É –∏–≥—Ä–æ–∫—É –∫–∞–∫ –æ—Ç–¥–µ–ª—å–Ω—É—é –∏–≥—Ä—É
      const totalBets = duel.amount * 2; // –û–±—â–∞—è —Å—É–º–º–∞ —Å—Ç–∞–≤–æ–∫
      const totalWins = duel.winAmount; // –í—ã–∏–≥—Ä—ã—à –ø–æ–±–µ–¥–∏—Ç–µ–ª—è
      const commission = duel.commission; // –ö–æ–º–∏—Å—Å–∏—è –∫–∞–∑–∏–Ω–æ
      
      // –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω—ã–µ –≤—ã–ø–ª–∞—Ç—ã
      const referralPayouts = duel.referralPayouts || [];
      const totalReferralPayouts = referralPayouts.reduce((sum, payout) => sum + payout.amount, 0);
      
      // –û–±–Ω–æ–≤–ª—è–µ–º —á–µ—Ä–µ–∑ casino finance service
      await casinoFinanceService.updateAfterGame({
        gameType: 'pvp',
        bet: totalBets,
        profit: commission - totalReferralPayouts, // –ü—Ä–∏–±—ã–ª—å –∫–∞–∑–∏–Ω–æ –ø–æ—Å–ª–µ —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω—ã—Ö –≤—ã–ø–ª–∞—Ç
        win: false, // PvP –≤—Å–µ–≥–¥–∞ –ø—Ä–∏–Ω–æ—Å–∏—Ç –ø—Ä–∏–±—ã–ª—å –∫–∞–∑–∏–Ω–æ
        metadata: {
          duelId: duel._id,
          sessionId: duel.sessionId,
          commission: commission,
          referralPayouts: totalReferralPayouts,
          gameFormat: duel.format
        }
      });
      
      console.log(`PvP: –û–±–Ω–æ–≤–ª–µ–Ω–∞ —Ñ–∏–Ω–∞–Ω—Å–æ–≤–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ - —Å—Ç–∞–≤–∫–∏: ${totalBets}, –∫–æ–º–∏—Å—Å–∏—è: ${commission}, —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω—ã–µ: ${totalReferralPayouts}`);
      
    } catch (error) {
      console.error('PvP: –û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Ñ–∏–Ω–∞–Ω—Å–æ–≤–æ–π —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏:', error);
      // –ù–µ –ø—Ä–µ—Ä—ã–≤–∞–µ–º –æ—Å–Ω–æ–≤–Ω—É—é –ª–æ–≥–∏–∫—É
    }
  }
}

module.exports = new PvPService();