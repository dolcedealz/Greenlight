// frontend/src/screens/ProfileScreen.js
import React, { useState, useEffect } from 'react';
import { Header } from '../components/layout';
import Deposits from '../components/profile/Deposits';
import Withdrawals from '../components/profile/Withdrawals';
import { ReferralsList, EarningsHistory, PayoutModal } from '../components/referral';
import { PromoCodeInput, UserPromoCodes } from '../components/promocodes';
import useTactileFeedback from '../hooks/useTactileFeedback';
import { userApi, gameApi, referralApi } from '../services';
import { showNotification } from '../utils/telegram';
import '../styles/ProfileScreen.css';

const ProfileScreen = ({ balance, onBalanceUpdate }) => {
  const [userData, setUserData] = useState(null);
  const [transactions, setTransactions] = useState([]);
  const [stats, setStats] = useState(null);
  const [loading, setLoading] = useState(true);
  const [error, setError] = useState(null);
  const [activeTab, setActiveTab] = useState('profile');
  const [referralData, setReferralData] = useState(null);
  const [showPayoutModal, setShowPayoutModal] = useState(false);

  // –î–æ–±–∞–≤–ª—è–µ–º —Ç–∞–∫—Ç–∏–ª—å–Ω—É—é –æ–±—Ä–∞—Ç–Ω—É—é —Å–≤—è–∑—å
  const { 
    buttonPressFeedback, 
    selectionChanged, 
    successNotification,
    navigationFeedback 
  } = useTactileFeedback();

  // –ó–∞–≥—Ä—É–∂–∞–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–∞
  useEffect(() => {
    const fetchUserData = async () => {
      try {
        setLoading(true);

        // –ó–∞–≥—Ä—É–∂–∞–µ–º –ø—Ä–æ—Ñ–∏–ª—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        const profileResponse = await userApi.getUserProfile();
        setUserData(profileResponse.data.data);

        // –ó–∞–≥—Ä—É–∂–∞–µ–º —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        const transactionsResponse = await userApi.getTransactions({ limit: 20 });
        setTransactions(transactionsResponse.data.data.transactions);

        // –ó–∞–≥—Ä—É–∂–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –∏–≥—Ä
        const statsResponse = await gameApi.getGameStats();
        setStats(statsResponse.data.data);

        setLoading(false);
      } catch (err) {

        setError('–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –ø—Ä–æ—Ñ–∏–ª—è. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.');
        setLoading(false);
      }
    };

    fetchUserData();
  }, []);

  // –ó–∞–≥—Ä—É–∂–∞–µ–º —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –ø—Ä–∏ –ø–µ—Ä–µ—Ö–æ–¥–µ –Ω–∞ –≤–∫–ª–∞–¥–∫—É —Ä–µ—Ñ–µ—Ä–∞–ª–æ–≤
  useEffect(() => {
    if (activeTab === 'referrals' && !referralData) {
      const fetchReferralData = async () => {
        try {
          const response = await referralApi.getPartnerStats();
          if (response.data.success) {
            setReferralData(response.data.data);
          }
        } catch (err) {

          showNotification('–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ');
        }
      };

      fetchReferralData();
    }
  }, [activeTab, referralData]);

  // –ö–æ–ø–∏—Ä–æ–≤–∞–Ω–∏–µ —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω–æ–≥–æ –∫–æ–¥–∞ –¥–ª—è –≤–∫–ª–∞–¥–∫–∏ —Ä–µ—Ñ–µ—Ä–∞–ª–æ–≤
  const copyReferralCode = () => {
    if (referralData?.partner?.referralCode) {
      buttonPressFeedback(); // –í–∏–±—Ä–∞—Ü–∏—è –ø—Ä–∏ –Ω–∞–∂–∞—Ç–∏–∏

      navigator.clipboard.writeText(`https://t.me/Greenlightgames_bot?start=${referralData.partner.referralCode}`)
        .then(() => {
          successNotification(); // –í–∏–±—Ä–∞—Ü–∏—è —É—Å–ø–µ—Ö–∞
          showNotification('–†–µ—Ñ–µ—Ä–∞–ª—å–Ω–∞—è —Å—Å—ã–ª–∫–∞ —Å–∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∞!');
        })
        .catch(err => {

          showNotification('–ù–µ —É–¥–∞–ª–æ—Å—å —Å–∫–æ–ø–∏—Ä–æ–≤–∞—Ç—å —Å—Å—ã–ª–∫—É');
        });
    }
  };

  // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Å–º–µ–Ω—ã –≤–∫–ª–∞–¥–æ–∫ —Å –≤–∏–±—Ä–∞—Ü–∏–µ–π
  const handleTabChange = (tab) => {
    if (activeTab !== tab) {
      selectionChanged(); // –í–∏–±—Ä–∞—Ü–∏—è –ø—Ä–∏ —Å–º–µ–Ω–µ –≤–∫–ª–∞–¥–∫–∏
    } else {
      navigationFeedback(); // –û–±—ã—á–Ω–∞—è –Ω–∞–≤–∏–≥–∞—Ü–∏–æ–Ω–Ω–∞—è –≤–∏–±—Ä–∞—Ü–∏—è
    }
    setActiveTab(tab);
  };

  // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –ø–µ—Ä–µ–∫–ª—é—á–∞—Ç–µ–ª–µ–π —Å –≤–∏–±—Ä–∞—Ü–∏–µ–π
  const handleToggleChange = (e) => {
    selectionChanged(); // –í–∏–±—Ä–∞—Ü–∏—è –ø—Ä–∏ –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–∏
    // –ó–¥–µ—Å—å –º–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –ª–æ–≥–∏–∫—É —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –Ω–∞—Å—Ç—Ä–æ–µ–∫
  };

  // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –ø–æ–ø—ã—Ç–∫–∏ —Å–Ω–æ–≤–∞ —Å –≤–∏–±—Ä–∞—Ü–∏–µ–π
  const handleRetryClick = () => {
    buttonPressFeedback(); // –í–∏–±—Ä–∞—Ü–∏—è –ø—Ä–∏ –Ω–∞–∂–∞—Ç–∏–∏
    window.location.reload();
  };

  // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Å—Å—ã–ª–æ–∫ —Å –≤–∏–±—Ä–∞—Ü–∏–µ–π
  const handleLinkClick = () => {
    buttonPressFeedback(); // –í–∏–±—Ä–∞—Ü–∏—è –ø—Ä–∏ –Ω–∞–∂–∞—Ç–∏–∏ –Ω–∞ —Å—Å—ã–ª–∫—É
  };

  // –°–æ–∑–¥–∞–Ω–∏–µ —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω–æ–π –≤—ã–ø–ª–∞—Ç—ã
  const handleCreatePayout = async (amount) => {
    try {
      buttonPressFeedback();

      const response = await referralApi.createPayout(amount);

      if (response.data.success) {
        successNotification();
        showNotification(`–í—ã–ø–ª–∞—Ç–∞ ${amount} USDT –ø–µ—Ä–µ–≤–µ–¥–µ–Ω–∞ –Ω–∞ –æ—Å–Ω–æ–≤–Ω–æ–π –±–∞–ª–∞–Ω—Å!`);

        // –û–±–Ω–æ–≤–ª—è–µ–º —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
        const updatedReferralData = await referralApi.getPartnerStats();
        if (updatedReferralData.data.success) {
          setReferralData(updatedReferralData.data.data);
        }

        // –û–±–Ω–æ–≤–ª—è–µ–º –æ—Å–Ω–æ–≤–Ω–æ–π –±–∞–ª–∞–Ω—Å
        if (onBalanceUpdate) {
          onBalanceUpdate();
        }

        setShowPayoutModal(false);
      }
    } catch (error) {

      showNotification(error.response?.data?.message || '–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –≤—ã–ø–ª–∞—Ç—ã');
    }
  };

  // –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–∞—Ç—ã
  const formatDate = (dateString) => {
    const date = new Date(dateString);
    return date.toLocaleDateString('ru-RU', {
      day: '2-digit',
      month: '2-digit',
      year: 'numeric',
      hour: '2-digit',
      minute: '2-digit'
    });
  };

  // –ü–æ–ª—É—á–∞–µ–º –∏–∫–æ–Ω–∫—É –¥–ª—è —Ç–∏–ø–∞ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏
  const getTransactionIcon = (type) => {
    switch (type) {
      case 'deposit': return 'üí∞';
      case 'withdrawal': return 'üí∏';
      case 'bet': return 'üéÆ';
      case 'win': return 'üèÜ';
      case 'referral': return 'üë•';
      case 'bonus': return 'üéÅ';
      default: return 'üìã';
    }
  };

  // –ü–æ–ª—É—á–∞–µ–º –Ω–∞–∑–≤–∞–Ω–∏–µ —Ç–∏–ø–∞ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏
  const getTransactionName = (type) => {
    switch (type) {
      case 'deposit': return '–ü–æ–ø–æ–ª–Ω–µ–Ω–∏–µ';
      case 'withdrawal': return '–í—ã–≤–æ–¥';
      case 'bet': return '–°—Ç–∞–≤–∫–∞';
      case 'win': return '–í—ã–∏–≥—Ä—ã—à';
      case 'referral': return '–†–µ—Ñ–µ—Ä–∞–ª—å–Ω—ã–π –±–æ–Ω—É—Å';
      case 'bonus': return '–ë–æ–Ω—É—Å';
      default: return type;
    }
  };

  // –†–µ–Ω–¥–µ—Ä –≤–∫–ª–∞–¥–∫–∏ –ø—Ä–æ—Ñ–∏–ª—è
  const renderProfileTab = () => {
    if (!userData) return null;

    return (
      <div className="profile-tab">
        <div className="profile-info">
          <div className="profile-avatar">
            {userData.firstName.charAt(0)}{userData.lastName ? userData.lastName.charAt(0) : ''}
          </div>
          <div className="profile-details">
            <h2>{userData.firstName} {userData.lastName}</h2>
            {userData.username && <p className="username">@{userData.username}</p>}
            <p className="join-date">–ù–∞ –ø–ª–∞—Ç—Ñ–æ—Ä–º–µ —Å {formatDate(userData.createdAt)}</p>
          </div>
        </div>

        <div className="profile-balance">
          <div className="balance-header">
            <h3>–ë–∞–ª–∞–Ω—Å</h3>
          </div>
          <div className="balance-amount">{balance.toFixed(2)} USDT</div>
        </div>

        {/* –ö–æ–º–ø–æ–Ω–µ–Ω—Ç –¥–µ–ø–æ–∑–∏—Ç–æ–≤ */}
        <Deposits balance={balance} onBalanceUpdate={onBalanceUpdate} />

        {/* –ö–æ–º–ø–æ–Ω–µ–Ω—Ç –≤—ã–≤–æ–¥–æ–≤ */}
        <Withdrawals balance={balance} onBalanceUpdate={onBalanceUpdate} />

        {/* –ö–æ–º–ø–æ–Ω–µ–Ω—Ç—ã –ø—Ä–æ–º–æ–∫–æ–¥–æ–≤ */}
        <div className="promocodes-section">
          <h3>üéÅ –ü—Ä–æ–º–æ–∫–æ–¥—ã</h3>
          <PromoCodeInput onBalanceUpdate={onBalanceUpdate} />
          <UserPromoCodes />
        </div>

        <div className="profile-stats">
          <h3>–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞</h3>
          <div className="stats-grid">
            <div className="stat-item">
              <span className="stat-label">–í—Å–µ–≥–æ –∏–≥—Ä</span>
              <span className="stat-value">{stats?.overall?.totalGames || 0}</span>
            </div>
            <div className="stat-item">
              <span className="stat-label">–ü—Ä–æ–≤–µ–¥–µ–Ω–æ</span>
              <span className="stat-value">{stats?.overall?.totalBet?.toFixed(2) || '0.00'} USDT</span>
            </div>
            <div className="stat-item">
              <span className="stat-label">–í—ã–∏–≥—Ä–∞–Ω–æ</span>
              <span className="stat-value">{stats?.overall?.totalWin?.toFixed(2) || '0.00'} USDT</span>
            </div>
            <div className="stat-item">
              <span className="stat-label">–ü—Ä–æ—Ñ–∏—Ç</span>
              <span className={`stat-value ${(stats?.overall?.totalWin - stats?.overall?.totalLoss) >= 0 ? 'positive' : 'negative'}`}>
                {((stats?.overall?.totalWin || 0) - (stats?.overall?.totalLoss || 0)).toFixed(2)} USDT
              </span>
            </div>
          </div>
        </div>

      </div>
    );
  };

  // –†–µ–Ω–¥–µ—Ä –≤–∫–ª–∞–¥–∫–∏ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π
  const renderTransactionsTab = () => {
    return (
      <div className="transactions-tab">
        <h3>–ò—Å—Ç–æ—Ä–∏—è —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π</h3>

        {transactions.length === 0 ? (
          <div className="no-transactions">
            <p>–£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π</p>
          </div>
        ) : (
          <div className="transactions-list">
            {transactions.map(transaction => (
              <div key={transaction._id} className="transaction-item">
                <div className="transaction-icon">
                  {getTransactionIcon(transaction.type)}
                </div>
                <div className="transaction-details">
                  <div className="transaction-header">
                    <span className="transaction-type">{getTransactionName(transaction.type)}</span>
                    <span className={`transaction-amount ${transaction.amount >= 0 ? 'positive' : 'negative'}`}>
                      {transaction.amount >= 0 ? '+' : ''}{transaction.amount.toFixed(2)} USDT
                    </span>
                  </div>
                  
                  {/* –ù–û–í–û–ï: –ü–æ–∫–∞–∑ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –∫–æ–º–∏—Å—Å–∏–∏ –¥–ª—è –¥–µ–ø–æ–∑–∏—Ç–æ–≤ –∏ –≤—ã–≤–æ–¥–æ–≤ */}
                  {transaction.payment && (transaction.type === 'deposit' || transaction.type === 'withdrawal') && (
                    <div className="transaction-commission-info">
                      {transaction.payment.grossAmount && (
                        <span className="commission-detail">
                          –í–∞–ª–æ–≤–∞—è —Å—É–º–º–∞: {transaction.payment.grossAmount.toFixed(2)} USDT
                        </span>
                      )}
                      {transaction.payment.fee && transaction.payment.fee > 0 && (
                        <span className="commission-detail commission-fee">
                          –ö–æ–º–∏—Å—Å–∏—è CryptoBot: {transaction.payment.fee.toFixed(2)} USDT (3%)
                        </span>
                      )}
                    </div>
                  )}
                  
                  <div className="transaction-info">
                    <span className="transaction-date">{formatDate(transaction.createdAt)}</span>
                    <span className="transaction-balance">–ë–∞–ª–∞–Ω—Å: {transaction.balanceAfter.toFixed(2)} USDT</span>
                  </div>
                  {transaction.description && (
                    <div className="transaction-description">{transaction.description}</div>
                  )}
                </div>
              </div>
            ))}
          </div>
        )}
      </div>
    );
  };

  // –û–ë–ù–û–í–õ–ï–ù–ù–ê–Ø —Ñ—É–Ω–∫—Ü–∏—è —Ä–µ–Ω–¥–µ—Ä–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
  const renderStatsTab = () => {
    if (!stats) {
      return (
        <div className="stats-tab">
          <h3>üìä –î–µ—Ç–∞–ª—å–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞</h3>
          <div className="no-game-stats">
            <div className="stats-icon">üéÆ</div>
            <div className="stats-text">–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ–∫–∞ –ø—É—Å—Ç–∞</div>
            <div className="stats-hint">–°—ã–≥—Ä–∞–π—Ç–µ –Ω–µ—Å–∫–æ–ª—å–∫–æ –∏–≥—Ä, —á—Ç–æ–±—ã —É–≤–∏–¥–µ—Ç—å –¥–µ—Ç–∞–ª—å–Ω—É—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É</div>
          </div>
        </div>
      );
    }

    // –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –ø—Ä–æ—Ü–µ–Ω—Ç–∞ –≤—ã–∏–≥—Ä—ã—à–µ–π —Å –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä–æ–º
    const renderWinrateIndicator = (winRate) => {
      const percentage = (winRate * 100).toFixed(1);
      return (
        <div className="winrate-indicator">
          <span>{percentage}%</span>
          <div className="winrate-bar">
            <div 
              className="winrate-fill" 
              style={{ width: `${Math.min(winRate * 100, 100)}%` }}
            ></div>
          </div>
        </div>
      );
    };

    // –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –Ω–∞–∑–≤–∞–Ω–∏—è –∏–≥—Ä—ã —Å –∏–∫–æ–Ω–∫–æ–π
    const getGameDisplayName = (gameType) => {
      const gameNames = {
        'coin': '–ú–æ–Ω–µ—Ç–∫–∞',
        'mines': '–ú–∏–Ω—ã', 
        'crash': '–ö—Ä–∞—à',
        'slots': '–°–ª–æ—Ç—ã'
      };
      return gameNames[gameType] || gameType;
    };

    return (
      <div className="stats-tab">
        <h3>üìä –î–µ—Ç–∞–ª—å–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞</h3>

        {/* –û–±—â–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Å —É–ª—É—á—à–µ–Ω–Ω—ã–º –¥–∏–∑–∞–π–Ω–æ–º */}
        <div className="game-stats-summary">
          <div className="summary-item">
            <span className="summary-label">üéÆ –í—Å–µ–≥–æ –∏–≥—Ä</span>
            <span className="summary-value">{stats.overall.totalGames}</span>
          </div>
          <div className="summary-item">
            <span className="summary-label">üèÜ –í—ã–∏–≥—Ä—ã—à–∏</span>
            <span className="summary-value positive">
              {stats.overall.winCount} ({(stats.overall.winRate * 100).toFixed(1)}%)
            </span>
          </div>
          <div className="summary-item">
            <span className="summary-label">üí∞ –ü—Ä–æ—Å—Ç–∞–≤–ª–µ–Ω–æ</span>
            <span className="summary-value">{stats.overall.totalBet?.toFixed(2) || '0.00'} USDT</span>
          </div>
          <div className="summary-item">
            <span className="summary-label">üíé –í—ã–∏–≥—Ä–∞–Ω–æ</span>
            <span className="summary-value positive">{stats.overall.totalWin?.toFixed(2) || '0.00'} USDT</span>
          </div>
          <div className="summary-item">
            <span className="summary-label">üìà –û–±—â–∏–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç</span>
            <span className={`summary-value ${(stats.overall.totalWin - stats.overall.totalLoss) >= 0 ? 'positive' : 'negative'}`}>
              {((stats.overall.totalWin || 0) - (stats.overall.totalLoss || 0)).toFixed(2)} USDT
            </span>
          </div>
          <div className="summary-item">
            <span className="summary-label">üéØ –ü—Ä–æ—Ü–µ–Ω—Ç —É—Å–ø–µ—Ö–∞</span>
            <span className="summary-value">
              {renderWinrateIndicator(stats.overall.winRate)}
            </span>
          </div>
        </div>

        {/* –î–µ—Ç–∞–ª—å–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ –∏–≥—Ä–∞–º */}
        <div className="game-stats-details">
          <h4>üé≤ –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ —Ç–∏–ø–∞–º –∏–≥—Ä</h4>

          {Object.keys(stats.byGameType).length === 0 ? (
            <div className="no-game-stats">
              <div className="stats-icon">üéØ</div>
              <div className="stats-text">–ù–µ—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –ø–æ –∏–≥—Ä–∞–º</div>
              <div className="stats-hint">–ü–æ–∏–≥—Ä–∞–π—Ç–µ –≤ —Ä–∞–∑–Ω—ã–µ –∏–≥—Ä—ã, —á—Ç–æ–±—ã —É–≤–∏–¥–µ—Ç—å –¥–µ—Ç–∞–ª—å–Ω—É—é –∞–Ω–∞–ª–∏—Ç–∏–∫—É</div>
            </div>
          ) : (
            Object.keys(stats.byGameType).map(gameType => {
              const gameStats = stats.byGameType[gameType];
              const profitLoss = (gameStats.totalWin || 0) - (gameStats.totalLoss || 0);
              const avgBet = gameStats.totalGames > 0 ? (gameStats.totalBet / gameStats.totalGames) : 0;
              const avgWin = gameStats.winCount > 0 ? (gameStats.totalWin / gameStats.winCount) : 0;

              return (
                <div key={gameType} className="game-stat-item">
                  <div className="game-stat-header">
                    <h5 data-game={gameType}>{getGameDisplayName(gameType)}</h5>
                    <span className="game-stat-count">{gameStats.totalGames} –∏–≥—Ä</span>
                  </div>

                  <div className="game-stat-details">
                    <div className="game-stat-detail">
                      <span>üí∞ –û–±—â–∏–µ —Å—Ç–∞–≤–∫–∏:</span>
                      <span>{gameStats.totalBet?.toFixed(2) || '0.00'} USDT</span>
                    </div>

                    <div className="game-stat-detail">
                      <span>üéØ –í—ã–∏–≥—Ä—ã—à–∏:</span>
                      <span>{gameStats.winCount} –∏–∑ {gameStats.totalGames}</span>
                    </div>

                    <div className="game-stat-detail">
                      <span>üìä –ü—Ä–æ—Ü–µ–Ω—Ç –ø–æ–±–µ–¥:</span>
                      <span>{renderWinrateIndicator(gameStats.winRate)}</span>
                    </div>

                    <div className="game-stat-detail">
                      <span>üíé –û–±—â–∏–π –≤—ã–∏–≥—Ä—ã—à:</span>
                      <span className="positive">{gameStats.totalWin?.toFixed(2) || '0.00'} USDT</span>
                    </div>

                    <div className="game-stat-detail">
                      <span>üìà –ò—Ç–æ–≥–æ–≤—ã–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç:</span>
                      <span className={profitLoss >= 0 ? 'positive' : 'negative'}>
                        {profitLoss >= 0 ? '+' : ''}{profitLoss.toFixed(2)} USDT
                      </span>
                    </div>

                    <div className="game-stat-detail">
                      <span>‚ö° –°—Ä–µ–¥–Ω—è—è —Å—Ç–∞–≤–∫–∞:</span>
                      <span>{avgBet.toFixed(2)} USDT</span>
                    </div>

                    {gameStats.winCount > 0 && (
                      <div className="game-stat-detail">
                        <span>üèÜ –°—Ä–µ–¥–Ω–∏–π –≤—ã–∏–≥—Ä—ã—à:</span>
                        <span className="positive">{avgWin.toFixed(2)} USDT</span>
                      </div>
                    )}

                    {gameStats.maxWin && gameStats.maxWin > 0 && (
                      <div className="game-stat-detail">
                        <span>üöÄ –ú–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–π –≤—ã–∏–≥—Ä—ã—à:</span>
                        <span className="positive">{gameStats.maxWin.toFixed(2)} USDT</span>
                      </div>
                    )}
                  </div>
                </div>
              );
            })
          )}
        </div>
      </div>
    );
  };

  // –†–µ–Ω–¥–µ—Ä –≤–∫–ª–∞–¥–∫–∏ —Ä–µ—Ñ–µ—Ä–∞–ª–æ–≤
  const renderReferralsTab = () => {
    if (!referralData) {
      return (
        <div className="referrals-tab">
          <div className="referrals-loading">
            <div className="loader"></div>
            <p>–ó–∞–≥—Ä—É–∑–∫–∞ —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö...</p>
          </div>
        </div>
      );
    }

    const { partner, stats } = referralData;

    // –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è —É—Ä–æ–≤–Ω—è
    const getLevelDisplay = (level) => {
      const levels = {
        bronze: { name: '–ë—Ä–æ–Ω–∑–∞', icon: 'ü•â', color: '#CD7F32' },
        silver: { name: '–°–µ—Ä–µ–±—Ä–æ', icon: 'ü•à', color: '#C0C0C0' },
        gold: { name: '–ó–æ–ª–æ—Ç–æ', icon: 'ü•á', color: '#FFD700' },
        platinum: { name: '–ü–ª–∞—Ç–∏–Ω–∞', icon: 'üíé', color: '#E5E4E2' },
        vip: { name: 'VIP', icon: 'üåü', color: '#9400D3' }
      };
      return levels[level] || { name: level, icon: 'üéØ', color: '#0ba84a' };
    };

    const levelInfo = getLevelDisplay(partner.level);
    const progress = partner.progress;

    return (
      <div className="referrals-tab">
        {/* –ö–∞—Ä—Ç–æ—á–∫–∞ —É—Ä–æ–≤–Ω—è –ø–∞—Ä—Ç–Ω–µ—Ä–∞ */}
        <div className="referral-level-card" style={{ borderColor: levelInfo.color }}>
          <div className="level-header">
            <div className="level-icon">{levelInfo.icon}</div>
            <div className="level-info">
              <h3>{levelInfo.name}</h3>
              <p className="commission-rate">{stats.commissionPercent}% –∫–æ–º–∏—Å—Å–∏—è</p>
            </div>
          </div>

          {progress.nextLevel && (
            <div className="level-progress">
              <div className="progress-info">
                <span>–î–æ {getLevelDisplay(progress.nextLevel).name}</span>
                <span>{progress.current}/{progress.current + progress.needed} –∞–∫—Ç–∏–≤–Ω—ã—Ö</span>
              </div>
              <div className="progress-bar">
                <div 
                  className="progress-fill" 
                  style={{ 
                    width: `${progress.progress}%`,
                    backgroundColor: levelInfo.color 
                  }}
                />
              </div>
            </div>
          )}
        </div>

        {/* –†–µ—Ñ–µ—Ä–∞–ª—å–Ω—ã–π –±–∞–ª–∞–Ω—Å */}
        <div className="referral-balance-card">
          <div className="balance-header">
            <h3>üí∞ –†–µ—Ñ–µ—Ä–∞–ª—å–Ω—ã–π –±–∞–ª–∞–Ω—Å</h3>
            <button 
              className="payout-button"
              onClick={() => setShowPayoutModal(true)}
              disabled={stats.referralBalance < 10}
            >
              –í—ã–≤–µ—Å—Ç–∏
            </button>
          </div>
          <div className="balance-amount">
            {stats.referralBalance.toFixed(2)} USDT
          </div>
          <div className="balance-stats">
            <div className="stat-item">
              <span>–í—Å–µ–≥–æ –∑–∞—Ä–∞–±–æ—Ç–∞–Ω–æ</span>
              <span>{stats.totalEarned.toFixed(2)} USDT</span>
            </div>
            <div className="stat-item">
              <span>–í—ã–≤–µ–¥–µ–Ω–æ</span>
              <span>{stats.totalWithdrawn.toFixed(2)} USDT</span>
            </div>
          </div>
        </div>

        {/* –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Ä–µ—Ñ–µ—Ä–∞–ª–æ–≤ */}
        <div className="referral-stats-grid">
          <div className="stat-card">
            <div className="stat-icon">üë•</div>
            <div className="stat-content">
              <div className="stat-value">{stats.totalReferrals}</div>
              <div className="stat-label">–í—Å–µ–≥–æ —Ä–µ—Ñ–µ—Ä–∞–ª–æ–≤</div>
            </div>
          </div>

          <div className="stat-card">
            <div className="stat-icon">üî•</div>
            <div className="stat-content">
              <div className="stat-value">{stats.activeReferrals}</div>
              <div className="stat-label">–ê–∫—Ç–∏–≤–Ω—ã—Ö</div>
            </div>
          </div>

          <div className="stat-card">
            <div className="stat-icon">üíé</div>
            <div className="stat-content">
              <div className="stat-value">{stats.referralsWithDeposits}</div>
              <div className="stat-label">–° –¥–µ–ø–æ–∑–∏—Ç–∞–º–∏</div>
            </div>
          </div>
        </div>

        {/* –†–µ—Ñ–µ—Ä–∞–ª—å–Ω–∞—è —Å—Å—ã–ª–∫–∞ */}
        <div className="referral-link-section">
          <h3>üîó –í–∞—à–∞ —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω–∞—è —Å—Å—ã–ª–∫–∞</h3>
          <div className="link-container">
            <input 
              type="text" 
              value={`https://t.me/Greenlightgames_bot?start=${partner.referralCode}`}
              readOnly
            />
            <button onClick={copyReferralCode}>üìã</button>
          </div>
          <div className="referral-code">
            –í–∞—à –∫–æ–¥: <span>{partner.referralCode}</span>
          </div>
        </div>

        {/* –ö–æ–º–ø–æ–Ω–µ–Ω—Ç—ã —Ä–µ—Ñ–µ—Ä–∞–ª–æ–≤ */}
        <div className="referral-components">
          <div className="referral-section">
            <h4>üë• –°–ø–∏—Å–æ–∫ —Ä–µ—Ñ–µ—Ä–∞–ª–æ–≤</h4>
            <ReferralsList />
          </div>

          <div className="referral-section">
            <h4>üí∞ –ò—Å—Ç–æ—Ä–∏—è –Ω–∞—á–∏—Å–ª–µ–Ω–∏–π</h4>
            <EarningsHistory />
          </div>
        </div>
      </div>
    );
  };

  // –†–µ–Ω–¥–µ—Ä –≤–∫–ª–∞–¥–∫–∏ –Ω–∞—Å—Ç—Ä–æ–µ–∫ —Å –≤–∏–±—Ä–∞—Ü–∏–µ–π
  const renderSettingsTab = () => {
    return (
      <div className="settings-tab">
        <h3>–ù–∞—Å—Ç—Ä–æ–π–∫–∏</h3>

        <div className="settings-section">
          <h4>–£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è</h4>
          <div className="setting-item">
            <span className="setting-label">–£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ –≤—ã–∏–≥—Ä—ã—à–∞—Ö</span>
            <label className="toggle">
              <input 
                type="checkbox" 
                defaultChecked 
                onChange={handleToggleChange}
              />
              <span className="slider"></span>
            </label>
          </div>
          <div className="setting-item">
            <span className="setting-label">–£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ –¥–µ–ø–æ–∑–∏—Ç–∞—Ö</span>
            <label className="toggle">
              <input 
                type="checkbox" 
                defaultChecked 
                onChange={handleToggleChange}
              />
              <span className="slider"></span>
            </label>
          </div>
          <div className="setting-item">
            <span className="setting-label">–£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ –≤—ã–≤–æ–¥–∞—Ö</span>
            <label className="toggle">
              <input 
                type="checkbox" 
                defaultChecked 
                onChange={handleToggleChange}
              />
              <span className="slider"></span>
            </label>
          </div>
        </div>

        <div className="settings-section">
          <h4>–û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ</h4>
          <div className="setting-item">
            <span className="setting-label">–ü–æ–∫–∞–∑—ã–≤–∞—Ç—å –∏—Å—Ç–æ—Ä–∏—á–µ—Å–∫–∏–µ –¥–∞–Ω–Ω—ã–µ</span>
            <label className="toggle">
              <input 
                type="checkbox" 
                defaultChecked 
                onChange={handleToggleChange}
              />
              <span className="slider"></span>
            </label>
          </div>
          <div className="setting-item">
            <span className="setting-label">–ü–æ–∫–∞–∑—ã–≤–∞—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –∏–≥—Ä</span>
            <label className="toggle">
              <input 
                type="checkbox" 
                defaultChecked 
                onChange={handleToggleChange}
              />
              <span className="slider"></span>
            </label>
          </div>
        </div>

        <div className="settings-section">
          <h4>–ë–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç—å</h4>
          <div className="setting-item">
            <span className="setting-label">–ü—Ä–æ–≤–µ—Ä–∫–∞ —á–µ—Å—Ç–Ω–æ—Å—Ç–∏ –∏–≥—Ä—ã</span>
            <label className="toggle">
              <input 
                type="checkbox" 
                defaultChecked 
                onChange={handleToggleChange}
              />
              <span className="slider"></span>
            </label>
          </div>
        </div>

        <div className="settings-section">
          <h4>–û –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–∏</h4>
          <div className="about-item">
            <span className="about-label">–í–µ—Ä—Å–∏—è</span>
            <span className="about-value">1.0.0</span>
          </div>
          <div className="about-item">
            <span className="about-label">–†–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫</span>
            <span className="about-value">Greenlight Team</span>
          </div>
          <div className="about-links">
            <a 
              href="https://t.me/greenlightgames" 
              target="_blank" 
              rel="noopener noreferrer"
              onClick={handleLinkClick}
            >
              –ö–∞–Ω–∞–ª Telegram
            </a>
            <a 
              href="https://t.me/greenlightgamessupport" 
              target="_blank" 
              rel="noopener noreferrer"
              onClick={handleLinkClick}
            >
              –ü–æ–¥–¥–µ—Ä–∂–∫–∞
            </a>
          </div>
        </div>
      </div>
    );
  };

  // –†–µ–Ω–¥–µ—Ä –∞–∫—Ç–∏–≤–Ω–æ–π –≤–∫–ª–∞–¥–∫–∏
  const renderActiveTab = () => {
    switch (activeTab) {
      case 'profile':
        return renderProfileTab();
      case 'transactions':
        return renderTransactionsTab();
      case 'stats':
        return renderStatsTab();
      case 'referrals':
        return renderReferralsTab();
      case 'settings':
        return renderSettingsTab();
      default:
        return renderProfileTab();
    }
  };

  return (
    <div className="profile-screen">
      <Header balance={balance} />

      <div className="profile-header">
        <h1 className="profile-title">–ü—Ä–æ—Ñ–∏–ª—å</h1>
      </div>

      {loading ? (
        <div className="profile-loading">
          <div className="loader"></div>
          <p>–ó–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö –ø—Ä–æ—Ñ–∏–ª—è...</p>
        </div>
      ) : error ? (
        <div className="profile-error">
          <p>{error}</p>
          <button onClick={handleRetryClick}>–ü–æ–ø—Ä–æ–±–æ–≤–∞—Ç—å —Å–Ω–æ–≤–∞</button>
        </div>
      ) : (
        <>
          <div className="profile-tabs">
            <button 
              className={`tab-button ${activeTab === 'profile' ? 'active' : ''}`} 
              onClick={() => handleTabChange('profile')}
            >
              –ü—Ä–æ—Ñ–∏–ª—å
            </button>
            <button 
              className={`tab-button ${activeTab === 'transactions' ? 'active' : ''}`} 
              onClick={() => handleTabChange('transactions')}
            >
              –¢—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏
            </button>
            <button 
              className={`tab-button ${activeTab === 'stats' ? 'active' : ''}`} 
              onClick={() => handleTabChange('stats')}
            >
              –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
            </button>
            <button 
              className={`tab-button ${activeTab === 'referrals' ? 'active' : ''}`} 
              onClick={() => handleTabChange('referrals')}
            >
              –†–µ—Ñ–µ—Ä–∞–ª—ã
            </button>
            <button 
              className={`tab-button ${activeTab === 'settings' ? 'active' : ''}`} 
              onClick={() => handleTabChange('settings')}
            >
              –ù–∞—Å—Ç—Ä–æ–π–∫–∏
            </button>
          </div>

          <div className="profile-content">
            {renderActiveTab()}
          </div>

          {/* –ú–æ–¥–∞–ª—å–Ω–æ–µ –æ–∫–Ω–æ –≤—ã–ø–ª–∞—Ç—ã */}
          {showPayoutModal && referralData && (
            <PayoutModal
              referralBalance={referralData.stats.referralBalance}
              onConfirm={handleCreatePayout}
              onClose={() => setShowPayoutModal(false)}
            />
          )}
        </>
      )}
    </div>
  );
};

export default ProfileScreen;
