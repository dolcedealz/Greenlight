// frontend/src/components/games/mines/MinesGame.js
import React, { useState, useEffect, useCallback } from 'react';
import { MinesGrid } from './index';
import { MinesControls } from './index';
import { gameApi } from '../../../services';
import useTactileFeedback from '../../../hooks/useTactileFeedback';
import '../../../styles/MinesGame.css';

const MinesGame = ({ balance, setBalance, gameStats, setGameResult, setError }) => {
  const { gameActionFeedback, criticalActionFeedback } = useTactileFeedback();
  
  // –ù–û–í–û–ï: –°–æ—Å—Ç–æ—è–Ω–∏–µ –∑–∞–≥—Ä—É–∑–∫–∏
  const [isInitializing, setIsInitializing] = useState(true);
  
  // –°–æ—Å—Ç–æ—è–Ω–∏–µ –∏–≥—Ä—ã
  const [grid, setGrid] = useState(Array(5).fill().map(() => Array(5).fill('gem')));
  const [clickedCells, setClickedCells] = useState([]);
  const [gameActive, setGameActive] = useState(false);
  const [gameOver, setGameOver] = useState(false);
  const [gameId, setGameId] = useState(null);
  const [betAmount, setBetAmount] = useState(1);
  const [minesCount, setMinesCount] = useState(5);
  const [currentMultiplier, setCurrentMultiplier] = useState(0.95);
  const [possibleWin, setPossibleWin] = useState(0.95);
  const [loading, setLoading] = useState(false);
  const [autoplay, setAutoplay] = useState(false);
  
  // –ù–û–í–û–ï: –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Å –∑–∞–≥—Ä—É–∑–æ—á–Ω—ã–º —ç–∫—Ä–∞–Ω–æ–º
  useEffect(() => {
    const initializeGame = async () => {
      try {
        // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∑–∞–≥—Ä—É–∑–æ—á–Ω—ã–π —ç–∫—Ä–∞–Ω –º–∏–Ω–∏–º—É–º 2 —Å–µ–∫—É–Ω–¥—ã
        await new Promise(resolve => setTimeout(resolve, 2000));
        
        console.log('=== –ò–ù–ò–¶–ò–ê–õ–ò–ó–ê–¶–ò–Ø –ò–ì–†–´ –í –ú–ò–ù–´ ===');
        setIsInitializing(false);
        
      } catch (err) {
        console.error('–û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –º–∏–Ω:', err);
        setError('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∏–≥—Ä—ã');
        setIsInitializing(false);
      }
    };
    
    initializeGame();
  }, [setError]);
  
  // –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –≤–æ–∑–º–æ–∂–Ω–æ–≥–æ –≤—ã–∏–≥—Ä—ã—à–∞ –ø—Ä–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–∏ —Å—Ç–∞–≤–∫–∏ –∏–ª–∏ –º–Ω–æ–∂–∏—Ç–µ–ª—è
  useEffect(() => {
    setPossibleWin(betAmount * currentMultiplier);
  }, [betAmount, currentMultiplier]);
  
  // –ó–∞–ø—É—Å–∫ –Ω–æ–≤–æ–π –∏–≥—Ä—ã
  const startGame = useCallback(async () => {
    try {
      console.log("–ù–∞—á–∏–Ω–∞–µ–º –Ω–æ–≤—É—é –∏–≥—Ä—É –≤ –º–∏–Ω—ã...");
      setLoading(true);
      
      // –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –∏–≥—Ä—ã
      setGameOver(false);
      setClickedCells([]);
      setCurrentMultiplier(0.95);
      setPossibleWin(betAmount * 0.95);
      setGameActive(false);
      setGameResult(null);
      setError(null);
      
      // –°–æ–∑–¥–∞–µ–º —É–Ω–∏–∫–∞–ª—å–Ω—ã–π seed –¥–ª—è –∏–≥—Ä—ã
      const uniqueSeed = `session_${Date.now()}_${Math.random().toString(36).substring(2, 9)}`;
      
      // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∑–∞–ø—Ä–æ—Å –Ω–∞ —Å–æ–∑–¥–∞–Ω–∏–µ –∏–≥—Ä—ã
      const response = await gameApi.playMines(betAmount, minesCount, uniqueSeed);
      
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º –æ—Ç–≤–µ—Ç –æ—Ç —Å–µ—Ä–≤–µ—Ä–∞
      const data = response.data.data;
      if (!data || !data.gameId) {
        throw new Error("API –Ω–µ –≤–µ—Ä–Ω—É–ª ID –∏–≥—Ä—ã");
      }
      
      // –°–æ—Ö—Ä–∞–Ω—è–µ–º ID –∏–≥—Ä—ã
      setGameId(data.gameId);
      
      // –û–±–Ω–æ–≤–ª—è–µ–º –±–∞–ª–∞–Ω—Å
      if (data.balanceAfter !== undefined) {
        setBalance(data.balanceAfter);
      }
      
      // –°–±—Ä–∞—Å—ã–≤–∞–µ–º –∏–≥—Ä–æ–≤—É—é —Å–µ—Ç–∫—É
      setGrid(Array(5).fill().map(() => Array(5).fill('gem')));
      
      // –ê–∫—Ç–∏–≤–∏—Ä—É–µ–º –∏–≥—Ä—É
      setGameActive(true);
      setLoading(false);
      
    } catch (err) {
      console.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –∏–≥—Ä—ã:", err);
      setError(err.response?.data?.message || "–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å –∏–≥—Ä—É");
      setLoading(false);
    }
  }, [betAmount, minesCount, setBalance, setError, setGameResult]);
  
  // –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–ª–∏–∫–∞ –ø–æ —è—á–µ–π–∫–µ
  const handleCellClick = useCallback(async (row, col) => {
    // –ü—Ä–æ–≤–µ—Ä–∫–∞ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏ —Ö–æ–¥–∞
    if (!gameActive || gameOver || loading || !gameId) {
      return;
    }
    
    // –ü—Ä–æ–≤–µ—Ä–∫–∞, –Ω–µ –æ—Ç–∫—Ä—ã—Ç–∞ –ª–∏ —É–∂–µ —è—á–µ–π–∫–∞
    const cellAlreadyClicked = clickedCells.some(cell => 
      cell[0] === row && cell[1] === col
    );
    
    if (cellAlreadyClicked) {
      return;
    }
    
    try {
      // –ë–ª–æ–∫–∏—Ä—É–µ–º –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å
      setLoading(true);
      
      // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∑–∞–ø—Ä–æ—Å –Ω–∞ —Å–µ—Ä–≤–µ—Ä
      const response = await gameApi.completeMinesGame(
        gameId, 
        row, 
        col, 
        false
      );
      
      const data = response.data.data;
      
      // –ü–æ–ª—É—á–∞–µ–º –Ω–æ–≤—ã–µ –Ω–∞–∂–∞—Ç—ã–µ —è—á–µ–π–∫–∏
      if (data.clickedCells) {
        // –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤—Å–µ –æ—Ç–∫—Ä—ã—Ç—ã–µ —è—á–µ–π–∫–∏ —Å –ø—Ä–∞–≤–∏–ª—å–Ω—ã–º —Ñ–æ—Ä–º–∞—Ç–æ–º
        setClickedCells(data.clickedCells);
        console.log('üí£ GAME: –û–±–Ω–æ–≤–ª–µ–Ω—ã –æ—Ç–∫—Ä—ã—Ç—ã–µ —è—á–µ–π–∫–∏:', data.clickedCells);
      }
      
      if (data.win === false) {
        // –ü–æ–ø–∞–¥–∞–Ω–∏–µ –Ω–∞ –º–∏–Ω—É - –∏–≥—Ä–∞ –æ–∫–æ–Ω—á–µ–Ω–∞
        
        // –û–±–Ω–æ–≤–ª—è–µ–º —Å–µ—Ç–∫—É —Å –ø–æ–∑–∏—Ü–∏—è–º–∏ –º–∏–Ω (—Å —É—á–µ—Ç–æ–º –º–æ–¥–∏—Ñ–∏–∫–∞—Ç–æ—Ä–æ–≤)
        if (data.grid) {
          setGrid(data.grid);
          console.log('üí£ GAME: –ò–≥—Ä–∞ –æ–∫–æ–Ω—á–µ–Ω–∞, –æ–±–Ω–æ–≤–ª–µ–Ω–∞ —Å–µ—Ç–∫–∞ —Å –º–∏–Ω–∞–º–∏:', data.grid);
        }
        
        // –ï—Å–ª–∏ –µ—Å—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Ñ–∞–∫—Ç–∏—á–µ—Å–∫–æ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–µ –º–∏–Ω, –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –≤ –∫–æ–Ω—Å–æ–ª–∏
        if (data.actualMinesCount) {
          console.log(`üí£ GAME: –§–∞–∫—Ç–∏—á–µ—Å–∫–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –º–∏–Ω –Ω–∞ –ø–æ–ª–µ: ${data.actualMinesCount} (–≤—ã–±—Ä–∞–Ω–æ: ${minesCount})`);
        }
        
        // –ó–∞–≤–µ—Ä—à–∞–µ–º –∏–≥—Ä—É
        setGameActive(false);
        setGameOver(true);
        
        // –û—Ç–æ–±—Ä–∞–∂–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
        setGameResult({
          win: false,
          amount: betAmount,
          newBalance: data.balanceAfter
        });
        
        // –û–±–Ω–æ–≤–ª—è–µ–º –±–∞–ª–∞–Ω—Å
        if (data.balanceAfter !== undefined) {
          setBalance(data.balanceAfter);
        }
        
      } else if (data.maxWin === true) {
        // –í—Å–µ –±–µ–∑–æ–ø–∞—Å–Ω—ã–µ —è—á–µ–π–∫–∏ –æ—Ç–∫—Ä—ã—Ç—ã - –º–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–π –≤—ã–∏–≥—Ä—ã—à
        
        // –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –æ—Ç–∫—Ä—ã—Ç—ã—Ö —è—á–µ–µ–∫
        if (data.clickedCells) {
          setClickedCells(data.clickedCells);
          console.log('üí£ GAME: –ú–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–π –≤—ã–∏–≥—Ä—ã—à - —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –æ—Ç–∫—Ä—ã—Ç—ã–µ —è—á–µ–π–∫–∏:', data.clickedCells);
        }
        
        // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –≤—Å–µ –º–∏–Ω—ã –Ω–∞ –ø–æ–ª–µ –¥–ª—è –ø–æ–ª–Ω–æ–π –∫–∞—Ä—Ç–∏–Ω—ã
        if (data.grid) {
          setGrid(data.grid);
          console.log('üí£ GAME: –ú–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–π –≤—ã–∏–≥—Ä—ã—à - –ø–æ–∫–∞–∑–∞–Ω—ã –≤—Å–µ –º–∏–Ω—ã –Ω–∞ –ø–æ–ª–µ');
        }
        
        // –û–±–Ω–æ–≤–ª—è–µ–º –º–Ω–æ–∂–∏—Ç–µ–ª—å
        const finalMultiplier = data.multiplier || (0.95 * (25 - minesCount));
        setCurrentMultiplier(finalMultiplier);
        setPossibleWin(betAmount * finalMultiplier);
        
        // –ó–∞–≤–µ—Ä—à–∞–µ–º –∏–≥—Ä—É
        setGameActive(false);
        setGameOver(true);
        
        // –û—Ç–æ–±—Ä–∞–∂–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
        setGameResult({
          win: true,
          amount: data.profit,
          newBalance: data.balanceAfter
        });
        
        // –û–±–Ω–æ–≤–ª—è–µ–º –±–∞–ª–∞–Ω—Å
        if (data.balanceAfter !== undefined) {
          setBalance(data.balanceAfter);
        }
        
      } else {
        // –û—Ç–∫—Ä—ã—Ç–∞ –±–µ–∑–æ–ø–∞—Å–Ω–∞—è —è—á–µ–π–∫–∞ - –ø—Ä–æ–¥–æ–ª–∂–∞–µ–º –∏–≥—Ä—É
        
        // –û–±–Ω–æ–≤–ª—è–µ–º –º–Ω–æ–∂–∏—Ç–µ–ª—å
        if (data.currentMultiplier) {
          setCurrentMultiplier(data.currentMultiplier);
          setPossibleWin(betAmount * data.currentMultiplier);
        }
        
        // –†–∞–∑–±–ª–æ–∫–∏—Ä—É–µ–º –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å –¥–ª—è –ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏—è –∏–≥—Ä—ã
        setGameActive(true);
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º —É—Å–ª–æ–≤–∏–µ –∞–≤—Ç–æ–∏–≥—Ä—ã
        if (autoplay && data.currentMultiplier >= 2) {
          setTimeout(() => handleCashout(), 500);
        }
      }
      
      setLoading(false);
      
    } catch (err) {
      console.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–∫—Ä—ã—Ç–∏–∏ —è—á–µ–π–∫–∏:", err);
      setError(err.response?.data?.message || "–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–∫—Ä—ã—Ç–∏–∏ —è—á–µ–π–∫–∏");
      setGameActive(true);
      setLoading(false);
    }
  }, [
    gameActive, gameOver, loading, clickedCells, betAmount, minesCount, gameId, 
    autoplay, setBalance, setError, setGameResult
  ]);
  
  // –§—É–Ω–∫—Ü–∏—è –∫–µ—à–∞—É—Ç–∞ (–∑–∞–±—Ä–∞—Ç—å –≤—ã–∏–≥—Ä—ã—à)
  const handleCashout = useCallback(async () => {
    // –ü—Ä–æ–≤–µ—Ä–∫–∞ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏ –≤—ã–ø–æ–ª–Ω–∏—Ç—å –∫–µ—à–∞—É—Ç
    if (!gameActive || gameOver || loading || !gameId) {
      return;
    }
    
    try {
      // –ë–ª–æ–∫–∏—Ä—É–µ–º –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å
      setLoading(true);
      setGameActive(false);
      
      // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∑–∞–ø—Ä–æ—Å –Ω–∞ –∫–µ—à–∞—É—Ç
      const response = await gameApi.completeMinesGame(
        gameId, 
        null, 
        null, 
        true
      );
      
      const data = response.data.data;
      
      // –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –æ—Ç–∫—Ä—ã—Ç—ã—Ö —è—á–µ–µ–∫ –ø—Ä–∏ –∫–µ—à–∞—É—Ç–µ
      if (data.clickedCells) {
        setClickedCells(data.clickedCells);
        console.log('üí£ GAME: –ö–µ—à–∞—É—Ç - —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –æ—Ç–∫—Ä—ã—Ç—ã–µ —è—á–µ–π–∫–∏:', data.clickedCells);
      }
      
      // –û–±–Ω–æ–≤–ª—è–µ–º —Å–µ—Ç–∫—É –ø—Ä–∏ –∫–µ—à–∞—É—Ç–µ (–ø–æ–∫–∞–∑—ã–≤–∞–µ–º –º–∏–Ω—ã)
      if (data.grid) {
        setGrid(data.grid);
        console.log('üí£ GAME: –ö–µ—à–∞—É—Ç - –æ–±–Ω–æ–≤–ª–µ–Ω–∞ —Å–µ—Ç–∫–∞ —Å –º–∏–Ω–∞–º–∏:', data.grid);
      }
      
      // –ó–∞–≤–µ—Ä—à–∞–µ–º –∏–≥—Ä—É
      setGameOver(true);
      
      // –û–±–Ω–æ–≤–ª—è–µ–º –º–Ω–æ–∂–∏—Ç–µ–ª—å
      if (data.multiplier) {
        setCurrentMultiplier(data.multiplier);
      }
      
      // –û–±–Ω–æ–≤–ª—è–µ–º –±–∞–ª–∞–Ω—Å
      if (data.balanceAfter !== undefined) {
        setBalance(data.balanceAfter);
      }
      
      // –û—Ç–æ–±—Ä–∞–∂–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
      setGameResult({
        win: true,
        amount: data.profit,
        newBalance: data.balanceAfter
      });
      
      setLoading(false);
      
    } catch (err) {
      console.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ –∫–µ—à–∞—É—Ç–µ:", err);
      setError(err.response?.data?.message || "–û—à–∏–±–∫–∞ –ø—Ä–∏ –∫–µ—à–∞—É—Ç–µ");
      setGameActive(true);
      setLoading(false);
    }
  }, [gameActive, gameOver, loading, gameId, setBalance, setError, setGameResult]);

  // –ù–û–í–û–ï: –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∫–Ω–æ–ø–æ–∫ —Å –≤–∏–±—Ä–∞—Ü–∏–µ–π
  const handlePlayClick = () => {
    console.log('üí£ GAME: –ù–∞–∂–∞—Ç–∞ –∫–Ω–æ–ø–∫–∞ "–ò–≥—Ä–∞—Ç—å"');
    
    if (gameActive || loading) {
      console.log('üí£ GAME: –ë–ª–æ–∫–∏—Ä–æ–≤–∞–Ω–æ - –∏–≥—Ä–∞ –∞–∫—Ç–∏–≤–Ω–∞ –∏–ª–∏ –∑–∞–≥—Ä—É–∑–∫–∞');
      return;
    }
    
    if (!betAmount || betAmount <= 0 || betAmount > balance) {
      console.log('üí£ GAME: –ë–ª–æ–∫–∏—Ä–æ–≤–∞–Ω–æ - –Ω–µ–≤–µ—Ä–Ω–∞—è —Å—Ç–∞–≤–∫–∞');
      return;
    }
    
    console.log('üí£ GAME: –ó–∞–ø—É—Å–∫–∞–µ–º –∏–≥—Ä—É');
    gameActionFeedback(); // –í–∏–±—Ä–∞—Ü–∏—è –ø—Ä–∏ –Ω–∞—á–∞–ª–µ –∏–≥—Ä—ã
    startGame();
  };

  const handleCashoutClick = () => {
    console.log('üí£ GAME: –ù–∞–∂–∞—Ç–∞ –∫–Ω–æ–ø–∫–∞ "–ó–∞–±—Ä–∞—Ç—å –≤—ã–∏–≥—Ä—ã—à"');
    
    if (!gameActive || loading) {
      console.log('üí£ GAME: –ë–ª–æ–∫–∏—Ä–æ–≤–∞–Ω–æ - –∏–≥—Ä–∞ –Ω–µ –∞–∫—Ç–∏–≤–Ω–∞ –∏–ª–∏ –∑–∞–≥—Ä—É–∑–∫–∞');
      return;
    }
    
    console.log('üí£ GAME: –ó–∞–±–∏—Ä–∞–µ–º –≤—ã–∏–≥—Ä—ã—à');
    criticalActionFeedback(); // –í–∏–±—Ä–∞—Ü–∏—è –ø—Ä–∏ –∫–µ—à–∞—É—Ç–µ
    handleCashout();
  };
  
  // –ü–æ–ª—É—á–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –æ—Ç–∫—Ä—ã—Ç—ã—Ö —è—á–µ–µ–∫
  const revealedCount = clickedCells.length;
  
  // –ù–û–í–û–ï: –ó–∞–≥—Ä—É–∑–æ—á–Ω—ã–π —ç–∫—Ä–∞–Ω –¥–ª—è –º–∏–Ω
  if (isInitializing) {
    return (
      <div className="mines-loading-screen">
        <div className="mines-loading-content">
          <div className="greenlight-logo">
            <div className="logo-icon mines-icon">üí£</div>
            <div className="logo-text">Greenlight</div>
            <div className="logo-subtitle">Mines Game</div>
          </div>
          <div className="loading-spinner">
            <div className="spinner-ring"></div>
            <div className="spinner-ring"></div>
            <div className="spinner-ring"></div>
          </div>
          <div className="loading-text">–ó–∞–≥—Ä—É–∑–∫–∞ –º–∏–Ω...</div>
        </div>
      </div>
    );
  }
  
  return (
    <>
      <MinesGrid 
        grid={grid}
        clickedCells={clickedCells}
        onCellClick={handleCellClick}
        gameActive={gameActive}
        gameOver={gameOver}
        loading={loading}
      />
      
      {/* –ù–û–í–û–ï: –ö–Ω–æ–ø–∫–∏ –¥–µ–π—Å—Ç–≤–∏–π –ø–æ–¥ –∏–≥—Ä–æ–≤—ã–º –ø–æ–ª–µ–º */}
      <div className="mines-action-buttons">
        {!gameActive ? (
          <button 
            className="mines-play-button" 
            onClick={handlePlayClick}
            disabled={!betAmount || betAmount <= 0 || betAmount > balance || loading}
          >
            {loading ? '–ó–∞–≥—Ä—É–∑–∫–∞...' : '–ò–≥—Ä–∞—Ç—å'}
          </button>
        ) : (
          <button 
            className="mines-cashout-button" 
            onClick={handleCashoutClick}
            disabled={loading}
          >
            {loading ? '–ó–∞–≥—Ä—É–∑–∫–∞...' : `–ó–∞–±—Ä–∞—Ç—å –≤—ã–∏–≥—Ä—ã—à (${possibleWin.toFixed(2)} USDT)`}
          </button>
        )}
      </div>
      
      <MinesControls 
        balance={balance}
        onPlay={startGame}
        onCashout={handleCashout}
        gameActive={gameActive}
        currentMultiplier={currentMultiplier}
        possibleWin={possibleWin}
        betAmount={betAmount}
        setBetAmount={setBetAmount}
        minesCount={minesCount}
        setMinesCount={setMinesCount}
        revealedCount={revealedCount}
        onAutoplayChange={setAutoplay}
        autoplay={autoplay}
        loading={loading}
        // –ù–û–í–û–ï: –°–∫—Ä—ã–≤–∞–µ–º –∫–Ω–æ–ø–∫–∏ –≤ –∫–æ–Ω—Ç—Ä–æ–ª–∞—Ö, —Ç–∞–∫ –∫–∞–∫ –æ–Ω–∏ —Ç–µ–ø–µ—Ä—å –ø–æ–¥ –ø–æ–ª–µ–º
        hideActionButtons={true}
      />
    </>
  );
};

export default MinesGame;
