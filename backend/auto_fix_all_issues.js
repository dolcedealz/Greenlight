// –ê–í–¢–û–ú–ê–¢–ò–ß–ï–°–ö–û–ï –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï –í–°–ï–• –í–´–Ø–í–õ–ï–ù–ù–´–• –ü–†–û–ë–õ–ï–ú
const { 
  User, Game, Transaction, ReferralEarning, ReferralPayout,
  EventBet, CrashRound, DuelRound, Duel, Event 
} = require('./src/models');
const mongoose = require('mongoose');

async function autoFixAllIssues() {
  try {
    await mongoose.connect(process.env.MONGODB_URI || 'mongodb://localhost:27017/greenlight');
    console.log('üîó –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ\n');
    
    console.log('üîß === –ê–í–¢–û–ú–ê–¢–ò–ß–ï–°–ö–û–ï –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï –í–°–ï–• –ü–†–û–ë–õ–ï–ú ===\n');
    
    const fixResults = {
      balancesFixed: 0,
      statisticsFixed: 0,
      transactionsFixed: 0,
      referralsFixed: 0,
      orphansRemoved: 0,
      mathErrorsFixed: 0,
      suspiciousAccountsFound: []
    };
    
    // ==========================================
    // 1. –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï –°–¢–ê–¢–ò–°–¢–ò–ö–ò –ü–û–õ–¨–ó–û–í–ê–¢–ï–õ–ï–ô
    // ==========================================
    console.log('=== 1. –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï –°–¢–ê–¢–ò–°–¢–ò–ö–ò –ü–û–õ–¨–ó–û–í–ê–¢–ï–õ–ï–ô ===');
    
    const allUsers = await User.find({});
    
    for (const user of allUsers) {
      // –ü–æ–¥—Å—á–∏—Ç—ã–≤–∞–µ–º –ø—Ä–∞–≤–∏–ª—å–Ω—É—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –∏–∑ –∏–≥—Ä
      const games = await Game.find({ user: user._id });
      const gameStats = games.reduce((acc, game) => {
        acc.totalGames += 1;
        acc.totalWagered += game.bet;
        if (game.win) {
          acc.totalWon += game.bet + game.profit;
          acc.wins += 1;
        }
        acc.totalProfit += game.profit;
        return acc;
      }, { totalGames: 0, totalWagered: 0, totalWon: 0, totalProfit: 0, wins: 0 });
      
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω—É–∂–Ω–æ –ª–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
      const statsNeedUpdate = (
        user.totalGames !== gameStats.totalGames ||
        Math.abs(user.totalWagered - gameStats.totalWagered) > 0.01 ||
        Math.abs(user.totalWon - gameStats.totalWon) > 0.01
      );
      
      if (statsNeedUpdate) {
        await User.findByIdAndUpdate(user._id, {
          totalGames: gameStats.totalGames,
          totalWagered: gameStats.totalWagered,
          totalWon: gameStats.totalWon
        });
        
        console.log(`‚úÖ –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞: ${user.username || user.telegramId}`);
        fixResults.statisticsFixed++;
      }
      
      // –ò—Å–ø—Ä–∞–≤–ª—è–µ–º –±–∞–ª–∞–Ω—Å—ã –Ω–∞ –æ—Å–Ω–æ–≤–µ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π
      const transactions = await Transaction.find({ user: user._id }).sort({ createdAt: 1 });
      const transactionBalance = transactions.reduce((sum, t) => sum + t.amount, 0);
      
      // –û–ø—Ä–µ–¥–µ–ª—è–µ–º –Ω–∞—á–∞–ª—å–Ω—ã–π –±–∞–ª–∞–Ω—Å
      let initialBalance = 0;
      if (transactions.length > 0) {
        const firstTx = transactions[0];
        if (firstTx.balanceBefore > 0 && firstTx.type !== 'deposit') {
          initialBalance = firstTx.balanceBefore;
          if (firstTx.amount < 0) initialBalance += Math.abs(firstTx.amount);
        }
      }
      
      const expectedBalance = initialBalance + transactionBalance;
      const balanceDifference = user.balance - expectedBalance;
      
      // –ò—Å–ø—Ä–∞–≤–ª—è–µ–º —Ç–æ–ª—å–∫–æ –∑–Ω–∞—á–∏—Ç–µ–ª—å–Ω—ã–µ —Ä–∞—Å—Ö–æ–∂–¥–µ–Ω–∏—è (–±–æ–ª—å—à–µ 0.01 USDT)
      if (Math.abs(balanceDifference) > 0.01) {
        // –î–ª—è –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏—Ö —Å–ª—É—á–∞–µ–≤ (—Ä–∞–∑–Ω–∏—Ü–∞ > 50 USDT) —Ç—Ä–µ–±—É–µ—Ç—Å—è —Ä—É—á–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞
        if (Math.abs(balanceDifference) > 50 && gameStats.totalGames === 0) {
          fixResults.suspiciousAccountsFound.push({
            username: user.username || user.telegramId,
            currentBalance: user.balance,
            expectedBalance: expectedBalance,
            difference: balanceDifference,
            gamesPlayed: gameStats.totalGames,
            transactionsCount: transactions.length
          });
          console.log(`‚ö†Ô∏è  –ü–û–î–û–ó–†–ò–¢–ï–õ–¨–ù–´–ô –ê–ö–ö–ê–£–ù–¢: ${user.username || user.telegramId} - –±–∞–ª–∞–Ω—Å ${user.balance}, –æ–∂–∏–¥–∞–µ—Ç—Å—è ${expectedBalance.toFixed(2)}`);
        } else {
          // –ò—Å–ø—Ä–∞–≤–ª—è–µ–º –Ω–µ–∑–Ω–∞—á–∏—Ç–µ–ª—å–Ω—ã–µ —Ä–∞—Å—Ö–æ–∂–¥–µ–Ω–∏—è
          await User.findByIdAndUpdate(user._id, {
            balance: expectedBalance
          });
          
          console.log(`‚úÖ –ò—Å–ø—Ä–∞–≤–ª–µ–Ω –±–∞–ª–∞–Ω—Å: ${user.username || user.telegramId} (${user.balance} ‚Üí ${expectedBalance.toFixed(2)})`);
          fixResults.balancesFixed++;
        }
      }
    }
    
    // ==========================================
    // 2. –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï –¢–†–ê–ù–ó–ê–ö–¶–ò–ô
    // ==========================================
    console.log('\n=== 2. –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï –¢–†–ê–ù–ó–ê–ö–¶–ò–ô ===');
    
    // –ò—Å–ø—Ä–∞–≤–ª—è–µ–º —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏ –≤—ã–∏–≥—Ä—ã—à–µ–π —Å –Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã–º–∏ balanceBefore
    const winTransactions = await Transaction.find({ type: 'win' });
    
    for (const transaction of winTransactions) {
      const correctBalanceBefore = transaction.balanceAfter - transaction.amount;
      
      if (Math.abs(transaction.balanceBefore - correctBalanceBefore) > 0.01) {
        await Transaction.findByIdAndUpdate(transaction._id, {
          balanceBefore: correctBalanceBefore
        });
        
        fixResults.transactionsFixed++;
      }
    }
    
    // –ò—Å–ø—Ä–∞–≤–ª—è–µ–º —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏ —Å—Ç–∞–≤–æ–∫ —Å –Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã–º–∏ balanceAfter
    const betTransactions = await Transaction.find({ type: 'bet' });
    
    for (const transaction of betTransactions) {
      const correctBalanceAfter = transaction.balanceBefore + transaction.amount;
      
      if (Math.abs(transaction.balanceAfter - correctBalanceAfter) > 0.01) {
        await Transaction.findByIdAndUpdate(transaction._id, {
          balanceAfter: correctBalanceAfter
        });
        
        fixResults.transactionsFixed++;
      }
    }
    
    console.log(`‚úÖ –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–æ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π: ${fixResults.transactionsFixed}`);
    
    // ==========================================
    // 3. –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï –†–ï–§–ï–†–ê–õ–¨–ù–û–ô –°–ò–°–¢–ï–ú–´
    // ==========================================
    console.log('\n=== 3. –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï –†–ï–§–ï–†–ê–õ–¨–ù–û–ô –°–ò–°–¢–ï–ú–´ ===');
    
    const partners = await User.find({ 
      $or: [
        { partnerLevel: { $ne: 'none' } },
        { 'referralStats.totalReferrals': { $gt: 0 } }
      ]
    });
    
    for (const partner of partners) {
      // –ü–µ—Ä–µ—Å—á–∏—Ç—ã–≤–∞–µ–º —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω—ã–µ –Ω–∞—á–∏—Å–ª–µ–Ω–∏—è
      const earnings = await ReferralEarning.find({ partner: partner._id });
      const totalEarnedFromDB = earnings.reduce((sum, e) => sum + (e.calculation?.earnedAmount || 0), 0);
      
      // –ü–µ—Ä–µ—Å—á–∏—Ç—ã–≤–∞–µ–º –≤—ã–ø–ª–∞—Ç—ã
      const payouts = await ReferralPayout.find({ partner: partner._id });
      const totalPaidOut = payouts.reduce((sum, p) => sum + p.amount, 0);
      
      const correctReferralBalance = totalEarnedFromDB - totalPaidOut;
      
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∏ –∏—Å–ø—Ä–∞–≤–ª—è–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
      const needsReferralUpdate = (
        Math.abs((partner.referralStats?.totalEarned || 0) - totalEarnedFromDB) > 0.01 ||
        Math.abs((partner.referralStats?.referralBalance || 0) - correctReferralBalance) > 0.01 ||
        Math.abs((partner.referralStats?.totalWithdrawn || 0) - totalPaidOut) > 0.01
      );
      
      if (needsReferralUpdate) {
        await User.findByIdAndUpdate(partner._id, {
          'referralStats.totalEarned': totalEarnedFromDB,
          'referralStats.referralBalance': Math.max(0, correctReferralBalance),
          'referralStats.totalWithdrawn': totalPaidOut
        });
        
        console.log(`‚úÖ –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–∞ —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞: ${partner.username || partner.telegramId}`);
        fixResults.referralsFixed++;
      }
    }
    
    // ==========================================
    // 4. –£–î–ê–õ–ï–ù–ò–ï –°–ò–†–û–¢–°–ö–ò–• –ó–ê–ü–ò–°–ï–ô
    // ==========================================
    console.log('\n=== 4. –û–ß–ò–°–¢–ö–ê –°–ò–†–û–¢–°–ö–ò–• –ó–ê–ü–ò–°–ï–ô ===');
    
    // –£–¥–∞–ª—è–µ–º –∏–≥—Ä—ã –±–µ–∑ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
    const orphanGamesResult = await Game.aggregate([
      {
        $lookup: {
          from: 'users',
          localField: 'user',
          foreignField: '_id',
          as: 'userDoc'
        }
      },
      { $match: { userDoc: { $size: 0 } } }
    ]);
    
    if (orphanGamesResult.length > 0) {
      const orphanGameIds = orphanGamesResult.map(g => g._id);
      await Game.deleteMany({ _id: { $in: orphanGameIds } });
      console.log(`üóëÔ∏è  –£–¥–∞–ª–µ–Ω–æ –∏–≥—Ä –±–µ–∑ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: ${orphanGamesResult.length}`);
      fixResults.orphansRemoved += orphanGamesResult.length;
    }
    
    // –£–¥–∞–ª—è–µ–º —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏ –±–µ–∑ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
    const orphanTransactionsResult = await Transaction.aggregate([
      {
        $lookup: {
          from: 'users',
          localField: 'user',
          foreignField: '_id',
          as: 'userDoc'
        }
      },
      { $match: { userDoc: { $size: 0 } } }
    ]);
    
    if (orphanTransactionsResult.length > 0) {
      const orphanTxIds = orphanTransactionsResult.map(t => t._id);
      await Transaction.deleteMany({ _id: { $in: orphanTxIds } });
      console.log(`üóëÔ∏è  –£–¥–∞–ª–µ–Ω–æ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π –±–µ–∑ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: ${orphanTransactionsResult.length}`);
      fixResults.orphansRemoved += orphanTransactionsResult.length;
    }
    
    // ==========================================
    // 5. –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï –ú–ê–¢–ï–ú–ê–¢–ò–ß–ï–°–ö–ò–• –û–®–ò–ë–û–ö
    // ==========================================
    console.log('\n=== 5. –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï –ú–ê–¢–ï–ú–ê–¢–ò–ß–ï–°–ö–ò–• –û–®–ò–ë–û–ö ===');
    
    // –ò—Å–ø—Ä–∞–≤–ª—è–µ–º –∏–≥—Ä—ã —Å –Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω–æ–π –º–∞—Ç–µ–º–∞—Ç–∏–∫–æ–π –±–∞–ª–∞–Ω—Å–∞
    const problematicGames = await Game.find({});
    
    for (const game of problematicGames) {
      const expectedBalanceAfter = game.balanceBefore + game.profit;
      
      if (Math.abs(game.balanceAfter - expectedBalanceAfter) > 0.01) {
        await Game.findByIdAndUpdate(game._id, {
          balanceAfter: expectedBalanceAfter
        });
        
        fixResults.mathErrorsFixed++;
      }
    }
    
    console.log(`‚úÖ –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–æ –º–∞—Ç–µ–º–∞—Ç–∏—á–µ—Å–∫–∏—Ö –æ—à–∏–±–æ–∫: ${fixResults.mathErrorsFixed}`);
    
    // ==========================================
    // 6. –ò–¢–û–ì–û–í–´–ô –û–¢–ß–ï–¢
    // ==========================================
    console.log('\n\nüéØ === –ò–¢–û–ì–û–í–´–ô –û–¢–ß–ï–¢ –ò–°–ü–†–ê–í–õ–ï–ù–ò–ô ===');
    
    console.log(`‚úÖ –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–æ –±–∞–ª–∞–Ω—Å–æ–≤: ${fixResults.balancesFixed}`);
    console.log(`‚úÖ –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–æ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫: ${fixResults.statisticsFixed}`);
    console.log(`‚úÖ –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–æ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π: ${fixResults.transactionsFixed}`);
    console.log(`‚úÖ –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–æ —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω—ã—Ö –∑–∞–ø–∏—Å–µ–π: ${fixResults.referralsFixed}`);
    console.log(`üóëÔ∏è  –£–¥–∞–ª–µ–Ω–æ —Å–∏—Ä–æ—Ç—Å–∫–∏—Ö –∑–∞–ø–∏—Å–µ–π: ${fixResults.orphansRemoved}`);
    console.log(`üîß –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–æ –º–∞—Ç–µ–º–∞—Ç–∏—á–µ—Å–∫–∏—Ö –æ—à–∏–±–æ–∫: ${fixResults.mathErrorsFixed}`);
    
    if (fixResults.suspiciousAccountsFound.length > 0) {
      console.log(`\n‚ö†Ô∏è  –ü–û–î–û–ó–†–ò–¢–ï–õ–¨–ù–´–ï –ê–ö–ö–ê–£–ù–¢–´ (–¢–†–ï–ë–£–Æ–¢ –†–£–ß–ù–û–ô –ü–†–û–í–ï–†–ö–ò):`);
      fixResults.suspiciousAccountsFound.forEach(account => {
        console.log(`   üö® ${account.username}:`);
        console.log(`      –¢–µ–∫—É—â–∏–π –±–∞–ª–∞–Ω—Å: ${account.currentBalance} USDT`);
        console.log(`      –û–∂–∏–¥–∞–µ–º—ã–π –±–∞–ª–∞–Ω—Å: ${account.expectedBalance.toFixed(2)} USDT`);
        console.log(`      –†–∞–∑–Ω–∏—Ü–∞: ${account.difference.toFixed(2)} USDT`);
        console.log(`      –ò–≥—Ä: ${account.gamesPlayed}`);
        console.log(`      –¢—Ä–∞–Ω–∑–∞–∫—Ü–∏–π: ${account.transactionsCount}`);
      });
      
      console.log(`\nüí° –†–ï–ö–û–ú–ï–ù–î–ê–¶–ò–ò –î–õ–Ø –ü–û–î–û–ó–†–ò–¢–ï–õ–¨–ù–´–• –ê–ö–ö–ê–£–ù–¢–û–í:`);
      console.log(`   1. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –∏—Å—Ç–æ—Ä–∏—é –ø–æ–ø–æ–ª–Ω–µ–Ω–∏–π/–≤—ã–≤–æ–¥–æ–≤`);
      console.log(`   2. –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ –Ω–µ –±—ã–ª–æ —Ä—É—á–Ω—ã—Ö –Ω–∞—á–∏—Å–ª–µ–Ω–∏–π`);
      console.log(`   3. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ª–æ–≥–∏ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–∏–≤–Ω—ã—Ö –¥–µ–π—Å—Ç–≤–∏–π`);
      console.log(`   4. –ü—Ä–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏ —Å–∫–æ—Ä—Ä–µ–∫—Ç–∏—Ä—É–π—Ç–µ –±–∞–ª–∞–Ω—Å –≤—Ä—É—á–Ω—É—é`);
    }
    
    const totalFixed = fixResults.balancesFixed + fixResults.statisticsFixed + 
                      fixResults.transactionsFixed + fixResults.referralsFixed + 
                      fixResults.orphansRemoved + fixResults.mathErrorsFixed;
    
    console.log(`\nüèÜ –û–ë–©–ò–ô –†–ï–ó–£–õ–¨–¢–ê–¢: –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–æ ${totalFixed} –ø—Ä–æ–±–ª–µ–º`);
    
    if (totalFixed === 0 && fixResults.suspiciousAccountsFound.length === 0) {
      console.log(`üéâ –°–∏—Å—Ç–µ–º–∞ –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –≤ –∏–¥–µ–∞–ª—å–Ω–æ–º —Å–æ—Å—Ç–æ—è–Ω–∏–∏!`);
    } else if (fixResults.suspiciousAccountsFound.length === 0) {
      console.log(`üéä –í—Å–µ –ø—Ä–æ–±–ª–µ–º—ã —É—Å–ø–µ—à–Ω–æ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω—ã!`);
    } else {
      console.log(`‚ú® –ë–æ–ª—å—à–∏–Ω—Å—Ç–≤–æ –ø—Ä–æ–±–ª–µ–º –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–æ. –û—Å—Ç–∞–ª–∏—Å—å –ø–æ–¥–æ–∑—Ä–∏—Ç–µ–ª—å–Ω—ã–µ –∞–∫–∫–∞—É–Ω—Ç—ã –¥–ª—è —Ä—É—á–Ω–æ–π –ø—Ä–æ–≤–µ—Ä–∫–∏.`);
    }
    
    console.log('\n‚úÖ –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ');
    
    return fixResults;
    
  } catch (error) {
    console.error('‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–∏:', error);
    throw error;
  } finally {
    mongoose.disconnect();
  }
}

autoFixAllIssues().catch(console.error);