// –ö–æ–º–ø–ª–µ–∫—Å–Ω—ã–π –∞—É–¥–∏—Ç –≤—Å–µ–π —Å–∏—Å—Ç–µ–º—ã –±–∞–ª–∞–Ω—Å–æ–≤, –∏–≥—Ä –∏ —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω—ã—Ö –Ω–∞—á–∏—Å–ª–µ–Ω–∏–π
const { User, Game, Transaction, ReferralEarning, ReferralPayout } = require('./src/models');
const mongoose = require('mongoose');

async function comprehensiveAudit() {
  try {
    await mongoose.connect(process.env.MONGODB_URI || 'mongodb://localhost:27017/greenlight');
    console.log('üîó –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ');
    
    console.log('\nüîç === –ö–û–ú–ü–õ–ï–ö–°–ù–´–ô –ê–£–î–ò–¢ –°–ò–°–¢–ï–ú–´ ===\n');
    
    // 1. –ü–†–û–í–ï–†–ö–ê –í–°–ï–• –ò–ì–† –ù–ê –û–®–ò–ë–ö–ò –ë–ê–õ–ê–ù–°–û–í
    console.log('=== 1. –ê–£–î–ò–¢ –í–°–ï–• –ò–ì–† ===');
    const allGames = await Game.find({}).populate('user', 'username telegramId').sort({ createdAt: 1 });
    
    let gameErrors = 0;
    const userBalanceTracking = new Map();
    
    for (const game of allGames) {
      const userId = game.user._id.toString();
      const expectedBalanceAfter = game.balanceBefore + game.profit;
      
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º –º–∞—Ç–µ–º–∞—Ç–∏–∫—É –∏–≥—Ä—ã
      if (Math.abs(game.balanceAfter - expectedBalanceAfter) > 0.01) {
        console.log(`\n‚ùå –û–®–ò–ë–ö–ê –í –ò–ì–†–ï ${game._id}:`);
        console.log(`   –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: ${game.user.username || game.user.telegramId}`);
        console.log(`   –¢–∏–ø: ${game.gameType}, –°—Ç–∞–≤–∫–∞: ${game.bet}`);
        console.log(`   –ë–∞–ª–∞–Ω—Å: ${game.balanceBefore} ‚Üí ${game.balanceAfter}`);
        console.log(`   –î–æ–ª–∂–Ω–æ –±—ã—Ç—å: ${game.balanceBefore} + ${game.profit} = ${expectedBalanceAfter}`);
        console.log(`   –†–∞–∑–Ω–∏—Ü–∞: ${(game.balanceAfter - expectedBalanceAfter).toFixed(2)}`);
        gameErrors++;
      }
      
      // –û—Ç—Å–ª–µ–∂–∏–≤–∞–µ–º –ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–æ—Å—Ç—å –±–∞–ª–∞–Ω—Å–æ–≤
      if (!userBalanceTracking.has(userId)) {
        userBalanceTracking.set(userId, []);
      }
      userBalanceTracking.get(userId).push({
        gameId: game._id,
        date: game.createdAt,
        balanceBefore: game.balanceBefore,
        balanceAfter: game.balanceAfter,
        bet: game.bet,
        profit: game.profit,
        type: game.gameType
      });
    }
    
    console.log(`\nüìä –í—Å–µ–≥–æ –∏–≥—Ä: ${allGames.length}`);
    console.log(`‚ùå –ò–≥—Ä —Å –æ—à–∏–±–∫–∞–º–∏: ${gameErrors}`);
    
    // 2. –ü–†–û–í–ï–†–ö–ê –†–ï–§–ï–†–ê–õ–¨–ù–´–• –ù–ê–ß–ò–°–õ–ï–ù–ò–ô
    console.log('\n\n=== 2. –ê–£–î–ò–¢ –†–ï–§–ï–†–ê–õ–¨–ù–û–ô –°–ò–°–¢–ï–ú–´ ===');
    
    // –ù–∞—Ö–æ–¥–∏–º –≤—Å–µ—Ö –ø–∞—Ä—Ç–Ω–µ—Ä–æ–≤ –∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π —Å —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω—ã–º —É—Ä–æ–≤–Ω–µ–º
    const partners = await User.find({ 
      $or: [
        { partnerLevel: { $ne: 'none' } },
        { 'referralStats.totalReferrals': { $gt: 0 } }
      ]
    });
    
    console.log(`\nüë• –ù–∞–π–¥–µ–Ω–æ –ø–∞—Ä—Ç–Ω–µ—Ä–æ–≤/—Ä–µ—Ñ–µ—Ä–µ—Ä–æ–≤: ${partners.length}`);
    
    for (const partner of partners) {
      console.log(`\nü§ù ${partner.username || partner.telegramId}:`);
      console.log(`   –ü–∞—Ä—Ç–Ω–µ—Ä—Å–∫–∏–π —Å—Ç–∞—Ç—É—Å: ${partner.partnerLevel}`);
      console.log(`   –†–µ—Ñ–µ—Ä–∞–ª—å–Ω—ã–π —É—Ä–æ–≤–µ–Ω—å: ${partner.referralStats.level}`);
      console.log(`   –ü—Ä–æ—Ü–µ–Ω—Ç –∫–æ–º–∏—Å—Å–∏–∏: ${partner.partnerLevel !== 'none' ? 
        (partner.partnerLevel === 'partner_bronze' ? 20 : 
         partner.partnerLevel === 'partner_silver' ? 25 : 
         partner.partnerLevel === 'partner_gold' ? 30 : 0) : 
        partner.referralStats.commissionPercent}%`);
      console.log(`   –†–µ—Ñ–µ—Ä–∞–ª—å–Ω—ã–π –±–∞–ª–∞–Ω—Å: ${partner.referralStats.referralBalance} USDT`);
      console.log(`   –í—Å–µ–≥–æ –∑–∞—Ä–∞–±–æ—Ç–∞–Ω–æ: ${partner.referralStats.totalEarned} USDT`);
      console.log(`   –í—ã–≤–µ–¥–µ–Ω–æ: ${partner.referralStats.totalWithdrawn} USDT`);
      
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞—á–∏—Å–ª–µ–Ω–∏—è
      const earnings = await ReferralEarning.find({ partner: partner._id });
      const totalEarnedFromDB = earnings.reduce((sum, e) => sum + (e.calculation?.earnedAmount || 0), 0);
      
      console.log(`   –ù–∞—á–∏—Å–ª–µ–Ω–∏–π –≤ –ë–î: ${earnings.length}`);
      console.log(`   –°—É–º–º–∞ –Ω–∞—á–∏—Å–ª–µ–Ω–∏–π –≤ –ë–î: ${totalEarnedFromDB.toFixed(2)} USDT`);
      
      if (Math.abs(totalEarnedFromDB - partner.referralStats.totalEarned) > 0.01) {
        console.log(`   ‚ùå –ù–ï–°–û–û–¢–í–ï–¢–°–¢–í–ò–ï: totalEarned != —Å—É–º–º–∞ –Ω–∞—á–∏—Å–ª–µ–Ω–∏–π`);
      }
      
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–µ—Ñ–µ—Ä–∞–ª–æ–≤
      const referrals = await User.find({ referrer: partner._id });
      console.log(`   –†–µ—Ñ–µ—Ä–∞–ª–æ–≤ –≤ –ë–î: ${referrals.length}`);
      
      // –°—á–∏—Ç–∞–µ–º –æ–∂–∏–¥–∞–µ–º—É—é –∫–æ–º–∏—Å—Å–∏—é
      let expectedCommission = 0;
      for (const referral of referrals) {
        const refLostGames = await Game.find({ 
          user: referral._id,
          win: false 
        });
        
        const commissionPercent = partner.partnerLevel !== 'none' ? 
          (partner.partnerLevel === 'partner_bronze' ? 20 : 
           partner.partnerLevel === 'partner_silver' ? 25 : 
           partner.partnerLevel === 'partner_gold' ? 30 : 0) : 
          partner.referralStats.commissionPercent;
        
        for (const game of refLostGames) {
          expectedCommission += Math.abs(game.profit) * (commissionPercent / 100);
        }
      }
      
      console.log(`   –û–∂–∏–¥–∞–µ–º–∞—è –∫–æ–º–∏—Å—Å–∏—è: ${expectedCommission.toFixed(2)} USDT`);
      
      if (Math.abs(expectedCommission - totalEarnedFromDB) > 0.01) {
        console.log(`   ‚ùå –ù–ï–î–û–ü–û–õ–£–ß–ï–ù–û: ${(expectedCommission - totalEarnedFromDB).toFixed(2)} USDT`);
      }
    }
    
    // 3. –ü–†–û–í–ï–†–ö–ê –ü–û–õ–¨–ó–û–í–ê–¢–ï–õ–ï–ô –° –ê–ù–û–ú–ê–õ–¨–ù–´–ú–ò –ë–ê–õ–ê–ù–°–ê–ú–ò
    console.log('\n\n=== 3. –ü–û–õ–¨–ó–û–í–ê–¢–ï–õ–ò –° –ê–ù–û–ú–ê–õ–¨–ù–´–ú–ò –ë–ê–õ–ê–ù–°–ê–ú–ò ===');
    
    const allUsers = await User.find({});
    
    for (const user of allUsers) {
      // –°—á–∏—Ç–∞–µ–º —Ä–µ–∞–ª—å–Ω—ã–π –±–∞–ª–∞–Ω—Å –∏–∑ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π
      const transactions = await Transaction.find({ user: user._id });
      const transactionBalance = transactions.reduce((sum, t) => sum + t.amount, 0);
      
      // –°—á–∏—Ç–∞–µ–º –∏–≥—Ä—ã
      const gameCount = await Game.countDocuments({ user: user._id });
      const gameStats = await Game.aggregate([
        { $match: { user: user._id } },
        { $group: { 
          _id: null, 
          totalBet: { $sum: '$bet' },
          totalWon: { $sum: { $cond: ['$win', { $add: ['$bet', '$profit'] }, 0] } },
          totalProfit: { $sum: '$profit' }
        }}
      ]);
      
      const stats = gameStats[0] || { totalBet: 0, totalWon: 0, totalProfit: 0 };
      
      // –û–ø—Ä–µ–¥–µ–ª—è–µ–º –Ω–∞—á–∞–ª—å–Ω—ã–π –±–∞–ª–∞–Ω—Å (—Ç–µ—Å—Ç–æ–≤—ã–π)
      const hasDeposit = transactions.some(t => t.type === 'deposit');
      const initialBalance = hasDeposit ? 0 : 100; // –ï—Å–ª–∏ –Ω–µ—Ç –¥–µ–ø–æ–∑–∏—Ç–æ–≤, –ø—Ä–µ–¥–ø–æ–ª–∞–≥–∞–µ–º —Ç–µ—Å—Ç–æ–≤—ã–π –±–∞–ª–∞–Ω—Å 100
      
      const expectedBalance = initialBalance + transactionBalance;
      const balanceDiff = user.balance - expectedBalance;
      
      // –í—ã–≤–æ–¥–∏–º —Ç–æ–ª—å–∫–æ –ø—Ä–æ–±–ª–µ–º–Ω—ã–µ —Å–ª—É—á–∞–∏
      if (Math.abs(balanceDiff) > 0.01 || (user.balance > 200 && gameCount === 0)) {
        console.log(`\nüë§ ${user.username || user.telegramId}:`);
        console.log(`   –¢–µ–∫—É—â–∏–π –±–∞–ª–∞–Ω—Å: ${user.balance} USDT`);
        console.log(`   –û–∂–∏–¥–∞–µ–º—ã–π –±–∞–ª–∞–Ω—Å: ${expectedBalance} USDT`);
        console.log(`   –†–∞–∑–Ω–∏—Ü–∞: ${balanceDiff.toFixed(2)} USDT`);
        console.log(`   –ò–≥—Ä: ${gameCount}, –°—Ç–∞–≤–æ–∫: ${stats.totalBet}, –í—ã–∏–≥—Ä—ã—à–µ–π: ${stats.totalWon}`);
        console.log(`   –¢—Ä–∞–Ω–∑–∞–∫—Ü–∏–π: ${transactions.length}`);
        
        if (user.balance > 200 && gameCount === 0) {
          console.log(`   ‚ö†Ô∏è  –ü–û–î–û–ó–†–ò–¢–ï–õ–¨–ù–û: –ë–æ–ª—å—à–æ–π –±–∞–ª–∞–Ω—Å –±–µ–∑ –∏–≥—Ä!`);
        }
      }
    }
    
    // 4. –ü–†–û–í–ï–†–ö–ê –í–´–í–û–î–û–í –° –†–ï–§–ï–†–ê–õ–¨–ù–û–ì–û –ë–ê–õ–ê–ù–°–ê
    console.log('\n\n=== 4. –ê–£–î–ò–¢ –í–´–í–û–î–û–í –° –†–ï–§–ï–†–ê–õ–¨–ù–û–ì–û –ë–ê–õ–ê–ù–°–ê ===');
    
    const payouts = await ReferralPayout.find({}).populate('partner', 'username telegramId');
    console.log(`\n–í—Å–µ–≥–æ –≤—ã–≤–æ–¥–æ–≤: ${payouts.length}`);
    
    for (const payout of payouts.slice(-10)) { // –ø–æ—Å–ª–µ–¥–Ω–∏–µ 10
      console.log(`\nüí∏ –í—ã–≤–æ–¥ ${payout._id}:`);
      console.log(`   –ü–∞—Ä—Ç–Ω–µ—Ä: ${payout.partner?.username || payout.partner?.telegramId}`);
      console.log(`   –°—É–º–º–∞: ${payout.amount} USDT`);
      console.log(`   –°—Ç–∞—Ç—É—Å: ${payout.status}`);
      console.log(`   –î–∞—Ç–∞: ${payout.createdAt.toISOString()}`);
    }
    
    // 5. –°–¢–ê–¢–ò–°–¢–ò–ö–ê –°–ò–°–¢–ï–ú–´
    console.log('\n\n=== 5. –û–ë–©–ê–Ø –°–¢–ê–¢–ò–°–¢–ò–ö–ê ===');
    
    const totalUsers = await User.countDocuments();
    const totalGames = await Game.countDocuments();
    const totalTransactions = await Transaction.countDocuments();
    const totalEarnings = await ReferralEarning.countDocuments();
    
    const totalUserBalance = allUsers.reduce((sum, u) => sum + u.balance, 0);
    const totalReferralBalance = allUsers.reduce((sum, u) => sum + (u.referralStats?.referralBalance || 0), 0);
    
    console.log(`\nüìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:`);
    console.log(`   –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: ${totalUsers}`);
    console.log(`   –ò–≥—Ä: ${totalGames}`);
    console.log(`   –¢—Ä–∞–Ω–∑–∞–∫—Ü–∏–π: ${totalTransactions}`);
    console.log(`   –†–µ—Ñ–µ—Ä–∞–ª—å–Ω—ã—Ö –Ω–∞—á–∏—Å–ª–µ–Ω–∏–π: ${totalEarnings}`);
    console.log(`   –û–±—â–∏–π –±–∞–ª–∞–Ω—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: ${totalUserBalance.toFixed(2)} USDT`);
    console.log(`   –û–±—â–∏–π —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω—ã–π –±–∞–ª–∞–Ω—Å: ${totalReferralBalance.toFixed(2)} USDT`);
    
    console.log('\n‚úÖ –ö–æ–º–ø–ª–µ–∫—Å–Ω—ã–π –∞—É–¥–∏—Ç –∑–∞–≤–µ—Ä—à–µ–Ω');
    
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∞—É–¥–∏—Ç–µ:', error);
  } finally {
    mongoose.disconnect();
  }
}

comprehensiveAudit();