// backend/scripts/migrate-referral-stats.js
const mongoose = require('mongoose');
const { User } = require('../src/models');

// –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –ë–î
const MONGODB_URI = process.env.MONGODB_URI || 'mongodb://localhost:27017/greenlight';

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —É–Ω–∏–∫–∞–ª—å–Ω–æ–≥–æ —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω–æ–≥–æ –∫–æ–¥–∞
const generateReferralCode = () => {
  const chars = 'ABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789';
  let result = '';
  for (let i = 0; i < 8; i++) {
    result += chars.charAt(Math.floor(Math.random() * chars.length));
  }
  return result;
};

async function migrateReferralStats() {
  try {
    console.log('üîÑ –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö...');
    await mongoose.connect(MONGODB_URI);
    console.log('‚úÖ –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ');

    console.log('üîç –ü–æ–∏—Å–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –±–µ–∑ referralStats...');
    
    // –ù–∞—Ö–æ–¥–∏–º –≤—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –±–µ–∑ referralStats –∏–ª–∏ –±–µ–∑ referralCode
    const usersToUpdate = await User.find({
      $or: [
        { referralStats: { $exists: false } },
        { referralStats: null },
        { referralCode: { $exists: false } },
        { referralCode: null },
        { referralCode: '' }
      ]
    });

    console.log(`üìä –ù–∞–π–¥–µ–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –¥–ª—è –º–∏–≥—Ä–∞—Ü–∏–∏: ${usersToUpdate.length}`);

    if (usersToUpdate.length === 0) {
      console.log('‚úÖ –í—Å–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ —É–∂–µ –∏–º–µ—é—Ç –∞–∫—Ç—É–∞–ª—å–Ω—É—é —Å—Ç—Ä—É–∫—Ç—É—Ä—É referralStats');
      return;
    }

    let migrated = 0;
    let errors = 0;

    for (const user of usersToUpdate) {
      try {
        console.log(`üîÑ –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ${user._id} (${user.username || user.firstName})`);

        // –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º referralCode –µ—Å–ª–∏ –µ–≥–æ –Ω–µ—Ç
        if (!user.referralCode) {
          let isUnique = false;
          let attempts = 0;
          const maxAttempts = 10;
          
          while (!isUnique && attempts < maxAttempts) {
            const code = generateReferralCode();
            const existingUser = await User.findOne({ referralCode: code });
            
            if (!existingUser) {
              user.referralCode = code;
              isUnique = true;
              console.log(`  üìù –°–æ–∑–¥–∞–Ω —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω—ã–π –∫–æ–¥: ${code}`);
            }
            attempts++;
          }
          
          if (!isUnique) {
            const timestamp = Date.now().toString(36).toUpperCase();
            user.referralCode = 'REF' + timestamp.slice(-5);
            console.log(`  üìù –°–æ–∑–¥–∞–Ω —Ä–µ–∑–µ—Ä–≤–Ω—ã–π –∫–æ–¥: ${user.referralCode}`);
          }
        }

        // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º referralStats –µ—Å–ª–∏ –∏—Ö –Ω–µ—Ç
        if (!user.referralStats) {
          // –ü–æ–¥—Å—á–∏—Ç—ã–≤–∞–µ–º –∞–∫—Ç—É–∞–ª—å–Ω—É—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
          const totalReferrals = await User.countDocuments({ referrer: user._id });
          const activeReferrals = await User.countDocuments({ 
            referrer: user._id,
            lastActivity: { $gte: new Date(Date.now() - 30 * 24 * 60 * 60 * 1000) } // –∞–∫—Ç–∏–≤–Ω—ã–µ –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–µ 30 –¥–Ω–µ–π
          });

          // –û–ø—Ä–µ–¥–µ–ª—è–µ–º —É—Ä–æ–≤–µ–Ω—å –Ω–∞ –æ—Å–Ω–æ–≤–µ –∞–∫—Ç–∏–≤–Ω—ã—Ö —Ä–µ—Ñ–µ—Ä–∞–ª–æ–≤
          let level = 'bronze';
          let commissionPercent = 5;

          if (activeReferrals >= 101) {
            level = 'vip';
            commissionPercent = 15;
          } else if (activeReferrals >= 51) {
            level = 'platinum';
            commissionPercent = 12;
          } else if (activeReferrals >= 21) {
            level = 'gold';
            commissionPercent = 10;
          } else if (activeReferrals >= 6) {
            level = 'silver';
            commissionPercent = 7;
          }

          user.referralStats = {
            level: level,
            commissionPercent: commissionPercent,
            totalReferrals: totalReferrals,
            activeReferrals: activeReferrals,
            totalEarned: user.referralEarnings || 0, // –ò—Å–ø–æ–ª—å–∑—É–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ –¥–∞–Ω–Ω—ã–µ
            referralBalance: user.referralEarnings || 0, // –ü–µ—Ä–µ–Ω–æ—Å–∏–º —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π –±–∞–ª–∞–Ω—Å
            totalWithdrawn: 0,
            levelUpdatedAt: new Date(),
            lastPayoutAt: null
          };

          console.log(`  ‚úÖ –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω—ã referralStats: —É—Ä–æ–≤–µ–Ω—å ${level}, —Ä–µ—Ñ–µ—Ä–∞–ª–æ–≤ ${activeReferrals}/${totalReferrals}`);
        }

        // –°–æ—Ö—Ä–∞–Ω—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        await user.save();
        migrated++;
        console.log(`  ‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å ${user._id} —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω`);

      } catch (error) {
        console.error(`  ‚ùå –û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ${user._id}:`, error.message);
        errors++;
      }
    }

    console.log('\nüìä –ò—Ç–æ–≥–∏ –º–∏–≥—Ä–∞—Ü–∏–∏:');
    console.log(`‚úÖ –£—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω–æ: ${migrated} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π`);
    console.log(`‚ùå –û—à–∏–±–æ–∫: ${errors}`);
    console.log(`üìà –ü—Ä–æ—Ü–µ–Ω—Ç —É—Å–ø–µ—Ö–∞: ${((migrated / usersToUpdate.length) * 100).toFixed(1)}%`);

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
    console.log('\nüîç –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤...');
    const usersWithoutStats = await User.countDocuments({
      $or: [
        { referralStats: { $exists: false } },
        { referralStats: null }
      ]
    });

    const usersWithoutCode = await User.countDocuments({
      $or: [
        { referralCode: { $exists: false } },
        { referralCode: null },
        { referralCode: '' }
      ]
    });

    console.log(`üìä –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –±–µ–∑ referralStats: ${usersWithoutStats}`);
    console.log(`üìä –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –±–µ–∑ referralCode: ${usersWithoutCode}`);

    if (usersWithoutStats === 0 && usersWithoutCode === 0) {
      console.log('üéâ –ú–∏–≥—Ä–∞—Ü–∏—è –ø–æ–ª–Ω–æ—Å—Ç—å—é –∑–∞–≤–µ—Ä—à–µ–Ω–∞!');
    } else {
      console.log('‚ö†Ô∏è  –û—Å—Ç–∞–ª–∏—Å—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏');
    }

  } catch (error) {
    console.error('‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –º–∏–≥—Ä–∞—Ü–∏–∏:', error);
  } finally {
    await mongoose.disconnect();
    console.log('üîå –°–æ–µ–¥–∏–Ω–µ–Ω–∏–µ —Å –ë–î –∑–∞–∫—Ä—ã—Ç–æ');
  }
}

// –ó–∞–ø—É—Å–∫–∞–µ–º –º–∏–≥—Ä–∞—Ü–∏—é
if (require.main === module) {
  migrateReferralStats()
    .then(() => {
      console.log('‚úÖ –°–∫—Ä–∏–ø—Ç –º–∏–≥—Ä–∞—Ü–∏–∏ –∑–∞–≤–µ—Ä—à–µ–Ω');
      process.exit(0);
    })
    .catch((error) => {
      console.error('‚ùå –°–∫—Ä–∏–ø—Ç –∑–∞–≤–µ—Ä—à–µ–Ω —Å –æ—à–∏–±–∫–æ–π:', error);
      process.exit(1);
    });
}

module.exports = { migrateReferralStats };