// admin/src/commands/monitoring.command.js
const { Markup } = require('telegraf');
const axios = require('axios');

// –ü–æ–ª—É—á–∞–µ–º API URL –∏ —Ç–æ–∫–µ–Ω –∏–∑ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è
const apiUrl = process.env.API_URL || 'https://greenlight-api-ghqh.onrender.com/api';
const adminToken = process.env.ADMIN_API_TOKEN;

// –°–æ–∑–¥–∞–µ–º axios instance —Å –ø—Ä–µ–¥—É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–Ω—ã–º–∏ –∑–∞–≥–æ–ª–æ–≤–∫–∞–º–∏
const apiClient = axios.create({
  baseURL: apiUrl,
  headers: {
    'Authorization': `Bearer ${adminToken}`,
    'Content-Type': 'application/json'
  },
  timeout: 30000
});

/**
 * –ü–æ–∫–∞–∑–∞—Ç—å –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞
 */
async function showMonitoringMenu(ctx) {
  console.log('ADMIN: –ü–æ–∫–∞–∑ –º–µ–Ω—é –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞');
  
  const keyboard = Markup.inlineKeyboard([
    [Markup.button.callback('üìä –°–∏—Å—Ç–µ–º–Ω—ã–µ –º–µ—Ç—Ä–∏–∫–∏', 'monitoring_metrics')],
    [Markup.button.callback('‚ö° –ü—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å', 'monitoring_performance')],
    [Markup.button.callback('üë• –û–Ω–ª–∞–π–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏', 'monitoring_online')],
    [Markup.button.callback('üí∞ –§–∏–Ω–∞–Ω—Å–æ–≤—ã–π –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥', 'monitoring_financial')],
    [Markup.button.callback('üö® –ê–∫—Ç–∏–≤–Ω—ã–µ –∞–ª–µ—Ä—Ç—ã', 'monitoring_alerts')],
    [Markup.button.callback('üìà –ì—Ä–∞—Ñ–∏–∫–∏ –∏ —Ç—Ä–µ–Ω–¥—ã', 'monitoring_charts')],
    [Markup.button.callback('‚óÄÔ∏è –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é', 'main_menu')]
  ]);

  const message = 'üìä *–ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ —Å–∏—Å—Ç–µ–º—ã*\n\n–í—ã–±–µ—Ä–∏—Ç–µ —Ä–∞–∑–¥–µ–ª –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞:';
  
  try {
    if (ctx.callbackQuery) {
      await ctx.editMessageText(message, {
        parse_mode: 'Markdown',
        ...keyboard
      });
    } else {
      await ctx.reply(message, {
        parse_mode: 'Markdown',
        ...keyboard
      });
    }
  } catch (error) {
    console.error('ADMIN: –û—à–∏–±–∫–∞ –ø–æ–∫–∞–∑–∞ –º–µ–Ω—é –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞:', error);
    await ctx.reply(message, {
      parse_mode: 'Markdown',
      ...keyboard
    });
  }
}

/**
 * –ü–æ–∫–∞–∑–∞—Ç—å —Å–∏—Å—Ç–µ–º–Ω—ã–µ –º–µ—Ç—Ä–∏–∫–∏
 */
async function showSystemMetrics(ctx) {
  console.log('ADMIN: –ó–∞–ø—Ä–æ—Å —Å–∏—Å—Ç–µ–º–Ω—ã—Ö –º–µ—Ç—Ä–∏–∫');
  
  try {
    const response = await apiClient.get('/admin/monitoring/system-metrics');
    
    if (!response.data.success) {
      throw new Error(response.data.message || '–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –º–µ—Ç—Ä–∏–∫');
    }
    
    const metrics = response.data.data.metrics;
    
    let message = 'üìä *–°–∏—Å—Ç–µ–º–Ω—ã–µ –º–µ—Ç—Ä–∏–∫–∏*\n\n';
    
    // –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ —Å–µ—Ä–≤–µ—Ä–∞
    message += `**üíª –°–µ—Ä–≤–µ—Ä:**\n`;
    message += `üîã CPU: ${metrics.server.cpuUsage}%\n`;
    message += `üß† RAM: ${metrics.server.memoryUsage}% (${metrics.server.memoryUsed}/${metrics.server.memoryTotal} GB)\n`;
    message += `üíæ –î–∏—Å–∫: ${metrics.server.diskUsage}% (${metrics.server.diskUsed}/${metrics.server.diskTotal} GB)\n`;
    message += `‚è∞ Uptime: ${formatUptime(metrics.server.uptime)}\n\n`;
    
    // –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö
    message += `**üóÑÔ∏è –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö:**\n`;
    message += `üîó –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–π: ${metrics.database.activeConnections}/${metrics.database.maxConnections}\n`;
    message += `‚ö° –í—Ä–µ–º—è –æ—Ç–≤–µ—Ç–∞: ${metrics.database.responseTime}ms\n`;
    message += `üìä –†–∞–∑–º–µ—Ä –ë–î: ${metrics.database.size} MB\n`;
    message += `üìà –û–ø–µ—Ä–∞—Ü–∏–π/—Å–µ–∫: ${metrics.database.operationsPerSecond}\n\n`;
    
    // API
    message += `**üåê API:**\n`;
    message += `üì° –ó–∞–ø—Ä–æ—Å–æ–≤/–º–∏–Ω: ${metrics.api.requestsPerMinute}\n`;
    message += `‚è±Ô∏è –°—Ä–µ–¥–Ω–µ–µ –≤—Ä–µ–º—è –æ—Ç–≤–µ—Ç–∞: ${metrics.api.averageResponseTime}ms\n`;
    message += `‚ùå –û—à–∏–±–∫–∏: ${metrics.api.errorRate}%\n`;
    message += `üìà –£—Å–ø–µ—à–Ω—ã—Ö –∑–∞–ø—Ä–æ—Å–æ–≤: ${metrics.api.successRate}%\n\n`;
    
    // –ë–æ—Ç
    message += `**ü§ñ –¢–µ–ª–µ–≥—Ä–∞–º –±–æ—Ç:**\n`;
    message += `üë• –ê–∫—Ç–∏–≤–Ω—ã—Ö —Å–µ—Å—Å–∏–π: ${metrics.bot.activeSessions || 0}\n`;
    message += `üì® –°–æ–æ–±—â–µ–Ω–∏–π/—á–∞—Å: ${metrics.bot.messagesPerHour || 0}\n`;
    message += `‚ö° –í—Ä–µ–º—è –æ—Ç–≤–µ—Ç–∞: ${metrics.bot.responseTime || 0}ms\n`;
    
    const healthStatus = getHealthStatus(metrics);
    message += `\nüè• **–û–±—â–µ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ:** ${healthStatus.emoji} ${healthStatus.text}`;
    
    const keyboard = Markup.inlineKeyboard([
      [
        Markup.button.callback('üìà –ü–æ–¥—Ä–æ–±–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞', 'metrics_detailed'),
        Markup.button.callback('‚ö†Ô∏è –ü—Ä–æ–±–ª–µ–º—ã', 'metrics_issues')
      ],
      [
        Markup.button.callback('üîÑ –û–±–Ω–æ–≤–∏—Ç—å', 'monitoring_metrics'),
        Markup.button.callback('‚óÄÔ∏è –ù–∞–∑–∞–¥', 'monitoring_menu')
      ]
    ]);
    
    if (ctx.callbackQuery) {
      await ctx.editMessageText(message, {
        parse_mode: 'Markdown',
        ...keyboard
      });
    } else {
      await ctx.reply(message, {
        parse_mode: 'Markdown',
        ...keyboard
      });
    }
    
  } catch (error) {
    console.error('ADMIN: –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å–∏—Å—Ç–µ–º–Ω—ã—Ö –º–µ—Ç—Ä–∏–∫:', error);
    const errorMessage = `‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –º–µ—Ç—Ä–∏–∫: ${error.message}`;
    
    if (ctx.callbackQuery) {
      await ctx.answerCbQuery(errorMessage);
    } else {
      await ctx.reply(errorMessage);
    }
  }
}

/**
 * –ü–æ–∫–∞–∑–∞—Ç—å –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å
 */
async function showPerformanceMetrics(ctx) {
  console.log('ADMIN: –ó–∞–ø—Ä–æ—Å –º–µ—Ç—Ä–∏–∫ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏');
  
  try {
    const response = await apiClient.get('/admin/monitoring/performance');
    
    if (!response.data.success) {
      throw new Error(response.data.message || '–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö');
    }
    
    const perf = response.data.data.performance;
    
    let message = '‚ö° *–ü—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å —Å–∏—Å—Ç–µ–º—ã*\n\n';
    
    // –°–∫–æ—Ä–æ—Å—Ç—å –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∑–∞–ø—Ä–æ—Å–æ–≤
    message += `**üöÄ –°–∫–æ—Ä–æ—Å—Ç—å –æ–±—Ä–∞–±–æ—Ç–∫–∏:**\n`;
    message += `‚ö° –ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è: ${perf.auth.averageTime}ms\n`;
    message += `üéÆ –ò–≥—Ä–æ–≤—ã–µ –∑–∞–ø—Ä–æ—Å—ã: ${perf.games.averageTime}ms\n`;
    message += `üí∞ –§–∏–Ω–∞–Ω—Å–æ–≤—ã–µ –æ–ø–µ—Ä–∞—Ü–∏–∏: ${perf.financial.averageTime}ms\n`;
    message += `üë• –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏–µ –¥–∞–Ω–Ω—ã–µ: ${perf.users.averageTime}ms\n\n`;
    
    // –ü—Ä–æ–ø—É—Å–∫–Ω–∞—è —Å–ø–æ—Å–æ–±–Ω–æ—Å—Ç—å
    message += `**üìä –ü—Ä–æ–ø—É—Å–∫–Ω–∞—è —Å–ø–æ—Å–æ–±–Ω–æ—Å—Ç—å:**\n`;
    message += `üìà RPS (–∑–∞–ø—Ä–æ—Å–æ–≤/—Å–µ–∫): ${perf.throughput.requestsPerSecond}\n`;
    message += `üë• –û–¥–Ω–æ–≤—Ä–µ–º–µ–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: ${perf.throughput.concurrentUsers}\n`;
    message += `üéØ –ü–∏–∫–æ–≤–∞—è –Ω–∞–≥—Ä—É–∑–∫–∞: ${perf.throughput.peakLoad}\n`;
    message += `üìâ –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ —Ä–µ—Å—É—Ä—Å–æ–≤: ${perf.throughput.resourceUtilization}%\n\n`;
    
    // –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∑–∞ –ø–µ—Ä–∏–æ–¥—ã
    message += `**üìÖ –ó–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–π —á–∞—Å:**\n`;
    message += `‚úÖ –£—Å–ø–µ—à–Ω—ã—Ö –æ–ø–µ—Ä–∞—Ü–∏–π: ${perf.hourly.successful}\n`;
    message += `‚ùå –û—à–∏–±–æ–∫: ${perf.hourly.errors}\n`;
    message += `‚è±Ô∏è –°—Ä–µ–¥–Ω–µ–µ –≤—Ä–µ–º—è: ${perf.hourly.averageTime}ms\n\n`;
    
    message += `**üìÖ –ó–∞ —Å–µ–≥–æ–¥–Ω—è:**\n`;
    message += `üìä –í—Å–µ–≥–æ –∑–∞–ø—Ä–æ—Å–æ–≤: ${perf.daily.totalRequests}\n`;
    message += `üìà –ü–∏–∫–æ–≤–∞—è –Ω–∞–≥—Ä—É–∑–∫–∞: ${perf.daily.peakTime}\n`;
    message += `üéØ –í—Ä–µ–º—è –±–µ–∑–æ—Ç–∫–∞–∑–Ω–æ–π —Ä–∞–±–æ—Ç—ã: ${perf.daily.uptime}%`;
    
    // –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Å—Ç–∞—Ç—É—Å –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏
    const perfStatus = getPerformanceStatus(perf);
    message += `\n\n‚ö° **–°—Ç–∞—Ç—É—Å –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏:** ${perfStatus.emoji} ${perfStatus.text}`;
    
    const keyboard = Markup.inlineKeyboard([
      [
        Markup.button.callback('üìà –ì—Ä–∞—Ñ–∏–∫–∏ –Ω–∞–≥—Ä—É–∑–∫–∏', 'perf_charts'),
        Markup.button.callback('üîß –û–ø—Ç–∏–º–∏–∑–∞—Ü–∏—è', 'perf_optimize')
      ],
      [
        Markup.button.callback('üîÑ –û–±–Ω–æ–≤–∏—Ç—å', 'monitoring_performance'),
        Markup.button.callback('‚óÄÔ∏è –ù–∞–∑–∞–¥', 'monitoring_menu')
      ]
    ]);
    
    if (ctx.callbackQuery) {
      await ctx.editMessageText(message, {
        parse_mode: 'Markdown',
        ...keyboard
      });
    } else {
      await ctx.reply(message, {
        parse_mode: 'Markdown',
        ...keyboard
      });
    }
    
  } catch (error) {
    console.error('ADMIN: –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –º–µ—Ç—Ä–∏–∫ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏:', error);
    const errorMessage = `‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö: ${error.message}`;
    
    if (ctx.callbackQuery) {
      await ctx.answerCbQuery(errorMessage);
    } else {
      await ctx.reply(errorMessage);
    }
  }
}

/**
 * –ü–æ–∫–∞–∑–∞—Ç—å –æ–Ω–ª–∞–π–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
 */
async function showOnlineUsers(ctx) {
  console.log('ADMIN: –ó–∞–ø—Ä–æ—Å –æ–Ω–ª–∞–π–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π');
  
  try {
    const response = await apiClient.get('/admin/monitoring/online-users');
    
    if (!response.data.success) {
      throw new Error(response.data.message || '–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö');
    }
    
    const data = response.data.data;
    const online = data.online;
    
    let message = `üë• *–û–Ω–ª–∞–π–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏* (${online.total})\n\n`;
    
    // –û–±—â–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
    message += `**üìä –û–±—â–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:**\n`;
    message += `üü¢ –í—Å–µ–≥–æ –æ–Ω–ª–∞–π–Ω: ${online.total}\n`;
    message += `üéÆ –í –∏–≥—Ä–∞—Ö: ${online.inGames}\n`;
    message += `üí∞ –í —Ñ–∏–Ω–∞–Ω—Å–æ–≤—ã—Ö –æ–ø–µ—Ä–∞—Ü–∏—è—Ö: ${online.inTransactions}\n`;
    message += `üëÄ –ü—Ä–æ—Å–º–∞—Ç—Ä–∏–≤–∞—é—Ç: ${online.browsing}\n\n`;
    
    // –ü–æ –∏–≥—Ä–∞–º
    if (online.byGame && Object.keys(online.byGame).length > 0) {
      message += `**üéÆ –ü–æ –∏–≥—Ä–∞–º:**\n`;
      Object.entries(online.byGame).forEach(([game, count]) => {
        const gameEmoji = {
          'coin': 'ü™ô',
          'crash': 'üöÄ',
          'slots': 'üé∞',
          'mines': 'üí£'
        }[game] || 'üéÆ';
        
        message += `${gameEmoji} ${game}: ${count} –∏–≥—Ä–æ–∫–æ–≤\n`;
      });
      message += '\n';
    }
    
    // –ü–∏–∫–æ–≤—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è
    message += `**üìà –ü–∏–∫–æ–≤—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è:**\n`;
    message += `üîù –ü–∏–∫ –∑–∞ —Å–µ–≥–æ–¥–Ω—è: ${online.peakToday} (${online.peakTime})\n`;
    message += `üìÖ –ü–∏–∫ –∑–∞ –Ω–µ–¥–µ–ª—é: ${online.peakWeek}\n`;
    message += `üèÜ –†–µ–∫–æ—Ä–¥: ${online.allTimeRecord}\n\n`;
    
    // –ì–µ–æ–≥—Ä–∞—Ñ–∏—è (–µ—Å–ª–∏ –¥–æ—Å—Ç—É–ø–Ω–æ)
    if (online.byRegion && Object.keys(online.byRegion).length > 0) {
      message += `**üåç –ü–æ —Ä–µ–≥–∏–æ–Ω–∞–º:**\n`;
      Object.entries(online.byRegion).slice(0, 5).forEach(([region, count]) => {
        message += `üåê ${region}: ${count}\n`;
      });
      message += '\n';
    }
    
    // –ê–∫—Ç–∏–≤–Ω—ã–µ —Å–µ—Å—Å–∏–∏
    message += `**‚è∞ –î–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å —Å–µ—Å—Å–∏–π:**\n`;
    message += `üÜï –ù–æ–≤—ã–µ (< 5 –º–∏–Ω): ${online.sessionDuration.new}\n`;
    message += `‚è±Ô∏è –ö–æ—Ä–æ—Ç–∫–∏–µ (5-30 –º–∏–Ω): ${online.sessionDuration.short}\n`;
    message += `‚è∞ –°—Ä–µ–¥–Ω–∏–µ (30-120 –º–∏–Ω): ${online.sessionDuration.medium}\n`;
    message += `üïê –î–ª–∏–Ω–Ω—ã–µ (> 2 —á–∞—Å–∞): ${online.sessionDuration.long}`;
    
    const keyboard = Markup.inlineKeyboard([
      [
        Markup.button.callback('üë§ –î–µ—Ç–∞–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π', 'online_details'),
        Markup.button.callback('üìä –ê–Ω–∞–ª–∏—Ç–∏–∫–∞ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏', 'online_analytics')
      ],
      [
        Markup.button.callback('üîÑ –û–±–Ω–æ–≤–∏—Ç—å', 'monitoring_online'),
        Markup.button.callback('‚óÄÔ∏è –ù–∞–∑–∞–¥', 'monitoring_menu')
      ]
    ]);
    
    if (ctx.callbackQuery) {
      await ctx.editMessageText(message, {
        parse_mode: 'Markdown',
        ...keyboard
      });
    } else {
      await ctx.reply(message, {
        parse_mode: 'Markdown',
        ...keyboard
      });
    }
    
  } catch (error) {
    console.error('ADMIN: –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –æ–Ω–ª–∞–π–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π:', error);
    const errorMessage = `‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö: ${error.message}`;
    
    if (ctx.callbackQuery) {
      await ctx.answerCbQuery(errorMessage);
    } else {
      await ctx.reply(errorMessage);
    }
  }
}

/**
 * –ü–æ–∫–∞–∑–∞—Ç—å —Ñ–∏–Ω–∞–Ω—Å–æ–≤—ã–π –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥
 */
async function showFinancialMonitoring(ctx) {
  console.log('ADMIN: –ó–∞–ø—Ä–æ—Å —Ñ–∏–Ω–∞–Ω—Å–æ–≤–æ–≥–æ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞');
  
  try {
    const response = await apiClient.get('/admin/monitoring/financial');
    
    if (!response.data.success) {
      throw new Error(response.data.message || '–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö');
    }
    
    const financial = response.data.data.financial;
    
    let message = 'üí∞ *–§–∏–Ω–∞–Ω—Å–æ–≤—ã–π –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥*\n\n';
    
    // –¢–µ–∫—É—â–∏–µ –æ–ø–µ—Ä–∞—Ü–∏–∏
    message += `**‚ö° –ê–∫—Ç–∏–≤–Ω—ã–µ –æ–ø–µ—Ä–∞—Ü–∏–∏:**\n`;
    message += `üí≥ –î–µ–ø–æ–∑–∏—Ç—ã –≤ –æ–±—Ä–∞–±–æ—Ç–∫–µ: ${financial.active.deposits}\n`;
    message += `üí∏ –í—ã–≤–æ–¥—ã –≤ –æ–±—Ä–∞–±–æ—Ç–∫–µ: ${financial.active.withdrawals}\n`;
    message += `üéÆ –ò–≥—Ä–æ–≤—ã–µ —Å—Ç–∞–≤–∫–∏: ${financial.active.bets}\n`;
    message += `üè¶ –°—É–º–º–∞ –≤ –æ–±—Ä–∞–±–æ—Ç–∫–µ: ${financial.active.totalAmount.toFixed(2)} USDT\n\n`;
    
    // –ü–æ–∫–∞–∑–∞—Ç–µ–ª–∏ –¥–Ω—è
    message += `**üìÖ –ó–∞ —Å–µ–≥–æ–¥–Ω—è:**\n`;
    message += `üìà –î–æ—Ö–æ–¥—ã: ${financial.today.income.toFixed(2)} USDT\n`;
    message += `üìâ –†–∞—Å—Ö–æ–¥—ã: ${financial.today.expenses.toFixed(2)} USDT\n`;
    message += `üí∞ –ß–∏—Å—Ç–∞—è –ø—Ä–∏–±—ã–ª—å: ${financial.today.netProfit.toFixed(2)} USDT\n`;
    message += `üéØ ROI: ${financial.today.roi.toFixed(1)}%\n\n`;
    
    // –ê–ª–µ—Ä—Ç—ã
    if (financial.alerts && financial.alerts.length > 0) {
      message += `**üö® –§–∏–Ω–∞–Ω—Å–æ–≤—ã–µ –∞–ª–µ—Ä—Ç—ã:**\n`;
      financial.alerts.slice(0, 3).forEach(alert => {
        const alertEmoji = {
          'low_balance': '‚ö†Ô∏è',
          'high_withdrawal': 'üí∏',
          'unusual_activity': 'üîç',
          'profit_drop': 'üìâ'
        }[alert.type] || '‚ö†Ô∏è';
        
        message += `${alertEmoji} ${alert.message}\n`;
      });
      message += '\n';
    }
    
    // –ü–æ–∫–∞–∑–∞—Ç–µ–ª–∏ –ª–∏–∫–≤–∏–¥–Ω–æ—Å—Ç–∏
    message += `**üíß –õ–∏–∫–≤–∏–¥–Ω–æ—Å—Ç—å:**\n`;
    message += `üè¶ –û–±—â–∏–π –±–∞–ª–∞–Ω—Å: ${financial.liquidity.totalBalance.toFixed(2)} USDT\n`;
    message += `üí∞ –î–æ—Å—Ç—É–ø–Ω–æ: ${financial.liquidity.available.toFixed(2)} USDT\n`;
    message += `üîí –ó–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω–æ: ${financial.liquidity.locked.toFixed(2)} USDT\n`;
    message += `üìä –ö–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç –ª–∏–∫–≤–∏–¥–Ω–æ—Å—Ç–∏: ${financial.liquidity.ratio.toFixed(2)}\n\n`;
    
    // –ü—Ä–æ–≥–Ω–æ–∑—ã
    message += `**üîÆ –ü—Ä–æ–≥–Ω–æ–∑—ã:**\n`;
    message += `üìà –û–∂–∏–¥–∞–µ–º–∞—è –ø—Ä–∏–±—ã–ª—å (—á–∞—Å): ${financial.forecast.hourly.toFixed(2)} USDT\n`;
    message += `üìä –û–∂–∏–¥–∞–µ–º–∞—è –ø—Ä–∏–±—ã–ª—å (–¥–µ–Ω—å): ${financial.forecast.daily.toFixed(2)} USDT`;
    
    // –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Å—Ç–∞—Ç—É—Å —Ñ–∏–Ω–∞–Ω—Å–æ–≤
    const finStatus = getFinancialStatus(financial);
    message += `\n\nüí∞ **–§–∏–Ω–∞–Ω—Å–æ–≤—ã–π —Å—Ç–∞—Ç—É—Å:** ${finStatus.emoji} ${finStatus.text}`;
    
    const keyboard = Markup.inlineKeyboard([
      [
        Markup.button.callback('üìä –î–µ—Ç–∞–ª—å–Ω—ã–π –∞–Ω–∞–ª–∏–∑', 'financial_detailed'),
        Markup.button.callback('‚ö†Ô∏è –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Ä–∏—Å–∫–∞–º–∏', 'financial_risks')
      ],
      [
        Markup.button.callback('üîÑ –û–±–Ω–æ–≤–∏—Ç—å', 'monitoring_financial'),
        Markup.button.callback('‚óÄÔ∏è –ù–∞–∑–∞–¥', 'monitoring_menu')
      ]
    ]);
    
    if (ctx.callbackQuery) {
      await ctx.editMessageText(message, {
        parse_mode: 'Markdown',
        ...keyboard
      });
    } else {
      await ctx.reply(message, {
        parse_mode: 'Markdown',
        ...keyboard
      });
    }
    
  } catch (error) {
    console.error('ADMIN: –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Ñ–∏–Ω–∞–Ω—Å–æ–≤–æ–≥–æ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞:', error);
    const errorMessage = `‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö: ${error.message}`;
    
    if (ctx.callbackQuery) {
      await ctx.answerCbQuery(errorMessage);
    } else {
      await ctx.reply(errorMessage);
    }
  }
}

/**
 * –ü–æ–∫–∞–∑–∞—Ç—å –∞–∫—Ç–∏–≤–Ω—ã–µ –∞–ª–µ—Ä—Ç—ã
 */
async function showActiveAlerts(ctx) {
  console.log('ADMIN: –ó–∞–ø—Ä–æ—Å –∞–∫—Ç–∏–≤–Ω—ã—Ö –∞–ª–µ—Ä—Ç–æ–≤ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞');
  
  try {
    const response = await apiClient.get('/admin/monitoring/alerts');
    
    if (!response.data.success) {
      throw new Error(response.data.message || '–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∞–ª–µ—Ä—Ç–æ–≤');
    }
    
    const alerts = response.data.data.alerts;
    
    if (alerts.length === 0) {
      const message = 'üö® *–ê–∫—Ç–∏–≤–Ω—ã–µ –∞–ª–µ—Ä—Ç—ã*\n\n‚úÖ –ê–∫—Ç–∏–≤–Ω—ã—Ö –∞–ª–µ—Ä—Ç–æ–≤ –Ω–µ—Ç.';
      const keyboard = Markup.inlineKeyboard([
        [Markup.button.callback('‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –∞–ª–µ—Ä—Ç–æ–≤', 'alerts_settings')],
        [Markup.button.callback('‚óÄÔ∏è –ù–∞–∑–∞–¥', 'monitoring_menu')]
      ]);
      
      if (ctx.callbackQuery) {
        await ctx.editMessageText(message, {
          parse_mode: 'Markdown',
          ...keyboard
        });
      } else {
        await ctx.reply(message, {
          parse_mode: 'Markdown',
          ...keyboard
        });
      }
      return;
    }
    
    let message = `üö® *–ê–∫—Ç–∏–≤–Ω—ã–µ –∞–ª–µ—Ä—Ç—ã* (${alerts.length})\n\n`;
    
    const buttons = [];
    
    alerts.slice(0, 8).forEach((alert, index) => {
      const priorityEmoji = {
        'critical': 'üî¥',
        'high': 'üü†',
        'medium': 'üü°',
        'low': 'üü¢'
      }[alert.priority] || '‚ö™';
      
      const categoryEmoji = {
        'system': 'üíª',
        'performance': '‚ö°',
        'financial': 'üí∞',
        'security': 'üõ°Ô∏è',
        'user': 'üë§'
      }[alert.category] || 'üì¢';
      
      message += `${index + 1}. ${priorityEmoji} ${categoryEmoji} *${alert.title}*\n`;
      message += `   üìù ${alert.description}\n`;
      message += `   ‚è∞ ${new Date(alert.triggeredAt).toLocaleString('ru-RU')}\n`;
      
      if (alert.value) {
        message += `   üìä –ó–Ω–∞—á–µ–Ω–∏–µ: ${alert.value} ${alert.unit || ''}\n`;
      }
      
      message += '\n';
      
      // –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫–∏ –¥–µ–π—Å—Ç–≤–∏–π –¥–ª—è –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏—Ö –∞–ª–µ—Ä—Ç–æ–≤
      if (alert.priority === 'critical') {
        buttons.push([Markup.button.callback(
          `üö® –û–±—Ä–∞–±–æ—Ç–∞—Ç—å "${alert.title.substring(0, 20)}..."`, 
          `handle_alert_${alert._id}`
        )]);
      }
    });
    
    if (alerts.length > 8) {
      message += `\n... –∏ –µ—â–µ ${alerts.length - 8} –∞–ª–µ—Ä—Ç–æ–≤`;
    }
    
    // –î–æ–±–∞–≤–ª—è–µ–º –æ–±—â–∏–µ –∫–Ω–æ–ø–∫–∏
    buttons.push([
      Markup.button.callback('‚úÖ –ó–∞–∫—Ä—ã—Ç—å –≤—Å–µ', 'alerts_close_all'),
      Markup.button.callback('‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏', 'alerts_settings')
    ]);
    
    buttons.push([
      Markup.button.callback('üîÑ –û–±–Ω–æ–≤–∏—Ç—å', 'monitoring_alerts'),
      Markup.button.callback('‚óÄÔ∏è –ù–∞–∑–∞–¥', 'monitoring_menu')
    ]);
    
    const keyboard = Markup.inlineKeyboard(buttons);
    
    if (ctx.callbackQuery) {
      await ctx.editMessageText(message, {
        parse_mode: 'Markdown',
        ...keyboard
      });
    } else {
      await ctx.reply(message, {
        parse_mode: 'Markdown',
        ...keyboard
      });
    }
    
  } catch (error) {
    console.error('ADMIN: –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∞–∫—Ç–∏–≤–Ω—ã—Ö –∞–ª–µ—Ä—Ç–æ–≤:', error);
    const errorMessage = `‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∞–ª–µ—Ä—Ç–æ–≤: ${error.message}`;
    
    if (ctx.callbackQuery) {
      await ctx.answerCbQuery(errorMessage);
    } else {
      await ctx.reply(errorMessage);
    }
  }
}

// –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏
function formatUptime(seconds) {
  const days = Math.floor(seconds / 86400);
  const hours = Math.floor((seconds % 86400) / 3600);
  const minutes = Math.floor((seconds % 3600) / 60);
  
  if (days > 0) {
    return `${days}–¥ ${hours}—á ${minutes}–º`;
  } else if (hours > 0) {
    return `${hours}—á ${minutes}–º`;
  } else {
    return `${minutes}–º`;
  }
}

function getHealthStatus(metrics) {
  const cpu = metrics.server.cpuUsage;
  const memory = metrics.server.memoryUsage;
  const disk = metrics.server.diskUsage;
  const dbResponse = metrics.database.responseTime;
  
  if (cpu > 90 || memory > 90 || disk > 95 || dbResponse > 1000) {
    return { emoji: 'üî¥', text: '–ö—Ä–∏—Ç–∏—á–µ—Å–∫–æ–µ' };
  } else if (cpu > 70 || memory > 80 || disk > 85 || dbResponse > 500) {
    return { emoji: 'üü†', text: '–¢—Ä–µ–±—É–µ—Ç –≤–Ω–∏–º–∞–Ω–∏—è' };
  } else if (cpu > 50 || memory > 60 || disk > 70 || dbResponse > 200) {
    return { emoji: 'üü°', text: '–ù–æ—Ä–º–∞–ª—å–Ω–æ–µ' };
  } else {
    return { emoji: 'üü¢', text: '–û—Ç–ª–∏—á–Ω–æ–µ' };
  }
}

function getPerformanceStatus(perf) {
  const avgTime = perf.auth.averageTime + perf.games.averageTime + perf.financial.averageTime;
  const errorRate = perf.hourly.errors / (perf.hourly.successful + perf.hourly.errors) * 100;
  
  if (avgTime > 2000 || errorRate > 5) {
    return { emoji: 'üî¥', text: '–ù–∏–∑–∫–∞—è' };
  } else if (avgTime > 1000 || errorRate > 2) {
    return { emoji: 'üü†', text: '–°—Ä–µ–¥–Ω—è—è' };
  } else if (avgTime > 500 || errorRate > 1) {
    return { emoji: 'üü°', text: '–•–æ—Ä–æ—à–∞—è' };
  } else {
    return { emoji: 'üü¢', text: '–û—Ç–ª–∏—á–Ω–∞—è' };
  }
}

function getFinancialStatus(financial) {
  const ratio = financial.liquidity.ratio;
  const profit = financial.today.netProfit;
  
  if (ratio < 0.1 || profit < -1000) {
    return { emoji: 'üî¥', text: '–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∏–π' };
  } else if (ratio < 0.3 || profit < -100) {
    return { emoji: 'üü†', text: '–¢—Ä–µ–±—É–µ—Ç –≤–Ω–∏–º–∞–Ω–∏—è' };
  } else if (ratio < 0.5 || profit < 100) {
    return { emoji: 'üü°', text: '–°—Ç–∞–±–∏–ª—å–Ω—ã–π' };
  } else {
    return { emoji: 'üü¢', text: '–û—Ç–ª–∏—á–Ω—ã–π' };
  }
}

module.exports = {
  showMonitoringMenu,
  showSystemMetrics,
  showPerformanceMetrics,
  showOnlineUsers,
  showFinancialMonitoring,
  showActiveAlerts
};