// frontend/src/components/games/crash/CrashGame.js
import React, { useState, useEffect, useCallback, useRef } from 'react';
import CrashGraph from './CrashGraph';
import CrashControls from './CrashControls';
import CrashBetsList from './CrashBetsList';
import CrashHistory from './CrashHistory';
import useTactileFeedback from '../../../hooks/useTactileFeedback';
import { gameApi } from '../../../services';
import webSocketService from '../../../services/websocket.service';
import '../../../styles/CrashGame.css';

const CrashGame = ({ 
  balance = 0,
  setBalance, 
  gameStats, 
  setGameResult, 
  setError,
  userTelegramId 
}) => {
  const { 
    gameActionFeedback, 
    importantActionFeedback, 
    criticalActionFeedback,
    gameWinFeedback,
    gameLoseFeedback 
  } = useTactileFeedback();

  // –°–æ—Å—Ç–æ—è–Ω–∏–µ –∑–∞–≥—Ä—É–∑–∫–∏
  const [isInitializing, setIsInitializing] = useState(true);
  
  // –°–æ—Å—Ç–æ—è–Ω–∏–µ –∏–≥—Ä—ã
  const [gameState, setGameState] = useState('waiting');
  const [currentMultiplier, setCurrentMultiplier] = useState(1.00);
  const [timeToStart, setTimeToStart] = useState(7);
  const [crashPoint, setCrashPoint] = useState(0);
  const [loading, setLoading] = useState(false);
  const [roundId, setRoundId] = useState(null);
  
  // –°–æ—Å—Ç–æ—è–Ω–∏–µ —Å—Ç–∞–≤–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
  const [betAmount, setBetAmount] = useState(10);
  const [autoCashOut, setAutoCashOut] = useState(2.0);
  const [autoCashOutEnabled, setAutoCashOutEnabled] = useState(true);
  const [hasBet, setHasBet] = useState(false);
  const [cashedOut, setCashedOut] = useState(false);
  const [userBet, setUserBet] = useState(null);
  const [userGameId, setUserGameId] = useState(null);
  const [userCashOutMultiplier, setUserCashOutMultiplier] = useState(0);
  
  // –£–õ–£–ß–®–ï–ù–ù–û–ï: –°–æ—Å—Ç–æ—è–Ω–∏–µ –∞–≤—Ç–æ–≤—ã–≤–æ–¥–∞ —Å –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–º–∏ —Ñ–ª–∞–≥–∞–º–∏
  const [autoWithdrawn, setAutoWithdrawn] = useState(false);
  const [isApproachingAutoCashOut, setIsApproachingAutoCashOut] = useState(false);
  const [localAutoCashOutTriggered, setLocalAutoCashOutTriggered] = useState(false); // –ù–û–í–û–ï: –õ–æ–∫–∞–ª—å–Ω—ã–π —Ñ–ª–∞–≥
  const [pendingAutoCashOut, setPendingAutoCashOut] = useState(false); // –ù–û–í–û–ï: –û–∂–∏–¥–∞–Ω–∏–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è
  
  // –°—Ç–∞–≤–∫–∏ –∏ –∏—Å—Ç–æ—Ä–∏—è
  const [activeBets, setActiveBets] = useState([]);
  const [cashedOutBets, setCashedOutBets] = useState([]);
  const [history, setHistory] = useState([]);
  
  // –¢–∞–π–º–µ—Ä—ã –¥–ª—è –æ–±—Ä–∞—Ç–Ω–æ–≥–æ –æ—Ç—Å—á–µ—Ç–∞
  const countdownTimerRef = useRef(null);
  const lastMultiplierRef = useRef(1.00); // –ù–û–í–û–ï: –û—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏–µ –ø—Ä–µ–¥—ã–¥—É—â–µ–≥–æ –º–Ω–æ–∂–∏—Ç–µ–ª—è

  // –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï: –§—É–Ω–∫—Ü–∏—è –¥–ª—è –≤—ã—á–∏—Å–ª–µ–Ω–∏—è –≤—Ä–µ–º–µ–Ω–∏ –Ω–∞—á–∞–ª–∞ –∏–≥—Ä—ã –ø–æ –º–Ω–æ–∂–∏—Ç–µ–ª—é
  const calculateGameStartTime = useCallback((currentMultiplier) => {
    const elapsedSeconds = (currentMultiplier - 1) / 0.06;
    return Date.now() - (elapsedSeconds * 1000);
  }, []);

  // –£–õ–£–ß–®–ï–ù–ù–ê–Ø: –ü—Ä–æ–≤–µ—Ä–∫–∞ –∞–≤—Ç–æ–≤—ã–≤–æ–¥–∞ —Å –º–≥–Ω–æ–≤–µ–Ω–Ω—ã–º —Å—Ä–∞–±–∞—Ç—ã–≤–∞–Ω–∏–µ–º
  const checkAndTriggerAutoCashOut = useCallback(() => {
    if (!hasBet || !userBet || !autoCashOutEnabled || userBet.autoCashOut <= 0 || cashedOut || localAutoCashOutTriggered) {
      return;
    }
    
    const targetMultiplier = userBet.autoCashOut;
    const approachThreshold = targetMultiplier * 0.95; // 95% –æ—Ç —Ü–µ–ª–∏
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–∏–±–ª–∏–∂–µ–Ω–∏–µ –∫ –∞–≤—Ç–æ–≤—ã–≤–æ–¥—É
    if (currentMultiplier >= approachThreshold && currentMultiplier < targetMultiplier) {
      setIsApproachingAutoCashOut(true);
    } else if (currentMultiplier < approachThreshold) {
      setIsApproachingAutoCashOut(false);
    }
    
    // –ö–õ–Æ–ß–ï–í–ê–Ø –õ–û–ì–ò–ö–ê: –ú–≥–Ω–æ–≤–µ–Ω–Ω–æ–µ —Å—Ä–∞–±–∞—Ç—ã–≤–∞–Ω–∏–µ –∞–≤—Ç–æ–≤—ã–≤–æ–¥–∞ –ø—Ä–∏ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–∏ —Ü–µ–ª–∏
    if (currentMultiplier >= targetMultiplier && lastMultiplierRef.current < targetMultiplier) {
      console.log('üéØ –ê–í–¢–û–í–´–í–û–î –î–û–°–¢–ò–ì–ù–£–¢! –ú–Ω–æ–∂–∏—Ç–µ–ª—å:', currentMultiplier, '–¶–µ–ª—å:', targetMultiplier);
      
      // –ú–ì–ù–û–í–ï–ù–ù–û –æ–±–Ω–æ–≤–ª—è–µ–º UI
      setLocalAutoCashOutTriggered(true);
      setCashedOut(true);
      setUserCashOutMultiplier(targetMultiplier);
      setAutoWithdrawn(true);
      setIsApproachingAutoCashOut(false);
      setPendingAutoCashOut(true); // –ñ–¥–µ–º –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –æ—Ç —Å–µ—Ä–≤–µ—Ä–∞
      
      // –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º –≤—ã–∏–≥—Ä—ã—à
      const winAmount = userBet.amount * targetMultiplier;
      const profit = winAmount - userBet.amount;
      
      // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç –Ω–µ–º–µ–¥–ª–µ–Ω–Ω–æ
      setGameResult({
        win: true,
        amount: profit,
        newBalance: balance + winAmount, // –ü—Ä–µ–¥–≤–∞—Ä–∏—Ç–µ–ª—å–Ω—ã–π –±–∞–ª–∞–Ω—Å
        isAutoCashOut: true,
        multiplier: targetMultiplier
      });
      
      gameWinFeedback();
      
      console.log('üéâ UI –æ–±–Ω–æ–≤–ª–µ–Ω –º–≥–Ω–æ–≤–µ–Ω–Ω–æ, –æ–∂–∏–¥–∞–µ–º –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –æ—Ç —Å–µ—Ä–≤–µ—Ä–∞');
    }
    
    // –û–±–Ω–æ–≤–ª—è–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–π –º–Ω–æ–∂–∏—Ç–µ–ª—å
    lastMultiplierRef.current = currentMultiplier;
  }, [hasBet, userBet, autoCashOutEnabled, currentMultiplier, cashedOut, localAutoCashOutTriggered, balance, setGameResult, gameWinFeedback]);

  // –ù–û–í–û–ï: –û—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏–µ –∏–∑–º–µ–Ω–µ–Ω–∏–π –º–Ω–æ–∂–∏—Ç–µ–ª—è –¥–ª—è –∞–≤—Ç–æ–≤—ã–≤–æ–¥–∞
  useEffect(() => {
    if (gameState === 'flying') {
      checkAndTriggerAutoCashOut();
    }
  }, [currentMultiplier, gameState, checkAndTriggerAutoCashOut]);

  // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è WebSocket –∏ –∑–∞–≥—Ä—É–∑–∫–∞ –Ω–∞—á–∞–ª—å–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö
  useEffect(() => {
    const initializeGame = async () => {
      try {
        console.log('=== –ò–ù–ò–¶–ò–ê–õ–ò–ó–ê–¶–ò–Ø –ö–†–ê–® –ò–ì–†–´ ===');
        
        await webSocketService.connect(userTelegramId);
        webSocketService.joinCrash();
        
        const stateResponse = await gameApi.getCrashState();
        if (stateResponse.success) {
          updateGameState(stateResponse.data);
        }
        
        const historyResponse = await gameApi.getCrashHistory();
        if (historyResponse.success) {
          setHistory(historyResponse.data);
        } else {
          setHistory([]);
        }
        
        setIsInitializing(false);
        
      } catch (err) {
        console.error('–û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏:', err);
        setError('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∏–≥—Ä—ã');
        setIsInitializing(false);
      }
    };
    
    initializeGame();
    
    return () => {
      if (countdownTimerRef.current) {
        clearInterval(countdownTimerRef.current);
      }
      webSocketService.leaveCrash();
    };
  }, [userTelegramId, setError]);

  // –ü–æ–¥–ø–∏—Å–∫–∞ –Ω–∞ WebSocket —Å–æ–±—ã—Ç–∏—è
  useEffect(() => {
    if (isInitializing) return;

    // –ù–æ–≤—ã–π —Ä–∞—É–Ω–¥
    const unsubNewRound = webSocketService.on('crash_new_round', (data) => {
      console.log('üéÆ –ù–æ–≤—ã–π —Ä–∞—É–Ω–¥:', data);
      setGameState('waiting');
      setRoundId(data.roundId);
      setTimeToStart(data.timeToStart || 7);
      setCurrentMultiplier(1.00);
      lastMultiplierRef.current = 1.00; // –ù–û–í–û–ï: –°–±—Ä–æ—Å –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è
      setCrashPoint(0);
      
      // –ü–û–õ–ù–´–ô —Å–±—Ä–æ—Å —Å–æ—Å—Ç–æ—è–Ω–∏—è —Å—Ç–∞–≤–∫–∏ –¥–ª—è –Ω–æ–≤–æ–≥–æ —Ä–∞—É–Ω–¥–∞
      setHasBet(false);
      setCashedOut(false);
      setUserBet(null);
      setUserGameId(null);
      setUserCashOutMultiplier(0);
      setAutoWithdrawn(false);
      setIsApproachingAutoCashOut(false);
      setLocalAutoCashOutTriggered(false); // –ù–û–í–û–ï: –°–±—Ä–æ—Å –ª–æ–∫–∞–ª—å–Ω–æ–≥–æ —Ñ–ª–∞–≥–∞
      setPendingAutoCashOut(false); // –ù–û–í–û–ï: –°–±—Ä–æ—Å –æ–∂–∏–¥–∞–Ω–∏—è
      
      setTimeout(() => {
        setGameResult(null);
      }, 3000);
      
      setActiveBets([]);
      setCashedOutBets([]);
      
      startCountdown(data.timeToStart || 7);
    });

    // –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –æ–±—Ä–∞—Ç–Ω–æ–≥–æ –æ—Ç—Å—á–µ—Ç–∞
    const unsubCountdown = webSocketService.on('crash_countdown_update', (data) => {
      setTimeToStart(data.timeToStart);
    });

    // –ò–≥—Ä–∞ –Ω–∞—á–∞–ª–∞—Å—å
    const unsubGameStarted = webSocketService.on('crash_game_started', (data) => {
      console.log('üöÄ –ò–≥—Ä–∞ –Ω–∞—á–∞–ª–∞—Å—å:', data);
      setGameState('flying');
      setCurrentMultiplier(1.00);
      lastMultiplierRef.current = 1.00; // –ù–û–í–û–ï: –°–±—Ä–æ—Å –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è
      
      if (countdownTimerRef.current) {
        clearInterval(countdownTimerRef.current);
      }
    });

    // –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –º–Ω–æ–∂–∏—Ç–µ–ª—è
    const unsubMultiplierUpdate = webSocketService.on('crash_multiplier_update', (data) => {
      setCurrentMultiplier(data.multiplier);
      // lastMultiplierRef.current –±—É–¥–µ—Ç –æ–±–Ω–æ–≤–ª–µ–Ω –≤ checkAndTriggerAutoCashOut
    });

    // –ò–≥—Ä–∞ —Ä–∞–∑–±–∏–ª–∞—Å—å
    const unsubGameCrashed = webSocketService.on('crash_game_crashed', (data) => {
      console.log('üí• –ò–≥—Ä–∞ —Ä–∞–∑–±–∏–ª–∞—Å—å:', data);
      setGameState('crashed');
      setCrashPoint(data.crashPoint);
      setCurrentMultiplier(data.crashPoint);
      
      loadHistory();
      
      // –£–õ–£–ß–®–ï–ù–ù–ê–Ø –ª–æ–≥–∏–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø—Ä–æ–∏–≥—Ä—ã—à–∞
      const checkForLoss = () => {
        // –ï—Å–ª–∏ —É–∂–µ –µ—Å—Ç—å —Ä–µ–∑—É–ª—å—Ç–∞—Ç –∏–ª–∏ —É–∂–µ –≤—ã–≤–µ–¥–µ–Ω–æ - –Ω–µ –ø–µ—Ä–µ–∑–∞–ø–∏—Å—ã–≤–∞–µ–º
        setGameResult(prevResult => {
          if (prevResult && prevResult.win) {
            console.log('–ï—Å—Ç—å —Ä–µ–∑—É–ª—å—Ç–∞—Ç –≤—ã–∏–≥—Ä—ã—à–∞, –Ω–µ –ø–µ—Ä–µ–∑–∞–ø–∏—Å—ã–≤–∞–µ–º');
            return prevResult;
          }
          
          setCashedOut(currentCashedOut => {
            // –ï—Å–ª–∏ —É–∂–µ –≤—ã–≤–µ–¥–µ–Ω–æ –∏–ª–∏ —Å—Ä–∞–±–æ—Ç–∞–ª –ª–æ–∫–∞–ª—å–Ω—ã–π –∞–≤—Ç–æ–≤—ã–≤–æ–¥ - –Ω–µ –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –ø—Ä–æ–∏–≥—Ä—ã—à
            if (currentCashedOut || localAutoCashOutTriggered) {
              console.log('–£–∂–µ –≤—ã–≤–µ–¥–µ–Ω–æ, –Ω–µ –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –ø—Ä–æ–∏–≥—Ä—ã—à');
              return currentCashedOut;
            }
            
            // –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ —Å—Ç–∞–≤–∫–∏
            if (hasBet && userBet) {
              console.log('–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –ø—Ä–æ–∏–≥—Ä–∞–ª - –Ω–µ —É—Å–ø–µ–ª –≤—ã–≤–µ—Å—Ç–∏');
              gameLoseFeedback();
              setGameResult({
                win: false,
                amount: userBet.amount || 0,
                newBalance: balance
              });
            }
            
            return currentCashedOut;
          });
          
          return prevResult;
        });
      };
      
      setTimeout(checkForLoss, 100);
    });

    // –ù–æ–≤–∞—è —Å—Ç–∞–≤–∫–∞
    const unsubBetPlaced = webSocketService.on('crash_bet_placed', (data) => {
      console.log('üí∞ –ù–æ–≤–∞—è —Å—Ç–∞–≤–∫–∞ –ø–æ–ª—É—á–µ–Ω–∞:', data);
      
      const newBet = {
        id: `bet-${data.userId}-${data.amount}-${Date.now()}`,
        userId: data.userId,
        username: data.username || '–ò–≥—Ä–æ–∫',
        amount: data.amount,
        autoCashOut: data.autoCashOut || 0,
        isCurrentUser: data.userId === userTelegramId
      };
      
      setActiveBets(prev => {
        const exists = prev.find(bet => bet.userId === data.userId);
        if (exists) {
          console.log('–°—Ç–∞–≤–∫–∞ —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º');
          return prev;
        }
        
        return [...prev, newBet];
      });
    });

    // –£–õ–£–ß–®–ï–ù–ù–´–ô: –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–π –∫–µ—à–∞—É—Ç —Å –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ–º
    const unsubAutoCashOut = webSocketService.on('crash_auto_cash_out', (data) => {
      console.log('ü§ñ –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –∞–≤—Ç–æ–∫–µ—à–∞—É—Ç–∞ –æ—Ç —Å–µ—Ä–≤–µ—Ä–∞:', data);
      
      if (data.userId === userTelegramId) {
        console.log('üéØ –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –Ω–∞—à–µ–≥–æ –∞–≤—Ç–æ–≤—ã–≤–æ–¥–∞');
        
        // –û–±–Ω–æ–≤–ª—è–µ–º –±–∞–ª–∞–Ω—Å —Ç–æ—á–Ω—ã–º–∏ –¥–∞–Ω–Ω—ã–º–∏ –æ—Ç —Å–µ—Ä–≤–µ—Ä–∞
        if (data.balanceAfter !== undefined) {
          setBalance(data.balanceAfter);
        }
        
        // –£–±–∏—Ä–∞–µ–º —Ñ–ª–∞–≥ –æ–∂–∏–¥–∞–Ω–∏—è
        setPendingAutoCashOut(false);
        
        // –û–±–Ω–æ–≤–ª—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç —Ç–æ—á–Ω—ã–º–∏ –¥–∞–Ω–Ω—ã–º–∏
        setGameResult(prevResult => ({
          ...prevResult,
          amount: data.profit || prevResult.amount,
          newBalance: data.balanceAfter || prevResult.newBalance
        }));
        
        console.log('‚úÖ –ê–≤—Ç–æ–≤—ã–≤–æ–¥ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω —Å–µ—Ä–≤–µ—Ä–æ–º');
      }
      
      handleCashOutEvent(data, true);
    });

    // –†—É—á–Ω–æ–π –∫–µ—à–∞—É—Ç
    const unsubManualCashOut = webSocketService.on('crash_manual_cash_out', (data) => {
      console.log('üí∏ –†—É—á–Ω–æ–π –∫–µ—à–∞—É—Ç:', data);
      handleCashOutEvent(data, false);
    });

    // –¢–µ–∫—É—â–µ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –∏–≥—Ä—ã
    const unsubGameState = webSocketService.on('crash_game_state', (data) => {
      console.log('üìä –°–æ—Å—Ç–æ—è–Ω–∏–µ –∏–≥—Ä—ã:', data);
      updateGameState(data);
    });

    // –†–∞—É–Ω–¥ –∑–∞–≤–µ—Ä—à–µ–Ω
    const unsubRoundCompleted = webSocketService.on('crash_round_completed', (data) => {
      console.log('‚úÖ –†–∞—É–Ω–¥ –∑–∞–≤–µ—Ä—à–µ–Ω:', data);
    });

    // –£–õ–£–ß–®–ï–ù–ù–ê–Ø —Ñ—É–Ω–∫—Ü–∏—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∫–µ—à–∞—É—Ç–∞
    const handleCashOutEvent = (data, isAutomatic = false) => {
      console.log('üí∏ –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–µ—à–∞—É—Ç–∞:', data, '–ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–π:', isAutomatic);
      
      if (!data.userId || !data.amount || !data.multiplier) {
        console.warn('–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –∫–µ—à–∞—É—Ç–∞:', data);
        return;
      }
      
      // –£–±–∏—Ä–∞–µ–º –∏–∑ –∞–∫—Ç–∏–≤–Ω—ã—Ö —Å—Ç–∞–≤–æ–∫
      setActiveBets(prev => prev.filter(bet => bet.userId !== data.userId));
      
      // –î–æ–±–∞–≤–ª—è–µ–º –≤ –≤—ã–≤–µ–¥–µ–Ω–Ω—ã–µ —Å—Ç–∞–≤–∫–∏
      const cashOutEntry = {
        id: `cashout-${data.userId}-${Date.now()}`,
        userId: data.userId,
        username: data.username || '–ò–≥—Ä–æ–∫',
        amount: data.amount,
        cashOutMultiplier: data.multiplier,
        winAmount: data.amount * data.multiplier,
        isCurrentUser: data.userId === userTelegramId
      };
      
      setCashedOutBets(prev => {
        const exists = prev.find(bet => bet.userId === data.userId && 
          Math.abs(bet.cashOutMultiplier - data.multiplier) < 0.01);
        if (exists) {
          return prev;
        }
        return [...prev, cashOutEntry];
      });
      
      // –ï—Å–ª–∏ —ç—Ç–æ –ù–ï –Ω–∞—à –∞–≤—Ç–æ–≤—ã–≤–æ–¥ (–∫–æ—Ç–æ—Ä—ã–π —É–∂–µ –æ–±—Ä–∞–±–æ—Ç–∞–Ω –ª–æ–∫–∞–ª—å–Ω–æ)
      if (data.userId === userTelegramId && !localAutoCashOutTriggered) {
        console.log('üéØ –û–±—ã—á–Ω—ã–π –∫–µ—à–∞—É—Ç (–Ω–µ –∞–≤—Ç–æ–≤—ã–≤–æ–¥)');
        
        setCashedOut(true);
        setUserCashOutMultiplier(data.multiplier);
        
        if (isAutomatic) {
          setAutoWithdrawn(true);
        }
        
        if (data.balanceAfter !== undefined) {
          setBalance(data.balanceAfter);
        }
        
        setGameResult({
          win: true,
          amount: data.profit || (data.amount * data.multiplier - data.amount),
          newBalance: data.balanceAfter,
          isAutoCashOut: isAutomatic,
          multiplier: data.multiplier
        });
        
        gameWinFeedback();
      }
    };

    return () => {
      unsubNewRound();
      unsubCountdown();
      unsubGameStarted();
      unsubMultiplierUpdate();
      unsubGameCrashed();
      unsubBetPlaced();
      unsubAutoCashOut();
      unsubManualCashOut();
      unsubGameState();
      unsubRoundCompleted();
    };
  }, [isInitializing, hasBet, cashedOut, userBet, balance, userTelegramId, autoCashOutEnabled, gameLoseFeedback, gameWinFeedback, setGameResult, startCountdown, loadHistory, updateGameState, gameState, localAutoCashOutTriggered]);

  // –ò–°–ü–†–ê–í–õ–ï–ù–ù–û–ï –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å–æ—Å—Ç–æ—è–Ω–∏—è –∏–≥—Ä—ã
  const updateGameState = useCallback((state) => {
    console.log('üìä –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å–æ—Å—Ç–æ—è–Ω–∏—è –∏–≥—Ä—ã:', state);
    
    if (!state || typeof state !== 'object') {
      console.warn('–ü–æ–ª—É—á–µ–Ω–æ –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –∏–≥—Ä—ã:', state);
      return;
    }
    
    setGameState(state.status || 'waiting');
    setRoundId(state.roundId || null);
    
    if (state.status === 'flying' && state.currentMultiplier > 1.0) {
      console.log('–ö–†–ê–®: –í–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∞–∫—Ç–∏–≤–Ω—É—é –∏–≥—Ä—É —Å –º–Ω–æ–∂–∏—Ç–µ–ª–µ–º:', state.currentMultiplier);
      
      const calculatedStartTime = calculateGameStartTime(state.currentMultiplier);
      console.log('–ö–†–ê–®: –í—ã—á–∏—Å–ª–µ–Ω–Ω–æ–µ –≤—Ä–µ–º—è –Ω–∞—á–∞–ª–∞ –∏–≥—Ä—ã:', new Date(calculatedStartTime));
      
      setCurrentMultiplier(state.currentMultiplier);
      lastMultiplierRef.current = state.currentMultiplier; // –ù–û–í–û–ï: –û–±–Ω–æ–≤–ª—è–µ–º –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏–µ
      
      window.crashGameStartTime = calculatedStartTime;
    } else if (state.currentMultiplier !== undefined && state.currentMultiplier > 0) {
      setCurrentMultiplier(state.currentMultiplier);
      lastMultiplierRef.current = state.currentMultiplier; // –ù–û–í–û–ï: –û–±–Ω–æ–≤–ª—è–µ–º –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏–µ
    }
    
    if (state.status === 'waiting' && state.timeToStart > 0) {
      setTimeToStart(state.timeToStart);
      startCountdown(state.timeToStart);
    }
    
    if (state.bets && Array.isArray(state.bets)) {
      const active = [];
      const cashedOut = [];
      
      state.bets.forEach(bet => {
        if (!bet.userId || !bet.amount) {
          console.warn('–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–∞—è —Å—Ç–∞–≤–∫–∞:', bet);
          return;
        }
        
        const betData = {
          id: `bet-${bet.userId}-${bet.amount}-${Date.now()}`,
          userId: bet.userId,
          username: bet.username || '–ò–≥—Ä–æ–∫',
          amount: bet.amount,
          autoCashOut: bet.autoCashOut || 0,
          isCurrentUser: bet.userId === userTelegramId
        };
        
        if (bet.cashedOut) {
          cashedOut.push({
            ...betData,
            cashOutMultiplier: bet.cashOutMultiplier || 0,
            winAmount: (bet.amount || 0) * (bet.cashOutMultiplier || 0)
          });
        } else {
          active.push(betData);
        }
        
        if (bet.userId === userTelegramId) {
          console.log('üéØ –ù–∞–π–¥–µ–Ω–∞ –Ω–∞—à–∞ —Å—Ç–∞–≤–∫–∞ –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–∏ –∏–≥—Ä—ã:', bet);
          setHasBet(true);
          
          if (bet.cashedOut) {
            console.log('üéØ –ù–∞—à–∞ —Å—Ç–∞–≤–∫–∞ —É–∂–µ –≤—ã–≤–µ–¥–µ–Ω–∞, –æ–±–Ω–æ–≤–ª—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ');
            setCashedOut(true);
            if (bet.cashOutMultiplier) {
              setUserCashOutMultiplier(bet.cashOutMultiplier);
            }
          } else {
            console.log('üéØ –ù–∞—à–∞ —Å—Ç–∞–≤–∫–∞ –∞–∫—Ç–∏–≤–Ω–∞');
            setCashedOut(false);
            setUserCashOutMultiplier(0);
            setAutoWithdrawn(false);
            setLocalAutoCashOutTriggered(false); // –ù–û–í–û–ï: –°–±—Ä–æ—Å –ª–æ–∫–∞–ª—å–Ω–æ–≥–æ —Ñ–ª–∞–≥–∞
          }
          
          setUserBet({
            amount: bet.amount,
            autoCashOut: bet.autoCashOut || 0
          });
        }
      });
      
      console.log('–û–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–µ —Å—Ç–∞–≤–∫–∏ –∏–∑ —Å–æ—Å—Ç–æ—è–Ω–∏—è –∏–≥—Ä—ã:', { active, cashedOut });
      setActiveBets(active);
      setCashedOutBets(cashedOut);
    } else {
      if (state.status === 'waiting') {
        setActiveBets([]);
        setCashedOutBets([]);
      }
    }
  }, [userTelegramId, startCountdown, calculateGameStartTime]);

  // –û–±—Ä–∞—Ç–Ω—ã–π –æ—Ç—Å—á–µ—Ç
  const startCountdown = useCallback((seconds) => {
    if (countdownTimerRef.current) {
      clearInterval(countdownTimerRef.current);
    }
    
    let remaining = seconds;
    setTimeToStart(remaining);
    
    countdownTimerRef.current = setInterval(() => {
      remaining -= 1;
      setTimeToStart(remaining);
      
      if (remaining <= 0) {
        clearInterval(countdownTimerRef.current);
        countdownTimerRef.current = null;
      }
    }, 1000);
  }, []);

  // –ó–∞–≥—Ä—É–∑–∫–∞ –∏—Å—Ç–æ—Ä–∏–∏
  const loadHistory = useCallback(async () => {
    try {
      console.log('–ö–†–ê–®: –ü–µ—Ä–µ–∑–∞–≥—Ä—É–∂–∞–µ–º –∏—Å—Ç–æ—Ä–∏—é...');
      const response = await gameApi.getCrashHistory();
      if (response.success) {
        setHistory(response.data);
      } else {
        setHistory([]);
      }
    } catch (err) {
      console.error('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∏—Å—Ç–æ—Ä–∏–∏:', err);
      setHistory([]);
    }
  }, []);

  // –†–∞–∑–º–µ—â–µ–Ω–∏–µ —Å—Ç–∞–≤–∫–∏
  const placeBet = useCallback(async () => {
    if (gameState !== 'waiting' || hasBet || betAmount <= 0 || betAmount > balance || loading) {
      return;
    }
    
    try {
      setLoading(true);
      gameActionFeedback();
      
      const finalAutoCashOut = autoCashOutEnabled && autoCashOut && !isNaN(autoCashOut) ? autoCashOut : 0;
      const response = await gameApi.placeCrashBet(betAmount, finalAutoCashOut);
      
      if (response.success) {
        console.log('‚úÖ –°—Ç–∞–≤–∫–∞ —Ä–∞–∑–º–µ—â–µ–Ω–∞:', response.data);
        
        setBalance(response.data.balanceAfter);
        
        setHasBet(true);
        setCashedOut(false);
        setUserCashOutMultiplier(0);
        setAutoWithdrawn(false);
        setLocalAutoCashOutTriggered(false); // –ù–û–í–û–ï: –°–±—Ä–æ—Å –ª–æ–∫–∞–ª—å–Ω–æ–≥–æ —Ñ–ª–∞–≥–∞
        setPendingAutoCashOut(false); // –ù–û–í–û–ï: –°–±—Ä–æ—Å –æ–∂–∏–¥–∞–Ω–∏—è
        setUserBet({
          amount: betAmount,
          autoCashOut: finalAutoCashOut
        });
        setUserGameId(response.data.gameId);
      }
      
    } catch (err) {
      console.error('‚ùå –û—à–∏–±–∫–∞ —Ä–∞–∑–º–µ—â–µ–Ω–∏—è —Å—Ç–∞–≤–∫–∏:', err);
      setError(err.response?.data?.message || '–û—à–∏–±–∫–∞ —Ä–∞–∑–º–µ—â–µ–Ω–∏—è —Å—Ç–∞–≤–∫–∏');
    } finally {
      setLoading(false);
    }
  }, [gameState, hasBet, betAmount, balance, loading, autoCashOut, autoCashOutEnabled, userTelegramId, setBalance, setError, gameActionFeedback]);

  // –ö–µ—à–∞—É—Ç
  const cashOut = useCallback(async () => {
    if (gameState !== 'flying' || !hasBet || cashedOut || loading) {
      return;
    }
    
    try {
      setLoading(true);
      criticalActionFeedback();
      
      const response = await gameApi.cashOutCrash();
      
      if (response.success) {
        setBalance(response.data.balanceAfter);
        setCashedOut(true);
        setUserCashOutMultiplier(response.data.multiplier);
        
        setGameResult({
          win: true,
          amount: response.data.profit,
          newBalance: response.data.balanceAfter
        });
        
        gameWinFeedback();
        
        console.log('‚úÖ –ö–µ—à–∞—É—Ç —É—Å–ø–µ—à–µ–Ω:', response.data);
      }
      
    } catch (err) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –∫–µ—à–∞—É—Ç–∞:', err);
      setError(err.response?.data?.message || '–û—à–∏–±–∫–∞ –≤—ã–≤–æ–¥–∞ —Å—Ç–∞–≤–∫–∏');
    } finally {
      setLoading(false);
    }
  }, [gameState, hasBet, cashedOut, loading, setBalance, setError, setGameResult, criticalActionFeedback, gameWinFeedback]);

  // –£–õ–£–ß–®–ï–ù–ù–ê–Ø —Ñ—É–Ω–∫—Ü–∏—è –ø–æ–ª—É—á–µ–Ω–∏—è —Ç–µ–∫—Å—Ç–∞ –¥–ª—è –≥–ª–∞–≤–Ω–æ–π –∫–Ω–æ–ø–∫–∏
  const getMainButtonText = () => {
    if (loading) return '–ó–∞–≥—Ä—É–∑–∫–∞...';
    
    console.log('üîç –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —Ç–µ–∫—Å—Ç–∞ –∫–Ω–æ–ø–∫–∏:', {
      gameState,
      hasBet,
      cashedOut,
      localAutoCashOutTriggered,
      autoWithdrawn,
      userCashOutMultiplier,
      userBet,
      currentMultiplier,
      autoCashOutEnabled,
      isApproachingAutoCashOut,
      pendingAutoCashOut
    });
    
    switch (gameState) {
      case 'waiting':
        if (hasBet && userBet) return `–°—Ç–∞–≤–∫–∞ —Ä–∞–∑–º–µ—â–µ–Ω–∞ (${userBet.amount || 0} USDT)`;
        return `–ü–æ—Å—Ç–∞–≤–∏—Ç—å ${betAmount || 0} USDT`;
      case 'flying':
        if (!hasBet) return '–°—Ç–∞–≤–∫–∞ –Ω–µ —Ä–∞–∑–º–µ—â–µ–Ω–∞';
        
        // –ö–õ–Æ–ß–ï–í–û–ï –£–õ–£–ß–®–ï–ù–ò–ï: –ü—Ä–æ–≤–µ—Ä—è–µ–º –ª–æ–∫–∞–ª—å–Ω—ã–π –∞–≤—Ç–æ–≤—ã–≤–æ–¥ –ü–ï–†–í–´–ú –¥–µ–ª–æ–º
        if (localAutoCashOutTriggered || (cashedOut && userCashOutMultiplier > 0)) {
          const multiplier = userCashOutMultiplier || (userBet && userBet.autoCashOut) || currentMultiplier;
          
          if (pendingAutoCashOut) {
            return `–ê–≤—Ç–æ–≤—ã–≤–æ–¥ –≤—ã–ø–æ–ª–Ω–µ–Ω (${multiplier.toFixed(2)}x) ‚è≥`;
          } else if (autoWithdrawn || localAutoCashOutTriggered) {
            return `–ê–≤—Ç–æ–≤—ã–≤–µ–¥–µ–Ω–æ –ø—Ä–∏ ${multiplier.toFixed(2)}x`;
          } else {
            return `–í—ã–≤–µ–¥–µ–Ω–æ –ø—Ä–∏ ${multiplier.toFixed(2)}x`;
          }
        }
        
        // –ï—Å–ª–∏ –ø—Ä–∏–±–ª–∏–∂–∞–µ–º—Å—è –∫ –∞–≤—Ç–æ–≤—ã–≤–æ–¥—É
        if (isApproachingAutoCashOut && autoCashOutEnabled && userBet && userBet.autoCashOut > 0) {
          return `–ê–≤—Ç–æ–≤—ã–≤–æ–¥ –ø—Ä–∏–±–ª–∏–∂–∞–µ—Ç—Å—è (${userBet.autoCashOut}x)`;
        }
        
        // –ï—Å–ª–∏ –µ—Å—Ç—å —Å—Ç–∞–≤–∫–∞ –∏ –ù–ï –≤—ã–≤–µ–¥–µ–Ω–æ - –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –∫–Ω–æ–ø–∫—É –≤—ã–≤–æ–¥–∞
        if (userBet && !cashedOut && !localAutoCashOutTriggered) {
          return `–í—ã–≤–µ—Å—Ç–∏ (${((userBet.amount || 0) * (currentMultiplier || 1)).toFixed(2)} USDT)`;
        }
        
        return '–í—ã–≤–µ—Å—Ç–∏';
      case 'crashed':
        if (hasBet && !cashedOut && !localAutoCashOutTriggered) return '–ü—Ä–æ–∏–≥—Ä—ã—à';
        if (hasBet && (cashedOut || localAutoCashOutTriggered) && userCashOutMultiplier > 0) {
          if (autoWithdrawn || localAutoCashOutTriggered) {
            return `–ê–≤—Ç–æ–≤—ã–∏–≥—Ä—ã—à ${userCashOutMultiplier.toFixed(2)}x`;
          } else {
            return `–í—ã–∏–≥—Ä—ã—à ${userCashOutMultiplier.toFixed(2)}x`;
          }
        }
        return '–†–∞—É–Ω–¥ –∑–∞–≤–µ—Ä—à–µ–Ω';
      default:
        return '–û—à–∏–±–∫–∞ —Å–æ—Å—Ç–æ—è–Ω–∏—è';
    }
  };

  // –£–õ–£–ß–®–ï–ù–ù–ê–Ø —Ñ—É–Ω–∫—Ü–∏—è –ø–æ–ª—É—á–µ–Ω–∏—è –∫–ª–∞—Å—Å–∞ –¥–ª—è –≥–ª–∞–≤–Ω–æ–π –∫–Ω–æ–ø–∫–∏
  const getMainButtonClass = () => {
    if (loading) return 'loading';
    
    console.log('üîç –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –∫–ª–∞—Å—Å–∞ –∫–Ω–æ–ø–∫–∏:', {
      gameState,
      hasBet,
      cashedOut,
      localAutoCashOutTriggered,
      autoWithdrawn,
      userCashOutMultiplier,
      isApproachingAutoCashOut
    });
    
    switch (gameState) {
      case 'waiting':
        if (hasBet) return 'placed';
        return 'bet';
      case 'flying':
        if (!hasBet) return 'disabled';
        
        // –ö–õ–Æ–ß–ï–í–û–ï –£–õ–£–ß–®–ï–ù–ò–ï: –ï—Å–ª–∏ –ª–æ–∫–∞–ª—å–Ω—ã–π –∞–≤—Ç–æ–≤—ã–≤–æ–¥ —Å—Ä–∞–±–æ—Ç–∞–ª –∏–ª–∏ –≤—ã–≤–µ–¥–µ–Ω–æ - –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –≤—ã–∏–≥—Ä—ã—à
        if (localAutoCashOutTriggered || (cashedOut && userCashOutMultiplier > 0)) return 'won';
        
        // –ï—Å–ª–∏ –ø—Ä–∏–±–ª–∏–∂–∞–µ—Ç—Å—è –∞–≤—Ç–æ–≤—ã–≤–æ–¥ - –¥—Ä—É–≥–æ–π —Å—Ç–∏–ª—å
        if (isApproachingAutoCashOut) return 'approaching-auto';
        
        // –ï—Å–ª–∏ –µ—Å—Ç—å —Å—Ç–∞–≤–∫–∞ –∏ –ù–ï –≤—ã–≤–µ–¥–µ–Ω–æ - –∫–Ω–æ–ø–∫–∞ –∫–µ—à–∞—É—Ç–∞
        return 'cashout';
      case 'crashed':
        if (hasBet && !cashedOut && !localAutoCashOutTriggered) return 'lost';
        if (hasBet && (cashedOut || localAutoCashOutTriggered)) return 'won';
        return 'disabled';
      default:
        return 'disabled';
    }
  };

  // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≥–ª–∞–≤–Ω–æ–π –∫–Ω–æ–ø–∫–∏
  const handleMainButtonClick = () => {
    if (loading) return;
    
    switch (gameState) {
      case 'waiting':
        if (!hasBet) {
          placeBet();
        }
        break;
      case 'flying':
        // –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï: –†–∞–∑—Ä–µ—à–∞–µ–º –∫–µ—à–∞—É—Ç —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –µ—Å—Ç—å —Å—Ç–∞–≤–∫–∞ –∏ –ù–ï –≤—ã–≤–µ–¥–µ–Ω–æ
        if (hasBet && !cashedOut && !localAutoCashOutTriggered) {
          cashOut();
        }
        break;
      default:
        break;
    }
  };

  // –ó–∞–≥—Ä—É–∑–æ—á–Ω—ã–π —ç–∫—Ä–∞–Ω
  if (isInitializing) {
    return (
      <div className="crash-loading-screen">
        <div className="crash-loading-content">
          <div className="greenlight-logo">
            <div className="logo-icon">üöÄ</div>
            <div className="logo-text">Greenlight</div>
            <div className="logo-subtitle">Crash Game</div>
          </div>
          <div className="loading-spinner">
            <div className="spinner-ring"></div>
            <div className="spinner-ring"></div>
            <div className="spinner-ring"></div>
          </div>
          <div className="loading-text">–ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ —Å–µ—Ä–≤–µ—Ä—É...</div>
        </div>
      </div>
    );
  }

  return (
    <div className={`crash-game ${loading ? 'loading' : ''}`} data-game-state={gameState}>
      {/* –ì—Ä–∞—Ñ–∏–∫ */}
      <CrashGraph 
        multiplier={currentMultiplier}
        gameState={gameState}
        crashPoint={crashPoint}
        timeToStart={timeToStart}
        roundId={roundId}
      />
      
      {/* –ì–ª–∞–≤–Ω–∞—è –∫–Ω–æ–ø–∫–∞ –¥–µ–π—Å—Ç–≤–∏—è */}
      <button 
        className={`crash-main-action-btn ${getMainButtonClass()}`}
        onClick={handleMainButtonClick}
        disabled={loading || (gameState === 'waiting' && hasBet) || (gameState === 'flying' && (!hasBet || cashedOut || localAutoCashOutTriggered)) || gameState === 'crashed'}
      >
        {getMainButtonText()}
      </button>
      
      {/* –ü–∞–Ω–µ–ª—å —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è */}
      <CrashControls 
        betAmount={betAmount}
        setBetAmount={setBetAmount}
        autoCashOut={autoCashOut}
        setAutoCashOut={setAutoCashOut}
        autoCashOutEnabled={autoCashOutEnabled}
        setAutoCashOutEnabled={setAutoCashOutEnabled}
        balance={balance}
        gameState={gameState}
        hasBet={hasBet}
        cashedOut={cashedOut || localAutoCashOutTriggered} // –ù–û–í–û–ï: –£—á–∏—Ç—ã–≤–∞–µ–º –ª–æ–∫–∞–ª—å–Ω—ã–π —Ñ–ª–∞–≥
        userBet={userBet}
        userCashOutMultiplier={userCashOutMultiplier}
        loading={loading}
        currentMultiplier={currentMultiplier}
        autoWithdrawn={autoWithdrawn || localAutoCashOutTriggered} // –ù–û–í–û–ï: –£—á–∏—Ç—ã–≤–∞–µ–º –ª–æ–∫–∞–ª—å–Ω—ã–π —Ñ–ª–∞–≥
        isApproachingAutoCashOut={isApproachingAutoCashOut}
      />
      
      {/* –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏–æ–Ω–Ω—ã–µ –ø–∞–Ω–µ–ª–∏ */}
      <div className="crash-info-panels">
        <CrashBetsList 
          activeBets={activeBets}
          cashedOutBets={cashedOutBets}
          gameState={gameState}
          currentMultiplier={currentMultiplier}
        />
        
        <CrashHistory 
          history={history}
        />
      </div>
    </div>
  );
};

export default CrashGame;
