// –°–∫—Ä–∏–ø—Ç –¥–ª—è –ø–µ—Ä–µ—Å—á–µ—Ç–∞ –∏ –Ω–∞—á–∏—Å–ª–µ–Ω–∏—è —É–ø—É—â–µ–Ω–Ω—ã—Ö —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω—ã—Ö –∫–æ–º–∏—Å—Å–∏–π
const { User, Game, Transaction, ReferralEarning } = require('./src/models');
const mongoose = require('mongoose');

async function recalculateCommissions() {
  try {
    await mongoose.connect(process.env.MONGODB_URI || 'mongodb://localhost:27017/greenlight');
    console.log('üîó –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ');
    
    console.log('\nüí∞ === –ü–ï–†–ï–°–ß–ï–¢ –†–ï–§–ï–†–ê–õ–¨–ù–´–• –ö–û–ú–ò–°–°–ò–ô ===');
    
    // –ù–∞—Ö–æ–¥–∏–º –≤—Å–µ—Ö –ø–∞—Ä—Ç–Ω–µ—Ä–æ–≤
    const partners = await User.find({ 
      partnerLevel: { $ne: 'none' }
    });
    
    let totalRecalculated = 0;
    let totalAmount = 0;
    
    for (const partner of partners) {
      console.log(`\nü§ù –û–±—Ä–∞–±–æ—Ç–∫–∞ –ø–∞—Ä—Ç–Ω–µ—Ä–∞: ${partner.username} (${partner.partnerLevel})`);
      
      // –û–ø—Ä–µ–¥–µ–ª—è–µ–º –ø—Ä–æ—Ü–µ–Ω—Ç –∫–æ–º–∏—Å—Å–∏–∏
      const commissionPercent = 
        partner.partnerLevel === 'partner_bronze' ? 20 : 
        partner.partnerLevel === 'partner_silver' ? 25 :
        partner.partnerLevel === 'partner_gold' ? 30 : 5;
      
      console.log(`   –ü—Ä–æ—Ü–µ–Ω—Ç –∫–æ–º–∏—Å—Å–∏–∏: ${commissionPercent}%`);
      
      // –ù–∞—Ö–æ–¥–∏–º –≤—Å–µ—Ö —Ä–µ—Ñ–µ—Ä–∞–ª–æ–≤ –ø–∞—Ä—Ç–Ω–µ—Ä–∞
      const referrals = await User.find({ referrer: partner._id });
      
      for (const referral of referrals) {
        // –ù–∞—Ö–æ–¥–∏–º –≤—Å–µ –ø—Ä–æ–∏–≥—Ä—ã—à–Ω—ã–µ –∏–≥—Ä—ã —Ä–µ—Ñ–µ—Ä–∞–ª–∞
        const lostGames = await Game.find({ 
          user: referral._id,
          win: false 
        }).sort({ createdAt: 1 });
        
        // –ü–æ–ª—É—á–∞–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ –Ω–∞—á–∏—Å–ª–µ–Ω–∏—è
        const existingEarnings = await ReferralEarning.find({
          partner: partner._id,
          referral: referral._id,
          type: 'game_loss'
        });
        
        const processedGameIds = new Set(existingEarnings.map(e => e.game?.toString()));
        
        // –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∏–≥—Ä—ã –±–µ–∑ –∫–æ–º–∏—Å—Å–∏–∏
        for (const game of lostGames) {
          if (processedGameIds.has(game._id.toString())) {
            continue; // –ö–æ–º–∏—Å—Å–∏—è —É–∂–µ –Ω–∞—á–∏—Å–ª–µ–Ω–∞
          }
          
          // –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ –Ω–∞ –º–æ–º–µ–Ω—Ç –∏–≥—Ä—ã —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –±—ã–ª–æ –¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –∏–≥—Ä
          const gamesBeforeThis = await Game.countDocuments({
            user: referral._id,
            createdAt: { $lt: game.createdAt }
          });
          
          if (gamesBeforeThis < 1) { // –ú–∏–Ω–∏–º—É–º 1 –∏–≥—Ä–∞ –¥–æ —ç—Ç–æ–π –¥–ª—è –Ω–∞—á–∏—Å–ª–µ–Ω–∏—è –∫–æ–º–∏—Å—Å–∏–∏
            console.log(`   ‚è≠Ô∏è  –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –∏–≥—Ä—É - –Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –ø—Ä–µ–¥—ã–¥—É—â–∏—Ö –∏–≥—Ä`);
            continue;
          }
          
          const lossAmount = Math.abs(game.profit);
          const earnedAmount = lossAmount * (commissionPercent / 100);
          
          const session = await mongoose.startSession();
          session.startTransaction();
          
          try {
            // –°–æ–∑–¥–∞–µ–º –∑–∞–ø–∏—Å—å –æ –Ω–∞—á–∏—Å–ª–µ–Ω–∏–∏
            const earning = new ReferralEarning({
              partner: partner._id,
              referral: referral._id,
              game: game._id,
              type: 'game_loss',
              calculation: {
                baseAmount: lossAmount,
                partnerLevel: partner.referralStats?.level || 'bronze', // –ò—Å–ø–æ–ª—å–∑—É–µ–º —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω—ã–π —É—Ä–æ–≤–µ–Ω—å, –∞ –Ω–µ –ø–∞—Ä—Ç–Ω–µ—Ä—Å–∫–∏–π
                commissionPercent: commissionPercent,
                earnedAmount: earnedAmount
              },
              status: 'credited',
              balanceBefore: partner.referralStats.referralBalance,
              balanceAfter: partner.referralStats.referralBalance + earnedAmount,
              metadata: {
                gameType: game.gameType,
                notes: '–ü–µ—Ä–µ—Å—á–µ—Ç —É–ø—É—â–µ–Ω–Ω–æ–π –∫–æ–º–∏—Å—Å–∏–∏'
              },
              creditedAt: new Date()
            });
            
            await earning.save({ session });
            
            // –û–±–Ω–æ–≤–ª—è–µ–º –±–∞–ª–∞–Ω—Å –ø–∞—Ä—Ç–Ω–µ—Ä–∞
            await User.findByIdAndUpdate(
              partner._id,
              {
                $inc: {
                  'referralStats.referralBalance': earnedAmount,
                  'referralStats.totalEarned': earnedAmount
                }
              },
              { session }
            );
            
            // –û–±–Ω–æ–≤–ª—è–µ–º –ª–æ–∫–∞–ª—å–Ω—É—é –∫–æ–ø–∏—é –¥–ª—è —Å–ª–µ–¥—É—é—â–∏—Ö –∏—Ç–µ—Ä–∞—Ü–∏–π
            partner.referralStats.referralBalance += earnedAmount;
            partner.referralStats.totalEarned += earnedAmount;
            
            await session.commitTransaction();
            
            console.log(`   ‚úÖ –ù–∞—á–∏—Å–ª–µ–Ω–æ ${earnedAmount.toFixed(2)} USDT –∑–∞ –∏–≥—Ä—É ${game.gameType} —Ä–µ—Ñ–µ—Ä–∞–ª–∞ ${referral.username}`);
            totalRecalculated++;
            totalAmount += earnedAmount;
            
          } catch (error) {
            await session.abortTransaction();
            console.error(`   ‚ùå –û—à–∏–±–∫–∞ –Ω–∞—á–∏—Å–ª–µ–Ω–∏—è –¥–ª—è –∏–≥—Ä—ã ${game._id}:`, error.message);
          } finally {
            session.endSession();
          }
        }
      }
    }
    
    console.log('\nüìä === –ò–¢–û–ì–ò –ü–ï–†–ï–°–ß–ï–¢–ê ===');
    console.log(`   –û–±—Ä–∞–±–æ—Ç–∞–Ω–æ –Ω–∞—á–∏—Å–ª–µ–Ω–∏–π: ${totalRecalculated}`);
    console.log(`   –û–±—â–∞—è —Å—É–º–º–∞ –Ω–∞—á–∏—Å–ª–µ–Ω–∏–π: ${totalAmount.toFixed(2)} USDT`);
    console.log('‚úÖ –ü–µ—Ä–µ—Å—á–µ—Ç –∑–∞–≤–µ—Ä—à–µ–Ω');
    
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–µ—Ä–µ—Å—á–µ—Ç–µ:', error);
  } finally {
    mongoose.disconnect();
  }
}

recalculateCommissions();