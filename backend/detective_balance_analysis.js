#!/usr/bin/env node

/**
 * –î–ï–¢–ï–ö–¢–ò–í–ù–´–ô –ê–ù–ê–õ–ò–ó –†–ê–°–•–û–ñ–î–ï–ù–ò–Ø –ë–ê–õ–ê–ù–°–û–í
 * 
 * –ò—â–µ—Ç —Ç–æ—á–Ω—ã–π –∏—Å—Ç–æ—á–Ω–∏–∫ —Ä–∞—Å—Ö–æ–∂–¥–µ–Ω–∏—è –≤ 0.32 USDT –º–µ–∂–¥—É CryptoBot –∏ —Å–∏—Å—Ç–µ–º–æ–π
 */

require('dotenv').config();
const mongoose = require('mongoose');
const axios = require('axios');
const { 
  User, 
  Game, 
  Transaction, 
  Deposit, 
  Withdrawal, 
  CasinoFinance,
  ReferralEarning,
  ReferralPayout,
  Duel,
  Event,
  EventBet
} = require('./src/models');
const { createLogger } = require('./src/utils/logger');

const logger = createLogger('BALANCE_DETECTIVE');

class BalanceDetective {
  constructor() {
    this.cryptoBotToken = process.env.CRYPTO_PAY_API_TOKEN;
    this.findings = {
      timestamp: new Date(),
      suspiciousTransactions: [],
      missingFees: [],
      inconsistencies: [],
      chronologicalAnalysis: []
    };
  }

  async connectDB() {
    try {
      await mongoose.connect(process.env.MONGODB_URI);
      logger.info('‚úÖ –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ MongoDB —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ');
    } catch (error) {
      logger.error('‚ùå –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ MongoDB:', error);
      throw error;
    }
  }

  /**
   * –ü—Ä–æ–≤–µ—Ä—è–µ—Ç –∫–∞–∂–¥—ã–π –¥–µ–ø–æ–∑–∏—Ç –Ω–∞ –Ω–∞–ª–∏—á–∏–µ –ø—Ä–∞–≤–∏–ª—å–Ω–æ–π –∫–æ–º–∏—Å—Å–∏–∏ 3%
   */
  async analyzeDepositFees() {
    logger.info('üîç –ê–Ω–∞–ª–∏–∑ –∫–æ–º–∏—Å—Å–∏–π –ø–æ –¥–µ–ø–æ–∑–∏—Ç–∞–º...');

    const deposits = await Deposit.find({ status: 'paid' }).sort({ createdAt: 1 });
    
    let totalMissingFees = 0;
    const suspiciousDeposits = [];

    for (const deposit of deposits) {
      const expectedFee = deposit.amount * 0.03;
      const expectedNetAmount = deposit.amount * 0.97;

      // –ò—â–µ–º —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â—É—é —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—é
      const transaction = await Transaction.findOne({
        user: deposit.user,
        type: 'deposit',
        amount: { $in: [deposit.amount, expectedNetAmount] },
        createdAt: { 
          $gte: new Date(deposit.createdAt.getTime() - 60000),
          $lte: new Date(deposit.createdAt.getTime() + 60000)
        }
      });

      const actualFee = transaction?.payment?.fee || 0;
      const feeDifference = Math.abs(expectedFee - actualFee);

      if (feeDifference > 0.001) { // –ë–æ–ª—å—à–µ 0.1 —Ü–µ–Ω—Ç–∞ —Ä–∞—Å—Ö–æ–∂–¥–µ–Ω–∏–µ
        suspiciousDeposits.push({
          depositId: deposit._id,
          amount: deposit.amount,
          expectedFee: expectedFee.toFixed(4),
          actualFee: actualFee.toFixed(4),
          difference: feeDifference.toFixed(4),
          date: deposit.createdAt,
          transactionId: transaction?._id
        });
        totalMissingFees += feeDifference;
      }
    }

    this.findings.missingFees.deposits = {
      totalMissingFees: totalMissingFees.toFixed(4),
      suspiciousCount: suspiciousDeposits.length,
      details: suspiciousDeposits
    };

    logger.info(`   –ü—Ä–æ–≤–µ—Ä–µ–Ω–æ –¥–µ–ø–æ–∑–∏—Ç–æ–≤: ${deposits.length}`);
    logger.info(`   –ü–æ–¥–æ–∑—Ä–∏—Ç–µ–ª—å–Ω—ã—Ö: ${suspiciousDeposits.length}`);
    logger.info(`   –ù–µ–¥–æ—Å—Ç–∞—é—â–∏–µ –∫–æ–º–∏—Å—Å–∏–∏: ${totalMissingFees.toFixed(4)} USDT`);

    return { totalMissingFees, suspiciousDeposits };
  }

  /**
   * –ü—Ä–æ–≤–µ—Ä—è–µ—Ç –∫–∞–∂–¥—ã–π –≤—ã–≤–æ–¥ –Ω–∞ –Ω–∞–ª–∏—á–∏–µ –ø—Ä–∞–≤–∏–ª—å–Ω–æ–π –∫–æ–º–∏—Å—Å–∏–∏ 3%
   */
  async analyzeWithdrawalFees() {
    logger.info('üîç –ê–Ω–∞–ª–∏–∑ –∫–æ–º–∏—Å—Å–∏–π –ø–æ –≤—ã–≤–æ–¥–∞–º...');

    const withdrawals = await Withdrawal.find({ status: 'completed' }).sort({ createdAt: 1 });
    
    let totalMissingFees = 0;
    const suspiciousWithdrawals = [];

    for (const withdrawal of withdrawals) {
      const expectedFee = withdrawal.amount * 0.03;
      const expectedNetAmount = withdrawal.amount * 0.97;

      // –ò—â–µ–º —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â—É—é —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—é
      const transaction = await Transaction.findOne({
        user: withdrawal.user,
        type: 'withdrawal',
        amount: withdrawal.amount,
        createdAt: { 
          $gte: new Date(withdrawal.createdAt.getTime() - 60000),
          $lte: new Date(withdrawal.createdAt.getTime() + 60000)
        }
      });

      const actualFee = transaction?.payment?.fee || 0;
      const feeDifference = Math.abs(expectedFee - actualFee);

      if (feeDifference > 0.001) {
        suspiciousWithdrawals.push({
          withdrawalId: withdrawal._id,
          amount: withdrawal.amount,
          expectedFee: expectedFee.toFixed(4),
          actualFee: actualFee.toFixed(4),
          difference: feeDifference.toFixed(4),
          date: withdrawal.createdAt,
          transactionId: transaction?._id
        });
        totalMissingFees += feeDifference;
      }
    }

    this.findings.missingFees.withdrawals = {
      totalMissingFees: totalMissingFees.toFixed(4),
      suspiciousCount: suspiciousWithdrawals.length,
      details: suspiciousWithdrawals
    };

    logger.info(`   –ü—Ä–æ–≤–µ—Ä–µ–Ω–æ –≤—ã–≤–æ–¥–æ–≤: ${withdrawals.length}`);
    logger.info(`   –ü–æ–¥–æ–∑—Ä–∏—Ç–µ–ª—å–Ω—ã—Ö: ${suspiciousWithdrawals.length}`);
    logger.info(`   –ù–µ–¥–æ—Å—Ç–∞—é—â–∏–µ –∫–æ–º–∏—Å—Å–∏–∏: ${totalMissingFees.toFixed(4)} USDT`);

    return { totalMissingFees, suspiciousWithdrawals };
  }

  /**
   * –ò—â–µ—Ç —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏ –±–µ–∑ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–∏—Ö –¥–µ–ø–æ–∑–∏—Ç–æ–≤/–≤—ã–≤–æ–¥–æ–≤
   */
  async findOrphanTransactions() {
    logger.info('üîç –ü–æ–∏—Å–∫ "—Å–∏—Ä–æ—Ç—Å–∫–∏—Ö" —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π...');

    const orphanDeposits = await Transaction.aggregate([
      { $match: { type: 'deposit', status: 'completed' } },
      {
        $lookup: {
          from: 'deposits',
          let: { userId: '$user', amount: '$amount', date: '$createdAt' },
          pipeline: [
            {
              $match: {
                $expr: {
                  $and: [
                    { $eq: ['$user', '$$userId'] },
                    { $or: [
                      { $eq: ['$amount', '$$amount'] },
                      { $eq: ['$amount', { $multiply: ['$$amount', 1.0309] }] } // –û–±—Ä–∞—Ç–Ω—ã–π —Ä–∞—Å—á–µ—Ç 97% -> 100%
                    ]},
                    { $lte: [{ $abs: { $subtract: ['$createdAt', '$$date'] } }, 60000] }
                  ]
                }
              }
            }
          ],
          as: 'matchingDeposit'
        }
      },
      { $match: { matchingDeposit: { $size: 0 } } }
    ]);

    const orphanWithdrawals = await Transaction.aggregate([
      { $match: { type: 'withdrawal', status: 'completed' } },
      {
        $lookup: {
          from: 'withdrawals',
          let: { userId: '$user', amount: '$amount', date: '$createdAt' },
          pipeline: [
            {
              $match: {
                $expr: {
                  $and: [
                    { $eq: ['$user', '$$userId'] },
                    { $eq: ['$amount', '$$amount'] },
                    { $lte: [{ $abs: { $subtract: ['$createdAt', '$$date'] } }, 60000] }
                  ]
                }
              }
            }
          ],
          as: 'matchingWithdrawal'
        }
      },
      { $match: { matchingWithdrawal: { $size: 0 } } }
    ]);

    this.findings.suspiciousTransactions = {
      orphanDeposits: orphanDeposits.length,
      orphanWithdrawals: orphanWithdrawals.length,
      details: {
        deposits: orphanDeposits,
        withdrawals: orphanWithdrawals
      }
    };

    logger.info(`   –î–µ–ø–æ–∑–∏—Ç–Ω—ã–µ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏ –±–µ–∑ –¥–µ–ø–æ–∑–∏—Ç–æ–≤: ${orphanDeposits.length}`);
    logger.info(`   –í—ã–≤–æ–¥–Ω—ã–µ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏ –±–µ–∑ –≤—ã–≤–æ–¥–æ–≤: ${orphanWithdrawals.length}`);

    return { orphanDeposits, orphanWithdrawals };
  }

  /**
   * –ü—Ä–æ–≤–µ—Ä—è–µ—Ç –±–∞–ª–∞–Ω—Å—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –Ω–∞ –∞–Ω–æ–º–∞–ª–∏–∏
   */
  async analyzeUserBalanceAnomalies() {
    logger.info('üîç –ê–Ω–∞–ª–∏–∑ –∞–Ω–æ–º–∞–ª–∏–π –≤ –±–∞–ª–∞–Ω—Å–∞—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π...');

    // –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ —Å –ø–æ–¥–æ–∑—Ä–∏—Ç–µ–ª—å–Ω–æ –≤—ã—Å–æ–∫–∏–º–∏ –±–∞–ª–∞–Ω—Å–∞–º–∏
    const highBalanceUsers = await User.find({
      $or: [
        { balance: { $gt: 10 } },
        { 'referralStats.referralBalance': { $gt: 5 } }
      ],
      isBlocked: false
    }).select('_id telegramId balance referralStats.referralBalance createdAt');

    // –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ —Å –æ—Ç—Ä–∏—Ü–∞—Ç–µ–ª—å–Ω—ã–º–∏ –±–∞–ª–∞–Ω—Å–∞–º–∏
    const negativeBalanceUsers = await User.find({
      $or: [
        { balance: { $lt: 0 } },
        { 'referralStats.referralBalance': { $lt: 0 } }
      ]
    }).select('_id telegramId balance referralStats.referralBalance');

    // –ê–Ω–∞–ª–∏–∑ –¥–≤–∏–∂–µ–Ω–∏—è —Å—Ä–µ–¥—Å—Ç–≤ –¥–ª—è –ø–æ–¥–æ–∑—Ä–∏—Ç–µ–ª—å–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
    const suspiciousUsers = [];
    
    for (const user of highBalanceUsers) {
      const [deposits, withdrawals, games] = await Promise.all([
        Deposit.find({ user: user._id, status: 'paid' }),
        Withdrawal.find({ user: user._id, status: 'completed' }),
        Game.find({ user: user._id })
      ]);

      const totalDeposited = deposits.reduce((sum, d) => sum + d.amount, 0);
      const totalWithdrawn = withdrawals.reduce((sum, w) => sum + w.amount, 0);
      const totalBets = games.reduce((sum, g) => sum + g.bet, 0);
      const totalWinnings = games.filter(g => g.win).reduce((sum, g) => sum + g.bet + g.profit, 0);

      const expectedBalance = totalDeposited - totalWithdrawn - totalBets + totalWinnings;
      const actualBalance = user.balance + user.referralStats.referralBalance;
      const balanceDifference = Math.abs(expectedBalance - actualBalance);

      if (balanceDifference > 0.1) { // –†–∞—Å—Ö–æ–∂–¥–µ–Ω–∏–µ –±–æ–ª—å—à–µ 10 —Ü–µ–Ω—Ç–æ–≤
        suspiciousUsers.push({
          userId: user._id,
          telegramId: user.telegramId,
          actualBalance: actualBalance.toFixed(4),
          expectedBalance: expectedBalance.toFixed(4),
          difference: balanceDifference.toFixed(4),
          deposits: totalDeposited.toFixed(2),
          withdrawals: totalWithdrawn.toFixed(2),
          bets: totalBets.toFixed(2),
          winnings: totalWinnings.toFixed(2)
        });
      }
    }

    this.findings.inconsistencies.users = {
      highBalanceCount: highBalanceUsers.length,
      negativeBalanceCount: negativeBalanceUsers.length,
      suspiciousCount: suspiciousUsers.length,
      details: {
        highBalance: highBalanceUsers,
        negativeBalance: negativeBalanceUsers,
        suspicious: suspiciousUsers
      }
    };

    logger.info(`   –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ —Å –≤—ã—Å–æ–∫–∏–º –±–∞–ª–∞–Ω—Å–æ–º: ${highBalanceUsers.length}`);
    logger.info(`   –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ —Å –æ—Ç—Ä–∏—Ü–∞—Ç–µ–ª—å–Ω—ã–º –±–∞–ª–∞–Ω—Å–æ–º: ${negativeBalanceUsers.length}`);
    logger.info(`   –ü–æ–¥–æ–∑—Ä–∏—Ç–µ–ª—å–Ω—ã–µ —Ä–∞—Å—Ö–æ–∂–¥–µ–Ω–∏—è: ${suspiciousUsers.length}`);

    return { highBalanceUsers, negativeBalanceUsers, suspiciousUsers };
  }

  /**
   * –•—Ä–æ–Ω–æ–ª–æ–≥–∏—á–µ—Å–∫–∏–π –∞–Ω–∞–ª–∏–∑ - –∏—â–µ—Ç –º–æ–º–µ–Ω—Ç –ø–æ—è–≤–ª–µ–Ω–∏—è —Ä–∞—Å—Ö–æ–∂–¥–µ–Ω–∏—è
   */
  async chronologicalAnalysis() {
    logger.info('üîç –•—Ä–æ–Ω–æ–ª–æ–≥–∏—á–µ—Å–∫–∏–π –∞–Ω–∞–ª–∏–∑ —Ä–∞—Å—Ö–æ–∂–¥–µ–Ω–∏—è...');

    // –ì—Ä—É–ø–ø–∏—Ä—É–µ–º –≤—Å–µ –æ–ø–µ—Ä–∞—Ü–∏–∏ –ø–æ –¥–Ω—è–º
    const dailyOperations = await Promise.all([
      // –î–µ–ø–æ–∑–∏—Ç—ã –ø–æ –¥–Ω—è–º
      Deposit.aggregate([
        { $match: { status: 'paid' } },
        {
          $group: {
            _id: { $dateToString: { format: "%Y-%m-%d", date: "$createdAt" } },
            count: { $sum: 1 },
            totalAmount: { $sum: '$amount' }
          }
        },
        { $sort: { _id: 1 } }
      ]),
      // –í—ã–≤–æ–¥—ã –ø–æ –¥–Ω—è–º
      Withdrawal.aggregate([
        { $match: { status: 'completed' } },
        {
          $group: {
            _id: { $dateToString: { format: "%Y-%m-%d", date: "$createdAt" } },
            count: { $sum: 1 },
            totalAmount: { $sum: '$amount' }
          }
        },
        { $sort: { _id: 1 } }
      ]),
      // –ò–≥—Ä—ã –ø–æ –¥–Ω—è–º
      Game.aggregate([
        {
          $group: {
            _id: { $dateToString: { format: "%Y-%m-%d", date: "$createdAt" } },
            count: { $sum: 1 },
            totalBets: { $sum: '$bet' },
            totalWins: { $sum: { $cond: ['$win', { $add: ['$bet', '$profit'] }, 0] } }
          }
        },
        { $sort: { _id: 1 } }
      ])
    ]);

    // –û–±—ä–µ–¥–∏–Ω—è–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ –¥–Ω—è–º
    const dailyAnalysis = new Map();
    
    // –î–æ–±–∞–≤–ª—è–µ–º –¥–µ–ø–æ–∑–∏—Ç—ã
    dailyOperations[0].forEach(day => {
      if (!dailyAnalysis.has(day._id)) {
        dailyAnalysis.set(day._id, { date: day._id, deposits: 0, withdrawals: 0, bets: 0, wins: 0 });
      }
      dailyAnalysis.get(day._id).deposits = day.totalAmount;
    });
    
    // –î–æ–±–∞–≤–ª—è–µ–º –≤—ã–≤–æ–¥—ã
    dailyOperations[1].forEach(day => {
      if (!dailyAnalysis.has(day._id)) {
        dailyAnalysis.set(day._id, { date: day._id, deposits: 0, withdrawals: 0, bets: 0, wins: 0 });
      }
      dailyAnalysis.get(day._id).withdrawals = day.totalAmount;
    });
    
    // –î–æ–±–∞–≤–ª—è–µ–º –∏–≥—Ä—ã
    dailyOperations[2].forEach(day => {
      if (!dailyAnalysis.has(day._id)) {
        dailyAnalysis.set(day._id, { date: day._id, deposits: 0, withdrawals: 0, bets: 0, wins: 0 });
      }
      const dayData = dailyAnalysis.get(day._id);
      dayData.bets = day.totalBets;
      dayData.wins = day.totalWins;
    });

    // –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º –Ω–∞–∫–æ–ø–∏—Ç–µ–ª—å–Ω—ã–π –±–∞–ª–∞–Ω—Å –ø–æ –¥–Ω—è–º
    let cumulativeBalance = 0;
    const chronology = [];
    
    for (const [date, data] of Array.from(dailyAnalysis.entries()).sort()) {
      const dayFlow = data.deposits - data.withdrawals;
      cumulativeBalance += dayFlow;
      
      chronology.push({
        date,
        deposits: data.deposits.toFixed(2),
        withdrawals: data.withdrawals.toFixed(2),
        netFlow: dayFlow.toFixed(2),
        cumulativeBalance: cumulativeBalance.toFixed(2),
        bets: data.bets.toFixed(2),
        wins: data.wins.toFixed(2),
        gameProfit: (data.bets - data.wins).toFixed(2)
      });
    }

    this.findings.chronologicalAnalysis = chronology;

    logger.info(`   –ü—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–æ –¥–Ω–µ–π: ${chronology.length}`);
    logger.info(`   –§–∏–Ω–∞–ª—å–Ω—ã–π –Ω–∞–∫–æ–ø–∏—Ç–µ–ª—å–Ω—ã–π –±–∞–ª–∞–Ω—Å: ${cumulativeBalance.toFixed(2)} USDT`);

    return chronology;
  }

  /**
   * –ó–∞–ø—É—Å–∫–∞–µ—Ç –ø–æ–ª–Ω–æ–µ –¥–µ—Ç–µ–∫—Ç–∏–≤–Ω–æ–µ —Ä–∞—Å—Å–ª–µ–¥–æ–≤–∞–Ω–∏–µ
   */
  async investigate() {
    try {
      logger.info('üïµÔ∏è –ù–ê–ß–ê–õ–û –î–ï–¢–ï–ö–¢–ò–í–ù–û–ì–û –†–ê–°–°–õ–ï–î–û–í–ê–ù–ò–Ø –†–ê–°–•–û–ñ–î–ï–ù–ò–Ø');
      
      await this.connectDB();

      // –í—ã–ø–æ–ª–Ω—è–µ–º –≤—Å–µ –ø—Ä–æ–≤–µ—Ä–∫–∏
      const depositFees = await this.analyzeDepositFees();
      const withdrawalFees = await this.analyzeWithdrawalFees();
      const orphans = await this.findOrphanTransactions();
      const anomalies = await this.analyzeUserBalanceAnomalies();
      const chronology = await this.chronologicalAnalysis();

      // –ü–æ–¥—Å—á–∏—Ç—ã–≤–∞–µ–º –æ–±—â–∏–µ –Ω–∞—Ö–æ–¥–∫–∏
      const totalMissingFees = parseFloat(depositFees.totalMissingFees) + parseFloat(withdrawalFees.totalMissingFees);
      
      logger.info('');
      logger.info('üéØ –û–°–ù–û–í–ù–´–ï –ù–ê–•–û–î–ö–ò:');
      logger.info(`   –ù–µ–¥–æ—Å—Ç–∞—é—â–∏–µ –∫–æ–º–∏—Å—Å–∏–∏ –ø–æ –¥–µ–ø–æ–∑–∏—Ç–∞–º: ${depositFees.totalMissingFees} USDT`);
      logger.info(`   –ù–µ–¥–æ—Å—Ç–∞—é—â–∏–µ –∫–æ–º–∏—Å—Å–∏–∏ –ø–æ –≤—ã–≤–æ–¥–∞–º: ${withdrawalFees.totalMissingFees} USDT`);
      logger.info(`   –û–±—â–∏–µ –Ω–µ–¥–æ—Å—Ç–∞—é—â–∏–µ –∫–æ–º–∏—Å—Å–∏–∏: ${totalMissingFees.toFixed(4)} USDT`);
      logger.info(`   –ü–æ–¥–æ–∑—Ä–∏—Ç–µ–ª—å–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏: ${anomalies.suspiciousUsers.length}`);
      logger.info(`   –°–∏—Ä–æ—Ç—Å–∫–∏–µ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏: ${orphans.orphanDeposits.length + orphans.orphanWithdrawals.length}`);

      // –°—Ä–∞–≤–Ω–∏–≤–∞–µ–º —Å –∏–∑–≤–µ—Å—Ç–Ω—ã–º —Ä–∞—Å—Ö–æ–∂–¥–µ–Ω–∏–µ–º 0.32 USDT
      if (Math.abs(totalMissingFees - 0.32) < 0.05) {
        logger.info('');
        logger.info('üéâ –í–ï–†–û–Ø–¢–ù–û –ù–ê–ô–î–ï–ù–ê –ü–†–ò–ß–ò–ù–ê –†–ê–°–•–û–ñ–î–ï–ù–ò–Ø!');
        logger.info(`   –ù–µ–¥–æ—Å—Ç–∞—é—â–∏–µ –∫–æ–º–∏—Å—Å–∏–∏ (${totalMissingFees.toFixed(4)}) –æ–±—ä—è—Å–Ω—è—é—Ç —Ä–∞—Å—Ö–æ–∂–¥–µ–Ω–∏–µ 0.32 USDT`);
      }

      return this.findings;

    } catch (error) {
      logger.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–µ—Ç–µ–∫—Ç–∏–≤–Ω–æ–º —Ä–∞—Å—Å–ª–µ–¥–æ–≤–∞–Ω–∏–∏:', error);
      throw error;
    } finally {
      await mongoose.disconnect();
      logger.info('üîå –°–æ–µ–¥–∏–Ω–µ–Ω–∏–µ —Å –ë–î –∑–∞–∫—Ä—ã—Ç–æ');
    }
  }

  /**
   * –í—ã–≤–æ–¥–∏—Ç –¥–µ—Ç–∞–ª—å–Ω—ã–π –æ—Ç—á–µ—Ç —Ä–∞—Å—Å–ª–µ–¥–æ–≤–∞–Ω–∏—è
   */
  printDetailedReport() {
    const findings = this.findings;
    
    console.log('\n');
    console.log('üïµÔ∏è'.repeat(40));
    console.log('           –î–ï–¢–ï–ö–¢–ò–í–ù–´–ô –û–¢–ß–ï–¢ –†–ê–°–°–õ–ï–î–û–í–ê–ù–ò–Ø');
    console.log('üïµÔ∏è'.repeat(40));
    console.log(`–í—Ä–µ–º—è: ${findings.timestamp.toLocaleString()}`);
    console.log('');

    // –ù–µ–¥–æ—Å—Ç–∞—é—â–∏–µ –∫–æ–º–∏—Å—Å–∏–∏
    if (findings.missingFees) {
      console.log('üí∏ –ù–ï–î–û–°–¢–ê–Æ–©–ò–ï –ö–û–ú–ò–°–°–ò–ò:');
      if (findings.missingFees.deposits) {
        console.log(`   –î–µ–ø–æ–∑–∏—Ç—ã: ${findings.missingFees.deposits.totalMissingFees} USDT (${findings.missingFees.deposits.suspiciousCount} —Å–ª—É—á–∞–µ–≤)`);
      }
      if (findings.missingFees.withdrawals) {
        console.log(`   –í—ã–≤–æ–¥—ã: ${findings.missingFees.withdrawals.totalMissingFees} USDT (${findings.missingFees.withdrawals.suspiciousCount} —Å–ª—É—á–∞–µ–≤)`);
      }
      console.log('');
    }

    // –ü–æ–¥–æ–∑—Ä–∏—Ç–µ–ª—å–Ω—ã–µ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏
    if (findings.suspiciousTransactions) {
      console.log('üö® –ü–û–î–û–ó–†–ò–¢–ï–õ–¨–ù–´–ï –¢–†–ê–ù–ó–ê–ö–¶–ò–ò:');
      console.log(`   –î–µ–ø–æ–∑–∏—Ç–Ω—ã–µ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏ –±–µ–∑ –¥–µ–ø–æ–∑–∏—Ç–æ–≤: ${findings.suspiciousTransactions.orphanDeposits}`);
      console.log(`   –í—ã–≤–æ–¥–Ω—ã–µ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏ –±–µ–∑ –≤—ã–≤–æ–¥–æ–≤: ${findings.suspiciousTransactions.orphanWithdrawals}`);
      console.log('');
    }

    // –ê–Ω–æ–º–∞–ª–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
    if (findings.inconsistencies?.users) {
      console.log('üë§ –ê–ù–û–ú–ê–õ–ò–ò –ü–û–õ–¨–ó–û–í–ê–¢–ï–õ–ï–ô:');
      console.log(`   –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ —Å –≤—ã—Å–æ–∫–∏–º –±–∞–ª–∞–Ω—Å–æ–º: ${findings.inconsistencies.users.highBalanceCount}`);
      console.log(`   –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ —Å –æ—Ç—Ä–∏—Ü–∞—Ç–µ–ª—å–Ω—ã–º –±–∞–ª–∞–Ω—Å–æ–º: ${findings.inconsistencies.users.negativeBalanceCount}`);
      console.log(`   –ü–æ–¥–æ–∑—Ä–∏—Ç–µ–ª—å–Ω—ã–µ —Ä–∞—Å—Ö–æ–∂–¥–µ–Ω–∏—è –±–∞–ª–∞–Ω—Å–æ–≤: ${findings.inconsistencies.users.suspiciousCount}`);
      console.log('');
    }

    // –•—Ä–æ–Ω–æ–ª–æ–≥–∏—è (–ø–æ—Å–ª–µ–¥–Ω–∏–µ 5 –¥–Ω–µ–π)
    if (findings.chronologicalAnalysis && findings.chronologicalAnalysis.length > 0) {
      console.log('üìÖ –•–†–û–ù–û–õ–û–ì–ò–Ø (–ø–æ—Å–ª–µ–¥–Ω–∏–µ –¥–Ω–∏):');
      const lastDays = findings.chronologicalAnalysis.slice(-5);
      lastDays.forEach(day => {
        console.log(`   ${day.date}: +${day.deposits} -${day.withdrawals} = ${day.netFlow} USDT (–Ω–∞–∫–æ–ø–∏—Ç–µ–ª—å–Ω–æ: ${day.cumulativeBalance})`);
      });
      console.log('');
    }

    console.log('üïµÔ∏è'.repeat(40));
    console.log('');
  }
}

// –ó–∞–ø—É—Å–∫ —Ä–∞—Å—Å–ª–µ–¥–æ–≤–∞–Ω–∏—è
async function main() {
  const detective = new BalanceDetective();
  
  try {
    const findings = await detective.investigate();
    detective.printDetailedReport();
    
    // –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –≤ —Ñ–∞–π–ª
    const fs = require('fs');
    const filename = `detective_${new Date().toISOString().slice(0, 19).replace(/:/g, '-')}.json`;
    fs.writeFileSync(filename, JSON.stringify(findings, null, 2));
    console.log(`üîç –î–µ—Ç–∞–ª—å–Ω—ã–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã —Ä–∞—Å—Å–ª–µ–¥–æ–≤–∞–Ω–∏—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –≤ ${filename}`);
    
  } catch (error) {
    console.error('üí• –ö–†–ò–¢–ò–ß–ï–°–ö–ê–Ø –û–®–ò–ë–ö–ê –†–ê–°–°–õ–ï–î–û–í–ê–ù–ò–Ø:', error);
    process.exit(1);
  }
}

// –≠–∫—Å–ø–æ—Ä—Ç–∏—Ä—É–µ–º –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –∫–∞–∫ –º–æ–¥—É–ª—å
module.exports = BalanceDetective;

// –ó–∞–ø—É—Å–∫–∞–µ–º –µ—Å–ª–∏ –≤—ã–∑–≤–∞–Ω –Ω–∞–ø—Ä—è–º—É—é
if (require.main === module) {
  main();
}