const express = require('express');
const router = express.Router();

const duelController = require('../controllers/duel.controller');
const { duelAuthMiddleware } = require('../middleware/auth.middleware');
const { createRateLimit } = require('../middleware/rateLimiting.middleware');

// –ü—Ä–∏–º–µ–Ω—è–µ–º —Å–ø–µ—Ü–∏–∞–ª—å–Ω—É—é –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏—é –¥–ª—è –¥—É—ç–ª–µ–π
router.use(duelAuthMiddleware);

// Middleware –¥–ª—è –≤–∞–ª–∏–¥–∞—Ü–∏–∏
function validateCreateInvitation(req, res, next) {
  const { gameType, format, amount, targetUsername } = req.body;
  
  const validGameTypes = ['üé≤', 'üéØ', '‚öΩ', 'üèÄ', 'üé≥', 'üé∞'];
  if (!gameType || !validGameTypes.includes(gameType)) {
    return res.status(400).json({
      success: false,
      message: '–ù–µ–ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–π —Ç–∏–ø –∏–≥—Ä—ã'
    });
  }
  
  const validFormats = ['bo1', 'bo3', 'bo5', 'bo7'];
  if (format && !validFormats.includes(format)) {
    return res.status(400).json({
      success: false,
      message: '–ù–µ–ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–π —Ñ–æ—Ä–º–∞—Ç –¥—É—ç–ª–∏'
    });
  }
  
  if (!amount || isNaN(amount) || amount < 1 || amount > 1000) {
    return res.status(400).json({
      success: false,
      message: '–°—Ç–∞–≤–∫–∞ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –æ—Ç 1 –¥–æ 1000 USDT'
    });
  }
  
  if (targetUsername && (typeof targetUsername !== 'string' || targetUsername.length > 32)) {
    return res.status(400).json({
      success: false,
      message: '–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ –∏–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è'
    });
  }
  
  next();
}

function validateCreateDuel(req, res, next) {
  const { gameType, format, amount, chatId, chatType, opponentId, opponentUsername } = req.body;
  
  const validGameTypes = ['üé≤', 'üéØ', '‚öΩ', 'üèÄ', 'üé≥', 'üé∞'];
  if (!gameType || !validGameTypes.includes(gameType)) {
    return res.status(400).json({
      success: false,
      message: '–ù–µ–ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–π —Ç–∏–ø –∏–≥—Ä—ã'
    });
  }
  
  const validFormats = ['bo1', 'bo3', 'bo5', 'bo7'];
  if (format && !validFormats.includes(format)) {
    return res.status(400).json({
      success: false,
      message: '–ù–µ–ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–π —Ñ–æ—Ä–º–∞—Ç –¥—É—ç–ª–∏'
    });
  }
  
  if (!amount || isNaN(amount) || amount < 1 || amount > 1000) {
    return res.status(400).json({
      success: false,
      message: '–°—Ç–∞–≤–∫–∞ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –æ—Ç 1 –¥–æ 1000 USDT'
    });
  }
  
  if (!chatId) {
    return res.status(400).json({
      success: false,
      message: 'ID —á–∞—Ç–∞ –æ–±—è–∑–∞—Ç–µ–ª–µ–Ω'
    });
  }
  
  const validChatTypes = ['private', 'group', 'supergroup', 'channel'];
  if (!chatType || !validChatTypes.includes(chatType)) {
    return res.status(400).json({
      success: false,
      message: '–ù–µ–ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–π —Ç–∏–ø —á–∞—Ç–∞'
    });
  }
  
  if (opponentId && typeof opponentId !== 'string') {
    return res.status(400).json({
      success: false,
      message: '–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π ID –ø—Ä–æ—Ç–∏–≤–Ω–∏–∫–∞'
    });
  }
  
  if (opponentUsername && (typeof opponentUsername !== 'string' || opponentUsername.length > 32)) {
    return res.status(400).json({
      success: false,
      message: '–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ –∏–º—è –ø—Ä–æ—Ç–∏–≤–Ω–∏–∫–∞'
    });
  }
  
  next();
}

function validateMakeMove(req, res, next) {
  const { result, messageId } = req.body;
  
  if (!result || isNaN(result) || result < 1 || result > 64) {
    return res.status(400).json({
      success: false,
      message: '–†–µ–∑—É–ª—å—Ç–∞—Ç –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å —á–∏—Å–ª–æ–º –æ—Ç 1 –¥–æ 64'
    });
  }
  
  if (messageId && isNaN(messageId)) {
    return res.status(400).json({
      success: false,
      message: 'ID —Å–æ–æ–±—â–µ–Ω–∏—è –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å —á–∏—Å–ª–æ–º'
    });
  }
  
  next();
}

function validateSessionId(req, res, next) {
  const { sessionId } = req.params;
  
  if (!sessionId || sessionId.length < 10) {
    return res.status(400).json({
      success: false,
      message: '–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π ID —Å–µ—Å—Å–∏–∏'
    });
  }
  
  next();
}

function validateInviteId(req, res, next) {
  const { inviteId } = req.params;
  
  if (!inviteId || inviteId.length < 10) {
    return res.status(400).json({
      success: false,
      message: '–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π ID –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏—è'
    });
  }
  
  next();
}

function validateUserId(req, res, next) {
  const { userId } = req.params;
  
  if (!userId || typeof userId !== 'string') {
    return res.status(400).json({
      success: false,
      message: '–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è'
    });
  }
  
  next();
}

// === –†–û–£–¢–´ –î–õ–Ø –ü–†–ò–ì–õ–ê–®–ï–ù–ò–ô ===

// –°–æ–∑–¥–∞–Ω–∏–µ –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏—è –Ω–∞ –¥—É—ç–ª—å (–¥–ª—è inline —Ä–µ–∂–∏–º–∞)
router.post('/invitation', 
  createRateLimit('general'), // –∏—Å–ø–æ–ª—å–∑—É–µ–º –æ–±—â–∏–π –ª–∏–º–∏—Ç
  validateCreateInvitation,
  duelController.createInvitation
);

// –ü—Ä–∏–Ω—è—Ç–∏–µ –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏—è
router.post('/invitation/:inviteId/accept',
  createRateLimit('general'),
  validateInviteId,
  duelController.acceptInvitation
);

// –û—Ç–∫–ª–æ–Ω–µ–Ω–∏–µ –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏—è
router.post('/invitation/:inviteId/decline',
  createRateLimit('general'),
  validateInviteId,
  duelController.declineInvitation
);

// === –†–û–£–¢–´ –î–õ–Ø –î–£–≠–õ–ï–ô ===

// –°–æ–∑–¥–∞–Ω–∏–µ –¥—É—ç–ª–∏ –Ω–∞–ø—Ä—è–º—É—é (–¥–ª—è –≥—Ä—É–ø–ø–æ–≤—ã—Ö —á–∞—Ç–æ–≤)
router.post('/',
  createRateLimit('general'),
  validateCreateDuel,
  duelController.createDuel
);

router.post('/create',
  createRateLimit('general'),
  validateCreateDuel,
  duelController.createDuel
);

// –ü—Ä–∏–Ω—è—Ç–∏–µ –¥—É—ç–ª–∏
router.post('/:sessionId/accept',
  createRateLimit('general'),
  validateSessionId,
  duelController.acceptDuel
);

// –û—Ç–∫–ª–æ–Ω–µ–Ω–∏–µ –¥—É—ç–ª–∏
router.post('/:sessionId/decline',
  createRateLimit('general'),
  validateSessionId,
  duelController.declineDuel
);

// –ü—Ä–∏—Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ –∫ –æ—Ç–∫—Ä—ã—Ç–æ–π –¥—É—ç–ª–∏
router.post('/:sessionId/join',
  createRateLimit('general'),
  validateSessionId,
  duelController.joinDuel
);

// –ù–∞—á–∞–ª–æ –∏–≥—Ä—ã
router.post('/:sessionId/start',
  createRateLimit('general'),
  validateSessionId,
  duelController.startGame
);

// –°–¥–µ–ª–∞—Ç—å —Ö–æ–¥ –≤ –¥—É—ç–ª–∏
router.post('/:sessionId/move',
  createRateLimit('general'), // –∏—Å–ø–æ–ª—å–∑—É–µ–º –æ–±—â–∏–π –ª–∏–º–∏—Ç
  validateSessionId,
  validateMakeMove,
  duelController.makeMove
);

// –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞ —Ä–∞—É–Ω–¥–∞
router.post('/:sessionId/rounds',
  createRateLimit('general'),
  validateSessionId,
  duelController.saveRound
);

// –ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ –¥—É—ç–ª–∏
router.post('/:sessionId/finish',
  createRateLimit('general'),
  validateSessionId,
  duelController.finishDuel
);

// –ü–æ–ª—É—á–µ–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –¥—É—ç–ª–∏
router.get('/:sessionId',
  validateSessionId,
  duelController.getDuel
);

// –û—Ç–º–µ–Ω–∞ –¥—É—ç–ª–∏
router.post('/:sessionId/cancel',
  createRateLimit('general'),
  validateSessionId,
  duelController.cancelDuel
);

// === –†–û–£–¢–´ –î–õ–Ø –ü–û–õ–¨–ó–û–í–ê–¢–ï–õ–ï–ô ===

// –ü–æ–ª—É—á–µ–Ω–∏–µ –∞–∫—Ç–∏–≤–Ω—ã—Ö –¥—É—ç–ª–µ–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
router.get('/user/active',
  duelController.getActiveDuels
);

// –ü–æ–ª—É—á–µ–Ω–∏–µ –∏—Å—Ç–æ—Ä–∏–∏ –¥—É—ç–ª–µ–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
router.get('/user/history',
  duelController.getDuelHistory
);

// –ü–æ–ª—É—á–µ–Ω–∏–µ –∏—Å—Ç–æ—Ä–∏–∏ –¥—É—ç–ª–µ–π –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
router.get('/history/:userId',
  validateUserId,
  duelController.getUserHistoryById
);

// –ü–æ–ª—É—á–µ–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –¥—É—ç–ª–µ–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
router.get('/user/stats',
  duelController.getDuelStats
);

// –ü–æ–ª—É—á–µ–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
router.get('/stats/:userId',
  validateUserId,
  duelController.getUserStatsById
);

// === –ü–£–ë–õ–ò–ß–ù–´–ï –†–û–£–¢–´ ===

// –ü–æ–ª—É—á–µ–Ω–∏–µ –æ—Ç–∫—Ä—ã—Ç—ã—Ö –¥—É—ç–ª–µ–π (–¥–ª—è –æ–±—â–µ–≥–æ –ø—Ä–æ—Å–º–æ—Ç—Ä–∞)
router.get('/public/open',
  createRateLimit('general'),
  duelController.getOpenDuels
);

// === MIDDLEWARE –î–õ–Ø –û–ë–†–ê–ë–û–¢–ö–ò –û–®–ò–ë–û–ö ===

router.use((error, req, res, next) => {
  console.error('–û—à–∏–±–∫–∞ –≤ —Ä–æ—É—Ç–∞—Ö –¥—É—ç–ª–µ–π:', error);
  
  if (error.name === 'ValidationError') {
    return res.status(400).json({
      success: false,
      message: '–û—à–∏–±–∫–∞ –≤–∞–ª–∏–¥–∞—Ü–∏–∏',
      errors: error.errors
    });
  }
  
  if (error.name === 'MongoError' && error.code === 11000) {
    return res.status(409).json({
      success: false,
      message: '–ö–æ–Ω—Ñ–ª–∏–∫—Ç –¥–∞–Ω–Ω—ã—Ö',
      error: '–î—É—ç–ª—å —Å —Ç–∞–∫–∏–º–∏ –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º–∏ —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç'
    });
  }
  
  res.status(500).json({
    success: false,
    message: '–í–Ω—É—Ç—Ä–µ–Ω–Ω—è—è –æ—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞'
  });
});

module.exports = router;