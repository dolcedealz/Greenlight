// –°–∫—Ä–∏–ø—Ç –¥–ª—è –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è –±–∞–ª–∞–Ω—Å–æ–≤ –∏ —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω—ã—Ö –∫–æ–º–∏—Å—Å–∏–π
const { User, Game, Transaction, ReferralEarning } = require('./src/models');
const mongoose = require('mongoose');
const referralService = require('./src/services/referral.service');

async function fixBalances() {
  try {
    await mongoose.connect(process.env.MONGODB_URI || 'mongodb://localhost:27017/greenlight');
    console.log('üîó –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ');
    
    console.log('\nüîß === –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï –ë–ê–õ–ê–ù–°–û–í –ò –ö–û–ú–ò–°–°–ò–ô ===');
    
    // 1. –ò—Å–ø—Ä–∞–≤–ª—è–µ–º –±–∞–ª–∞–Ω—Å aiuserv
    console.log('\nüìä –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –±–∞–ª–∞–Ω—Å–∞ aiuserv:');
    const aiuserv = await User.findOne({ username: 'aiuserv' });
    
    if (aiuserv) {
      // –ü–æ–¥—Å—á–∏—Ç—ã–≤–∞–µ–º —Ä–µ–∞–ª—å–Ω—ã–π –±–∞–ª–∞–Ω—Å –∏–∑ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π
      const transactions = await Transaction.find({ user: aiuserv._id });
      const realBalance = transactions.reduce((sum, t) => sum + t.amount, 0);
      
      console.log(`   –¢–µ–∫—É—â–∏–π –±–∞–ª–∞–Ω—Å –≤ –º–æ–¥–µ–ª–∏: ${aiuserv.balance} USDT`);
      console.log(`   –†–µ–∞–ª—å–Ω—ã–π –±–∞–ª–∞–Ω—Å –∏–∑ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π: ${realBalance} USDT`);
      
      // –û–±–Ω–æ–≤–ª—è–µ–º –±–∞–ª–∞–Ω—Å + –Ω–∞—á–∞–ª—å–Ω—ã–π —Ç–µ—Å—Ç–æ–≤—ã–π –±–∞–ª–∞–Ω—Å
      const initialBalance = 100; // –¢–µ—Å—Ç–æ–≤—ã–π –Ω–∞—á–∞–ª—å–Ω—ã–π –±–∞–ª–∞–Ω—Å
      const correctBalance = initialBalance + realBalance;
      
      await User.findByIdAndUpdate(aiuserv._id, {
        balance: correctBalance
      });
      
      console.log(`   ‚úÖ –ë–∞–ª–∞–Ω—Å –∏—Å–ø—Ä–∞–≤–ª–µ–Ω –Ω–∞: ${correctBalance} USDT`);
    }
    
    // 2. –ü–µ—Ä–µ—Å—á–∏—Ç—ã–≤–∞–µ–º —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω—ã–µ –∫–æ–º–∏—Å—Å–∏–∏
    console.log('\nüí∞ –ü–µ—Ä–µ—Å—á–µ—Ç —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω—ã—Ö –∫–æ–º–∏—Å—Å–∏–π:');
    
    // –ù–∞—Ö–æ–¥–∏–º –≤—Å–µ—Ö –ø–∞—Ä—Ç–Ω–µ—Ä–æ–≤
    const partners = await User.find({ 
      partnerLevel: { $ne: 'none' }
    });
    
    for (const partner of partners) {
      console.log(`\nü§ù –ü–∞—Ä—Ç–Ω–µ—Ä: ${partner.username} (${partner.partnerLevel})`);
      
      // –ù–∞—Ö–æ–¥–∏–º –≤—Å–µ—Ö —Ä–µ—Ñ–µ—Ä–∞–ª–æ–≤ –ø–∞—Ä—Ç–Ω–µ—Ä–∞
      const referrals = await User.find({ referrer: partner._id });
      console.log(`   –†–µ—Ñ–µ—Ä–∞–ª–æ–≤: ${referrals.length}`);
      
      let totalMissedCommission = 0;
      
      for (const referral of referrals) {
        // –ù–∞—Ö–æ–¥–∏–º –≤—Å–µ –ø—Ä–æ–∏–≥—Ä—ã—à–Ω—ã–µ –∏–≥—Ä—ã —Ä–µ—Ñ–µ—Ä–∞–ª–∞
        const lostGames = await Game.find({ 
          user: referral._id,
          win: false 
        });
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–∞–∫–∏–µ –∫–æ–º–∏—Å—Å–∏–∏ —É–∂–µ –Ω–∞—á–∏—Å–ª–µ–Ω—ã
        const existingEarnings = await ReferralEarning.find({
          partner: partner._id,
          referral: referral._id,
          type: 'game_loss'
        });
        
        const processedGameIds = existingEarnings.map(e => e.game?.toString());
        
        // –ù–∞—Ö–æ–¥–∏–º –∏–≥—Ä—ã –±–µ–∑ –Ω–∞—á–∏—Å–ª–µ–Ω–Ω–æ–π –∫–æ–º–∏—Å—Å–∏–∏
        const unprocessedGames = lostGames.filter(g => 
          !processedGameIds.includes(g._id.toString())
        );
        
        if (unprocessedGames.length > 0) {
          console.log(`   üì± –†–µ—Ñ–µ—Ä–∞–ª ${referral.username}: –Ω–∞–π–¥–µ–Ω–æ ${unprocessedGames.length} –∏–≥—Ä –±–µ–∑ –∫–æ–º–∏—Å—Å–∏–∏`);
          
          for (const game of unprocessedGames) {
            const lossAmount = Math.abs(game.profit);
            const commissionPercent = partner.partnerLevel === 'partner_bronze' ? 20 : 
                                    partner.partnerLevel === 'partner_silver' ? 25 :
                                    partner.partnerLevel === 'partner_gold' ? 30 : 5;
            const missedCommission = lossAmount * (commissionPercent / 100);
            
            totalMissedCommission += missedCommission;
            console.log(`      - –ò–≥—Ä–∞ ${game.gameType}: –ø—Ä–æ–∏–≥—Ä—ã—à ${lossAmount} USDT, —É–ø—É—â–µ–Ω–Ω–∞—è –∫–æ–º–∏—Å—Å–∏—è ${missedCommission.toFixed(2)} USDT`);
          }
        }
      }
      
      if (totalMissedCommission > 0) {
        console.log(`   ‚ùå –í—Å–µ–≥–æ —É–ø—É—â–µ–Ω–Ω–æ–π –∫–æ–º–∏—Å—Å–∏–∏: ${totalMissedCommission.toFixed(2)} USDT`);
        console.log(`   üí° –î–ª—è –Ω–∞—á–∏—Å–ª–µ–Ω–∏—è –∑–∞–ø—É—Å—Ç–∏—Ç–µ —Å–∫—Ä–∏–ø—Ç recalculate_commissions.js`);
      } else {
        console.log(`   ‚úÖ –í—Å–µ –∫–æ–º–∏—Å—Å–∏–∏ –Ω–∞—á–∏—Å–ª–µ–Ω—ã –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ`);
      }
    }
    
    // 3. –ò—Å–ø—Ä–∞–≤–ª—è–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
    console.log('\nüìà –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π:');
    
    const allUsers = await User.find({});
    let fixedCount = 0;
    
    for (const user of allUsers) {
      const actualGames = await Game.countDocuments({ user: user._id });
      const actualWagered = await Game.aggregate([
        { $match: { user: user._id } },
        { $group: { _id: null, total: { $sum: '$bet' } } }
      ]);
      const actualWon = await Game.aggregate([
        { $match: { user: user._id, win: true } },
        { $group: { _id: null, total: { $sum: { $add: ['$bet', '$profit'] } } } }
      ]);
      
      const realWagered = actualWagered[0]?.total || 0;
      const realWon = actualWon[0]?.total || 0;
      
      if (user.totalGames !== actualGames || 
          Math.abs(user.totalWagered - realWagered) > 0.01 ||
          Math.abs(user.totalWon - realWon) > 0.01) {
        
        await User.findByIdAndUpdate(user._id, {
          totalGames: actualGames,
          totalWagered: realWagered,
          totalWon: realWon
        });
        
        fixedCount++;
        console.log(`   ‚úÖ –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –¥–ª—è ${user.username || user.telegramId}`);
      }
    }
    
    console.log(`\n‚úÖ –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–æ ${fixedCount} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π`);
    console.log('‚úÖ –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ');
    
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–∏:', error);
  } finally {
    mongoose.disconnect();
  }
}

fixBalances();