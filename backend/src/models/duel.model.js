const { DataTypes } = require('sequelize');
const { sequelize } = require('../config/database');

const Duel = sequelize.define('Duel', {
  id: {
    type: DataTypes.INTEGER,
    primaryKey: true,
    autoIncrement: true
  },
  
  // –ë–∞–∑–æ–≤–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –¥—É—ç–ª–∏
  sessionId: {
    type: DataTypes.STRING,
    unique: true,
    allowNull: false,
    comment: '–£–Ω–∏–∫–∞–ª—å–Ω—ã–π –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä —Å–µ—Å—Å–∏–∏ –¥—É—ç–ª–∏'
  },
  
  // –£—á–∞—Å—Ç–Ω–∏–∫–∏ –¥—É—ç–ª–∏
  challengerId: {
    type: DataTypes.STRING,
    allowNull: false,
    comment: 'ID –∏–Ω–∏—Ü–∏–∞—Ç–æ—Ä–∞ –¥—É—ç–ª–∏'
  },
  challengerUsername: {
    type: DataTypes.STRING,
    allowNull: false,
    comment: 'Username –∏–Ω–∏—Ü–∏–∞—Ç–æ—Ä–∞'
  },
  opponentId: {
    type: DataTypes.STRING,
    allowNull: true,
    comment: 'ID –ø—Ä–æ—Ç–∏–≤–Ω–∏–∫–∞ (null –¥–ª—è –æ—Ç–∫—Ä—ã—Ç—ã—Ö –¥—É—ç–ª–µ–π)'
  },
  opponentUsername: {
    type: DataTypes.STRING,
    allowNull: true,
    comment: 'Username –ø—Ä–æ—Ç–∏–≤–Ω–∏–∫–∞'
  },
  
  // –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –∏–≥—Ä—ã
  gameType: {
    type: DataTypes.ENUM('üé≤', 'üéØ', '‚öΩ', 'üèÄ', 'üé≥', 'üé∞'),
    allowNull: false,
    comment: '–¢–∏–ø –∏–≥—Ä—ã —á–µ—Ä–µ–∑ —ç–º–æ–¥–∑–∏'
  },
  format: {
    type: DataTypes.ENUM('bo1', 'bo3', 'bo5', 'bo7'),
    allowNull: false,
    defaultValue: 'bo1',
    comment: '–§–æ—Ä–º–∞—Ç –¥—É—ç–ª–∏ (best of N)'
  },
  winsRequired: {
    type: DataTypes.INTEGER,
    allowNull: false,
    comment: '–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–±–µ–¥ –¥–ª—è –≤—ã–∏–≥—Ä—ã—à–∞ —Å–µ—Ä–∏–∏'
  },
  
  // –§–∏–Ω–∞–Ω—Å–æ–≤–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è
  amount: {
    type: DataTypes.DECIMAL(10, 2),
    allowNull: false,
    comment: '–°—Ç–∞–≤–∫–∞ –∫–∞–∂–¥–æ–≥–æ –∏–≥—Ä–æ–∫–∞ –≤ USDT'
  },
  totalAmount: {
    type: DataTypes.DECIMAL(10, 2),
    allowNull: false,
    comment: '–û–±—â–∏–π –±–∞–Ω–∫ (amount * 2)'
  },
  winAmount: {
    type: DataTypes.DECIMAL(10, 2),
    allowNull: false,
    comment: '–°—É–º–º–∞ –≤—ã–∏–≥—Ä—ã—à–∞ (totalAmount * 0.95)'
  },
  commission: {
    type: DataTypes.DECIMAL(10, 2),
    allowNull: false,
    comment: '–ö–æ–º–∏—Å—Å–∏—è –∫–∞–∑–∏–Ω–æ (totalAmount * 0.05)'
  },
  
  // –°—Ç–∞—Ç—É—Å –¥—É—ç–ª–∏
  status: {
    type: DataTypes.ENUM('pending', 'accepted', 'active', 'completed', 'cancelled', 'expired'),
    allowNull: false,
    defaultValue: 'pending',
    comment: '–¢–µ–∫—É—â–∏–π —Å—Ç–∞—Ç—É—Å –¥—É—ç–ª–∏'
  },
  
  // –†–µ–∑—É–ª—å—Ç–∞—Ç—ã
  winnerId: {
    type: DataTypes.STRING,
    allowNull: true,
    comment: 'ID –ø–æ–±–µ–¥–∏—Ç–µ–ª—è'
  },
  winnerUsername: {
    type: DataTypes.STRING,
    allowNull: true,
    comment: 'Username –ø–æ–±–µ–¥–∏—Ç–µ–ª—è'
  },
  challengerScore: {
    type: DataTypes.INTEGER,
    defaultValue: 0,
    comment: '–°—á–µ—Ç –∏–Ω–∏—Ü–∏–∞—Ç–æ—Ä–∞'
  },
  opponentScore: {
    type: DataTypes.INTEGER,
    defaultValue: 0,
    comment: '–°—á–µ—Ç –ø—Ä–æ—Ç–∏–≤–Ω–∏–∫–∞'
  },
  
  // –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —á–∞—Ç–µ
  chatId: {
    type: DataTypes.STRING,
    allowNull: false,
    comment: 'ID —á–∞—Ç–∞ –≥–¥–µ —Å–æ–∑–¥–∞–Ω–∞ –¥—É—ç–ª—å'
  },
  chatType: {
    type: DataTypes.ENUM('private', 'group', 'supergroup', 'channel'),
    allowNull: false,
    comment: '–¢–∏–ø —á–∞—Ç–∞'
  },
  messageId: {
    type: DataTypes.INTEGER,
    allowNull: true,
    comment: 'ID —Å–æ–æ–±—â–µ–Ω–∏—è —Å –¥—É—ç–ª—å—é'
  },
  
  // –í—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è
  expiresAt: {
    type: DataTypes.DATE,
    allowNull: true,
    comment: '–í—Ä–µ–º—è –∏—Å—Ç–µ—á–µ–Ω–∏—è –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏—è'
  },
  startedAt: {
    type: DataTypes.DATE,
    allowNull: true,
    comment: '–í—Ä–µ–º—è –Ω–∞—á–∞–ª–∞ –¥—É—ç–ª–∏'
  },
  completedAt: {
    type: DataTypes.DATE,
    allowNull: true,
    comment: '–í—Ä–µ–º—è –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –¥—É—ç–ª–∏'
  },
  
  // –ú–µ—Ç–∞–¥–∞–Ω–Ω—ã–µ
  metadata: {
    type: DataTypes.JSON,
    allowNull: true,
    comment: '–î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ (IP –∞–¥—Ä–µ—Å–∞, –∏—Å—Ç–æ—á–Ω–∏–∫ –∏ —Ç.–¥.)'
  }
}, {
  tableName: 'duels',
  timestamps: true,
  paranoid: true, // –ú—è–≥–∫–æ–µ —É–¥–∞–ª–µ–Ω–∏–µ
  indexes: [
    { fields: ['sessionId'] },
    { fields: ['challengerId'] },
    { fields: ['opponentId'] },
    { fields: ['status'] },
    { fields: ['chatId'] },
    { fields: ['createdAt'] },
    { fields: ['winnerId'] },
    { fields: ['gameType'] }
  ]
});

// –í–∏—Ä—Ç—É–∞–ª—å–Ω—ã–µ –ø–æ–ª—è
Duel.prototype.getGameName = function() {
  const gameNames = {
    'üé≤': '–ö–æ—Å—Ç–∏',
    'üéØ': '–î–∞—Ä—Ç—Å',
    '‚öΩ': '–§—É—Ç–±–æ–ª',
    'üèÄ': '–ë–∞—Å–∫–µ—Ç–±–æ–ª',
    'üé≥': '–ë–æ—É–ª–∏–Ω–≥',
    'üé∞': '–°–ª–æ—Ç—ã'
  };
  return gameNames[this.gameType] || '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∏–≥—Ä–∞';
};

Duel.prototype.getFormatName = function() {
  const formatNames = {
    'bo1': 'Bo1 (1 —Ä–∞—É–Ω–¥)',
    'bo3': 'Bo3 (–¥–æ 2 –ø–æ–±–µ–¥)',
    'bo5': 'Bo5 (–¥–æ 3 –ø–æ–±–µ–¥)',
    'bo7': 'Bo7 (–¥–æ 4 –ø–æ–±–µ–¥)'
  };
  return formatNames[this.format] || '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç';
};

Duel.prototype.isExpired = function() {
  return this.expiresAt && new Date() > this.expiresAt;
};

Duel.prototype.canAccept = function(userId) {
  return this.status === 'pending' && 
         !this.isExpired() && 
         this.challengerId !== userId &&
         (!this.opponentId || this.opponentId === userId);
};

Duel.prototype.isParticipant = function(userId) {
  return this.challengerId === userId || this.opponentId === userId;
};

// –•—É–∫–∏ –º–æ–¥–µ–ª–∏
Duel.addHook('beforeCreate', (duel) => {
  // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º sessionId –µ—Å–ª–∏ –Ω–µ –∑–∞–¥–∞–Ω
  if (!duel.sessionId) {
    duel.sessionId = `duel_${Date.now()}_${Math.random().toString(36).substr(2, 9)}`;
  }
  
  // –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º —Ñ–∏–Ω–∞–Ω—Å–æ–≤—ã–µ –ø–æ–ª—è
  duel.totalAmount = duel.amount * 2;
  duel.winAmount = duel.totalAmount * 0.95;
  duel.commission = duel.totalAmount * 0.05;
  
  // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–±–µ–¥ –¥–ª—è —Ñ–æ—Ä–º–∞—Ç–∞
  const winsMap = { bo1: 1, bo3: 2, bo5: 3, bo7: 4 };
  duel.winsRequired = winsMap[duel.format] || 1;
  
  // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –≤—Ä–µ–º—è –∏—Å—Ç–µ—á–µ–Ω–∏—è (5 –º–∏–Ω—É—Ç –¥–ª—è –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏–π)
  if (duel.status === 'pending') {
    duel.expiresAt = new Date(Date.now() + 5 * 60 * 1000);
  }
});

Duel.addHook('beforeUpdate', (duel) => {
  // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –≤—Ä–µ–º—è –Ω–∞—á–∞–ª–∞ –ø—Ä–∏ –ø—Ä–∏–Ω—è—Ç–∏–∏ –¥—É—ç–ª–∏
  if (duel.changed('status') && duel.status === 'active' && !duel.startedAt) {
    duel.startedAt = new Date();
  }
  
  // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –≤—Ä–µ–º—è –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –ø—Ä–∏ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–∏ –¥—É—ç–ª–∏
  if (duel.changed('status') && duel.status === 'completed' && !duel.completedAt) {
    duel.completedAt = new Date();
  }
});

// –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å–≤—è–∑–∏ —Å –¥—Ä—É–≥–∏–º–∏ –º–æ–¥–µ–ª—è–º–∏
Duel.associate = function(models) {
  // –î—É—ç–ª—å –∏–º–µ–µ—Ç –º–Ω–æ–≥–æ —Ä–∞—É–Ω–¥–æ–≤
  Duel.hasMany(models.DuelRound, {
    foreignKey: 'duelId',
    as: 'rounds',
    onDelete: 'CASCADE'
  });
  
  // –î—É—ç–ª—å –º–æ–∂–µ—Ç –∏–º–µ—Ç—å –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏–µ
  Duel.hasOne(models.DuelInvitation, {
    foreignKey: 'duelId',
    as: 'invitation'
  });
  
  // –î—É—ç–ª—å —Å–≤—è–∑–∞–Ω–∞ —Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º–∏ (–∏–Ω–∏—Ü–∏–∞—Ç–æ—Ä –∏ –ø—Ä–æ—Ç–∏–≤–Ω–∏–∫)
  // –°–≤—è–∑–∏ —Å User –º–æ–¥–µ–ª—å—é –±—É–¥—É—Ç –¥–æ–±–∞–≤–ª–µ–Ω—ã –ø–æ–∑–∂–µ –µ—Å–ª–∏ –ø–æ–Ω–∞–¥–æ–±–∏—Ç—Å—è
};

module.exports = Duel;