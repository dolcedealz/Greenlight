// fix_locked_funds.js - –°–∫—Ä–∏–ø—Ç –¥–ª—è –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è –ø–æ–ª—è lockedFunds —É —Å—É—â–µ—Å—Ç–≤—É—é—â–∏—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
require('dotenv').config();
const mongoose = require('mongoose');

// –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
const connectDB = async () => {
  try {
    await mongoose.connect(process.env.MONGODB_URI);
    console.log('‚úÖ –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ MongoDB —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ');
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ MongoDB:', error);
    process.exit(1);
  }
};

// –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º –º–æ–¥–µ–ª—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
const User = require('./src/models/user.model');

async function fixLockedFunds() {
  try {
    console.log('üîß –ù–∞—á–∏–Ω–∞–µ–º –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø–æ–ª—è lockedFunds...');
    
    // –ù–∞—Ö–æ–¥–∏–º –≤—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π, —É –∫–æ—Ç–æ—Ä—ã—Ö lockedFunds –Ω–µ —è–≤–ª—è–µ—Ç—Å—è –º–∞—Å—Å–∏–≤–æ–º
    const usersToFix = await User.find({
      $or: [
        { lockedFunds: { $type: "number" } },  // –ï—Å–ª–∏ lockedFunds - —á–∏—Å–ª–æ
        { lockedFunds: { $exists: false } },   // –ï—Å–ª–∏ lockedFunds –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
        { lockedFunds: null }                  // –ï—Å–ª–∏ lockedFunds —Ä–∞–≤–Ω–æ null
      ]
    });
    
    console.log(`üìä –ù–∞–π–¥–µ–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –¥–ª—è –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è: ${usersToFix.length}`);
    
    if (usersToFix.length === 0) {
      console.log('‚úÖ –í—Å–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ —É–∂–µ –∏–º–µ—é—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ –ø–æ–ª–µ lockedFunds');
      return;
    }
    
    // –ò—Å–ø—Ä–∞–≤–ª—è–µ–º –∫–∞–∂–¥–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    let fixedCount = 0;
    for (const user of usersToFix) {
      try {
        console.log(`üîß –ò—Å–ø—Ä–∞–≤–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: ${user.telegramId} (${user.firstName})`);
        
        // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
        const updates = {
          lockedFunds: [],
          totalWagered: user.totalWagered || 0,
          totalWon: user.totalWon || 0,
          totalGames: user.totalGames || 0
        };
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∏ –∏—Å–ø—Ä–∞–≤–ª—è–µ–º freespins
        if (!user.freespins || typeof user.freespins !== 'object') {
          updates.freespins = {
            slots: 0,
            coin: 0,
            mines: 0
          };
        } else {
          // –£–±–µ–∂–¥–∞–µ–º—Å—è, —á—Ç–æ –≤—Å–µ –ø–æ–ª—è freespins –ø—Ä–∏—Å—É—Ç—Å—Ç–≤—É—é—Ç
          updates.freespins = {
            slots: user.freespins.slots || 0,
            coin: user.freespins.coin || 0,
            mines: user.freespins.mines || 0
          };
        }
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º activeDepositBonuses
        if (!Array.isArray(user.activeDepositBonuses)) {
          updates.activeDepositBonuses = [];
        }
        
        await User.updateOne(
          { _id: user._id },
          { $set: updates }
        );
        
        fixedCount++;
        console.log(`‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å ${user.telegramId} –∏—Å–ø—Ä–∞–≤–ª–µ–Ω`);
        
      } catch (userError) {
        console.error(`‚ùå –û—à–∏–±–∫–∞ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ${user.telegramId}:`, userError);
      }
    }
    
    console.log(`üéâ –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ! –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: ${fixedCount}`);
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
    const remainingBrokenUsers = await User.find({
      $or: [
        { lockedFunds: { $type: "number" } },
        { lockedFunds: { $exists: false } },
        { lockedFunds: null }
      ]
    });
    
    if (remainingBrokenUsers.length === 0) {
      console.log('‚úÖ –í—Å–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ —É—Å–ø–µ—à–Ω–æ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω—ã!');
    } else {
      console.log(`‚ö†Ô∏è –û—Å—Ç–∞–ª–∏—Å—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ —Å –ø—Ä–æ–±–ª–µ–º–∞–º–∏: ${remainingBrokenUsers.length}`);
    }
    
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–∏ lockedFunds:', error);
  }
}

async function main() {
  await connectDB();
  await fixLockedFunds();
  await mongoose.disconnect();
  console.log('üîå –°–æ–µ–¥–∏–Ω–µ–Ω–∏–µ —Å –ë–î –∑–∞–∫—Ä—ã—Ç–æ');
  process.exit(0);
}

// –ó–∞–ø—É—Å–∫ —Å–∫—Ä–∏–ø—Ç–∞
main().catch(error => {
  console.error('‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞:', error);
  process.exit(1);
});