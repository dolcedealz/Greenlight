// frontend/src/screens/EventsScreen.js
import React, { useState, useEffect } from 'react';
import { Header } from '../components/layout';
import { EventCard, EventDetails, EventBet } from '../components/events';
import { eventsApi } from '../services/api';
import useTactileFeedback from '../hooks/useTactileFeedback';
import '../styles/EventsScreen.css';

const EventsScreen = ({ balance, onBalanceUpdate }) => {
  const [events, setEvents] = useState([]);
  const [selectedEvent, setSelectedEvent] = useState(null);
  const [showBetModal, setShowBetModal] = useState(false);
  const [selectedOutcome, setSelectedOutcome] = useState(null);
  const [loading, setLoading] = useState(true);
  const [error, setError] = useState(null);
  const [refreshing, setRefreshing] = useState(false);

  const { buttonPressFeedback, selectionChanged, successNotification, errorNotification } = useTactileFeedback();

  // –ó–∞–≥—Ä—É–∑–∫–∞ —Å–æ–±—ã—Ç–∏–π –ø—Ä–∏ –º–æ–Ω—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏
  useEffect(() => {
    fetchEvents();
    
    // –ê–≤—Ç–æ–æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∫–∞–∂–¥—ã–µ 30 —Å–µ–∫—É–Ω–¥
    const interval = setInterval(fetchEvents, 30000);
    return () => clearInterval(interval);
  }, []);

  // –ó–∞–≥—Ä—É–∑–∫–∞ –∞–∫—Ç–∏–≤–Ω—ã—Ö —Å–æ–±—ã—Ç–∏–π
  const fetchEvents = async (showLoader = true) => {
    try {
      if (showLoader) {
        setLoading(true);
      } else {
        setRefreshing(true);
      }
      
      const response = await eventsApi.getActiveEvents();
      
      if (response.data.success) {
        setEvents(response.data.data.events);
        setError(null);
      } else {
        setError('–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å —Å–æ–±—ã—Ç–∏—è');
      }
    } catch (err) {
      console.error('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Å–æ–±—ã—Ç–∏–π:', err);
      setError('–û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ —Å–µ—Ä–≤–µ—Ä—É');
    } finally {
      setLoading(false);
      setRefreshing(false);
    }
  };

  // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤—ã–±–æ—Ä–∞ —Å–æ–±—ã—Ç–∏—è
  const handleEventSelect = (event) => {
    buttonPressFeedback();
    setSelectedEvent(event);
  };

  // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤—ã–±–æ—Ä–∞ –∏—Å—Ö–æ–¥–∞ –¥–ª—è —Å—Ç–∞–≤–∫–∏
  const handleOutcomeSelect = (event, outcomeId) => {
    selectionChanged();
    const outcome = event.outcomes.find(o => o.id === outcomeId);
    setSelectedEvent(event);
    setSelectedOutcome({ id: outcomeId, name: outcome.name });
    setShowBetModal(true);
  };

  // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Ä–∞–∑–º–µ—â–µ–Ω–∏—è —Å—Ç–∞–≤–∫–∏
  const handlePlaceBet = async (betData) => {
    try {
      buttonPressFeedback();
      
      const response = await eventsApi.placeBet(
        selectedEvent._id,
        selectedOutcome.id,
        betData.amount
      );

      if (response.data.success) {
        successNotification();
        
        // –û–±–Ω–æ–≤–ª—è–µ–º –±–∞–ª–∞–Ω—Å
        onBalanceUpdate(response.data.data.newBalance);
        
        // –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ–±—ã—Ç–∏–µ —Å –Ω–æ–≤—ã–º–∏ –∫–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç–∞–º–∏
        const updatedEvents = events.map(event => 
          event._id === selectedEvent._id ? response.data.data.event : event
        );
        setEvents(updatedEvents);
        setSelectedEvent(response.data.data.event);
        
        // –ó–∞–∫—Ä—ã–≤–∞–µ–º –º–æ–¥–∞–ª—å–Ω–æ–µ –æ–∫–Ω–æ
        setShowBetModal(false);
        setSelectedOutcome(null);
        
        // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ
        if (window.Telegram?.WebApp) {
          window.Telegram.WebApp.showAlert(
            `–°—Ç–∞–≤–∫–∞ —Ä–∞–∑–º–µ—â–µ–Ω–∞!\n${betData.amount} USDT –Ω–∞ "${selectedOutcome.name}"\n–ü–æ—Ç–µ–Ω—Ü–∏–∞–ª—å–Ω—ã–π –≤—ã–∏–≥—Ä—ã—à: ${(betData.amount * response.data.data.event.currentOdds[selectedOutcome.id]).toFixed(2)} USDT`
          );
        }
      } else {
        throw new Error(response.data.message);
      }
    } catch (err) {
      console.error('–û—à–∏–±–∫–∞ —Ä–∞–∑–º–µ—â–µ–Ω–∏—è —Å—Ç–∞–≤–∫–∏:', err);
      errorNotification();
      
      const errorMessage = err.response?.data?.message || err.message || '–û—à–∏–±–∫–∞ —Ä–∞–∑–º–µ—â–µ–Ω–∏—è —Å—Ç–∞–≤–∫–∏';
      
      if (window.Telegram?.WebApp) {
        window.Telegram.WebApp.showAlert(`–û—à–∏–±–∫–∞: ${errorMessage}`);
      } else {
        alert(`–û—à–∏–±–∫–∞: ${errorMessage}`);
      }
    }
  };

  // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∑–∞–∫—Ä—ã—Ç–∏—è –º–æ–¥–∞–ª—å–Ω–æ–≥–æ –æ–∫–Ω–∞
  const handleCloseBetModal = () => {
    buttonPressFeedback();
    setShowBetModal(false);
    setSelectedOutcome(null);
  };

  // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤–æ–∑–≤—Ä–∞—Ç–∞ –∫ —Å–ø–∏—Å–∫—É —Å–æ–±—ã—Ç–∏–π
  const handleBackToList = () => {
    buttonPressFeedback();
    setSelectedEvent(null);
  };

  // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è
  const handleRefresh = () => {
    buttonPressFeedback();
    fetchEvents(false);
  };

  // –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –≤—Ä–µ–º–µ–Ω–∏ –¥–æ –æ–∫–æ–Ω—á–∞–Ω–∏—è
  const formatTimeLeft = (endTime) => {
    const now = new Date();
    const end = new Date(endTime);
    const diff = end - now;

    if (diff <= 0) {
      return '–ó–∞–≤–µ—Ä—à–µ–Ω–æ';
    }

    const days = Math.floor(diff / (1000 * 60 * 60 * 24));
    const hours = Math.floor((diff % (1000 * 60 * 60 * 24)) / (1000 * 60 * 60));
    const minutes = Math.floor((diff % (1000 * 60 * 60)) / (1000 * 60));

    if (days > 0) {
      return `${days}–¥ ${hours}—á`;
    } else if (hours > 0) {
      return `${hours}—á ${minutes}–º`;
    } else {
      return `${minutes}–º`;
    }
  };

  // –†–µ–Ω–¥–µ—Ä –∑–∞–≥—Ä—É–∑–∫–∏
  if (loading) {
    return (
      <div className="events-screen">
        <Header balance={balance} />
        <div className="events-loading">
          <div className="loader"></div>
          <p>–ó–∞–≥—Ä—É–∑–∫–∞ —Å–æ–±—ã—Ç–∏–π...</p>
        </div>
      </div>
    );
  }

  // –†–µ–Ω–¥–µ—Ä –æ—à–∏–±–∫–∏
  if (error && !events.length) {
    return (
      <div className="events-screen">
        <Header balance={balance} />
        <div className="events-error">
          <h2>–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏</h2>
          <p>{error}</p>
          <button onClick={() => fetchEvents()} className="retry-button">
            –ü–æ–ø—Ä–æ–±–æ–≤–∞—Ç—å —Å–Ω–æ–≤–∞
          </button>
        </div>
      </div>
    );
  }

  // –†–µ–Ω–¥–µ—Ä –¥–µ—Ç–∞–ª–µ–π —Å–æ–±—ã—Ç–∏—è
  if (selectedEvent) {
    return (
      <div className="events-screen">
        <Header balance={balance} />
        
        <div className="events-header">
          <button className="back-button" onClick={handleBackToList}>
            ‚Üê
          </button>
          <h1 className="events-title">–î–µ—Ç–∞–ª–∏ —Å–æ–±—ã—Ç–∏—è</h1>
          <button className="refresh-button" onClick={handleRefresh}>
            üîÑ
          </button>
        </div>

        <EventDetails 
          event={selectedEvent}
          onOutcomeSelect={handleOutcomeSelect}
          formatTimeLeft={formatTimeLeft}
        />

        {/* –ú–æ–¥–∞–ª—å–Ω–æ–µ –æ–∫–Ω–æ —Å—Ç–∞–≤–∫–∏ */}
        {showBetModal && selectedOutcome && (
          <EventBet
            event={selectedEvent}
            outcome={selectedOutcome}
            balance={balance}
            onPlaceBet={handlePlaceBet}
            onClose={handleCloseBetModal}
          />
        )}
      </div>
    );
  }

  // –†–µ–Ω–¥–µ—Ä —Å–ø–∏—Å–∫–∞ —Å–æ–±—ã—Ç–∏–π
  return (
    <div className="events-screen">
      <Header balance={balance} />
      
      <div className="events-header">
        <h1 className="events-title">–°–æ–±—ã—Ç–∏—è</h1>
        <button 
          className={`refresh-button ${refreshing ? 'refreshing' : ''}`} 
          onClick={handleRefresh}
          disabled={refreshing}
        >
          üîÑ
        </button>
      </div>

      {error && (
        <div className="events-error-banner">
          <p>{error}</p>
          <button onClick={() => fetchEvents()}>–û–±–Ω–æ–≤–∏—Ç—å</button>
        </div>
      )}

      <div className="events-list">
        {events.length === 0 ? (
          <div className="no-events">
            <div className="no-events-icon">üéØ</div>
            <h3>–ù–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö —Å–æ–±—ã—Ç–∏–π</h3>
            <p>–í –¥–∞–Ω–Ω—ã–π –º–æ–º–µ–Ω—Ç –Ω–µ—Ç —Å–æ–±—ã—Ç–∏–π –¥–ª—è —Å—Ç–∞–≤–æ–∫. –°–ª–µ–¥–∏—Ç–µ –∑–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è–º–∏!</p>
          </div>
        ) : (
          events.map(event => (
            <EventCard
              key={event._id}
              event={event}
              onSelect={handleEventSelect}
              onOutcomeSelect={handleOutcomeSelect}
              formatTimeLeft={formatTimeLeft}
            />
          ))
        )}
      </div>

      {/* –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏–æ–Ω–Ω—ã–π –±–ª–æ–∫ */}
      <div className="events-info">
        <h3>‚ÑπÔ∏è –ö–∞–∫ —ç—Ç–æ —Ä–∞–±–æ—Ç–∞–µ—Ç</h3>
        <ul>
          <li>–í—ã–±–µ—Ä–∏—Ç–µ —Å–æ–±—ã—Ç–∏–µ –∏ –∏—Å—Ö–æ–¥</li>
          <li>–ö–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç—ã –∏–∑–º–µ–Ω—è—é—Ç—Å—è –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Å—Ç–∞–≤–æ–∫</li>
          <li>–ö–æ–º–∏—Å—Å–∏—è –∫–∞–∑–∏–Ω–æ —Å–æ—Å—Ç–∞–≤–ª—è–µ—Ç 5%</li>
          <li>–í—ã–ø–ª–∞—Ç—ã –ø—Ä–æ–∏–∑–≤–æ–¥—è—Ç—Å—è –ø–æ—Å–ª–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è —Å–æ–±—ã—Ç–∏—è</li>
        </ul>
      </div>
    </div>
  );
};

export default EventsScreen;
