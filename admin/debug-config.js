#!/usr/bin/env node

/**
 * –û—Ç–ª–∞–¥–∫–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ –∞–¥–º–∏–Ω-–±–æ—Ç–∞
 * –ü—Ä–æ–≤–µ—Ä—è–µ—Ç –≤—Å–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è –∏ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
 */

require('dotenv').config();

console.log('üîß –û–¢–õ–ê–î–ö–ê –ö–û–ù–§–ò–ì–£–†–ê–¶–ò–ò –ê–î–ú–ò–ù-–ë–û–¢–ê\n');

console.log('=== –ü–ï–†–ï–ú–ï–ù–ù–´–ï –û–ö–†–£–ñ–ï–ù–ò–Ø ===');
console.log(`API_URL: ${process.env.API_URL || '–ù–ï –£–°–¢–ê–ù–û–í–õ–ï–ù–ê'}`);
console.log(`ADMIN_API_TOKEN: ${process.env.ADMIN_API_TOKEN ? '–£–°–¢–ê–ù–û–í–õ–ï–ù' : '–ù–ï –£–°–¢–ê–ù–û–í–õ–ï–ù'}`);
console.log(`ADMIN_BOT_TOKEN: ${process.env.ADMIN_BOT_TOKEN ? '–£–°–¢–ê–ù–û–í–õ–ï–ù' : '–ù–ï –£–°–¢–ê–ù–û–í–õ–ï–ù'}`);
console.log(`ADMIN_IDS: ${process.env.ADMIN_IDS || '–ù–ï –£–°–¢–ê–ù–û–í–õ–ï–ù–´'}`);

console.log('\n=== –§–ê–ô–õ–´ –ö–û–ù–§–ò–ì–£–†–ê–¶–ò–ò ===');

// –ü—Ä–æ–≤–µ—Ä—è–µ–º config.js
try {
  const config = require('./src/config');
  console.log(`config.js - apiUrl: ${config.apiUrl}`);
  console.log(`config.js - adminToken: ${config.adminToken ? '–£–°–¢–ê–ù–û–í–õ–ï–ù' : '–ù–ï –£–°–¢–ê–ù–û–í–õ–ï–ù'}`);
} catch (error) {
  console.log(`config.js - –û–®–ò–ë–ö–ê: ${error.message}`);
}

// –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–æ–º–∞–Ω–¥—ã
const commands = [
  'index.js',
  'stats.command.js', 
  'users.command.js',
  'transactions.command.js',
  'promo.command.js',
  'monitoring.command.js'
];

console.log('\n=== –ü–†–û–í–ï–†–ö–ê –ö–û–ú–ê–ù–î ===');
for (const command of commands) {
  try {
    const fs = require('fs');
    const path = require('path');
    const filePath = path.join(__dirname, 'src', 'commands', command);
    
    if (fs.existsSync(filePath)) {
      const content = fs.readFileSync(filePath, 'utf8');
      
      // –ò—â–µ–º hardcoded URLs
      const hardcodedUrls = content.match(/https:\/\/[^'"\s]+/g) || [];
      const hasProcessEnv = content.includes('process.env.API_URL');
      
      console.log(`${command}:`);
      console.log(`  - –ò—Å–ø–æ–ª—å–∑—É–µ—Ç process.env.API_URL: ${hasProcessEnv ? '–î–ê' : '–ù–ï–¢'}`);
      
      if (hardcodedUrls.length > 0) {
        console.log(`  - –ù–∞–π–¥–µ–Ω—ã hardcoded URLs: ${hardcodedUrls.join(', ')}`);
      } else {
        console.log(`  - Hardcoded URLs: –ù–ï –ù–ê–ô–î–ï–ù–´`);
      }
    } else {
      console.log(`${command}: –§–ê–ô–õ –ù–ï –ù–ê–ô–î–ï–ù`);
    }
  } catch (error) {
    console.log(`${command}: –û–®–ò–ë–ö–ê - ${error.message}`);
  }
}

console.log('\n=== –ü–†–û–í–ï–†–ö–ê HANDLERS ===');
try {
  const fs = require('fs');
  const path = require('path');
  const filePath = path.join(__dirname, 'src', 'handlers', 'callback.handler.js');
  
  if (fs.existsSync(filePath)) {
    const content = fs.readFileSync(filePath, 'utf8');
    
    const hardcodedUrls = content.match(/https:\/\/[^'"\s]+/g) || [];
    const hasProcessEnv = content.includes('process.env.API_URL');
    
    console.log(`callback.handler.js:`);
    console.log(`  - –ò—Å–ø–æ–ª—å–∑—É–µ—Ç process.env.API_URL: ${hasProcessEnv ? '–î–ê' : '–ù–ï–¢'}`);
    
    if (hardcodedUrls.length > 0) {
      console.log(`  - –ù–∞–π–¥–µ–Ω—ã hardcoded URLs: ${hardcodedUrls.join(', ')}`);
    } else {
      console.log(`  - Hardcoded URLs: –ù–ï –ù–ê–ô–î–ï–ù–´`);
    }
  }
} catch (error) {
  console.log(`callback.handler.js: –û–®–ò–ë–ö–ê - ${error.message}`);
}

console.log('\n=== –†–ï–ö–û–ú–ï–ù–î–ê–¶–ò–ò ===');

if (!process.env.API_URL) {
  console.log('‚ùå –£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—É—é API_URL –≤ .env —Ñ–∞–π–ª');
  console.log('   –ü—Ä–∏–º–µ—Ä: API_URL=https://api.greenlight-casino.eu/api');
}

if (!process.env.ADMIN_API_TOKEN) {
  console.log('‚ùå –£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—É—é ADMIN_API_TOKEN –≤ .env —Ñ–∞–π–ª');
}

if (!process.env.ADMIN_BOT_TOKEN) {
  console.log('‚ùå –£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—É—é ADMIN_BOT_TOKEN –≤ .env —Ñ–∞–π–ª');
}

if (!process.env.ADMIN_IDS) {
  console.log('‚ùå –£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—É—é ADMIN_IDS –≤ .env —Ñ–∞–π–ª');
  console.log('   –ü—Ä–∏–º–µ—Ä: ADMIN_IDS=418684940,123456789');
}

console.log('\n‚úÖ –û—Ç–ª–∞–¥–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞');