// backend/src/scripts/setup-giveaways.js
const mongoose = require('mongoose');
const { GiveawayPrize, Giveaway, User } = require('../models');
require('dotenv').config();

async function setupGiveaways() {
  try {
    // –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
    await mongoose.connect(process.env.MONGODB_URI);
    console.log('‚úÖ –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ MongoDB —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ');

    // –û—á–∏—Å—Ç–∫–∞ —Å—É—â–µ—Å—Ç–≤—É—é—â–∏—Ö –¥–∞–Ω–Ω—ã—Ö (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ)
    const clearExisting = process.argv.includes('--clear');
    if (clearExisting) {
      console.log('üßπ –û—á–∏—Å—Ç–∫–∞ —Å—É—â–µ—Å—Ç–≤—É—é—â–∏—Ö –¥–∞–Ω–Ω—ã—Ö...');
      await GiveawayPrize.deleteMany({});
      await Giveaway.deleteMany({});
      console.log('‚úÖ –î–∞–Ω–Ω—ã–µ –æ—á–∏—â–µ–Ω—ã');
    }

    // –°–æ–∑–¥–∞–Ω–∏–µ –ø—Ä–∏–∑–æ–≤
    console.log('üéÅ –°–æ–∑–¥–∞–Ω–∏–µ –ø—Ä–∏–∑–æ–≤...');
    const prizes = await createPrizes();
    console.log(`‚úÖ –°–æ–∑–¥–∞–Ω–æ –ø—Ä–∏–∑–æ–≤: ${prizes.length}`);

    // –°–æ–∑–¥–∞–Ω–∏–µ —Ç–µ—Å—Ç–æ–≤—ã—Ö —Ä–æ–∑—ã–≥—Ä—ã—à–µ–π
    console.log('üéØ –°–æ–∑–¥–∞–Ω–∏–µ —Ç–µ—Å—Ç–æ–≤—ã—Ö —Ä–æ–∑—ã–≥—Ä—ã—à–µ–π...');
    const giveaways = await createTestGiveaways(prizes);
    console.log(`‚úÖ –°–æ–∑–¥–∞–Ω–æ —Ä–æ–∑—ã–≥—Ä—ã—à–µ–π: ${giveaways.length}`);

    console.log('\nüéâ –ù–∞—Å—Ç—Ä–æ–π–∫–∞ —Ä–æ–∑—ã–≥—Ä—ã—à–µ–π –∑–∞–≤–µ—Ä—à–µ–Ω–∞!');
    console.log('\nüìã –°–æ–∑–¥–∞–Ω–Ω—ã–µ –ø—Ä–∏–∑—ã:');
    prizes.forEach(prize => {
      console.log(`  - ${prize.name} (${prize.type})`);
    });

    console.log('\nüéØ –°–æ–∑–¥–∞–Ω–Ω—ã–µ —Ä–æ–∑—ã–≥—Ä—ã—à–∏:');
    giveaways.forEach(giveaway => {
      console.log(`  - ${giveaway.title} (${giveaway.type}, —Å—Ç–∞—Ç—É—Å: ${giveaway.status})`);
    });

  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏:', error);
  } finally {
    await mongoose.disconnect();
    process.exit(0);
  }
}

async function createPrizes() {
  // –ü–æ–ª—É—á–∞–µ–º –ø–µ—Ä–≤–æ–≥–æ –∞–¥–º–∏–Ω–∞ –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –ø—Ä–∏–∑–æ–≤
  const admin = await User.findOne({ role: 'admin' });
  const adminId = admin ? admin._id : null;

  const prizesData = [
    // Telegram Gifts
    {
      name: '–ó–æ–ª–æ—Ç–∞—è –∑–≤–µ–∑–¥–∞ Telegram',
      description: '–≠–∫—Å–∫–ª—é–∑–∏–≤–Ω—ã–π –ø–æ–¥–∞—Ä–æ–∫ –≤ Telegram',
      type: 'telegram_gift',
      value: 500,
      giftData: {
        telegramGiftId: 'gold_star_001',
        giftStickerId: 'star_gold'
      },
      createdBy: adminId
    },
    {
      name: '–°–µ—Ä–µ–±—Ä—è–Ω–∞—è –∑–≤–µ–∑–¥–∞ Telegram',
      description: '–ö—Ä–∞—Å–∏–≤—ã–π –ø–æ–¥–∞—Ä–æ–∫ –≤ Telegram',
      type: 'telegram_gift',
      value: 100,
      giftData: {
        telegramGiftId: 'silver_star_001',
        giftStickerId: 'star_silver'
      },
      createdBy: adminId
    },
    {
      name: '–ü—Ä–µ–º–∏—É–º —Å—Ç–∏–∫–µ—Ä-–ø–∞–∫',
      description: '–≠–∫—Å–∫–ª—é–∑–∏–≤–Ω—ã–µ —Å—Ç–∏–∫–µ—Ä—ã –¥–ª—è Telegram',
      type: 'telegram_gift',
      value: 50,
      giftData: {
        telegramGiftId: 'sticker_pack_001',
        giftStickerId: 'stickers_premium'
      },
      createdBy: adminId
    },

    // –ü—Ä–æ–º–æ–∫–æ–¥—ã
    {
      name: '–ü—Ä–æ–º–æ–∫–æ–¥ 50 USDT',
      description: '–ë–æ–Ω—É—Å –Ω–∞ –∏–≥—Ä–æ–≤–æ–π –±–∞–ª–∞–Ω—Å',
      type: 'promo_code',
      value: 50,
      createdBy: adminId
    },
    {
      name: '–ü—Ä–æ–º–æ–∫–æ–¥ 25 USDT',
      description: '–ë–æ–Ω—É—Å –Ω–∞ –∏–≥—Ä–æ–≤–æ–π –±–∞–ª–∞–Ω—Å',
      type: 'promo_code',
      value: 25,
      createdBy: adminId
    },
    {
      name: '–ü—Ä–æ–º–æ–∫–æ–¥ 10 USDT',
      description: '–ë–æ–Ω—É—Å –Ω–∞ –∏–≥—Ä–æ–≤–æ–π –±–∞–ª–∞–Ω—Å',
      type: 'promo_code',
      value: 10,
      createdBy: adminId
    },

    // –ë–æ–Ω—É—Å—ã –±–∞–ª–∞–Ω—Å–∞
    {
      name: '–ë–æ–Ω—É—Å 100 USDT',
      description: '–ü—Ä—è–º–æ–µ –ø–æ–ø–æ–ª–Ω–µ–Ω–∏–µ –±–∞–ª–∞–Ω—Å–∞',
      type: 'balance_bonus',
      value: 100,
      createdBy: adminId
    },
    {
      name: '–ë–æ–Ω—É—Å 20 USDT',
      description: '–ü—Ä—è–º–æ–µ –ø–æ–ø–æ–ª–Ω–µ–Ω–∏–µ –±–∞–ª–∞–Ω—Å–∞',
      type: 'balance_bonus',
      value: 20,
      createdBy: adminId
    }
  ];

  const prizes = [];
  for (const prizeData of prizesData) {
    const prize = new GiveawayPrize(prizeData);
    await prize.save();
    prizes.push(prize);
  }

  return prizes;
}

async function createTestGiveaways(prizes) {
  // –ü–æ–ª—É—á–∞–µ–º –∞–¥–º–∏–Ω–∞ –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è —Ä–æ–∑—ã–≥—Ä—ã—à–µ–π
  const admin = await User.findOne({ role: 'admin' });
  const adminId = admin ? admin._id : null;

  const now = new Date();
  const giveaways = [];

  // –°–æ–∑–¥–∞–µ–º –∞–∫—Ç–∏–≤–Ω—ã–π –µ–∂–µ–¥–Ω–µ–≤–Ω—ã–π —Ä–æ–∑—ã–≥—Ä—ã—à –Ω–∞ —Å–µ–≥–æ–¥–Ω—è
  const dailyPrize = prizes.find(p => p.type === 'promo_code' && p.value === 25);
  if (dailyPrize) {
    const todayStart = new Date(now);
    todayStart.setHours(0, 0, 0, 0);
    
    const todayEnd = new Date(now);
    todayEnd.setHours(19, 0, 0, 0);
    
    const todayDraw = new Date(now);
    todayDraw.setHours(20, 0, 0, 0);

    const dailyGiveaway = new Giveaway({
      title: `–ï–∂–µ–¥–Ω–µ–≤–Ω—ã–π —Ä–æ–∑—ã–≥—Ä—ã—à ${now.toLocaleDateString('ru-RU')}`,
      type: 'daily',
      prize: dailyPrize._id,
      winnersCount: 1,
      startDate: todayStart,
      endDate: todayEnd,
      drawDate: todayDraw,
      status: 'active',
      requiresDeposit: true,
      depositTimeframe: 'same_day',
      createdBy: adminId
    });

    await dailyGiveaway.save();
    giveaways.push(dailyGiveaway);
  }

  // –°–æ–∑–¥–∞–µ–º –∞–∫—Ç–∏–≤–Ω—ã–π –Ω–µ–¥–µ–ª—å–Ω—ã–π —Ä–æ–∑—ã–≥—Ä—ã—à
  const weeklyPrize = prizes.find(p => p.type === 'telegram_gift' && p.value === 500);
  if (weeklyPrize) {
    const weekStart = new Date(now);
    weekStart.setDate(now.getDate() - now.getDay()); // –ù–∞—á–∞–ª–æ –Ω–µ–¥–µ–ª–∏ (–≤–æ—Å–∫—Ä–µ—Å–µ–Ω—å–µ)
    weekStart.setHours(0, 0, 0, 0);
    
    const weekEnd = new Date(weekStart);
    weekEnd.setDate(weekStart.getDate() + 6);
    weekEnd.setHours(19, 0, 0, 0);
    
    const weekDraw = new Date(weekStart);
    weekDraw.setDate(weekStart.getDate() + 7);
    weekDraw.setHours(20, 0, 0, 0);

    const weeklyGiveaway = new Giveaway({
      title: `–ù–µ–¥–µ–ª—å–Ω—ã–π —Ä–æ–∑—ã–≥—Ä—ã—à ${weekStart.toLocaleDateString('ru-RU')}`,
      type: 'weekly',
      prize: weeklyPrize._id,
      winnersCount: 3,
      startDate: weekStart,
      endDate: weekEnd,
      drawDate: weekDraw,
      status: 'active',
      requiresDeposit: true,
      depositTimeframe: 'same_week',
      createdBy: adminId
    });

    await weeklyGiveaway.save();
    giveaways.push(weeklyGiveaway);
  }

  // –°–æ–∑–¥–∞–µ–º –ø—Ä–∏–º–µ—Ä –∑–∞–≤–µ—Ä—à–µ–Ω–Ω–æ–≥–æ —Ä–æ–∑—ã–≥—Ä—ã—à–∞
  const completedPrize = prizes.find(p => p.type === 'promo_code' && p.value === 10);
  if (completedPrize) {
    const yesterday = new Date(now);
    yesterday.setDate(now.getDate() - 1);
    
    const yesterdayStart = new Date(yesterday);
    yesterdayStart.setHours(0, 0, 0, 0);
    
    const yesterdayEnd = new Date(yesterday);
    yesterdayEnd.setHours(19, 0, 0, 0);
    
    const yesterdayDraw = new Date(yesterday);
    yesterdayDraw.setHours(20, 0, 0, 0);

    const completedGiveaway = new Giveaway({
      title: `–ï–∂–µ–¥–Ω–µ–≤–Ω—ã–π —Ä–æ–∑—ã–≥—Ä—ã—à ${yesterday.toLocaleDateString('ru-RU')}`,
      type: 'daily',
      prize: completedPrize._id,
      winnersCount: 1,
      startDate: yesterdayStart,
      endDate: yesterdayEnd,
      drawDate: yesterdayDraw,
      status: 'completed',
      requiresDeposit: true,
      depositTimeframe: 'same_day',
      participationCount: 15,
      diceResult: {
        value: 4,
        timestamp: yesterdayDraw
      },
      createdBy: adminId
    });

    await completedGiveaway.save();
    giveaways.push(completedGiveaway);
  }

  return giveaways;
}

// –ó–∞–ø—É—Å–∫ —Å–∫—Ä–∏–ø—Ç–∞
setupGiveaways();