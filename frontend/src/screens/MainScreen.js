// frontend/src/screens/MainScreen.js
import React, { useState, useEffect } from 'react';
import { Header } from '../components/layout';
import { GameBlock, EventsPreview } from '../components/main';
import { userApi, eventsApi } from '../services';
import '../styles/MainScreen.css';

const MainScreen = ({ telegramWebApp, userData, onGameSelect, onEventsSelect, balance }) => {
  const [featuredEvent, setFeaturedEvent] = useState(null);
  const [loading, setLoading] = useState(true);
  const [error, setError] = useState(null);
  
  // –ó–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö –ø—Ä–∏ –º–æ–Ω—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏
  useEffect(() => {
    const fetchData = async () => {
      try {
        setLoading(true);
        setError(null);
        
        console.log('MainScreen: –ó–∞–≥—Ä—É–∑–∫–∞ –≥–ª–∞–≤–Ω–æ–≥–æ —Å–æ–±—ã—Ç–∏—è...');
        
        // –ó–∞–≥—Ä—É–∂–∞–µ–º –≥–ª–∞–≤–Ω–æ–µ —Å–æ–±—ã—Ç–∏–µ
        try {
          const eventResponse = await eventsApi.getFeaturedEvent();
          
          console.log('MainScreen: –û—Ç–≤–µ—Ç API —Å–æ–±—ã—Ç–∏–π:', eventResponse.data);
          
          if (eventResponse.data.success && eventResponse.data.data.event) {
            setFeaturedEvent(eventResponse.data.data.event);
            console.log('MainScreen: –ì–ª–∞–≤–Ω–æ–µ —Å–æ–±—ã—Ç–∏–µ –∑–∞–≥—Ä—É–∂–µ–Ω–æ:', eventResponse.data.data.event.title);
          } else {
            console.log('MainScreen: –ì–ª–∞–≤–Ω–æ–µ —Å–æ–±—ã—Ç–∏–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ');
            setFeaturedEvent(null);
          }
        } catch (eventError) {
          console.warn('MainScreen: –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –≥–ª–∞–≤–Ω–æ–≥–æ —Å–æ–±—ã—Ç–∏—è:', eventError);
          setFeaturedEvent(null);
          // –ù–µ –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –æ—à–∏–±–∫—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é, —Ç–∞–∫ –∫–∞–∫ —ç—Ç–æ –Ω–µ –∫—Ä–∏—Ç–∏—á–Ω–æ
        }
        
        setLoading(false);
      } catch (err) {
        console.error('MainScreen: –û–±—â–∞—è –æ—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –¥–∞–Ω–Ω—ã—Ö:', err);
        setError('–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –Ω–µ–∫–æ—Ç–æ—Ä—ã–µ –¥–∞–Ω–Ω—ã–µ.');
        setLoading(false);
      }
    };
    
    fetchData();
  }, []);
  
  // –ú–∞—Å—Å–∏–≤ –∏–≥—Ä
  const games = [
    { id: 'slots', name: '–°–ª–æ—Ç—ã', icon: 'üé∞' },
    { id: 'mines', name: '–ú–∏–Ω—ã', icon: 'üí£' },
    { id: 'crash', name: '–ö—Ä–∞—à', icon: 'üìà' },
    { id: 'coin', name: '–ú–æ–Ω–µ—Ç–∫–∞', icon: 'ü™ô' }
  ];
  
  // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤—ã–±–æ—Ä–∞ –∏–≥—Ä—ã
  const handleGameSelect = (gameId) => {
    console.log('MainScreen: –í—ã–±—Ä–∞–Ω–∞ –∏–≥—Ä–∞:', gameId);
    if (onGameSelect) {
      onGameSelect(gameId);
    }
  };
  
  // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤—ã–±–æ—Ä–∞ —Å–æ–±—ã—Ç–∏–π
  const handleEventsSelect = () => {
    console.log('MainScreen: –ü–µ—Ä–µ—Ö–æ–¥ –∫ —Å–æ–±—ã—Ç–∏—è–º');
    if (onEventsSelect) {
      onEventsSelect();
    }
  };
  
  return (
    <div className="main-screen">
      <Header balance={balance} />
      
      {loading ? (
        <div className="main-loading">
          <div className="loader"></div>
          <p>–ó–∞–≥—Ä—É–∑–∫–∞...</p>
        </div>
      ) : (
        <>
          {/* –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –æ—à–∏–±–∫—É, –µ—Å–ª–∏ –µ—Å—Ç—å */}
          {error && (
            <div className="main-error-banner">
              <p>{error}</p>
              <button onClick={() => window.location.reload()}>–û–±–Ω–æ–≤–∏—Ç—å</button>
            </div>
          )}
          
          {/* –ü—Ä–µ–≤—å—é —Å–æ–±—ã—Ç–∏—è - –ø–æ–∫–∞–∑—ã–≤–∞–µ–º —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –µ—Å—Ç—å —Å–æ–±—ã—Ç–∏–µ */}
          {featuredEvent ? (
            <EventsPreview 
              event={featuredEvent} 
              onClick={handleEventsSelect} 
            />
          ) : (
            <div className="events-preview-placeholder">
              <div className="events-header">
                <h3>üîÆ –°–æ–±—ã—Ç–∏—è</h3>
                <div className="events-status">–°–∫–æ—Ä–æ</div>
              </div>
              <div className="placeholder-content">
                <p>–û–∂–∏–¥–∞–π—Ç–µ –∏–Ω—Ç–µ—Ä–µ—Å–Ω—ã–µ —Å–æ–±—ã—Ç–∏—è –¥–ª—è —Å—Ç–∞–≤–æ–∫!</p>
                <button onClick={handleEventsSelect} className="placeholder-button">
                  –ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å –≤—Å–µ —Å–æ–±—ã—Ç–∏—è
                </button>
              </div>
            </div>
          )}
          
          {/* –ò–≥—Ä—ã - –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –≤—Å–µ–≥–¥–∞ */}
          <div className="games-container">
            <div className="games-title">–ò–≥—Ä—ã</div>
            <div className="games-grid">
              {games.map((game) => (
                <GameBlock
                  key={game.id}
                  name={game.name}
                  icon={game.icon}
                  onClick={() => handleGameSelect(game.id)}
                />
              ))}
            </div>
          </div>
        </>
      )}
    </div>
  );
};

export default MainScreen;
