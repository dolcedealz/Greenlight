// –£–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω—ã–π —Å–∫—Ä–∏–ø—Ç –æ—Ç–ª–∞–¥–∫–∏ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
const { User, Game, Transaction, ReferralEarning } = require('./src/models');
const mongoose = require('mongoose');

async function debugDatabase() {
  try {
    await mongoose.connect(process.env.MONGODB_URI || 'mongodb://localhost:27017/greenlight');
    console.log('üîó –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ');
    
    console.log('\n=== –û–ë–©–ê–Ø –°–¢–ê–¢–ò–°–¢–ò–ö–ê –ë–ê–ó–´ ===');
    const totalUsers = await User.countDocuments();
    const totalGames = await Game.countDocuments();
    const totalTransactions = await Transaction.countDocuments();
    const totalEarnings = await ReferralEarning.countDocuments();
    
    console.log(`üë• –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: ${totalUsers}`);
    console.log(`üéÆ –ò–≥—Ä: ${totalGames}`);
    console.log(`üí∞ –¢—Ä–∞–Ω–∑–∞–∫—Ü–∏–π: ${totalTransactions}`);
    console.log(`ü§ù –†–µ—Ñ–µ—Ä–∞–ª—å–Ω—ã—Ö –Ω–∞—á–∏—Å–ª–µ–Ω–∏–π: ${totalEarnings}`);
    
    // 1. –ü–†–û–í–ï–†–ö–ê –ü–ê–†–¢–ù–ï–†–°–ö–ò–• –°–¢–ê–¢–£–°–û–í
    console.log('\n=== 1. –ü–†–û–í–ï–†–ö–ê –ü–ê–†–¢–ù–ï–†–°–ö–ò–• –°–¢–ê–¢–£–°–û–í ===');
    const partners = await User.find({ 
      partnerLevel: { $ne: 'none' }
    }).select('username telegramId partnerLevel partnerMeta referralStats balance');
    
    console.log(`–ù–∞–π–¥–µ–Ω–æ –ø–∞—Ä—Ç–Ω–µ—Ä–æ–≤: ${partners.length}`);
    
    for (const partner of partners) {
      console.log(`\nü§ù –ü–∞—Ä—Ç–Ω–µ—Ä: ${partner.username || partner.telegramId}`);
      console.log(`   –£—Ä–æ–≤–µ–Ω—å: ${partner.partnerLevel}`);
      console.log(`   –ë–∞–ª–∞–Ω—Å: ${partner.balance} USDT`);
      console.log(`   –ù–∞–∑–Ω–∞—á–µ–Ω: ${partner.partnerMeta?.assignedAt || '–Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–æ'}`);
      console.log(`   –†–µ—Ñ–µ—Ä–∞–ª—å–Ω—ã–π –±–∞–ª–∞–Ω—Å: ${partner.referralStats?.referralBalance || 0} USDT`);
      console.log(`   –í—Å–µ–≥–æ –∑–∞—Ä–∞–±–æ—Ç–∞–Ω–æ: ${partner.referralStats?.totalEarned || 0} USDT`);
      
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–µ—Ñ–µ—Ä–∞–ª–æ–≤ —ç—Ç–æ–≥–æ –ø–∞—Ä—Ç–Ω–µ—Ä–∞
      const referrals = await User.find({ referrer: partner._id });
      console.log(`   –†–µ—Ñ–µ—Ä–∞–ª–æ–≤: ${referrals.length}`);
    }
    
    // 2. –ü–†–û–í–ï–†–ö–ê –°–¢–ê–¢–ò–°–¢–ò–ö–ò –ò–ì–†
    console.log('\n=== 2. –ü–†–û–í–ï–†–ö–ê –°–¢–ê–¢–ò–°–¢–ò–ö–ò –ò–ì–† ===');
    const usersWithGames = await User.find({ 
      $or: [
        { totalGames: { $gt: 0 } },
        { totalWagered: { $gt: 0 } }
      ]
    }).limit(10);
    
    console.log(`–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π —Å –∏–≥—Ä–∞–º–∏: ${usersWithGames.length}`);
    
    for (const user of usersWithGames) {
      // –ü–æ–¥—Å—á–∏—Ç—ã–≤–∞–µ–º —Ä–µ–∞–ª—å–Ω—É—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
      const actualGames = await Game.countDocuments({ user: user._id });
      const actualWagered = await Game.aggregate([
        { $match: { user: user._id } },
        { $group: { _id: null, total: { $sum: '$bet' } } }
      ]);
      const actualWon = await Game.aggregate([
        { $match: { user: user._id } },
        { 
          $group: { 
            _id: null, 
            total: { 
              $sum: { 
                $cond: [
                  '$win', 
                  { $add: ['$bet', { $ifNull: ['$profit', 0] }] }, 
                  0
                ] 
              } 
            } 
          } 
        }
      ]);
      
      const realWagered = actualWagered[0]?.total || 0;
      const realWon = actualWon[0]?.total || 0;
      
      console.log(`\nüéÆ –ò–≥—Ä–æ–∫: ${user.username || user.telegramId}`);
      console.log(`   –ú–æ–¥–µ–ª—å: –∏–≥—Ä=${user.totalGames}, —Å—Ç–∞–≤–æ–∫=${user.totalWagered}, –≤—ã–∏–≥—Ä—ã—à–µ–π=${user.totalWon}`);
      console.log(`   –†–µ–∞–ª—å–Ω–æ—Å—Ç—å: –∏–≥—Ä=${actualGames}, —Å—Ç–∞–≤–æ–∫=${realWagered}, –≤—ã–∏–≥—Ä—ã—à–µ–π=${realWon}`);
      console.log(`   –ë–∞–ª–∞–Ω—Å: ${user.balance} USDT`);
      
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–∞—Å—Ö–æ–∂–¥–µ–Ω–∏—è
      const gamesDiff = user.totalGames !== actualGames;
      const wageredDiff = Math.abs(user.totalWagered - realWagered) > 0.01;
      const wonDiff = Math.abs(user.totalWon - realWon) > 0.01;
      
      if (gamesDiff || wageredDiff || wonDiff) {
        console.log(`   ‚ùå –ü–†–û–ë–õ–ï–ú–ê: ${gamesDiff ? '–∏–≥—Ä—ã ' : ''}${wageredDiff ? '—Å—Ç–∞–≤–∫–∏ ' : ''}${wonDiff ? '–≤—ã–∏–≥—Ä—ã—à–∏' : ''}`);
      } else {
        console.log(`   ‚úÖ –î–∞–Ω–Ω—ã–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã`);
      }
    }
    
    // 3. –ü–†–û–í–ï–†–ö–ê –†–ï–§–ï–†–ê–õ–¨–ù–´–• –ö–û–ú–ò–°–°–ò–ô
    console.log('\n=== 3. –ü–†–û–í–ï–†–ö–ê –†–ï–§–ï–†–ê–õ–¨–ù–´–• –ö–û–ú–ò–°–°–ò–ô ===');
    
    // –ù–∞—Ö–æ–¥–∏–º –≤—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π —Å —Ä–µ—Ñ–µ—Ä–∞–ª–∞–º–∏
    const usersWithReferrals = await User.find({
      'referralStats.totalReferrals': { $gt: 0 }
    });
    
    console.log(`–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π —Å —Ä–µ—Ñ–µ—Ä–∞–ª–∞–º–∏: ${usersWithReferrals.length}`);
    
    for (const user of usersWithReferrals.slice(0, 5)) { // —Ç–æ–ª—å–∫–æ –ø–µ—Ä–≤—ã–µ 5
      console.log(`\nü§ù –†–µ—Ñ–µ—Ä–µ—Ä: ${user.username || user.telegramId}`);
      console.log(`   –ü–∞—Ä—Ç–Ω–µ—Ä—Å–∫–∏–π —Å—Ç–∞—Ç—É—Å: ${user.partnerLevel}`);
      console.log(`   –ö–æ–º–∏—Å—Å–∏—è: ${user.referralStats?.commissionPercent || 0}%`);
      
      // –ù–∞–π—Ç–∏ —Ä–µ–∞–ª—å–Ω—ã—Ö —Ä–µ—Ñ–µ—Ä–∞–ª–æ–≤
      const actualReferrals = await User.find({ referrer: user._id });
      console.log(`   –†–µ—Ñ–µ—Ä–∞–ª–æ–≤ –≤ –º–æ–¥–µ–ª–∏: ${user.referralStats?.totalReferrals || 0}`);
      console.log(`   –†–µ—Ñ–µ—Ä–∞–ª–æ–≤ —Ä–µ–∞–ª—å–Ω–æ: ${actualReferrals.length}`);
      
      // –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –Ω–∞—á–∏—Å–ª–µ–Ω–∏—è
      const earnings = await ReferralEarning.find({ partner: user._id });
      const totalEarnedFromDB = earnings.reduce((sum, e) => sum + (e.calculation?.earnedAmount || 0), 0);
      
      console.log(`   –ó–∞—Ä–∞–±–æ—Ç–∞–Ω–æ –≤ –º–æ–¥–µ–ª–∏: ${user.referralStats?.totalEarned || 0} USDT`);
      console.log(`   –ó–∞—Ä–∞–±–æ—Ç–∞–Ω–æ –≤ DB: ${totalEarnedFromDB.toFixed(2)} USDT`);
      console.log(`   –†–µ—Ñ–µ—Ä–∞–ª—å–Ω—ã–π –±–∞–ª–∞–Ω—Å: ${user.referralStats?.referralBalance || 0} USDT`);
      
      // –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º —Ä–µ—Ñ–µ—Ä–∞–ª–æ–≤
      for (const ref of actualReferrals.slice(0, 2)) { // –ø–µ—Ä–≤—ã–µ 2 —Ä–µ—Ñ–µ—Ä–∞–ª–∞
        const refGames = await Game.countDocuments({ user: ref._id });
        const refWagered = await Game.aggregate([
          { $match: { user: ref._id } },
          { $group: { _id: null, total: { $sum: '$bet' } } }
        ]);
        
        const refEarnings = await ReferralEarning.find({ 
          partner: user._id, 
          referral: ref._id 
        });
        
        console.log(`     üì± –†–µ—Ñ–µ—Ä–∞–ª: ${ref.username || ref.telegramId}`);
        console.log(`        –ò–≥—Ä: ${refGames}, —Å—Ç–∞–≤–æ–∫: ${refWagered[0]?.total || 0}`);
        console.log(`        –ö–æ–º–∏—Å—Å–∏–π: ${refEarnings.length}, —Å—É–º–º–∞: ${refEarnings.reduce((s, e) => s + (e.calculation?.earnedAmount || 0), 0).toFixed(2)}`);
      }
    }
    
    // 4. –ü–†–û–í–ï–†–ö–ê –¢–†–ê–ù–ó–ê–ö–¶–ò–ô –ò –ë–ê–õ–ê–ù–°–û–í
    console.log('\n=== 4. –ü–†–û–í–ï–†–ö–ê –ë–ê–õ–ê–ù–°–û–í ===');
    
    const usersWithBalance = await User.find({ 
      balance: { $gt: 0 } 
    }).sort({ balance: -1 }).limit(10);
    
    console.log(`–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π —Å –±–∞–ª–∞–Ω—Å–æ–º: ${usersWithBalance.length}`);
    
    for (const user of usersWithBalance) {
      // –ü–æ–¥—Å—á–∏—Ç—ã–≤–∞–µ–º –±–∞–ª–∞–Ω—Å –∏–∑ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π
      const transactions = await Transaction.find({ user: user._id });
      const calculatedBalance = transactions.reduce((sum, t) => sum + t.amount, 0);
      
      console.log(`\nüí∞ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: ${user.username || user.telegramId}`);
      console.log(`   –ë–∞–ª–∞–Ω—Å –≤ –º–æ–¥–µ–ª–∏: ${user.balance} USDT`);
      console.log(`   –ë–∞–ª–∞–Ω—Å –∏–∑ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π: ${calculatedBalance.toFixed(2)} USDT`);
      console.log(`   –†–∞–∑–Ω–∏—Ü–∞: ${(user.balance - calculatedBalance).toFixed(2)} USDT`);
      console.log(`   –¢—Ä–∞–Ω–∑–∞–∫—Ü–∏–π: ${transactions.length}`);
      
      if (Math.abs(user.balance - calculatedBalance) > 0.01) {
        console.log(`   ‚ùå –ü–†–û–ë–õ–ï–ú–ê –° –ë–ê–õ–ê–ù–°–û–ú`);
      } else {
        console.log(`   ‚úÖ –ë–∞–ª–∞–Ω—Å –∫–æ—Ä—Ä–µ–∫—Ç–µ–Ω`);
      }
    }
    
    // 5. –ü–†–û–í–ï–†–ö–ê –ü–û–°–õ–ï–î–ù–ò–• –ò–ì–†–û–í–´–• –ê–ö–¢–ò–í–ù–û–°–¢–ï–ô
    console.log('\n=== 5. –ü–†–û–í–ï–†–ö–ê –ü–û–°–õ–ï–î–ù–ò–• –ò–ì–† ===');
    
    const recentGames = await Game.find({})
      .sort({ createdAt: -1 })
      .limit(10)
      .populate('user', 'username telegramId');
    
    console.log(`–ü–æ—Å–ª–µ–¥–Ω–∏–µ ${recentGames.length} –∏–≥—Ä:`);
    
    for (const game of recentGames) {
      console.log(`üéÆ ${game.gameType} | ${game.user?.username || game.user?.telegramId || 'Unknown'} | ${game.bet} USDT | ${game.win ? 'WIN' : 'LOSS'} | ${game.profit.toFixed(2)} | ${game.createdAt.toISOString().split('T')[0]}`);
    }
    
    // 6. –ü–û–ò–°–ö –ö–†–ò–¢–ò–ß–ï–°–ö–ò–• –ü–†–û–ë–õ–ï–ú
    console.log('\n=== 6. –ö–†–ò–¢–ò–ß–ï–°–ö–ò–ï –ü–†–û–ë–õ–ï–ú–´ ===');
    
    // –û—Ç—Ä–∏—Ü–∞—Ç–µ–ª—å–Ω—ã–µ –±–∞–ª–∞–Ω—Å—ã
    const negativeBalances = await User.find({ balance: { $lt: 0 } });
    console.log(`‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π —Å –æ—Ç—Ä–∏—Ü–∞—Ç–µ–ª—å–Ω—ã–º –±–∞–ª–∞–Ω—Å–æ–º: ${negativeBalances.length}`);
    
    // –ò–≥—Ä—ã –±–µ–∑ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
    const orphanGames = await Game.aggregate([
      {
        $lookup: {
          from: 'users',
          localField: 'user',
          foreignField: '_id',
          as: 'userDoc'
        }
      },
      {
        $match: {
          userDoc: { $size: 0 }
        }
      },
      {
        $count: 'orphanCount'
      }
    ]);
    console.log(`‚ùå –ò–≥—Ä –±–µ–∑ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: ${orphanGames[0]?.orphanCount || 0}`);
    
    // –¢—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏ –±–µ–∑ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
    const orphanTransactions = await Transaction.aggregate([
      {
        $lookup: {
          from: 'users',
          localField: 'user',
          foreignField: '_id',
          as: 'userDoc'
        }
      },
      {
        $match: {
          userDoc: { $size: 0 }
        }
      },
      {
        $count: 'orphanCount'
      }
    ]);
    console.log(`‚ùå –¢—Ä–∞–Ω–∑–∞–∫—Ü–∏–π –±–µ–∑ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: ${orphanTransactions[0]?.orphanCount || 0}`);
    
    console.log('\n‚úÖ –û—Ç–ª–∞–¥–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞');
    
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ª–∞–¥–∫–µ:', error);
  } finally {
    mongoose.disconnect();
  }
}

debugDatabase();