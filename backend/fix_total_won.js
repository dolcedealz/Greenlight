// –°–∫—Ä–∏–ø—Ç –¥–ª—è –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Ä–∞—Å—á–µ—Ç–∞ totalWon –≤ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
const { User, Game, Transaction } = require('./src/models');
const mongoose = require('mongoose');

async function fixTotalWon() {
  try {
    await mongoose.connect(process.env.MONGODB_URI || 'mongodb://localhost:27017/greenlight');
    console.log('üîó –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ');
    
    console.log('\nüîß === –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï –°–¢–ê–¢–ò–°–¢–ò–ö–ò TOTALWON ===');
    
    const allUsers = await User.find({});
    let fixedCount = 0;
    
    for (const user of allUsers) {
      // –ü–æ–¥—Å—á–∏—Ç—ã–≤–∞–µ–º –ø—Ä–∞–≤–∏–ª—å–Ω—É—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –∏–∑ –∏–≥—Ä
      const gameStats = await Game.aggregate([
        { $match: { user: user._id } },
        { 
          $group: { 
            _id: null,
            totalGames: { $sum: 1 },
            totalWagered: { $sum: '$bet' },
            // totalWon = —Å—É–º–º–∞ –≤—Å–µ—Ö –≤—ã–∏–≥—Ä—ã—à–µ–π (bet + profit –¥–ª—è –≤—ã–∏–≥—Ä—ã—à–Ω—ã—Ö –∏–≥—Ä)
            totalWon: { 
              $sum: { 
                $cond: [
                  '$win', 
                  { $add: ['$bet', '$profit'] }, // –í–æ–∑–≤—Ä–∞—â–∞–µ–º–∞—è —Å—É–º–º–∞ –ø—Ä–∏ –≤—ã–∏–≥—Ä—ã—à–µ
                  0 
                ] 
              } 
            },
            totalProfit: { $sum: '$profit' } // –û–±—â–∞—è –ø—Ä–∏–±—ã–ª—å/—É–±—ã—Ç–æ–∫
          }
        }
      ]);
      
      const stats = gameStats[0] || { 
        totalGames: 0, 
        totalWagered: 0, 
        totalWon: 0, 
        totalProfit: 0 
      };
      
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω—É–∂–Ω–æ –ª–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ
      const needsUpdate = (
        user.totalGames !== stats.totalGames ||
        Math.abs(user.totalWagered - stats.totalWagered) > 0.01 ||
        Math.abs(user.totalWon - stats.totalWon) > 0.01
      );
      
      if (needsUpdate) {
        console.log(`\nüîß –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ ${user.username || user.telegramId}:`);
        console.log(`   –ò–≥—Ä: ${user.totalGames} ‚Üí ${stats.totalGames}`);
        console.log(`   –ü–æ—Å—Ç–∞–≤–ª–µ–Ω–æ: ${user.totalWagered} ‚Üí ${stats.totalWagered.toFixed(2)} USDT`);
        console.log(`   –í—ã–∏–≥—Ä–∞–Ω–æ: ${user.totalWon} ‚Üí ${stats.totalWon.toFixed(2)} USDT`);
        console.log(`   –ü—Ä–∏–±—ã–ª—å: ${stats.totalProfit.toFixed(2)} USDT`);
        
        await User.findByIdAndUpdate(user._id, {
          totalGames: stats.totalGames,
          totalWagered: stats.totalWagered,
          totalWon: stats.totalWon,
          lastActivity: user.lastActivity // –°–æ—Ö—Ä–∞–Ω—è–µ–º –ø–æ—Å–ª–µ–¥–Ω—é—é –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å
        });
        
        fixedCount++;
      }
    }
    
    console.log(`\n‚úÖ –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: ${fixedCount}`);
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏ –≤—ã–∏–≥—Ä—ã—à–µ–π
    console.log('\nüîß –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π –≤—ã–∏–≥—Ä—ã—à–µ–π...');
    
    const winTransactions = await Transaction.find({ type: 'win' });
    const gameWins = await Game.find({ win: true });
    
    console.log(`üìä –¢—Ä–∞–Ω–∑–∞–∫—Ü–∏–π –≤—ã–∏–≥—Ä—ã—à–µ–π: ${winTransactions.length}`);
    console.log(`üìä –í—ã–∏–≥—Ä—ã—à–Ω—ã—Ö –∏–≥—Ä: ${gameWins.length}`);
    
    if (winTransactions.length !== gameWins.length) {
      console.log(`‚ö†Ô∏è  –ù–ï–°–û–û–¢–í–ï–¢–°–¢–í–ò–ï: –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π –≤—ã–∏–≥—Ä—ã—à–µ–π –Ω–µ —Å–æ–≤–ø–∞–¥–∞–µ—Ç —Å –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ–º –≤—ã–∏–≥—Ä—ã—à–Ω—ã—Ö –∏–≥—Ä`);
      
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —É –∫–∞–∫–∏—Ö –∏–≥—Ä –Ω–µ—Ç —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π
      let missingTransactions = 0;
      for (const game of gameWins) {
        const transaction = winTransactions.find(t => 
          t.game && t.game.toString() === game._id.toString()
        );
        if (!transaction) {
          missingTransactions++;
        }
      }
      console.log(`‚ùå –ò–≥—Ä –±–µ–∑ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π –≤—ã–∏–≥—Ä—ã—à–µ–π: ${missingTransactions}`);
    }
    
    console.log('‚úÖ –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ');
    
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–∏:', error);
  } finally {
    mongoose.disconnect();
  }
}

fixTotalWon();