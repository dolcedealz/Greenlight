#!/usr/bin/env node

/**
 * –î–ò–ê–ì–ù–û–°–¢–ò–ö–ê –ó–ê–í–ò–°–®–ò–• –î–£–≠–õ–ï–ô
 * 
 * –ù–∞—Ö–æ–¥–∏—Ç –ø—Ä–æ–±–ª–µ–º–Ω—ã–µ –¥—É—ç–ª–∏ –∏ –∞–Ω–∞–ª–∏–∑–∏—Ä—É–µ—Ç –ø—Ä–∏—á–∏–Ω—ã –∑–∞–≤–∏—Å–∞–Ω–∏—è
 */

require('dotenv').config();
const mongoose = require('mongoose');
const { Duel, DuelRound, User, Transaction } = require('./src/models');
const { createLogger } = require('./src/utils/logger');

const logger = createLogger('DUEL_DIAGNOSTICS');

class DuelDiagnostics {
  constructor() {
    this.findings = {
      timestamp: new Date(),
      stuckDuels: [],
      expiredDuels: [],
      lockedFundsIssues: [],
      incompleteRounds: [],
      statistics: {}
    };
  }

  async connectDB() {
    try {
      await mongoose.connect(process.env.MONGODB_URI);
      logger.info('‚úÖ –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ MongoDB —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ');
    } catch (error) {
      logger.error('‚ùå –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ MongoDB:', error);
      throw error;
    }
  }

  /**
   * –ù–∞—Ö–æ–¥–∏—Ç –∑–∞–≤–∏—Å—à–∏–µ –¥—É—ç–ª–∏
   */
  async findStuckDuels() {
    logger.info('üîç –ü–æ–∏—Å–∫ –∑–∞–≤–∏—Å—à–∏—Ö –¥—É—ç–ª–µ–π...');

    const now = new Date();
    const oneHourAgo = new Date(now.getTime() - 60 * 60 * 1000);
    const thirtyMinutesAgo = new Date(now.getTime() - 30 * 60 * 1000);

    // –î—É—ç–ª–∏ –≤ —Å—Ç–∞—Ç—É—Å–µ active –∏–ª–∏ pending –¥–æ–ª—å—à–µ 30 –º–∏–Ω—É—Ç
    const stuckDuels = await Duel.find({
      status: { $in: ['active', 'pending', 'waiting'] },
      createdAt: { $lt: thirtyMinutesAgo }
    }).populate('rounds');

    // –î—É—ç–ª–∏ —Å –∏—Å—Ç–µ–∫—à–∏–º –≤—Ä–µ–º–µ–Ω–µ–º –æ–∂–∏–¥–∞–Ω–∏—è
    const expiredDuels = await Duel.find({
      expiresAt: { $lt: now },
      status: { $in: ['pending', 'waiting'] }
    }).populate('rounds');

    logger.info(`   –ù–∞–π–¥–µ–Ω–æ –∑–∞–≤–∏—Å—à–∏—Ö –¥—É—ç–ª–µ–π: ${stuckDuels.length}`);
    logger.info(`   –ù–∞–π–¥–µ–Ω–æ –ø—Ä–æ—Å—Ä–æ—á–µ–Ω–Ω—ã—Ö –¥—É—ç–ª–µ–π: ${expiredDuels.length}`);

    // –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –∫–∞–∂–¥—É—é –∑–∞–≤–∏—Å—à—É—é –¥—É—ç–ª—å
    for (const duel of stuckDuels) {
      const analysis = await this.analyzeDuel(duel);
      this.findings.stuckDuels.push(analysis);
    }

    for (const duel of expiredDuels) {
      const analysis = await this.analyzeDuel(duel);
      this.findings.expiredDuels.push(analysis);
    }

    return { stuckDuels, expiredDuels };
  }

  /**
   * –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ—Ç –∫–æ–Ω–∫—Ä–µ—Ç–Ω—É—é –¥—É—ç–ª—å
   */
  async analyzeDuel(duel) {
    logger.info(`üîç –ê–Ω–∞–ª–∏–∑ –¥—É—ç–ª–∏: ${duel.sessionId}`);

    // –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ–± —É—á–∞—Å—Ç–Ω–∏–∫–∞—Ö
    const [challenger, opponent] = await Promise.all([
      User.findOne({ telegramId: duel.challengerId }),
      User.findOne({ telegramId: duel.opponentId })
    ]);

    // –ü–æ–ª—É—á–∞–µ–º —Ä–∞—É–Ω–¥—ã –¥—É—ç–ª–∏
    const rounds = await DuelRound.find({ duelId: duel._id }).sort({ roundNumber: 1 });

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ —Å—Ä–µ–¥—Å—Ç–≤–∞
    const challengerLockedFunds = challenger?.lockedFunds?.filter(lf => 
      lf.reason === 'duel' && 
      lf.amount === duel.amount
    ) || [];

    const opponentLockedFunds = opponent?.lockedFunds?.filter(lf => 
      lf.reason === 'duel' && 
      lf.amount === duel.amount
    ) || [];

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏
    const duelTransactions = await Transaction.find({
      $or: [
        { user: challenger?._id, description: { $regex: duel.sessionId } },
        { user: opponent?._id, description: { $regex: duel.sessionId } }
      ]
    });

    const analysis = {
      duelInfo: {
        sessionId: duel.sessionId,
        status: duel.status,
        gameType: duel.gameType,
        format: duel.format,
        amount: duel.amount,
        createdAt: duel.createdAt,
        startedAt: duel.startedAt,
        expiresAt: duel.expiresAt,
        age: Math.round((new Date() - duel.createdAt) / 60000) // –º–∏–Ω—É—Ç—ã
      },
      participants: {
        challenger: {
          telegramId: duel.challengerId,
          username: duel.challengerUsername,
          found: !!challenger,
          balance: challenger?.balance,
          lockedFunds: challengerLockedFunds.length,
          lockedAmount: challengerLockedFunds.reduce((sum, lf) => sum + lf.amount, 0)
        },
        opponent: {
          telegramId: duel.opponentId,
          username: duel.opponentUsername,
          found: !!opponent,
          balance: opponent?.balance,
          lockedFunds: opponentLockedFunds.length,
          lockedAmount: opponentLockedFunds.reduce((sum, lf) => sum + lf.amount, 0)
        }
      },
      rounds: {
        total: rounds.length,
        completed: rounds.filter(r => r.status === 'completed').length,
        active: rounds.filter(r => r.status === 'active').length,
        pending: rounds.filter(r => r.status === 'pending').length,
        details: rounds.map(r => ({
          roundNumber: r.roundNumber,
          status: r.status,
          winnerId: r.winnerId,
          createdAt: r.createdAt,
          completedAt: r.completedAt
        }))
      },
      transactions: {
        total: duelTransactions.length,
        details: duelTransactions.map(t => ({
          user: t.user,
          type: t.type,
          amount: t.amount,
          status: t.status,
          description: t.description,
          createdAt: t.createdAt
        }))
      },
      problems: []
    };

    // –û–ø—Ä–µ–¥–µ–ª—è–µ–º –ø—Ä–æ–±–ª–µ–º—ã
    if (!challenger) {
      analysis.problems.push('Challenger –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –±–∞–∑–µ');
    }
    if (!opponent) {
      analysis.problems.push('Opponent –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –±–∞–∑–µ');
    }
    if (duel.expiresAt && duel.expiresAt < new Date()) {
      analysis.problems.push('–î—É—ç–ª—å –ø—Ä–æ—Å—Ä–æ—á–µ–Ω–∞');
    }
    if (analysis.rounds.total === 0 && duel.status === 'active') {
      analysis.problems.push('–ù–µ—Ç —Ä–∞—É–Ω–¥–æ–≤ –ø—Ä–∏ –∞–∫—Ç–∏–≤–Ω–æ–π –¥—É—ç–ª–∏');
    }
    if (analysis.rounds.active > 1) {
      analysis.problems.push('–ù–µ—Å–∫–æ–ª—å–∫–æ –∞–∫—Ç–∏–≤–Ω—ã—Ö —Ä–∞—É–Ω–¥–æ–≤ –æ–¥–Ω–æ–≤—Ä–µ–º–µ–Ω–Ω–æ');
    }
    if (challengerLockedFunds.length === 0 && duel.status !== 'completed') {
      analysis.problems.push('–£ challenger –Ω–µ—Ç –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö —Å—Ä–µ–¥—Å—Ç–≤');
    }
    if (opponentLockedFunds.length === 0 && duel.status === 'active') {
      analysis.problems.push('–£ opponent –Ω–µ—Ç –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö —Å—Ä–µ–¥—Å—Ç–≤');
    }
    if (analysis.duelInfo.age > 60) {
      analysis.problems.push(`–î—É—ç–ª—å –≤–∏—Å–∏—Ç —É–∂–µ ${analysis.duelInfo.age} –º–∏–Ω—É—Ç`);
    }

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –ª–æ–≥–∏–∫—É —Ä–∞—É–Ω–¥–æ–≤
    if (analysis.rounds.total > 0) {
      const lastRound = rounds[rounds.length - 1];
      if (lastRound.status === 'active' && 
          lastRound.createdAt < new Date(Date.now() - 10 * 60 * 1000)) {
        analysis.problems.push('–ü–æ—Å–ª–µ–¥–Ω–∏–π —Ä–∞—É–Ω–¥ –∑–∞–≤–∏—Å –±–æ–ª–µ–µ 10 –º–∏–Ω—É—Ç –Ω–∞–∑–∞–¥');
      }
    }

    return analysis;
  }

  /**
   * –ü—Ä–æ–≤–µ—Ä—è–µ—Ç –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ —Å—Ä–µ–¥—Å—Ç–≤–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
   */
  async checkLockedFunds() {
    logger.info('üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö —Å—Ä–µ–¥—Å—Ç–≤...');

    const usersWithLockedFunds = await User.find({
      'lockedFunds.0': { $exists: true }
    });

    const now = new Date();
    const issues = [];

    for (const user of usersWithLockedFunds) {
      for (const lockedFund of user.lockedFunds) {
        if (lockedFund.reason === 'duel') {
          // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ –¥—É—ç–ª—å
          const relatedDuel = await Duel.findOne({
            $or: [
              { challengerId: user.telegramId.toString() },
              { opponentId: user.telegramId.toString() }
            ],
            amount: lockedFund.amount,
            status: { $in: ['pending', 'active', 'waiting'] },
            createdAt: {
              $gte: new Date(lockedFund.lockedAt.getTime() - 60000),
              $lte: new Date(lockedFund.lockedAt.getTime() + 60000)
            }
          });

          if (!relatedDuel) {
            issues.push({
              userId: user._id,
              telegramId: user.telegramId,
              username: user.username,
              lockedAmount: lockedFund.amount,
              lockedAt: lockedFund.lockedAt,
              expiresAt: lockedFund.expiresAt,
              isExpired: lockedFund.expiresAt < now,
              problem: '–ó–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ —Å—Ä–µ–¥—Å—Ç–≤–∞ –±–µ–∑ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–µ–π –¥—É—ç–ª–∏'
            });
          } else if (relatedDuel.status === 'completed') {
            issues.push({
              userId: user._id,
              telegramId: user.telegramId,
              username: user.username,
              lockedAmount: lockedFund.amount,
              lockedAt: lockedFund.lockedAt,
              duelId: relatedDuel._id,
              duelStatus: relatedDuel.status,
              problem: '–°—Ä–µ–¥—Å—Ç–≤–∞ –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω—ã –¥–ª—è –∑–∞–≤–µ—Ä—à–µ–Ω–Ω–æ–π –¥—É—ç–ª–∏'
            });
          }
        }
      }
    }

    this.findings.lockedFundsIssues = issues;
    logger.info(`   –ù–∞–π–¥–µ–Ω–æ –ø—Ä–æ–±–ª–µ–º —Å –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω–Ω—ã–º–∏ —Å—Ä–µ–¥—Å—Ç–≤–∞–º–∏: ${issues.length}`);

    return issues;
  }

  /**
   * –°–æ–±–∏—Ä–∞–µ—Ç –æ–±—â—É—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –¥—É—ç–ª–µ–π
   */
  async gatherStatistics() {
    logger.info('üìä –°–±–æ—Ä —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –¥—É—ç–ª–µ–π...');

    const stats = await Duel.aggregate([
      {
        $group: {
          _id: '$status',
          count: { $sum: 1 },
          totalAmount: { $sum: '$amount' },
          avgAmount: { $avg: '$amount' }
        }
      }
    ]);

    const roundStats = await DuelRound.aggregate([
      {
        $group: {
          _id: '$status',
          count: { $sum: 1 }
        }
      }
    ]);

    // –î—É—ç–ª–∏ –ø–æ –≤–æ–∑—Ä–∞—Å—Ç—É
    const now = new Date();
    const ageStats = await Duel.aggregate([
      {
        $addFields: {
          ageMinutes: {
            $divide: [
              { $subtract: [now, '$createdAt'] },
              60000
            ]
          }
        }
      },
      {
        $bucket: {
          groupBy: '$ageMinutes',
          boundaries: [0, 30, 60, 180, 1440, Infinity],
          default: 'old',
          output: {
            count: { $sum: 1 },
            statuses: { $push: '$status' }
          }
        }
      }
    ]);

    this.findings.statistics = {
      byStatus: stats,
      roundsByStatus: roundStats,
      byAge: ageStats,
      totalDuels: await Duel.countDocuments(),
      totalRounds: await DuelRound.countDocuments()
    };

    logger.info(`   –í—Å–µ–≥–æ –¥—É—ç–ª–µ–π: ${this.findings.statistics.totalDuels}`);
    logger.info(`   –í—Å–µ–≥–æ —Ä–∞—É–Ω–¥–æ–≤: ${this.findings.statistics.totalRounds}`);

    return this.findings.statistics;
  }

  /**
   * –ó–∞–ø—É—Å–∫–∞–µ—Ç –ø–æ–ª–Ω—É—é –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫—É
   */
  async runDiagnostics() {
    try {
      logger.info('üöÄ –ù–ê–ß–ê–õ–û –î–ò–ê–ì–ù–û–°–¢–ò–ö–ò –î–£–≠–õ–ï–ô');
      
      await this.connectDB();

      // –í—ã–ø–æ–ª–Ω—è–µ–º –≤—Å–µ –ø—Ä–æ–≤–µ—Ä–∫–∏
      await this.findStuckDuels();
      await this.checkLockedFunds();
      await this.gatherStatistics();

      logger.info('‚úÖ –î–ò–ê–ì–ù–û–°–¢–ò–ö–ê –ó–ê–í–ï–†–®–ï–ù–ê');
      
      return this.findings;

    } catch (error) {
      logger.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–µ:', error);
      throw error;
    } finally {
      await mongoose.disconnect();
      logger.info('üîå –°–æ–µ–¥–∏–Ω–µ–Ω–∏–µ —Å –ë–î –∑–∞–∫—Ä—ã—Ç–æ');
    }
  }

  /**
   * –í—ã–≤–æ–¥–∏—Ç –¥–µ—Ç–∞–ª—å–Ω—ã–π –æ—Ç—á–µ—Ç
   */
  printDetailedReport() {
    const findings = this.findings;
    
    console.log('\n');
    console.log('ü©∫'.repeat(40));
    console.log('           –î–ò–ê–ì–ù–û–°–¢–ò–ß–ï–°–ö–ò–ô –û–¢–ß–ï–¢ –î–£–≠–õ–ï–ô');
    console.log('ü©∫'.repeat(40));
    console.log(`–í—Ä–µ–º—è: ${findings.timestamp.toLocaleString()}`);
    console.log('');

    // –û–±—â–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
    console.log('üìä –û–ë–©–ê–Ø –°–¢–ê–¢–ò–°–¢–ò–ö–ê:');
    console.log(`   –í—Å–µ–≥–æ –¥—É—ç–ª–µ–π: ${findings.statistics.totalDuels}`);
    console.log(`   –í—Å–µ–≥–æ —Ä–∞—É–Ω–¥–æ–≤: ${findings.statistics.totalRounds}`);
    
    if (findings.statistics.byStatus) {
      console.log('   –ü–æ —Å—Ç–∞—Ç—É—Å–∞–º:');
      findings.statistics.byStatus.forEach(stat => {
        console.log(`     ${stat._id}: ${stat.count} –¥—É—ç–ª–µ–π (${stat.totalAmount.toFixed(2)} USDT)`);
      });
    }
    console.log('');

    // –ó–∞–≤–∏—Å—à–∏–µ –¥—É—ç–ª–∏
    console.log('üö® –ó–ê–í–ò–°–®–ò–ï –î–£–≠–õ–ò:');
    console.log(`   –ù–∞–π–¥–µ–Ω–æ: ${findings.stuckDuels.length}`);
    
    findings.stuckDuels.forEach((duel, i) => {
      console.log(`   ${i + 1}. ${duel.duelInfo.sessionId}`);
      console.log(`      –°—Ç–∞—Ç—É—Å: ${duel.duelInfo.status}, –í–æ–∑—Ä–∞—Å—Ç: ${duel.duelInfo.age} –º–∏–Ω`);
      console.log(`      –£—á–∞—Å—Ç–Ω–∏–∫–∏: ${duel.participants.challenger.username} vs ${duel.participants.opponent.username}`);
      console.log(`      –†–∞—É–Ω–¥—ã: ${duel.rounds.completed}/${duel.rounds.total} –∑–∞–≤–µ—Ä—à–µ–Ω–æ`);
      console.log(`      –ü—Ä–æ–±–ª–µ–º—ã: ${duel.problems.join(', ') || '–ù–µ—Ç'}`);
      console.log('');
    });

    // –ü—Ä–æ—Å—Ä–æ—á–µ–Ω–Ω—ã–µ –¥—É—ç–ª–∏
    if (findings.expiredDuels.length > 0) {
      console.log('‚è∞ –ü–†–û–°–†–û–ß–ï–ù–ù–´–ï –î–£–≠–õ–ò:');
      console.log(`   –ù–∞–π–¥–µ–Ω–æ: ${findings.expiredDuels.length}`);
      
      findings.expiredDuels.forEach((duel, i) => {
        console.log(`   ${i + 1}. ${duel.duelInfo.sessionId} (–ø—Ä–æ—Å—Ä–æ—á–µ–Ω–∞ –Ω–∞ ${Math.round((new Date() - duel.duelInfo.expiresAt) / 60000)} –º–∏–Ω)`);
      });
      console.log('');
    }

    // –ü—Ä–æ–±–ª–µ–º—ã —Å –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω–Ω—ã–º–∏ —Å—Ä–µ–¥—Å—Ç–≤–∞–º–∏
    console.log('üí∞ –ü–†–û–ë–õ–ï–ú–´ –° –ó–ê–ë–õ–û–ö–ò–†–û–í–ê–ù–ù–´–ú–ò –°–†–ï–î–°–¢–í–ê–ú–ò:');
    console.log(`   –ù–∞–π–¥–µ–Ω–æ: ${findings.lockedFundsIssues.length}`);
    
    findings.lockedFundsIssues.forEach((issue, i) => {
      console.log(`   ${i + 1}. ${issue.username} (${issue.telegramId})`);
      console.log(`      –ó–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω–æ: ${issue.lockedAmount} USDT`);
      console.log(`      –ü—Ä–æ–±–ª–µ–º–∞: ${issue.problem}`);
      if (issue.isExpired) console.log(`      ‚ö†Ô∏è –ë–ª–æ–∫–∏—Ä–æ–≤–∫–∞ –∏—Å—Ç–µ–∫–ª–∞!`);
      console.log('');
    });

    console.log('ü©∫'.repeat(40));
    console.log('');
  }

  /**
   * –ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –∫–æ–º–∞–Ω–¥—ã –¥–ª—è –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è –ø—Ä–æ–±–ª–µ–º
   */
  generateFixCommands() {
    const commands = [];
    
    // –ö–æ–º–∞–Ω–¥—ã –¥–ª—è —Ä–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∫–∏ –ø—Ä–æ—Å—Ä–æ—á–µ–Ω–Ω—ã—Ö —Å—Ä–µ–¥—Å—Ç–≤
    this.findings.lockedFundsIssues.forEach(issue => {
      if (issue.isExpired) {
        commands.push({
          type: 'unlock_expired_funds',
          description: `–†–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∞—Ç—å –ø—Ä–æ—Å—Ä–æ—á–µ–Ω–Ω—ã–µ —Å—Ä–µ–¥—Å—Ç–≤–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ${issue.username}`,
          userId: issue.userId,
          amount: issue.lockedAmount
        });
      }
    });

    // –ö–æ–º–∞–Ω–¥—ã –¥–ª—è –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –∑–∞–≤–∏—Å—à–∏—Ö –¥—É—ç–ª–µ–π
    this.findings.stuckDuels.forEach(duel => {
      if (duel.duelInfo.age > 60) {
        commands.push({
          type: 'cancel_stuck_duel',
          description: `–û—Ç–º–µ–Ω–∏—Ç—å –∑–∞–≤–∏—Å—à—É—é –¥—É—ç–ª—å ${duel.duelInfo.sessionId}`,
          duelId: duel.duelInfo.sessionId,
          reason: `–î—É—ç–ª—å –∑–∞–≤–∏—Å–ª–∞ –Ω–∞ ${duel.duelInfo.age} –º–∏–Ω—É—Ç`
        });
      }
    });

    console.log('üîß –†–ï–ö–û–ú–ï–ù–î–£–ï–ú–´–ï –ò–°–ü–†–ê–í–õ–ï–ù–ò–Ø:');
    commands.forEach((cmd, i) => {
      console.log(`   ${i + 1}. ${cmd.description}`);
    });
    console.log('');

    return commands;
  }
}

// –ó–∞–ø—É—Å–∫ –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∏
async function main() {
  const diagnostics = new DuelDiagnostics();
  
  try {
    const findings = await diagnostics.runDiagnostics();
    diagnostics.printDetailedReport();
    diagnostics.generateFixCommands();
    
    // –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –≤ —Ñ–∞–π–ª
    const fs = require('fs');
    const filename = `duel_diagnostics_${new Date().toISOString().slice(0, 19).replace(/:/g, '-')}.json`;
    fs.writeFileSync(filename, JSON.stringify(findings, null, 2));
    console.log(`üîç –î–µ—Ç–∞–ª—å–Ω—ã–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –≤ ${filename}`);
    
  } catch (error) {
    console.error('üí• –ö–†–ò–¢–ò–ß–ï–°–ö–ê–Ø –û–®–ò–ë–ö–ê –î–ò–ê–ì–ù–û–°–¢–ò–ö–ò:', error);
    process.exit(1);
  }
}

// –≠–∫—Å–ø–æ—Ä—Ç–∏—Ä—É–µ–º –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –∫–∞–∫ –º–æ–¥—É–ª—å
module.exports = DuelDiagnostics;

// –ó–∞–ø—É—Å–∫–∞–µ–º –µ—Å–ª–∏ –≤—ã–∑–≤–∞–Ω –Ω–∞–ø—Ä—è–º—É—é
if (require.main === module) {
  main();
}