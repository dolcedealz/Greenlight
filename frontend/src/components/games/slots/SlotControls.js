// frontend/src/components/games/slots/SlotControls.js
import React, { useState, useEffect } from 'react';
import '../../../styles/SlotControls.css';

const SlotControls = ({ 
  balance, 
  onSpin, 
  isSpinning, 
  betAmount,
  setBetAmount,
  autoplay,
  setAutoplay,
  autoplayCount,
  setAutoplayCount,
  loading,
  autoplayRemaining,
  gameStats
}) => {
  const [maxWin, setMaxWin] = useState(0);
  
  // –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º –º–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–π –≤–æ–∑–º–æ–∂–Ω—ã–π –≤—ã–∏–≥—Ä—ã—à
  useEffect(() => {
    const jackpotMultiplier = 100; // –ú–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–π –º–Ω–æ–∂–∏—Ç–µ–ª—å –¥–ª—è jackpot
    setMaxWin(betAmount * jackpotMultiplier);
  }, [betAmount]);
  
  // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∏–∑–º–µ–Ω–µ–Ω–∏—è —Å—É–º–º—ã —Å—Ç–∞–≤–∫–∏
  const handleBetAmountChange = (e) => {
    const inputValue = e.target.value;
    
    if (inputValue === '' || inputValue === '0') {
      setBetAmount(inputValue);
      return;
    }
    
    const value = parseFloat(inputValue);
    if (!isNaN(value) && value >= 0 && value <= balance) {
      setBetAmount(value);
    }
  };
  
  // –ë—ã—Å—Ç—Ä—ã–µ —Å—Ç–∞–≤–∫–∏ - —Ç–æ–ª—å–∫–æ 1% –∏ 5%
  const handleQuickBet = (multiplier) => {
    const quickBet = Math.min(balance, Math.max(0.1, Math.floor(balance * multiplier * 100) / 100));
    setBetAmount(quickBet);
  };
  
  // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ "–ö—Ä—É—Ç–∏—Ç—å"
  const handleSpinClick = () => {
    if (betAmount <= 0 || betAmount > balance || isSpinning || loading) return;
    onSpin();
  };
  
  // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∞–≤—Ç–æ–∏–≥—Ä—ã
  const handleAutoplayToggle = () => {
    setAutoplay(!autoplay);
  };
  
  // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∏–∑–º–µ–Ω–µ–Ω–∏—è –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –∞–≤—Ç–æ—Å–ø–∏–Ω–æ–≤
  const handleAutoplayCountChange = (count) => {
    setAutoplayCount(count);
  };
  
  return (
    <div className="slot-controls">
      {/* –ö–Ω–æ–ø–∫–∞ —Å–ø–∏–Ω–∞ */}
      <div className="spin-section">
        <button 
          className={`spin-button ${isSpinning ? 'spinning' : ''} ${autoplay ? 'autoplay-active' : ''}`}
          onClick={handleSpinClick}
          disabled={isSpinning || loading || betAmount <= 0 || betAmount > balance || autoplay}
        >
          {isSpinning ? (
            <span className="spin-text spinning-text">
              <span className="spinner">üé∞</span> –ö—Ä—É—Ç–∏–º...
            </span>
          ) : autoplay ? (
            <span className="spin-text">
              ü§ñ –ê–í–¢–û–ò–ì–†–ê –ê–ö–¢–ò–í–ù–ê
            </span>
          ) : (
            <span className="spin-text">
              üé∞ –ö–†–£–¢–ò–¢–¨ ({betAmount} USDT)
            </span>
          )}
        </button>
      </div>
      
      {/* –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Å—Ç–∞–≤–∫–æ–π */}
      <div className="bet-section">
        <div className="bet-control">
          <label>–°—Ç–∞–≤–∫–∞ (USDT):</label>
          <div className="bet-input-container">
            <input
              type="number"
              min="0.1"
              max={balance}
              step="0.1"
              value={betAmount}
              onChange={handleBetAmountChange}
              disabled={isSpinning || loading || autoplay}
            />
          </div>
        </div>
        
        {/* –¢–æ–ª—å–∫–æ 2 –∫–Ω–æ–ø–∫–∏ - 1% –∏ 5% –≤ —Å—Ç–æ–ª–±–∏–∫ */}
        <div className="quick-bets">
          <button 
            onClick={() => handleQuickBet(0.01)} 
            disabled={isSpinning || loading || autoplay}
            className="quick-bet-btn large"
          >
            1%
          </button>
          <button 
            onClick={() => handleQuickBet(0.05)} 
            disabled={isSpinning || loading || autoplay}
            className="quick-bet-btn large"
          >
            5%
          </button>
        </div>
      </div>
      
      {/* –ê–≤—Ç–æ–∏–≥—Ä–∞ */}
      <div className="autoplay-section">
        <div className="autoplay-toggle">
          <label className="toggle-switch">
            <input
              type="checkbox"
              checked={autoplay}
              onChange={handleAutoplayToggle}
              disabled={isSpinning || loading}
            />
            <span className="toggle-slider"></span>
            <span className="toggle-text">–ê–≤—Ç–æ–∏–≥—Ä–∞</span>
          </label>
          {autoplay && (
            <button 
              className="stop-autoplay-btn"
              onClick={() => setAutoplay(false)}
              disabled={loading}
            >
              –û—Å—Ç–∞–Ω–æ–≤–∏—Ç—å
            </button>
          )}
        </div>
        
        {!autoplay && (
          <div className="autoplay-settings">
            <div className="autoplay-count">
              <label>–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–ø–∏–Ω–æ–≤:</label>
              <div className="count-buttons">
                {[10, 25, 50, 100].map(count => (
                  <button
                    key={count}
                    className={`count-btn ${autoplayCount === count ? 'active' : ''}`}
                    onClick={() => handleAutoplayCountChange(count)}
                    disabled={isSpinning || loading}
                  >
                    {count}
                  </button>
                ))}
              </div>
            </div>
            
            <div className="autoplay-info">
              <small>
                –ê–≤—Ç–æ–∏–≥—Ä–∞ –æ—Å—Ç–∞–Ω–æ–≤–∏—Ç—Å—è –ø—Ä–∏ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–∏ –ª–∏–º–∏—Ç–∞ —Å–ø–∏–Ω–æ–≤, –Ω–µ–¥–æ—Å—Ç–∞—Ç–∫–µ —Å—Ä–µ–¥—Å—Ç–≤ –∏–ª–∏ –±–æ–ª—å—à–æ–º –≤—ã–∏–≥—Ä—ã—à–µ
              </small>
            </div>
          </div>
        )}
        
        {autoplay && autoplayRemaining > 0 && (
          <div className="autoplay-status">
            <span>–û—Å—Ç–∞–ª–æ—Å—å —Å–ø–∏–Ω–æ–≤: {autoplayRemaining}</span>
          </div>
        )}
      </div>
      
      {/* –¢–∞–±–ª–∏—Ü–∞ –≤—ã–ø–ª–∞—Ç —Å PNG –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è–º–∏ */}
      <div className="payout-table">
        <h4>–¢–∞–±–ª–∏—Ü–∞ –≤—ã–ø–ª–∞—Ç</h4>
        <div className="payout-rules">
          <div className="payout-rule">
            <span className="rule-text">3 –≤ —Ä—è–¥</span>
            <span className="rule-multiplier">√ó(–ø–æ–ª–æ–≤–∏–Ω–∞ –∫–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç–∞)</span>
          </div>
          <div className="payout-rule">
            <span className="rule-text">4 –≤ —Ä—è–¥</span>
            <span className="rule-multiplier">√ó(–ø–æ–ª–Ω—ã–π –∫–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç)</span>
          </div>
        </div>
        <div className="payout-grid">
          {[
            { symbol: 'cherry', payout: 4, threeInRow: 2, img: '/assets/images/slots/cherry final png.png' },
            { symbol: 'lemon', payout: 6, threeInRow: 3, img: '/assets/images/slots/lemon final png.png' },
            { symbol: 'persik', payout: 8, threeInRow: 4, img: '/assets/images/slots/persik final png.png' },
            { symbol: 'grape', payout: 12, threeInRow: 6, img: '/assets/images/slots/grape final png.png' },
            { symbol: 'bell', payout: 18, threeInRow: 9, img: '/assets/images/slots/bell final png.png' },
            { symbol: 'diamond', payout: 30, threeInRow: 15, img: '/assets/images/slots/diamond final png.png' },
            { symbol: 'star', payout: 50, threeInRow: 25, img: '/assets/images/slots/star final png.png' },
            { symbol: 'jackpot', payout: 100, threeInRow: 50, img: '/assets/images/slots/jackpot final png.png' }
          ].map((symbolData, index) => (
            <div key={index} className="payout-item">
              <img 
                src={symbolData.img} 
                alt={symbolData.symbol}
                className="payout-symbol-img"
                onError={(e) => {
                  const fallbackEmojis = {
                    'cherry': 'üçí',
                    'lemon': 'üçã',
                    'persik': 'üçë',
                    'grape': 'üçá',
                    'bell': 'üîî',
                    'diamond': 'üíé',
                    'star': '‚≠ê',
                    'jackpot': 'üé∞'
                  };
                  e.target.outerHTML = `<span class="payout-symbol">${fallbackEmojis[symbolData.symbol] || 'üçí'}</span>`;
                }}
              />
              <span className="payout-multiplier">4√ó{symbolData.payout} | 3√ó{symbolData.threeInRow}</span>
            </div>
          ))}
        </div>
        <div className="payout-note">
          * –ü–µ—Ä–≤–æ–µ —á–∏—Å–ª–æ - –≤—ã–∏–≥—Ä—ã—à –∑–∞ 4 –≤ —Ä—è–¥, –≤—Ç–æ—Ä–æ–µ - –∑–∞ 3 –≤ —Ä—è–¥
        </div>
      </div>
      
      {/* –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ */}
      {gameStats && (
        <div className="game-stats">
          <h4>–í–∞—à–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞</h4>
          <div className="stats-container">
            <div className="stat-item">
              <span className="stat-label">–í—Å–µ–≥–æ –∏–≥—Ä:</span>
              <span className="stat-value">{gameStats.totalGames}</span>
            </div>
            <div className="stat-item">
              <span className="stat-label">–ü–æ–±–µ–¥—ã:</span>
              <span className="stat-value">{gameStats.winCount} ({(gameStats.winRate * 100).toFixed(1)}%)</span>
            </div>
            <div className="stat-item">
              <span className="stat-label">–°—Ç–∞–≤–∫–∏:</span>
              <span className="stat-value">{gameStats.totalBet?.toFixed(2) || 0} USDT</span>
            </div>
            <div className="stat-item">
              <span className="stat-label">–í—ã–∏–≥—Ä—ã—à–∏:</span>
              <span className="stat-value">{gameStats.totalWin?.toFixed(2) || 0} USDT</span>
            </div>
            <div className="stat-item">
              <span className="stat-label">–ü—Ä–æ—Ñ–∏—Ç:</span>
              <span className={`stat-value ${(gameStats.totalWin - gameStats.totalLoss) >= 0 ? 'positive' : 'negative'}`}>
                {((gameStats.totalWin || 0) - (gameStats.totalLoss || 0)).toFixed(2)} USDT
              </span>
            </div>
          </div>
        </div>
      )}
    </div>
  );
};

export default SlotControls;
