// admin/src/commands/giveaways.command.js
const { Markup } = require('telegraf');
const axios = require('axios');

// API –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
const apiUrl = process.env.API_URL || 'https://api.greenlight-casino.eu/api';
const adminToken = process.env.ADMIN_API_TOKEN;

// –°–æ–∑–¥–∞–µ–º axios instance —Å –ø—Ä–µ–¥—É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–Ω—ã–º–∏ –∑–∞–≥–æ–ª–æ–≤–∫–∞–º–∏
const apiClient = axios.create({
  baseURL: apiUrl,
  headers: {
    'Authorization': `Bearer ${adminToken}`,
    'Content-Type': 'application/json'
  },
  timeout: 30000
});

/**
 * –ü–æ–∫–∞–∑–∞—Ç—å –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é —Ä–æ–∑—ã–≥—Ä—ã—à–µ–π
 */
async function showGiveawaysMenu(ctx) {
  try {
    await ctx.reply(
      'üéÅ *–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Ä–æ–∑—ã–≥—Ä—ã—à–∞–º–∏*\n\n' +
      '–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:',
      {
        parse_mode: 'Markdown',
        reply_markup: {
          inline_keyboard: [
            [
              { text: 'üéØ –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Ä–æ–∑—ã–≥—Ä—ã—à–∞–º–∏', callback_data: 'giveaways_manage' },
              { text: 'üìä –¢–µ–∫—É—â–∏–µ —Ä–æ–∑—ã–≥—Ä—ã—à–∏', callback_data: 'giveaways_current' }
            ],
            [
              { text: 'üéÅ –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø—Ä–∏–∑–∞–º–∏', callback_data: 'giveaways_prizes' },
              { text: '‚ûï –°–æ–∑–¥–∞—Ç—å —Ä–æ–∑—ã–≥—Ä—ã—à', callback_data: 'giveaways_create' }
            ],
            [
              { text: 'üìà –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞', callback_data: 'giveaways_stats' },
              { text: 'üì¢ –ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è', callback_data: 'giveaways_reminders' }
            ],
            [
              { text: 'üèÜ –ò—Å—Ç–æ—Ä–∏—è', callback_data: 'giveaways_history' }
            ],
            [
              { text: 'üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é', callback_data: 'main_menu' }
            ]
          ]
        }
      }
    );
  } catch (error) {
    console.error('ADMIN: –û—à–∏–±–∫–∞ –ø–æ–∫–∞–∑–∞ –º–µ–Ω—é —Ä–æ–∑—ã–≥—Ä—ã—à–µ–π:', error);
    await ctx.reply('‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –º–µ–Ω—é —Ä–æ–∑—ã–≥—Ä—ã—à–µ–π');
  }
}

/**
 * –ü–æ–∫–∞–∑–∞—Ç—å —Ç–µ–∫—É—â–∏–µ —Ä–æ–∑—ã–≥—Ä—ã—à–∏
 */
async function showCurrentGiveaways(ctx) {
  try {
    // Get all giveaways and filter for current ones (active + pending)
    const response = await apiClient.get('/admin/giveaways');
    
    if (response.data.success) {
      const allGiveaways = response.data.data.giveaways;
      const giveaways = allGiveaways.filter(g => g.status === 'active' || g.status === 'pending');
      
      if (giveaways.length === 0) {
        await ctx.reply(
          'üì≠ *–¢–µ–∫—É—â–∏–µ —Ä–æ–∑—ã–≥—Ä—ã—à–∏*\n\n' +
          '–ù–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö —Ä–æ–∑—ã–≥—Ä—ã—à–µ–π',
          {
            parse_mode: 'Markdown',
            reply_markup: {
              inline_keyboard: [
                [
                  { text: 'üéØ –°–æ–∑–¥–∞—Ç—å —Ä–æ–∑—ã–≥—Ä—ã—à', callback_data: 'giveaways_create' }
                ],
                [
                  { text: 'üîô –ù–∞–∑–∞–¥', callback_data: 'giveaways_menu' }
                ]
              ]
            }
          }
        );
        return;
      }

      let message = 'üìä *–¢–µ–∫—É—â–∏–µ —Ä–æ–∑—ã–≥—Ä—ã—à–∏*\n\n';
      
      for (const giveaway of giveaways) {
        const statusEmoji = giveaway.status === 'active' ? 'üü¢' : giveaway.status === 'pending' ? 'üü°' : 'üî¥';
        const typeText = giveaway.type === 'daily' ? '–ï–∂–µ–¥–Ω–µ–≤–Ω—ã–π' : '–ù–µ–¥–µ–ª—å–Ω—ã–π';
        
        message += `${statusEmoji} *${escapeMarkdown(giveaway.title)}*\n`;
        message += `‚î£ üéÅ –ü—Ä–∏–∑: ${escapeMarkdown(giveaway.prize?.name || '–ù–µ —É–∫–∞–∑–∞–Ω')}\n`;
        message += `‚î£ üìÖ –¢–∏–ø: ${typeText}\n`;
        message += `‚î£ üèÜ –ü–æ–±–µ–¥–∏—Ç–µ–ª–µ–π: ${giveaway.winnersCount}\n`;
        message += `‚î£ üë• –£—á–∞—Å—Ç–Ω–∏–∫–æ–≤: ${giveaway.participationCount}\n`;
        message += `‚î£ ‚è∞ –†–æ–∑—ã–≥—Ä—ã—à: ${new Date(giveaway.drawDate).toLocaleString('ru-RU')}\n`;
        message += `‚îó üìä –°—Ç–∞—Ç—É—Å: ${giveaway.status === 'active' ? '–ê–∫—Ç–∏–≤–Ω—ã–π' : giveaway.status === 'pending' ? '–û–∂–∏–¥–∞–µ—Ç' : '–ó–∞–≤–µ—Ä—à–µ–Ω'}\n\n`;
      }

      await ctx.reply(message, {
        parse_mode: 'Markdown',
        reply_markup: {
          inline_keyboard: [
            [
              { text: 'üîÑ –û–±–Ω–æ–≤–∏—Ç—å', callback_data: 'giveaways_current' },
              { text: 'üéØ –°–æ–∑–¥–∞—Ç—å –Ω–æ–≤—ã–π', callback_data: 'giveaways_create' }
            ],
            [
              { text: 'üîô –ù–∞–∑–∞–¥', callback_data: 'giveaways_menu' }
            ]
          ]
        }
      });

    } else {
      throw new Error(response.data.message || '–û—à–∏–±–∫–∞ API');
    }
  } catch (error) {
    console.error('ADMIN: –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Ç–µ–∫—É—â–∏—Ö —Ä–æ–∑—ã–≥—Ä—ã—à–µ–π:', error);
    await ctx.reply(
      '‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Ä–æ–∑—ã–≥—Ä—ã—à–µ–π',
      {
        reply_markup: {
          inline_keyboard: [
            [{ text: 'üîô –ù–∞–∑–∞–¥', callback_data: 'giveaways_menu' }]
          ]
        }
      }
    );
  }
}

/**
 * –ü–æ–∫–∞–∑–∞—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É —Ä–æ–∑—ã–≥—Ä—ã—à–µ–π
 */
async function showGiveawaysStats(ctx) {
  try {
    const response = await apiClient.get('/admin/giveaways/stats');
    
    if (response.data.success) {
      const stats = response.data.data;
      
      let message = 'üìà *–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Ä–æ–∑—ã–≥—Ä—ã—à–µ–π*\n\n';
      
      message += `üìä *–û–±—â–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:*\n`;
      message += `‚î£ üéÅ –í—Å–µ–≥–æ —Ä–æ–∑—ã–≥—Ä—ã—à–µ–π: ${stats.overview.totalGiveaways}\n`;
      message += `‚î£ üü¢ –ê–∫—Ç–∏–≤–Ω—ã—Ö: ${stats.overview.activeGiveaways}\n`;
      message += `‚î£ ‚úÖ –ó–∞–≤–µ—Ä—à–µ–Ω–Ω—ã—Ö: ${stats.overview.completedGiveaways}\n`;
      message += `‚î£ üë• –í—Å–µ–≥–æ —É—á–∞—Å—Ç–∏–π: ${stats.overview.totalParticipations}\n`;
      message += `‚îó üèÜ –ü—Ä–∏–∑–æ–≤: ${stats.overview.totalPrizes}\n\n`;
      
      if (stats.giveawaysByType && stats.giveawaysByType.length > 0) {
        message += `üìÖ *–ü–æ —Ç–∏–ø–∞–º:*\n`;
        for (const type of stats.giveawaysByType) {
          const typeName = type._id === 'daily' ? '–ï–∂–µ–¥–Ω–µ–≤–Ω—ã–µ' : '–ù–µ–¥–µ–ª—å–Ω—ã–µ';
          message += `‚î£ ${typeName}: ${type.count}\n`;
        }
        message += '\n';
      }
      
      if (stats.recentWinners && stats.recentWinners.length > 0) {
        message += `üèÜ *–ü–æ—Å–ª–µ–¥–Ω–∏–µ –ø–æ–±–µ–¥–∏—Ç–µ–ª–∏:*\n`;
        for (const winner of stats.recentWinners.slice(0, 5)) {
          message += `‚î£ ${escapeMarkdown(winner.user.firstName)} - ${escapeMarkdown(winner.giveaway.title)}\n`;
        }
      }

      await ctx.reply(message, {
        parse_mode: 'Markdown',
        reply_markup: {
          inline_keyboard: [
            [
              { text: 'üîÑ –û–±–Ω–æ–≤–∏—Ç—å', callback_data: 'giveaways_stats' }
            ],
            [
              { text: 'üîô –ù–∞–∑–∞–¥', callback_data: 'giveaways_menu' }
            ]
          ]
        }
      });

    } else {
      throw new Error(response.data.message || '–û—à–∏–±–∫–∞ API');
    }
  } catch (error) {
    console.error('ADMIN: –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ —Ä–æ–∑—ã–≥—Ä—ã—à–µ–π:', error);
    await ctx.reply(
      '‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏',
      {
        reply_markup: {
          inline_keyboard: [
            [{ text: 'üîô –ù–∞–∑–∞–¥', callback_data: 'giveaways_menu' }]
          ]
        }
      }
    );
  }
}

/**
 * –ü–æ–∫–∞–∑–∞—Ç—å —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø—Ä–∏–∑–∞–º–∏
 */
async function showPrizesManagement(ctx) {
  try {
    const response = await apiClient.get('/admin/giveaways/prizes');
    
    if (response.data.success) {
      const prizes = response.data.data.prizes;
      
      let message = 'üéÅ *–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø—Ä–∏–∑–∞–º–∏*\n\n';
      
      if (prizes.length === 0) {
        message += '–ü—Ä–∏–∑—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã\n\n';
      } else {
        for (const prize of prizes) {
          const typeEmoji = prize.type === 'telegram_gift' ? 'üéÅ' : prize.type === 'promo_code' ? 'üé´' : 'üí∞';
          message += `${typeEmoji} *${escapeMarkdown(prize.name)}*\n`;
          message += `‚î£ üíé –°—Ç–æ–∏–º–æ—Å—Ç—å: ${prize.value} USDT\n`;
          message += `‚î£ üìù –û–ø–∏—Å–∞–Ω–∏–µ: ${escapeMarkdown(prize.description)}\n`;
          message += `‚îó üîß –¢–∏–ø: ${prize.type === 'telegram_gift' ? 'Telegram Gift' : prize.type === 'promo_code' ? '–ü—Ä–æ–º–æ–∫–æ–¥' : '–ë–æ–Ω—É—Å'}\n\n`;
        }
      }

      await ctx.reply(message, {
        parse_mode: 'Markdown',
        reply_markup: {
          inline_keyboard: [
            [
              { text: '‚ûï –î–æ–±–∞–≤–∏—Ç—å –ø—Ä–∏–∑', callback_data: 'giveaways_add_prize' }
            ],
            [
              { text: 'üîÑ –û–±–Ω–æ–≤–∏—Ç—å', callback_data: 'giveaways_prizes' }
            ],
            [
              { text: 'üîô –ù–∞–∑–∞–¥', callback_data: 'giveaways_menu' }
            ]
          ]
        }
      });

    } else {
      throw new Error(response.data.message || '–û—à–∏–±–∫–∞ API');
    }
  } catch (error) {
    console.error('ADMIN: –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –ø—Ä–∏–∑–æ–≤:', error);
    await ctx.reply(
      '‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –ø—Ä–∏–∑–æ–≤',
      {
        reply_markup: {
          inline_keyboard: [
            [{ text: 'üîô –ù–∞–∑–∞–¥', callback_data: 'giveaways_menu' }]
          ]
        }
      }
    );
  }
}

/**
 * –í—ã–±–æ—Ä —Å–ø–æ—Å–æ–±–∞ —Å–æ–∑–¥–∞–Ω–∏—è –ø—Ä–∏–∑–∞
 */
async function startPrizeCreation(ctx) {
  try {
    await ctx.reply(
      'üéÅ *–°–æ–∑–¥–∞–Ω–∏–µ –Ω–æ–≤–æ–≥–æ –ø—Ä–∏–∑–∞*\n\n' +
      '–í—ã–±–µ—Ä–∏—Ç–µ —Å–ø–æ—Å–æ–± —Å–æ–∑–¥–∞–Ω–∏—è:',
      {
        parse_mode: 'Markdown',
        reply_markup: {
          inline_keyboard: [
            [{ text: 'üîó –ò–∑ —Å—Å—ã–ª–∫–∏ Telegram Gift', callback_data: 'create_prize_from_url' }],
            [{ text: '‚úèÔ∏è –°–æ–∑–¥–∞—Ç—å –≤—Ä—É—á–Ω—É—é', callback_data: 'create_prize_manual' }],
            [{ text: 'üîô –ù–∞–∑–∞–¥', callback_data: 'giveaways_prizes' }]
          ]
        }
      }
    );
  } catch (error) {
    console.error('ADMIN: –û—à–∏–±–∫–∞ –Ω–∞—á–∞–ª–∞ —Å–æ–∑–¥–∞–Ω–∏—è –ø—Ä–∏–∑–∞:', error);
    await ctx.reply('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –ø—Ä–∏–∑–∞');
  }
}

/**
 * –ù–∞—á–∞—Ç—å —Å–æ–∑–¥–∞–Ω–∏–µ –ø—Ä–∏–∑–∞ –∏–∑ URL
 */
async function startPrizeCreationFromUrl(ctx) {
  try {
    if (!ctx.session) ctx.session = {};
    ctx.session.creatingPrizeFromUrl = {
      step: 'url'
    };

    await ctx.reply(
      'üîó *–°–æ–∑–¥–∞–Ω–∏–µ –ø—Ä–∏–∑–∞ –∏–∑ Telegram Gift*\n\n' +
      '–û—Ç–ø—Ä–∞–≤—å—Ç–µ —Å—Å—ã–ª–∫—É –Ω–∞ –ø–æ–¥–∞—Ä–æ–∫ –≤ —Ñ–æ—Ä–º–∞—Ç–µ:\n' +
      '`https://t.me/nft/ToyBear-37305`\n\n' +
      '–°–∏—Å—Ç–µ–º–∞ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –∏–∑–≤–ª–µ—á–µ—Ç –Ω–∞–∑–≤–∞–Ω–∏–µ, –æ–ø–∏—Å–∞–Ω–∏–µ –∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ.',
      { parse_mode: 'Markdown' }
    );
  } catch (error) {
    console.error('ADMIN: –û—à–∏–±–∫–∞ –Ω–∞—á–∞–ª–∞ —Å–æ–∑–¥–∞–Ω–∏—è –ø—Ä–∏–∑–∞ –∏–∑ URL:', error);
    await ctx.reply('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –ø—Ä–∏–∑–∞');
  }
}

/**
 * –ù–∞—á–∞—Ç—å —Å–æ–∑–¥–∞–Ω–∏–µ –ø—Ä–∏–∑–∞ –≤—Ä—É—á–Ω—É—é
 */
async function startPrizeCreationManual(ctx) {
  try {
    // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å–µ—Å—Å–∏—é —Å–æ–∑–¥–∞–Ω–∏—è –ø—Ä–∏–∑–∞
    if (!ctx.session) ctx.session = {};
    ctx.session.creatingPrize = {
      step: 'name'
    };

    await ctx.reply(
      '‚úèÔ∏è *–°–æ–∑–¥–∞–Ω–∏–µ –ø—Ä–∏–∑–∞ –≤—Ä—É—á–Ω—É—é*\n\n' +
      '–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –ø—Ä–∏–∑–∞:',
      { parse_mode: 'Markdown' }
    );
  } catch (error) {
    console.error('ADMIN: –û—à–∏–±–∫–∞ –Ω–∞—á–∞–ª–∞ —Å–æ–∑–¥–∞–Ω–∏—è –ø—Ä–∏–∑–∞:', error);
    await ctx.reply('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –ø—Ä–∏–∑–∞');
  }
}

/**
 * –û–±—Ä–∞–±–æ—Ç–∞—Ç—å –≤–≤–æ–¥ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –ø—Ä–∏–∑–∞ –∏–∑ URL
 */
async function handleGiftUrlInput(ctx) {
  const text = ctx.message.text.trim();
  const session = ctx.session.creatingPrizeFromUrl;
  
  try {
    if (session.step === 'url') {
      // –í–∞–ª–∏–¥–∞—Ü–∏—è URL
      if (!text.match(/^https:\/\/t\.me\/nft\/[\w-]+$/i)) {
        await ctx.reply(
          '‚ùå –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–∞—è —Å—Å—ã–ª–∫–∞!\n\n' +
          '–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ —Ñ–æ—Ä–º–∞—Ç: `https://t.me/nft/ToyBear-37305`',
          { parse_mode: 'Markdown' }
        );
        return;
      }

      await ctx.reply('üîÑ –ü–∞—Ä—Å–∏–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ–¥–∞—Ä–∫–µ...');

      // –ü–∞—Ä—Å–∏–º –ø–æ–¥–∞—Ä–æ–∫
      const response = await apiClient.post('/admin/giveaways/gifts/parse', {
        giftUrl: text
      });

      if (response.data.success) {
        const preview = response.data.data.preview;
        console.log('ADMIN: –ü–æ–ª—É—á–µ–Ω—ã –¥–∞–Ω–Ω—ã–µ –ø—Ä–µ–¥–ø—Ä–æ—Å–º–æ—Ç—Ä–∞:', JSON.stringify(preview, null, 2));
        
        // –°–æ—Ö—Ä–∞–Ω—è–µ–º –¥–∞–Ω–Ω—ã–µ –≤ —Å–µ—Å—Å–∏–∏
        session.giftData = preview;
        session.step = 'preview';

        await showGiftPreview(ctx, preview);
      } else {
        console.error('ADMIN: API –≤–µ—Ä–Ω—É–ª –æ—à–∏–±–∫—É:', response.data);
        throw new Error(response.data.message || '–û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞');
      }

    } else if (session.step === 'value') {
      // –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–≤–æ–¥–∞ —Ü–µ–Ω–Ω–æ—Å—Ç–∏
      const value = parseFloat(text);
      
      if (isNaN(value) || value <= 0) {
        await ctx.reply('‚ùå –í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—É—é —Ü–µ–Ω–Ω–æ—Å—Ç—å (—á–∏—Å–ª–æ –±–æ–ª—å—à–µ 0)');
        return;
      }
      
      session.value = value;
      
      // –°–æ–∑–¥–∞–µ–º –ø—Ä–∏–∑
      await createPrizeFromGift(ctx, session);
    }

  } catch (error) {
    console.error('ADMIN: –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –≤–≤–æ–¥–∞ –ø–æ–¥–∞—Ä–∫–∞:', error);
    await ctx.reply(
      `‚ùå –û—à–∏–±–∫–∞: ${error.message}`,
      {
        reply_markup: {
          inline_keyboard: [
            [{ text: 'üîô –ù–∞–∑–∞–¥', callback_data: 'giveaways_add_prize' }]
          ]
        }
      }
    );
    delete ctx.session.creatingPrizeFromUrl;
  }
}

/**
 * –°–æ–∑–¥–∞—Ç—å –ø—Ä–∏–∑ –∏–∑ –¥–∞–Ω–Ω—ã—Ö –ø–æ–¥–∞—Ä–∫–∞
 */
async function createPrizeFromGift(ctx, session) {
  try {
    await ctx.reply('üîÑ –°–æ–∑–¥–∞–µ–º –ø—Ä–∏–∑...');

    const response = await apiClient.post('/admin/giveaways/gifts/create', {
      name: session.giftData.name,
      description: session.giftData.description,
      value: session.value,
      giftData: session.giftData
    });

    if (response.data.success) {
      const prize = response.data.data;
      
      await ctx.reply(
        `‚úÖ *–ü—Ä–∏–∑ —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω!*\n\n` +
        `üéÅ –ù–∞–∑–≤–∞–Ω–∏–µ: ${escapeMarkdown(prize.name)}\n` +
        `üí∞ –¶–µ–Ω–Ω–æ—Å—Ç—å: ${prize.value} USDT\n` +
        `üóÇ –ö–æ–ª–ª–µ–∫—Ü–∏—è: ${escapeMarkdown(prize.giftData?.collection || '–ù–µ —É–∫–∞–∑–∞–Ω–∞')}\n` +
        `üíé –†–µ–¥–∫–æ—Å—Ç—å: ${escapeMarkdown(prize.giftData?.rarity || '–ù–µ —É–∫–∞–∑–∞–Ω–∞')}`,
        {
          parse_mode: 'Markdown',
          reply_markup: {
            inline_keyboard: [
              [{ text: 'üéÅ –ö –ø—Ä–∏–∑–∞–º', callback_data: 'giveaways_prizes' }],
              [{ text: 'üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é', callback_data: 'main_menu' }]
            ]
          }
        }
      );
    } else {
      throw new Error(response.data.message || '–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –ø—Ä–∏–∑–∞');
    }

    delete ctx.session.creatingPrizeFromUrl;
  } catch (error) {
    console.error('ADMIN: –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –ø—Ä–∏–∑–∞:', error);
    await ctx.reply(
      `‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –ø—Ä–∏–∑–∞: ${error.message}`,
      {
        reply_markup: {
          inline_keyboard: [
            [{ text: 'üîô –ù–∞–∑–∞–¥', callback_data: 'giveaways_prizes' }]
          ]
        }
      }
    );
    delete ctx.session.creatingPrizeFromUrl;
  }
}

/**
 * –≠–∫—Ä–∞–Ω–∏—Ä—É–µ—Ç —Å–ø–µ—Ü–∏–∞–ª—å–Ω—ã–µ —Å–∏–º–≤–æ–ª—ã –¥–ª—è Telegram Markdown
 */
function escapeMarkdown(text) {
  if (!text) return '';
  
  // –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –≤ —Å—Ç—Ä–æ–∫—É
  let result = text.toString();
  
  // –≠–∫—Ä–∞–Ω–∏—Ä—É–µ–º —Å–ø–µ—Ü–∏–∞–ª—å–Ω—ã–µ —Å–∏–º–≤–æ–ª—ã Markdown
  return result
    .replace(/[_*[\]()~`>#+=|{}.!-]/g, '\\$&');
}

/**
 * –ü–æ–∫–∞–∑–∞—Ç—å –ø—Ä–µ–¥–ø—Ä–æ—Å–º–æ—Ç—Ä –ø–æ–¥–∞—Ä–∫–∞
 */
async function showGiftPreview(ctx, giftData) {
  try {
    console.log('ADMIN: –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø—Ä–µ–¥–ø—Ä–æ—Å–º–æ—Ç—Ä –ø–æ–¥–∞—Ä–∫–∞:', JSON.stringify(giftData, null, 2));
    
    let message = 'üéÅ *–ü—Ä–µ–¥–ø—Ä–æ—Å–º–æ—Ç—Ä –ø–æ–¥–∞—Ä–∫–∞*\n\n';
    message += `üìõ *–ù–∞–∑–≤–∞–Ω–∏–µ:* ${escapeMarkdown(giftData.name || '–ù–µ —É–∫–∞–∑–∞–Ω–æ')}\n`;
    
    if (giftData.description) {
      // –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –¥–ª–∏–Ω—É –æ–ø–∏—Å–∞–Ω–∏—è –¥–ª—è Telegram
      const desc = giftData.description.length > 200 ? 
                   giftData.description.substring(0, 200) + '...' : 
                   giftData.description;
      message += `üìù *–û–ø–∏—Å–∞–Ω–∏–µ:* ${escapeMarkdown(desc)}\n`;
    }
    
    if (giftData.collection) {
      message += `üóÇ *–ö–æ–ª–ª–µ–∫—Ü–∏—è:* ${escapeMarkdown(giftData.collection)}\n`;
    }
    
    if (giftData.rarity) {
      message += `üíé *–†–µ–¥–∫–æ—Å—Ç—å:* ${escapeMarkdown(giftData.rarity)}\n`;
    }
    
    if (giftData.totalSupply) {
      message += `üî¢ *–í—Å–µ–≥–æ –≤—ã–ø—É—â–µ–Ω–æ:* ${giftData.totalSupply.toLocaleString()}\n`;
    }
    
    if (giftData.currentSupply) {
      message += `üìä *–¢–µ–∫—É—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ:* ${giftData.currentSupply.toLocaleString()}\n`;
    }
    
    if (giftData.attributes && giftData.attributes.length > 0) {
      message += `\nüé® *–ê—Ç—Ä–∏–±—É—Ç—ã:*\n`;
      // –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∞—Ç—Ä–∏–±—É—Ç–æ–≤
      const limitedAttrs = giftData.attributes.slice(0, 5);
      limitedAttrs.forEach(attr => {
        if (attr.trait_type && attr.value) {
          message += `‚Ä¢ ${escapeMarkdown(attr.trait_type)}: ${escapeMarkdown(attr.value)}\n`;
        }
      });
      if (giftData.attributes.length > 5) {
        message += `‚Ä¢ –ò –µ—â–µ ${giftData.attributes.length - 5} –∞—Ç—Ä–∏–±—É—Ç–æ–≤...\n`;
      }
    }
    
    message += `\nüí∞ *–¶–µ–Ω–Ω–æ—Å—Ç—å:* –Ω—É–∂–Ω–æ —É–∫–∞–∑–∞—Ç—å –≤—Ä—É—á–Ω—É—é`;
    
    const keyboard = [
      [{ text: '‚úÖ –ò—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å —ç—Ç–∏ –¥–∞–Ω–Ω—ã–µ', callback_data: 'gift_preview_accept' }],
      [{ text: '‚ùå –û—Ç–º–µ–Ω–∞', callback_data: 'gift_preview_cancel' }]
    ];

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ
    console.log('ADMIN: URL –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è:', giftData.imageUrl);
    console.log('ADMIN: –ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –≤–∞–ª–∏–¥–Ω–æ:', giftData.imageValid);

    if (giftData.imageUrl && giftData.imageValid) {
      try {
        // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ–º
        console.log('ADMIN: –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ–º');
        await ctx.replyWithPhoto(giftData.imageUrl, {
          caption: message,
          parse_mode: 'Markdown',
          reply_markup: { inline_keyboard: keyboard }
        });
      } catch (photoError) {
        console.error('ADMIN: –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Ñ–æ—Ç–æ, –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ç–µ–∫—Å—Ç:', photoError);
        // –ï—Å–ª–∏ –æ—à–∏–±–∫–∞ —Å —Ñ–æ—Ç–æ, –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ç–µ–∫—Å—Ç
        await ctx.reply(message + '\n\n‚ö†Ô∏è –ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–æ', {
          parse_mode: 'Markdown',
          reply_markup: { inline_keyboard: keyboard }
        });
      }
    } else {
      // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ç–æ–ª—å–∫–æ —Ç–µ–∫—Å—Ç
      console.log('ADMIN: –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ç–æ–ª—å–∫–æ —Ç–µ–∫—Å—Ç');
      await ctx.reply(message, {
        parse_mode: 'Markdown',
        reply_markup: { inline_keyboard: keyboard }
      });
    }

  } catch (error) {
    console.error('ADMIN: –û—à–∏–±–∫–∞ –ø–æ–∫–∞–∑–∞ –ø—Ä–µ–¥–ø—Ä–æ—Å–º–æ—Ç—Ä–∞:', error);
    await ctx.reply(
      '‚ùå –û—à–∏–±–∫–∞ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –ø—Ä–µ–¥–ø—Ä–æ—Å–º–æ—Ç—Ä–∞\n\n' +
      `–î–µ—Ç–∞–ª–∏: ${error.message}`,
      {
        reply_markup: {
          inline_keyboard: [
            [{ text: 'üîô –ù–∞–∑–∞–¥', callback_data: 'giveaways_add_prize' }]
          ]
        }
      }
    );
  }
}

/**
 * –û–±—Ä–∞–±–æ—Ç–∞—Ç—å —Å–æ–∑–¥–∞–Ω–∏–µ –ø—Ä–∏–∑–∞
 */
async function handlePrizeCreation(ctx) {
  const text = ctx.message.text.trim();
  const session = ctx.session.creatingPrize;

  try {
    if (session.step === 'name') {
      session.name = text;
      session.step = 'description';
      
      await ctx.reply(
        `üéÅ *–°–æ–∑–¥–∞–Ω–∏–µ –ø—Ä–∏–∑–∞: ${escapeMarkdown(text)}*\n\n` +
        '–í–≤–µ–¥–∏—Ç–µ –æ–ø–∏—Å–∞–Ω–∏–µ –ø—Ä–∏–∑–∞:',
        { parse_mode: 'Markdown' }
      );
      
    } else if (session.step === 'description') {
      session.description = text;
      session.step = 'value';
      
      await ctx.reply(
        `üéÅ *–°–æ–∑–¥–∞–Ω–∏–µ –ø—Ä–∏–∑–∞: ${escapeMarkdown(session.name)}*\n\n` +
        '–í–≤–µ–¥–∏—Ç–µ —Å—Ç–æ–∏–º–æ—Å—Ç—å –ø—Ä–∏–∑–∞ –≤ USDT:',
        { parse_mode: 'Markdown' }
      );
      
    } else if (session.step === 'value') {
      const value = parseFloat(text);
      
      if (isNaN(value) || value <= 0) {
        await ctx.reply('‚ùå –í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—É—é —Å—Ç–æ–∏–º–æ—Å—Ç—å (—á–∏—Å–ª–æ –±–æ–ª—å—à–µ 0)');
        return;
      }
      
      session.value = value;
      session.step = 'type';
      
      await ctx.reply(
        `üéÅ *–°–æ–∑–¥–∞–Ω–∏–µ –ø—Ä–∏–∑–∞: ${escapeMarkdown(session.name)}*\n\n` +
        '–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø –ø—Ä–∏–∑–∞:',
        {
          parse_mode: 'Markdown',
          reply_markup: {
            inline_keyboard: [
              [{ text: 'üéÅ Telegram Gift', callback_data: 'prize_type_telegram_gift' }],
              [{ text: 'üé´ –ü—Ä–æ–º–æ–∫–æ–¥', callback_data: 'prize_type_promo_code' }],
              [{ text: 'üí∞ –ë–æ–Ω—É—Å', callback_data: 'prize_type_bonus' }],
              [{ text: '‚ùå –û—Ç–º–µ–Ω–∞', callback_data: 'giveaways_prizes' }]
            ]
          }
        }
      );
    }
  } catch (error) {
    console.error('ADMIN: –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Å–æ–∑–¥–∞–Ω–∏—è –ø—Ä–∏–∑–∞:', error);
    await ctx.reply('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –ø—Ä–∏–∑–∞');
    delete ctx.session.creatingPrize;
  }
}

/**
 * –ó–∞–≤–µ—Ä—à–∏—Ç—å —Å–æ–∑–¥–∞–Ω–∏–µ –ø—Ä–∏–∑–∞
 */
async function finalizePrizeCreation(ctx, type) {
  const session = ctx.session.creatingPrize;
  
  try {
    const prizeData = {
      name: session.name,
      description: session.description,
      value: session.value,
      type: type
    };

    const response = await apiClient.post('/admin/giveaways/prizes', prizeData);
    
    if (response.data.success) {
      await ctx.reply(
        `‚úÖ *–ü—Ä–∏–∑ —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω!*\n\n` +
        `üéÅ –ù–∞–∑–≤–∞–Ω–∏–µ: ${escapeMarkdown(session.name)}\n` +
        `üìù –û–ø–∏—Å–∞–Ω–∏–µ: ${escapeMarkdown(session.description)}\n` +
        `üíé –°—Ç–æ–∏–º–æ—Å—Ç—å: ${session.value} USDT\n` +
        `üîß –¢–∏–ø: ${type === 'telegram_gift' ? 'Telegram Gift' : type === 'promo_code' ? '–ü—Ä–æ–º–æ–∫–æ–¥' : '–ë–æ–Ω—É—Å'}`,
        {
          parse_mode: 'Markdown',
          reply_markup: {
            inline_keyboard: [
              [{ text: 'üéÅ –ö –ø—Ä–∏–∑–∞–º', callback_data: 'giveaways_prizes' }],
              [{ text: 'üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é', callback_data: 'main_menu' }]
            ]
          }
        }
      );
    } else {
      throw new Error(response.data.message || '–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –ø—Ä–∏–∑–∞');
    }

    delete ctx.session.creatingPrize;
  } catch (error) {
    console.error('ADMIN: –û—à–∏–±–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è —Å–æ–∑–¥–∞–Ω–∏—è –ø—Ä–∏–∑–∞:', error);
    await ctx.reply(
      `‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –ø—Ä–∏–∑–∞: ${error.message}`,
      {
        reply_markup: {
          inline_keyboard: [
            [{ text: 'üîô –ù–∞–∑–∞–¥', callback_data: 'giveaways_prizes' }]
          ]
        }
      }
    );
    delete ctx.session.creatingPrize;
  }
}

/**
 * –ü–æ–∫–∞–∑–∞—Ç—å —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Ä–æ–∑—ã–≥—Ä—ã—à–∞–º–∏
 */
async function showGiveawayManagement(ctx) {
  try {
    const response = await apiClient.get('/admin/giveaways');
    
    if (response.data.success) {
      const giveaways = response.data.data.giveaways;
      
      if (giveaways.length === 0) {
        await ctx.reply(
          'üì≠ *–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Ä–æ–∑—ã–≥—Ä—ã—à–∞–º–∏*\n\n' +
          '–†–æ–∑—ã–≥—Ä—ã—à–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã',
          {
            parse_mode: 'Markdown',
            reply_markup: {
              inline_keyboard: [
                [{ text: 'üéØ –°–æ–∑–¥–∞—Ç—å —Ä–æ–∑—ã–≥—Ä—ã—à', callback_data: 'giveaways_create' }],
                [{ text: 'üîô –ù–∞–∑–∞–¥', callback_data: 'giveaways_menu' }]
              ]
            }
          }
        );
        return;
      }

      let message = 'üéØ *–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Ä–æ–∑—ã–≥—Ä—ã—à–∞–º–∏*\n\n';
      const keyboard = [];
      
      for (const giveaway of giveaways.slice(0, 8)) { // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –¥–æ 8 —Ä–æ–∑—ã–≥—Ä—ã—à–µ–π
        const statusEmoji = giveaway.status === 'active' ? 'üü¢' : 
                           giveaway.status === 'pending' ? 'üü°' : 
                           giveaway.status === 'completed' ? '‚úÖ' : '‚ùå';
        const typeText = giveaway.type === 'daily' ? '–ï–∂–µ–¥–Ω–µ–≤–Ω—ã–π' : '–ù–µ–¥–µ–ª—å–Ω—ã–π';
        
        message += `${statusEmoji} *${escapeMarkdown(giveaway.title)}*\n`;
        message += `‚î£ üìÖ ${typeText}\n`;
        message += `‚î£ üéÅ ${escapeMarkdown(giveaway.prize?.name || '–ü—Ä–∏–∑ –Ω–µ —É–∫–∞–∑–∞–Ω')}\n`;
        message += `‚î£ üë• –£—á–∞—Å—Ç–Ω–∏–∫–æ–≤: ${giveaway.participationCount}\n`;
        message += `‚îó üìä ${giveaway.status === 'active' ? '–ê–∫—Ç–∏–≤–Ω—ã–π' : 
                                giveaway.status === 'pending' ? '–û–∂–∏–¥–∞–µ—Ç' : 
                                giveaway.status === 'completed' ? '–ó–∞–≤–µ—Ä—à–µ–Ω' : '–û—Ç–º–µ–Ω–µ–Ω'}\n\n`;
        
        keyboard.push([{ 
          text: `${statusEmoji} ${giveaway.title.slice(0, 25)}`, 
          callback_data: `manage_giveaway_${giveaway._id}` 
        }]);
      }
      
      keyboard.push([{ text: 'üéØ –°–æ–∑–¥–∞—Ç—å –Ω–æ–≤—ã–π', callback_data: 'giveaways_create' }]);
      keyboard.push([{ text: 'üîô –ù–∞–∑–∞–¥', callback_data: 'giveaways_menu' }]);

      await ctx.reply(message, {
        parse_mode: 'Markdown',
        reply_markup: { inline_keyboard: keyboard }
      });

    } else {
      throw new Error(response.data.message || '–û—à–∏–±–∫–∞ API');
    }
  } catch (error) {
    console.error('ADMIN: –û—à–∏–±–∫–∞ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Ä–æ–∑—ã–≥—Ä—ã—à–∞–º–∏:', error);
    await ctx.reply(
      '‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Ä–æ–∑—ã–≥—Ä—ã—à–µ–π',
      {
        reply_markup: {
          inline_keyboard: [
            [{ text: 'üîô –ù–∞–∑–∞–¥', callback_data: 'giveaways_menu' }]
          ]
        }
      }
    );
  }
}

/**
 * –ü–æ–∫–∞–∑–∞—Ç—å –¥–µ—Ç–∞–ª–∏ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ —Ä–æ–∑—ã–≥—Ä—ã—à–∞
 */
async function showGiveawayDetails(ctx, giveawayId) {
  try {
    const response = await apiClient.get(`/admin/giveaways`);
    
    if (response.data.success) {
      const giveaway = response.data.data.giveaways.find(g => g._id === giveawayId);
      
      if (!giveaway) {
        await ctx.reply('‚ùå –†–æ–∑—ã–≥—Ä—ã—à –Ω–µ –Ω–∞–π–¥–µ–Ω');
        return;
      }

      const statusEmoji = giveaway.status === 'active' ? 'üü¢' : 
                         giveaway.status === 'pending' ? 'üü°' : 
                         giveaway.status === 'completed' ? '‚úÖ' : '‚ùå';
      
      const typeText = giveaway.type === 'daily' ? '–ï–∂–µ–¥–Ω–µ–≤–Ω—ã–π' : '–ù–µ–¥–µ–ª—å–Ω—ã–π';
      
      let message = `${statusEmoji} *${escapeMarkdown(giveaway.title)}*\n\n`;
      message += `üìÖ *–¢–∏–ø:* ${typeText}\n`;
      message += `üéÅ *–ü—Ä–∏–∑:* ${escapeMarkdown(giveaway.prize?.name || '–ù–µ —É–∫–∞–∑–∞–Ω')}\n`;
      message += `üí∞ *–°—Ç–æ–∏–º–æ—Å—Ç—å:* ${giveaway.prize?.value || 0} USDT\n`;
      message += `üèÜ *–ü–æ–±–µ–¥–∏—Ç–µ–ª–µ–π:* ${giveaway.winnersCount}\n`;
      message += `üë• *–£—á–∞—Å—Ç–Ω–∏–∫–æ–≤:* ${giveaway.participationCount}\n\n`;
      
      message += `üìä *–°—Ç–∞—Ç—É—Å:* ${giveaway.status === 'active' ? '–ê–∫—Ç–∏–≤–Ω—ã–π' : 
                                   giveaway.status === 'pending' ? '–û–∂–∏–¥–∞–µ—Ç' : 
                                   giveaway.status === 'completed' ? '–ó–∞–≤–µ—Ä—à–µ–Ω' : '–û—Ç–º–µ–Ω–µ–Ω'}\n\n`;
      
      message += `‚è∞ *–†–∞—Å–ø–∏—Å–∞–Ω–∏–µ:*\n`;
      message += `‚î£ üöÄ –ù–∞—á–∞–ª–æ: ${new Date(giveaway.startDate).toLocaleString('ru-RU')}\n`;
      message += `‚î£ ‚è≥ –ö–æ–Ω–µ—Ü: ${new Date(giveaway.endDate).toLocaleString('ru-RU')}\n`;
      message += `‚îó üéØ –†–æ–∑—ã–≥—Ä—ã—à: ${new Date(giveaway.drawDate).toLocaleString('ru-RU')}\n\n`;
      
      if (giveaway.winners && giveaway.winners.length > 0) {
        message += `üèÜ *–ü–æ–±–µ–¥–∏—Ç–µ–ª–∏:*\n`;
        giveaway.winners.forEach((winner, index) => {
          message += `${index + 1}. ${escapeMarkdown(winner.user?.firstName || '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å')}\n`;
        });
      }

      const keyboard = [];
      
      // –ö–Ω–æ–ø–∫–∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Å—Ç–∞—Ç—É—Å–∞
      if (giveaway.status === 'pending') {
        keyboard.push([
          { text: '‚úÖ –ê–∫—Ç–∏–≤–∏—Ä–æ–≤–∞—Ç—å', callback_data: `activate_giveaway_${giveawayId}` },
          { text: '‚ùå –û—Ç–º–µ–Ω–∏—Ç—å', callback_data: `cancel_giveaway_${giveawayId}` }
        ]);
      } else if (giveaway.status === 'active') {
        keyboard.push([
          { text: 'üéØ –ü—Ä–æ–≤–µ—Å—Ç–∏ —Ä–æ–∑—ã–≥—Ä—ã—à', callback_data: `conduct_giveaway_${giveawayId}` },
          { text: '‚ùå –û—Ç–º–µ–Ω–∏—Ç—å', callback_data: `cancel_giveaway_${giveawayId}` }
        ]);
      }
      
      keyboard.push([
        { text: '‚è∞ –ò–∑–º–µ–Ω–∏—Ç—å –≤—Ä–µ–º—è', callback_data: `edit_time_${giveawayId}` },
        { text: 'üìù –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å', callback_data: `edit_giveaway_${giveawayId}` }
      ]);
      
      keyboard.push([
        { text: 'üë• –£—á–∞—Å—Ç–Ω–∏–∫–∏', callback_data: `view_participants_${giveawayId}` }
      ]);
      
      keyboard.push([
        { text: 'üì¢ –ù–∞–ø–æ–º–Ω–∏—Ç—å –æ —Ä–æ–∑—ã–≥—Ä—ã—à–µ', callback_data: `remind_giveaway_${giveawayId}` }
      ]);
      
      keyboard.push([{ text: 'üîô –ö —Ä–æ–∑—ã–≥—Ä—ã—à–∞–º', callback_data: 'giveaways_manage' }]);

      await ctx.editMessageText(message, {
        parse_mode: 'Markdown',
        reply_markup: { inline_keyboard: keyboard }
      });

    } else {
      throw new Error(response.data.message || '–û—à–∏–±–∫–∞ API');
    }
  } catch (error) {
    console.error('ADMIN: –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –¥–µ—Ç–∞–ª–µ–π —Ä–æ–∑—ã–≥—Ä—ã—à–∞:', error);
    await ctx.reply('‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Ä–æ–∑—ã–≥—Ä—ã—à–∞');
  }
}

/**
 * –ê–∫—Ç–∏–≤–∏—Ä–æ–≤–∞—Ç—å —Ä–æ–∑—ã–≥—Ä—ã—à
 */
async function activateGiveaway(ctx, giveawayId) {
  try {
    const response = await apiClient.post(`/admin/giveaways/${giveawayId}/activate`);
    
    if (response.data.success) {
      await ctx.answerCbQuery('‚úÖ –†–æ–∑—ã–≥—Ä—ã—à –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω!');
      await showGiveawayDetails(ctx, giveawayId);
    } else {
      await ctx.answerCbQuery('‚ùå –û—à–∏–±–∫–∞ –∞–∫—Ç–∏–≤–∞—Ü–∏–∏');
      await ctx.reply(`‚ùå –û—à–∏–±–∫–∞: ${response.data.message}`);
    }
  } catch (error) {
    console.error('ADMIN: –û—à–∏–±–∫–∞ –∞–∫—Ç–∏–≤–∞—Ü–∏–∏ —Ä–æ–∑—ã–≥—Ä—ã—à–∞:', error);
    await ctx.answerCbQuery('‚ùå –û—à–∏–±–∫–∞ –∞–∫—Ç–∏–≤–∞—Ü–∏–∏');
    await ctx.reply('‚ùå –û—à–∏–±–∫–∞ –∞–∫—Ç–∏–≤–∞—Ü–∏–∏ —Ä–æ–∑—ã–≥—Ä—ã—à–∞');
  }
}

/**
 * –û—Ç–º–µ–Ω–∏—Ç—å —Ä–æ–∑—ã–≥—Ä—ã—à
 */
async function cancelGiveaway(ctx, giveawayId) {
  try {
    const response = await apiClient.post(`/admin/giveaways/${giveawayId}/cancel`);
    
    if (response.data.success) {
      await ctx.answerCbQuery('‚ùå –†–æ–∑—ã–≥—Ä—ã—à –æ—Ç–º–µ–Ω–µ–Ω');
      await showGiveawayDetails(ctx, giveawayId);
    } else {
      await ctx.answerCbQuery('‚ùå –û—à–∏–±–∫–∞ –æ—Ç–º–µ–Ω—ã');
      await ctx.reply(`‚ùå –û—à–∏–±–∫–∞: ${response.data.message}`);
    }
  } catch (error) {
    console.error('ADMIN: –û—à–∏–±–∫–∞ –æ—Ç–º–µ–Ω—ã —Ä–æ–∑—ã–≥—Ä—ã—à–∞:', error);
    await ctx.answerCbQuery('‚ùå –û—à–∏–±–∫–∞ –æ—Ç–º–µ–Ω—ã');
    await ctx.reply('‚ùå –û—à–∏–±–∫–∞ –æ—Ç–º–µ–Ω—ã —Ä–æ–∑—ã–≥—Ä—ã—à–∞');
  }
}

/**
 * –ü—Ä–æ–≤–µ—Å—Ç–∏ —Ä–æ–∑—ã–≥—Ä—ã—à
 */
async function conductGiveaway(ctx, giveawayId) {
  try {
    await ctx.answerCbQuery('üéØ –ü—Ä–æ–≤–æ–¥–∏–º —Ä–æ–∑—ã–≥—Ä—ã—à...');
    
    const response = await apiClient.post(`/admin/giveaways/${giveawayId}/conduct`);
    
    if (response.data.success) {
      const winners = response.data.data.winners || [];
      let message = 'üéâ *–†–æ–∑—ã–≥—Ä—ã—à –ø—Ä–æ–≤–µ–¥–µ–Ω!*\n\n';
      
      if (winners.length > 0) {
        message += 'üèÜ *–ü–æ–±–µ–¥–∏—Ç–µ–ª–∏:*\n';
        winners.forEach((winner, index) => {
          message += `${index + 1}. ${escapeMarkdown(winner.user?.firstName || '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å')}\n`;
        });
      } else {
        message += 'üòû –£—á–∞—Å—Ç–Ω–∏–∫–æ–≤ –Ω–µ –±—ã–ª–æ';
      }
      
      await ctx.reply(message, { parse_mode: 'Markdown' });
      await showGiveawayDetails(ctx, giveawayId);
    } else {
      await ctx.reply(`‚ùå –û—à–∏–±–∫–∞: ${response.data.message}`);
    }
  } catch (error) {
    console.error('ADMIN: –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ–¥–µ–Ω–∏—è —Ä–æ–∑—ã–≥—Ä—ã—à–∞:', error);
    await ctx.reply('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ–¥–µ–Ω–∏—è —Ä–æ–∑—ã–≥—Ä—ã—à–∞');
  }
}

/**
 * –ù–∞—á–∞—Ç—å —Å–æ–∑–¥–∞–Ω–∏–µ —Ä–æ–∑—ã–≥—Ä—ã—à–∞
 */
async function startGiveawayCreation(ctx) {
  try {
    // –ü–æ–ª—É—á–∞–µ–º –¥–æ—Å—Ç—É–ø–Ω—ã–µ –ø—Ä–∏–∑—ã
    const response = await apiClient.get('/admin/giveaways/prizes');
    
    if (!response.data.success || response.data.data.prizes.length === 0) {
      await ctx.reply(
        '‚ùå *–ù–µ–≤–æ–∑–º–æ–∂–Ω–æ —Å–æ–∑–¥–∞—Ç—å —Ä–æ–∑—ã–≥—Ä—ã—à*\n\n' +
        '–°–Ω–∞—á–∞–ª–∞ —Å–æ–∑–¥–∞–π—Ç–µ —Ö–æ—Ç—è –±—ã –æ–¥–∏–Ω –ø—Ä–∏–∑',
        {
          parse_mode: 'Markdown',
          reply_markup: {
            inline_keyboard: [
              [{ text: 'üéÅ –°–æ–∑–¥–∞—Ç—å –ø—Ä–∏–∑', callback_data: 'giveaways_add_prize' }],
              [{ text: 'üîô –ù–∞–∑–∞–¥', callback_data: 'giveaways_menu' }]
            ]
          }
        }
      );
      return;
    }

    // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å–µ—Å—Å–∏—é —Å–æ–∑–¥–∞–Ω–∏—è —Ä–æ–∑—ã–≥—Ä—ã—à–∞
    if (!ctx.session) ctx.session = {};
    ctx.session.creatingGiveaway = {
      step: 'title',
      availablePrizes: response.data.data.prizes
    };

    await ctx.reply(
      'üéØ *–°–æ–∑–¥–∞–Ω–∏–µ –Ω–æ–≤–æ–≥–æ —Ä–æ–∑—ã–≥—Ä—ã—à–∞*\n\n' +
      '–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ —Ä–æ–∑—ã–≥—Ä—ã—à–∞:',
      { parse_mode: 'Markdown' }
    );
  } catch (error) {
    console.error('ADMIN: –û—à–∏–±–∫–∞ –Ω–∞—á–∞–ª–∞ —Å–æ–∑–¥–∞–Ω–∏—è —Ä–æ–∑—ã–≥—Ä—ã—à–∞:', error);
    await ctx.reply('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ —Ä–æ–∑—ã–≥—Ä—ã—à–∞');
  }
}

/**
 * –û–±—Ä–∞–±–æ—Ç–∞—Ç—å —Å–æ–∑–¥–∞–Ω–∏–µ —Ä–æ–∑—ã–≥—Ä—ã—à–∞
 */
async function handleGiveawayCreation(ctx) {
  const text = ctx.message.text.trim();
  const session = ctx.session.creatingGiveaway;

  try {
    if (session.step === 'title') {
      session.title = text;
      session.step = 'type';
      
      await ctx.reply(
        `üéØ *–°–æ–∑–¥–∞–Ω–∏–µ —Ä–æ–∑—ã–≥—Ä—ã—à–∞: ${escapeMarkdown(text)}*\n\n` +
        '–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø —Ä–æ–∑—ã–≥—Ä—ã—à–∞:',
        {
          parse_mode: 'Markdown',
          reply_markup: {
            inline_keyboard: [
              [{ text: 'üìÖ –ï–∂–µ–¥–Ω–µ–≤–Ω—ã–π', callback_data: 'giveaway_type_daily' }],
              [{ text: 'üìÜ –ù–µ–¥–µ–ª—å–Ω—ã–π', callback_data: 'giveaway_type_weekly' }],
              [{ text: '‚ùå –û—Ç–º–µ–Ω–∞', callback_data: 'giveaways_menu' }]
            ]
          }
        }
      );
      
    } else if (session.step === 'winnersCount') {
      const winnersCount = parseInt(text);
      
      if (isNaN(winnersCount) || winnersCount <= 0 || winnersCount > 10) {
        await ctx.reply('‚ùå –í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–±–µ–¥–∏—Ç–µ–ª–µ–π (–æ—Ç 1 –¥–æ 10)');
        return;
      }
      
      session.winnersCount = winnersCount;
      
      // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –¥–æ—Å—Ç—É–ø–Ω—ã–µ –ø—Ä–∏–∑—ã –¥–ª—è –≤—ã–±–æ—Ä–∞
      let message = `üéØ *–°–æ–∑–¥–∞–Ω–∏–µ —Ä–æ–∑—ã–≥—Ä—ã—à–∞: ${escapeMarkdown(session.title)}*\n\n` +
                   '–í—ã–±–µ—Ä–∏—Ç–µ –ø—Ä–∏–∑ –¥–ª—è —Ä–æ–∑—ã–≥—Ä—ã—à–∞:\n\n';
      
      const keyboard = [];
      for (let i = 0; i < session.availablePrizes.length; i++) {
        const prize = session.availablePrizes[i];
        message += `${i + 1}. ${escapeMarkdown(prize.name)} (${prize.value} USDT)\n`;
        keyboard.push([{ 
          text: `${i + 1}. ${prize.name}`, 
          callback_data: `select_prize_${prize._id}` 
        }]);
      }
      
      keyboard.push([{ text: '‚ùå –û—Ç–º–µ–Ω–∞', callback_data: 'giveaways_menu' }]);
      
      await ctx.reply(message, {
        parse_mode: 'Markdown',
        reply_markup: { inline_keyboard: keyboard }
      });
    }
  } catch (error) {
    console.error('ADMIN: –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Å–æ–∑–¥–∞–Ω–∏—è —Ä–æ–∑—ã–≥—Ä—ã—à–∞:', error);
    await ctx.reply('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ —Ä–æ–∑—ã–≥—Ä—ã—à–∞');
    delete ctx.session.creatingGiveaway;
  }
}

/**
 * –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –≤—Ä–µ–º–µ–Ω–∏ —Ä–æ–∑—ã–≥—Ä—ã—à–∞
 */
async function editGiveawayTime(ctx, giveawayId) {
  try {
    // –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ —Ä–æ–∑—ã–≥—Ä—ã—à–∞
    const response = await apiClient.get(`/admin/giveaways`);
    
    if (response.data.success) {
      const giveaway = response.data.data.giveaways.find(g => g._id === giveawayId);
      
      if (!giveaway) {
        await ctx.reply('‚ùå –†–æ–∑—ã–≥—Ä—ã—à –Ω–µ –Ω–∞–π–¥–µ–Ω');
        return;
      }

      if (giveaway.status === 'completed') {
        await ctx.reply('‚ùå –ù–µ–ª—å–∑—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å –∑–∞–≤–µ—Ä—à–µ–Ω–Ω—ã–µ —Ä–æ–∑—ã–≥—Ä—ã—à–∏');
        return;
      }

      const currentDrawDate = new Date(giveaway.drawDate);
      const formattedDate = currentDrawDate.toLocaleString('ru-RU', {
        timeZone: 'Europe/Moscow',
        day: '2-digit',
        month: '2-digit', 
        year: 'numeric',
        hour: '2-digit',
        minute: '2-digit'
      });

      ctx.session.editingGiveawayTime = {
        giveawayId: giveawayId,
        step: 'waiting_date'
      };

      await ctx.reply(
        `‚è∞ *–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –≤—Ä–µ–º–µ–Ω–∏ —Ä–æ–∑—ã–≥—Ä—ã—à–∞*\n\n` +
        `üéÅ –†–æ–∑—ã–≥—Ä—ã—à: ${escapeMarkdown(giveaway.title)}\n` +
        `üìÖ –¢–µ–∫—É—â–µ–µ –≤—Ä–µ–º—è: ${formattedDate} –ú–°–ö\n\n` +
        `–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—É—é –¥–∞—Ç—É –∏ –≤—Ä–µ–º—è –≤ —Ñ–æ—Ä–º–∞—Ç–µ:\n` +
        `\`–î–î.–ú–ú.–ì–ì–ì–ì –ß–ß:–ú–ú\`\n\n` +
        `–ù–∞–ø—Ä–∏–º–µ—Ä: \`15.06.2025 20:00\``,
        {
          parse_mode: 'Markdown',
          reply_markup: {
            inline_keyboard: [
              [{ text: '‚ùå –û—Ç–º–µ–Ω–∞', callback_data: `giveaway_details_${giveawayId}` }]
            ]
          }
        }
      );
    }
  } catch (error) {
    console.error('ADMIN: –û—à–∏–±–∫–∞ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –≤—Ä–µ–º–µ–Ω–∏:', error);
    await ctx.reply('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏ –≤—Ä–µ–º–µ–Ω–∏');
  }
}

/**
 * –ü–æ–ª–Ω–æ–µ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Ä–æ–∑—ã–≥—Ä—ã—à–∞
 */
async function editGiveaway(ctx, giveawayId) {
  try {
    // –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ —Ä–æ–∑—ã–≥—Ä—ã—à–∞
    const response = await apiClient.get(`/admin/giveaways`);
    
    if (response.data.success) {
      const giveaway = response.data.data.giveaways.find(g => g._id === giveawayId);
      
      if (!giveaway) {
        await ctx.reply('‚ùå –†–æ–∑—ã–≥—Ä—ã—à –Ω–µ –Ω–∞–π–¥–µ–Ω');
        return;
      }

      if (giveaway.status === 'completed') {
        await ctx.reply('‚ùå –ù–µ–ª—å–∑—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å –∑–∞–≤–µ—Ä—à–µ–Ω–Ω—ã–µ —Ä–æ–∑—ã–≥—Ä—ã—à–∏');
        return;
      }

      const keyboard = [
        [
          { text: 'üèÜ –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–±–µ–¥–∏—Ç–µ–ª–µ–π', callback_data: `edit_winners_${giveawayId}` },
          { text: 'üí∞ –ú–∏–Ω. –¥–µ–ø–æ–∑–∏—Ç', callback_data: `edit_deposit_${giveawayId}` }
        ],
        [
          { text: 'üìù –ù–∞–∑–≤–∞–Ω–∏–µ', callback_data: `edit_title_${giveawayId}` },
          { text: '‚è∞ –í—Ä–µ–º—è', callback_data: `edit_time_${giveawayId}` }
        ],
        [
          { text: 'üéÅ –ò–∑–º–µ–Ω–∏—Ç—å –ø—Ä–∏–∑', callback_data: `edit_prize_${giveawayId}` }
        ],
        [
          { text: 'üîô –ù–∞–∑–∞–¥', callback_data: `giveaway_details_${giveawayId}` }
        ]
      ];

      await ctx.editMessageText(
        `üìù *–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Ä–æ–∑—ã–≥—Ä—ã—à–∞*\n\n` +
        `üéÅ ${escapeMarkdown(giveaway.title)}\n\n` +
        `–í—ã–±–µ—Ä–∏—Ç–µ —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ –∏–∑–º–µ–Ω–∏—Ç—å:`,
        {
          parse_mode: 'Markdown',
          reply_markup: { inline_keyboard: keyboard }
        }
      );
    }
  } catch (error) {
    console.error('ADMIN: –û—à–∏–±–∫–∞ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —Ä–æ–∑—ã–≥—Ä—ã—à–∞:', error);
    await ctx.reply('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è');
  }
}

/**
 * –ü—Ä–æ—Å–º–æ—Ç—Ä —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ —Ä–æ–∑—ã–≥—Ä—ã—à–∞
 */
async function viewParticipants(ctx, giveawayId, page = 1) {
  try {
    const response = await apiClient.get(`/admin/giveaways/${giveawayId}/participants?page=${page}&limit=10`);
    
    if (response.data.success) {
      const { participants, pagination } = response.data.data;
      
      let message = `üë• *–£—á–∞—Å—Ç–Ω–∏–∫–∏ —Ä–æ–∑—ã–≥—Ä—ã—à–∞*\n\n`;
      
      if (participants.length === 0) {
        message += `üì≠ –ü–æ–∫–∞ –Ω–µ—Ç —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤`;
      } else {
        message += `üë• –í—Å–µ–≥–æ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤: ${pagination.total}\n\n`;
        
        participants.forEach((participant, index) => {
          const position = (page - 1) * 10 + index + 1;
          const userName = participant.user?.firstName || participant.user?.username || '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π';
          const depositAmount = participant.depositAmount || 0;
          const statusEmoji = participant.isWinner ? 'üèÜ' : 'üë§';
          
          message += `${statusEmoji} \`‚Ññ${participant.participationNumber}\` ${escapeMarkdown(userName)}\n`;
          message += `   üí∞ –î–µ–ø–æ–∑–∏—Ç: ${depositAmount} USDT\n`;
          message += `   üìÖ ${new Date(participant.createdAt).toLocaleString('ru-RU')}\n\n`;
        });
      }
      
      const keyboard = [];
      
      // –ü–∞–≥–∏–Ω–∞—Ü–∏—è
      if (pagination.pages > 1) {
        const navRow = [];
        if (page > 1) {
          navRow.push({ text: '‚¨ÖÔ∏è –ü—Ä–µ–¥', callback_data: `participants_${giveawayId}_${page - 1}` });
        }
        navRow.push({ text: `${page}/${pagination.pages}`, callback_data: 'noop' });
        if (page < pagination.pages) {
          navRow.push({ text: '–°–ª–µ–¥ ‚û°Ô∏è', callback_data: `participants_${giveawayId}_${page + 1}` });
        }
        keyboard.push(navRow);
      }
      
      keyboard.push([{ text: 'üîô –ö —Ä–æ–∑—ã–≥—Ä—ã—à—É', callback_data: `giveaway_details_${giveawayId}` }]);

      await ctx.editMessageText(message, {
        parse_mode: 'Markdown',
        reply_markup: { inline_keyboard: keyboard }
      });
    }
  } catch (error) {
    console.error('ADMIN: –û—à–∏–±–∫–∞ –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤:', error);
    await ctx.reply('‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤');
  }
}

/**
 * –ù–∞—á–∞—Ç—å —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ –ø–æ–ª—è
 */
async function startEditField(ctx, giveawayId, field) {
  try {
    // –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ —Ä–æ–∑—ã–≥—Ä—ã—à–∞
    const response = await apiClient.get(`/admin/giveaways`);
    
    if (response.data.success) {
      const giveaway = response.data.data.giveaways.find(g => g._id === giveawayId);
      
      if (!giveaway) {
        await ctx.reply('‚ùå –†–æ–∑—ã–≥—Ä—ã—à –Ω–µ –Ω–∞–π–¥–µ–Ω');
        return;
      }

      if (giveaway.status === 'completed') {
        await ctx.reply('‚ùå –ù–µ–ª—å–∑—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å –∑–∞–≤–µ—Ä—à–µ–Ω–Ω—ã–µ —Ä–æ–∑—ã–≥—Ä—ã—à–∏');
        return;
      }

      ctx.session.editingGiveawayField = {
        giveawayId: giveawayId,
        field: field,
        step: 'waiting_value'
      };

      let message = '';
      let currentValue = '';

      switch (field) {
        case 'winnersCount':
          currentValue = giveaway.winnersCount;
          message = `üèÜ *–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –ø–æ–±–µ–¥–∏—Ç–µ–ª–µ–π*\n\n` +
                   `üéÅ –†–æ–∑—ã–≥—Ä—ã—à: ${escapeMarkdown(giveaway.title)}\n` +
                   `üìä –¢–µ–∫—É—â–µ–µ –∑–Ω–∞—á–µ–Ω–∏–µ: ${currentValue}\n\n` +
                   `–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–±–µ–¥–∏—Ç–µ–ª–µ–π (—á–∏—Å–ª–æ –æ—Ç 1 –¥–æ 10):`;
          break;
        
        case 'minDepositAmount':
          currentValue = giveaway.minDepositAmount || 1;
          message = `üí∞ *–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –º–∏–Ω–∏–º–∞–ª—å–Ω–æ–≥–æ –¥–µ–ø–æ–∑–∏—Ç–∞*\n\n` +
                   `üéÅ –†–æ–∑—ã–≥—Ä—ã—à: ${escapeMarkdown(giveaway.title)}\n` +
                   `üí≥ –¢–µ–∫—É—â–µ–µ –∑–Ω–∞—á–µ–Ω–∏–µ: ${currentValue} USDT\n\n` +
                   `–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—É—é –º–∏–Ω–∏–º–∞–ª—å–Ω—É—é —Å—É–º–º—É –¥–µ–ø–æ–∑–∏—Ç–∞ (–Ω–∞–ø—Ä–∏–º–µ—Ä: 5):`;
          break;
        
        case 'title':
          currentValue = giveaway.title;
          message = `üìù *–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –Ω–∞–∑–≤–∞–Ω–∏—è*\n\n` +
                   `üìä –¢–µ–∫—É—â–µ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ: ${escapeMarkdown(currentValue)}\n\n` +
                   `–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ —Ä–æ–∑—ã–≥—Ä—ã—à–∞:`;
          break;
      }

      await ctx.reply(message, {
        parse_mode: 'Markdown',
        reply_markup: {
          inline_keyboard: [
            [{ text: '‚ùå –û—Ç–º–µ–Ω–∞', callback_data: `edit_giveaway_${giveawayId}` }]
          ]
        }
      });
    }
  } catch (error) {
    console.error('ADMIN: –û—à–∏–±–∫–∞ –Ω–∞—á–∞–ª–∞ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –ø–æ–ª—è:', error);
    await ctx.reply('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏');
  }
}

/**
 * –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–≤–æ–¥–∞ –Ω–æ–≤–æ–≥–æ –≤—Ä–µ–º–µ–Ω–∏
 */
async function handleTimeEdit(ctx) {
  try {
    const text = ctx.message.text.trim();
    const { giveawayId } = ctx.session.editingGiveawayTime;

    // –ü–∞—Ä—Å–∏–Ω–≥ –¥–∞—Ç—ã –≤ —Ñ–æ—Ä–º–∞—Ç–µ –î–î.–ú–ú.–ì–ì–ì–ì –ß–ß:–ú–ú
    const dateRegex = /^(\d{2})\.(\d{2})\.(\d{4})\s+(\d{1,2}):(\d{2})$/;
    const match = text.match(dateRegex);

    if (!match) {
      await ctx.reply(
        '‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞—Ç—ã!\n\n' +
        '–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ —Ñ–æ—Ä–º–∞—Ç: `–î–î.–ú–ú.–ì–ì–ì–ì –ß–ß:–ú–ú`\n' +
        '–ù–∞–ø—Ä–∏–º–µ—Ä: `15.06.2025 20:00`',
        { parse_mode: 'Markdown' }
      );
      return;
    }

    const [, day, month, year, hour, minute] = match;
    
    // –°–æ–∑–¥–∞–µ–º –¥–∞—Ç—É –≤ –º–æ—Å–∫–æ–≤—Å–∫–æ–º –≤—Ä–µ–º–µ–Ω–∏
    const newDrawDate = new Date();
    newDrawDate.setFullYear(parseInt(year), parseInt(month) - 1, parseInt(day));
    newDrawDate.setHours(parseInt(hour), parseInt(minute), 0, 0);
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ –¥–∞—Ç–∞ –≤ –±—É–¥—É—â–µ–º
    if (newDrawDate <= new Date()) {
      await ctx.reply('‚ùå –î–∞—Ç–∞ —Ä–æ–∑—ã–≥—Ä—ã—à–∞ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –≤ –±—É–¥—É—â–µ–º!');
      return;
    }

    // –û–±–Ω–æ–≤–ª—è–µ–º —Ä–æ–∑—ã–≥—Ä—ã—à
    const updateData = {
      drawDate: newDrawDate.toISOString(),
      // –¢–∞–∫–∂–µ –æ–±–Ω–æ–≤–ª—è–µ–º endDate (–∑–∞ —á–∞—Å –¥–æ —Ä–æ–∑—ã–≥—Ä—ã—à–∞)
      endDate: new Date(newDrawDate.getTime() - 60 * 60 * 1000).toISOString()
    };

    const response = await apiClient.put(`/admin/giveaways/${giveawayId}`, updateData);

    if (response.data.success) {
      delete ctx.session.editingGiveawayTime;
      
      const formattedDate = newDrawDate.toLocaleString('ru-RU', {
        timeZone: 'Europe/Moscow'
      });
      
      await ctx.reply(
        `‚úÖ *–í—Ä–µ–º—è —Ä–æ–∑—ã–≥—Ä—ã—à–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–æ!*\n\n` +
        `‚è∞ –ù–æ–≤–æ–µ –≤—Ä–µ–º—è: ${formattedDate} –ú–°–ö`,
        { 
          parse_mode: 'Markdown',
          reply_markup: {
            inline_keyboard: [
              [{ text: 'üîô –ö —Ä–æ–∑—ã–≥—Ä—ã—à—É', callback_data: `giveaway_details_${giveawayId}` }]
            ]
          }
        }
      );
    } else {
      await ctx.reply(`‚ùå –û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è: ${response.data.message}`);
    }
  } catch (error) {
    console.error('ADMIN: –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –≤—Ä–µ–º–µ–Ω–∏:', error);
    await ctx.reply('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –≤—Ä–µ–º–µ–Ω–∏');
    delete ctx.session.editingGiveawayTime;
  }
}

/**
 * –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–≤–æ–¥–∞ –Ω–æ–≤–æ–≥–æ –∑–Ω–∞—á–µ–Ω–∏—è –ø–æ–ª—è
 */
async function handleFieldEdit(ctx) {
  try {
    const text = ctx.message.text.trim();
    const { giveawayId, field } = ctx.session.editingGiveawayField;

    let newValue;
    let updateData = {};

    switch (field) {
      case 'winnersCount':
        newValue = parseInt(text);
        if (isNaN(newValue) || newValue < 1 || newValue > 10) {
          await ctx.reply('‚ùå –í–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ –æ—Ç 1 –¥–æ 10!');
          return;
        }
        updateData.winnersCount = newValue;
        break;
      
      case 'minDepositAmount':
        newValue = parseFloat(text);
        if (isNaN(newValue) || newValue < 0) {
          await ctx.reply('‚ùå –í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—É—é —Å—É–º–º—É (–Ω–∞–ø—Ä–∏–º–µ—Ä: 5 –∏–ª–∏ 10.5)!');
          return;
        }
        updateData.minDepositAmount = newValue;
        break;
      
      case 'title':
        if (text.length < 3 || text.length > 100) {
          await ctx.reply('‚ùå –ù–∞–∑–≤–∞–Ω–∏–µ –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –æ—Ç 3 –¥–æ 100 —Å–∏–º–≤–æ–ª–æ–≤!');
          return;
        }
        updateData.title = text;
        newValue = text;
        break;
    }

    // –û–±–Ω–æ–≤–ª—è–µ–º —Ä–æ–∑—ã–≥—Ä—ã—à
    const response = await apiClient.put(`/admin/giveaways/${giveawayId}`, updateData);

    if (response.data.success) {
      delete ctx.session.editingGiveawayField;
      
      const fieldNames = {
        winnersCount: '–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–±–µ–¥–∏—Ç–µ–ª–µ–π',
        minDepositAmount: '–ú–∏–Ω–∏–º–∞–ª—å–Ω—ã–π –¥–µ–ø–æ–∑–∏—Ç',
        title: '–ù–∞–∑–≤–∞–Ω–∏–µ'
      };
      
      const valueText = field === 'minDepositAmount' ? `${newValue} USDT` : newValue;
      
      await ctx.reply(
        `‚úÖ *${fieldNames[field]} –æ–±–Ω–æ–≤–ª–µ–Ω–æ!*\n\n` +
        `üìä –ù–æ–≤–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ: ${valueText}`,
        { 
          parse_mode: 'Markdown',
          reply_markup: {
            inline_keyboard: [
              [{ text: 'üîô –ö —Ä–æ–∑—ã–≥—Ä—ã—à—É', callback_data: `giveaway_details_${giveawayId}` }]
            ]
          }
        }
      );
    } else {
      await ctx.reply(`‚ùå –û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è: ${response.data.message}`);
    }
  } catch (error) {
    console.error('ADMIN: –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –ø–æ–ª—è:', error);
    await ctx.reply('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏');
    delete ctx.session.editingGiveawayField;
  }
}

/**
 * –û—Ç–ø—Ä–∞–≤–∫–∞ —Ä—É—á–Ω–æ–≥–æ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è –æ —Ä–æ–∑—ã–≥—Ä—ã—à–µ
 */
async function sendGiveawayReminder(ctx, giveawayId) {
  try {
    // –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ —Ä–æ–∑—ã–≥—Ä—ã—à–∞
    const response = await apiClient.get(`/admin/giveaways`);
    
    if (response.data.success) {
      const giveaway = response.data.data.giveaways.find(g => g._id === giveawayId);
      
      if (!giveaway) {
        await ctx.reply('‚ùå –†–æ–∑—ã–≥—Ä—ã—à –Ω–µ –Ω–∞–π–¥–µ–Ω');
        return;
      }

      if (giveaway.status !== 'active') {
        await ctx.reply('‚ùå –ú–æ–∂–Ω–æ –Ω–∞–ø–æ–º–∏–Ω–∞—Ç—å —Ç–æ–ª—å–∫–æ –æ–± –∞–∫—Ç–∏–≤–Ω—ã—Ö —Ä–æ–∑—ã–≥—Ä—ã—à–∞—Ö');
        return;
      }

      const keyboard = [
        [
          { text: 'ü§ñ –í –±–æ—Ç–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º', callback_data: `remind_bot_${giveawayId}` },
          { text: 'üì¢ –í –∫–∞–Ω–∞–ª–µ', callback_data: `remind_channel_${giveawayId}` }
        ],
        [
          { text: 'üåê –í –±–æ—Ç–µ –ò –∫–∞–Ω–∞–ª–µ', callback_data: `remind_both_${giveawayId}` }
        ],
        [
          { text: 'üîô –ù–∞–∑–∞–¥', callback_data: `giveaway_details_${giveawayId}` }
        ]
      ];

      const drawTime = new Date(giveaway.drawDate).toLocaleString('ru-RU', {
        timeZone: 'Europe/Moscow'
      });

      await ctx.editMessageText(
        `üì¢ *–ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ –æ —Ä–æ–∑—ã–≥—Ä—ã—à–µ*\n\n` +
        `üéÅ ${escapeMarkdown(giveaway.title)}\n` +
        `üèÜ –ü—Ä–∏–∑: ${escapeMarkdown(giveaway.prize?.name || '–ù–µ —É–∫–∞–∑–∞–Ω')}\n` +
        `‚è∞ –†–æ–∑—ã–≥—Ä—ã—à: ${drawTime} –ú–°–ö\n` +
        `üë• –£—á–∞—Å—Ç–Ω–∏–∫–æ–≤: ${giveaway.participationCount}\n\n` +
        `–ö—É–¥–∞ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ?`,
        {
          parse_mode: 'Markdown',
          reply_markup: { inline_keyboard: keyboard }
        }
      );
    }
  } catch (error) {
    console.error('ADMIN: –û—à–∏–±–∫–∞ –ø–æ–∫–∞–∑–∞ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è:', error);
    await ctx.reply('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è');
  }
}

/**
 * –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏—Ö –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π
 */
async function showReminderSettings(ctx) {
  try {
    const keyboard = [
      [
        { text: '‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –∞–≤—Ç–æ-–Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π', callback_data: 'reminder_auto_settings' }
      ],
      [
        { text: 'üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π', callback_data: 'reminder_stats' }
      ],
      [
        { text: 'üîÑ –ü–µ—Ä–µ–∑–∞–ø—É—Å—Ç–∏—Ç—å –∑–∞–¥–∞—á–∏', callback_data: 'reminder_restart_jobs' }
      ],
      [
        { text: 'üîô –ö —Ä–æ–∑—ã–≥—Ä—ã—à–∞–º', callback_data: 'giveaways_menu' }
      ]
    ];

    await ctx.editMessageText(
      `‚öôÔ∏è *–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è–º–∏*\n\n` +
      `üìã –î–æ—Å—Ç—É–ø–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏:\n\n` +
      `ü§ñ **–ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–µ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è:**\n` +
      `‚î£ –ó–∞ 2 —á–∞—Å–∞ –¥–æ –æ–∫–æ–Ω—á–∞–Ω–∏—è\n` +
      `‚î£ –û—Ç–ø—Ä–∞–≤–ª—è—é—Ç—Å—è –≤ –±–æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º\n` +
      `‚îó –ó–∞–ø—É—Å–∫–∞—é—Ç—Å—è –∫–∞–∂–¥—ã–π —á–∞—Å\n\n` +
      `üì¢ **–†—É—á–Ω—ã–µ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è:**\n` +
      `‚î£ –í –ª—é–±–æ–µ –≤—Ä–µ–º—è –ø–æ –∑–∞–ø—Ä–æ—Å—É\n` +
      `‚î£ –í—ã–±–æ—Ä: –±–æ—Ç, –∫–∞–Ω–∞–ª –∏–ª–∏ –æ–±–∞\n` +
      `‚îó –î–æ—Å—Ç—É–ø–Ω—ã –≤ –¥–µ—Ç–∞–ª—è—Ö —Ä–æ–∑—ã–≥—Ä—ã—à–∞`,
      {
        parse_mode: 'Markdown',
        reply_markup: { inline_keyboard: keyboard }
      }
    );
  } catch (error) {
    console.error('ADMIN: –û—à–∏–±–∫–∞ –ø–æ–∫–∞–∑–∞ –Ω–∞—Å—Ç—Ä–æ–µ–∫ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π:', error);
    await ctx.reply('‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –Ω–∞—Å—Ç—Ä–æ–µ–∫');
  }
}

module.exports = {
  showGiveawaysMenu,
  showCurrentGiveaways,
  showGiveawaysStats,
  showPrizesManagement,
  showGiveawayManagement,
  showGiveawayDetails,
  activateGiveaway,
  cancelGiveaway,
  conductGiveaway,
  startPrizeCreation,
  startPrizeCreationFromUrl,
  startPrizeCreationManual,
  handleGiftUrlInput,
  showGiftPreview,
  createPrizeFromGift,
  handlePrizeCreation,
  finalizePrizeCreation,
  startGiveawayCreation,
  handleGiveawayCreation,
  editGiveawayTime,
  editGiveaway,
  viewParticipants,
  startEditField,
  handleTimeEdit,
  handleFieldEdit,
  sendGiveawayReminder,
  showReminderSettings
};