// frontend/src/components/games/coin/CoinGame.js
import React, { useState, useEffect } from 'react';
import CoinFlip from './CoinFlip';
import CoinControls from './CoinControls';
import { gameApi } from '../../../services';
import '../../../styles/CoinGame.css';

const CoinGame = ({ 
  balance, 
  setBalance, 
  gameStats, 
  setGameResult, 
  setError 
}) => {
  const [isInitializing, setIsInitializing] = useState(true);
  const [isFlipping, setIsFlipping] = useState(false);
  const [result, setResult] = useState(null);
  const [lastResults, setLastResults] = useState([]);
  const [loading, setLoading] = useState(false);
  const [gameResultData, setGameResultData] = useState(null); // –°–æ—Ö—Ä–∞–Ω—è–µ–º –¥–∞–Ω–Ω—ã–µ –∏–≥—Ä—ã
  
  useEffect(() => {
    const initializeGame = async () => {
      try {
        console.log('=== –ò–ù–ò–¶–ò–ê–õ–ò–ó–ê–¶–ò–Ø –ò–ì–†–´ –ú–û–ù–ï–¢–ö–ê ===');
        
        // –ó–∞–≥—Ä—É–∂–∞–µ–º —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—É—é –∏—Å—Ç–æ—Ä–∏—é –∏–∑ localStorage
        const savedResults = localStorage.getItem('coinGameResults');
        
        if (savedResults) {
          try {
            const parsedResults = JSON.parse(savedResults);
            setLastResults(parsedResults);
          } catch (e) {
            console.error('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∏—Å—Ç–æ—Ä–∏–∏:', e);
            setLastResults([]);
          }
        }
        
        // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∑–∞–≥—Ä—É–∑–æ—á–Ω—ã–π —ç–∫—Ä–∞–Ω –º–∏–Ω–∏–º—É–º 1.5 —Å–µ–∫—É–Ω–¥—ã
        await new Promise(resolve => setTimeout(resolve, 1500));
        
        setIsInitializing(false);
        console.log('–ò–≥—Ä–∞ –º–æ–Ω–µ—Ç–∫–∞ –≥–æ—Ç–æ–≤–∞');
        
      } catch (err) {
        console.error('–û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –º–æ–Ω–µ—Ç–∫–∏:', err);
        setError('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∏–≥—Ä—ã');
        setIsInitializing(false);
      }
    };
    
    initializeGame();
  }, [setError]);
  
  // –§—É–Ω–∫—Ü–∏—è –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –∏—Å—Ç–æ—Ä–∏–µ–π - –£–ë–†–ê–ù–ê –û–ß–ò–°–¢–ö–ê
  const manageHistory = (newResult) => {
    let updatedResults = [...lastResults, newResult];
    
    // –£–ë–†–ê–ù–û: –õ–æ–≥–∏–∫–∞ –æ—á–∏—Å—Ç–∫–∏ –∏—Å—Ç–æ—Ä–∏–∏ –∫–∞–∂–¥—ã–µ 8 –∏–≥—Ä
    
    // –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ localStorage
    localStorage.setItem('coinGameResults', JSON.stringify(updatedResults));
    
    setLastResults(updatedResults);
  };
  
  // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∏–≥—Ä—ã
  const handleFlip = async (betData) => {
    if (loading || isFlipping) return;
    
    try {
      setLoading(true);
      setIsFlipping(true);
      setGameResult(null);
      setError(null);
      setResult(null);
      setGameResultData(null); // –°–±—Ä–∞—Å—ã–≤–∞–µ–º –ø—Ä–µ–¥—ã–¥—É—â–∏–µ –¥–∞–Ω–Ω—ã–µ
      
      console.log('ü™ô –ú–û–ù–ï–¢–ö–ê: –ù–∞—á–∏–Ω–∞–µ–º –∏–≥—Ä—É', betData);
      
      // –ó–∞–ø—Ä–æ—Å –∫ API
      const response = await gameApi.playCoinFlip(
        betData.betAmount,
        betData.selectedSide
      );
      
      const gameData = response.data.data;
      console.log('ü™ô –ú–û–ù–ï–¢–ö–ê: –†–µ–∑—É–ª—å—Ç–∞—Ç —Å —Å–µ—Ä–≤–µ—Ä–∞:', gameData);
      
      // –°–æ—Ö—Ä–∞–Ω—è–µ–º –¥–∞–Ω–Ω—ã–µ –∏–≥—Ä—ã, –Ω–æ –Ω–µ –ø–æ–∫–∞–∑—ã–≤–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç —Å—Ä–∞–∑—É
      setGameResultData(gameData);
      
      // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç –¥–ª—è –∞–Ω–∏–º–∞—Ü–∏–∏
      setResult(gameData.result);
      
      // –ò–°–ü–†–ê–í–õ–ï–ù–û: –ù–ï –¥–æ–±–∞–≤–ª—è–µ–º –≤ –∏—Å—Ç–æ—Ä–∏—é —Å—Ä–∞–∑—É - –∂–¥–µ–º –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –∞–Ω–∏–º–∞—Ü–∏–∏
      // –£–ø—Ä–∞–≤–ª—è–µ–º –∏—Å—Ç–æ—Ä–∏–µ–π —Ç–æ–ª—å–∫–æ –ø–æ—Å–ª–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –∞–Ω–∏–º–∞—Ü–∏–∏
      
      // –û–±–Ω–æ–≤–ª—è–µ–º –±–∞–ª–∞–Ω—Å
      if (gameData.balanceAfter !== undefined) {
        setBalance(gameData.balanceAfter);
      }
      
      // –ù–ï —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç —Å—Ä–∞–∑—É - –∂–¥–µ–º –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –∞–Ω–∏–º–∞—Ü–∏–∏
      
    } catch (err) {
      console.error('ü™ô –ú–û–ù–ï–¢–ö–ê: –û—à–∏–±–∫–∞ –∏–≥—Ä—ã:', err);
      setError(err.response?.data?.message || '–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∏–≥—Ä–µ');
      setIsFlipping(false);
      setLoading(false);
    }
  };
  
  // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –∞–Ω–∏–º–∞—Ü–∏–∏
  const handleAnimationEnd = () => {
    console.log('ü™ô –ú–û–ù–ï–¢–ö–ê: –ê–Ω–∏–º–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞');
    setIsFlipping(false);
    setLoading(false);
    
    // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç –∏–≥—Ä—ã
    if (gameResultData) {
      console.log('ü™ô –ú–û–ù–ï–¢–ö–ê: –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç:', gameResultData);
      
      // –ò–°–ü–†–ê–í–õ–ï–ù–û: –î–æ–±–∞–≤–ª—è–µ–º –≤ –∏—Å—Ç–æ—Ä–∏—é —Ç–æ–ª—å–∫–æ –ø–æ—Å–ª–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –∞–Ω–∏–º–∞—Ü–∏–∏
      manageHistory(gameResultData.result);
      
      setGameResult({
        win: gameResultData.win,
        amount: Math.abs(gameResultData.profit),
        newBalance: gameResultData.balanceAfter,
        multiplier: gameResultData.multiplier
      });
    }
  };
  
  // –ó–∞–≥—Ä—É–∑–æ—á–Ω—ã–π —ç–∫—Ä–∞–Ω
  if (isInitializing) {
    return (
      <div className="coin-loading-screen">
        <div className="coin-loading-content">
          <div className="greenlight-logo">
            <div className="logo-icon coin-icon">ü™ô</div>
            <div className="logo-text">Greenlight</div>
            <div className="logo-subtitle">Coin Flip</div>
          </div>
          
          <div className="coin-demo-container">
            <div className="coin-demo">
              <div className="coin-demo-side coin-demo-heads">
                <span>‚Çø</span>
              </div>
              <div className="coin-demo-side coin-demo-tails">
                <span>üíé</span>
              </div>
            </div>
          </div>
          
          <div className="vs-container-demo">
            <div className="side-option-demo">
              <div className="side-emoji-demo">‚Çø</div>
              <div className="side-label-demo">–û—Ä—ë–ª</div>
            </div>
            <div className="vs-text-demo">VS</div>
            <div className="side-option-demo">
              <div className="side-emoji-demo">üíé</div>
              <div className="side-label-demo">–†–µ—à–∫–∞</div>
            </div>
          </div>
          
          <div className="loading-spinner">
            <div className="spinner-ring"></div>
            <div className="spinner-ring"></div>
            <div className="spinner-ring"></div>
          </div>
          <div className="loading-text">–ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –º–æ–Ω–µ—Ç—ã...</div>
        </div>
      </div>
    );
  }
  
  return (
    <div className="coin-game">
      {/* –ì–ª–∞–≤–Ω–∞—è –∏–≥—Ä–æ–≤–∞—è –æ–±–ª–∞—Å—Ç—å */}
      <div className="coin-main-area">
        <CoinFlip 
          flipping={isFlipping}
          result={result}
          onAnimationEnd={handleAnimationEnd}
        />
        
        {/* –ò—Å—Ç–æ—Ä–∏—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ - –£–ë–†–ê–ù–û –û–¢–û–ë–†–ê–ñ–ï–ù–ò–ï –°–ß–ï–¢–ß–ò–ö–ê –û–ß–ò–°–¢–ö–ò */}
        <div className="results-section">
          <div className="results-header">
            <h3>–ü–æ—Å–ª–µ–¥–Ω–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã</h3>
          </div>
          
          <div className="results-container">
            {lastResults.length === 0 ? (
              <div className="no-results">
                <span className="no-results-icon">üéØ</span>
                <span className="no-results-text">–ò—Å—Ç–æ—Ä–∏—è –ø—É—Å—Ç–∞</span>
              </div>
            ) : (
              <div className="results-list">
                {lastResults.slice().reverse().map((result, index) => (
                  <div 
                    key={index} 
                    className={`result-item ${result}`}
                    title={result === 'heads' ? '–û—Ä—ë–ª' : '–†–µ—à–∫–∞'}
                  >
                    <span className="result-icon">
                      {result === 'heads' ? '‚Çø' : 'üíé'}
                    </span>
                  </div>
                ))}
              </div>
            )}
          </div>
        </div>
      </div>
      
      {/* –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∏–≥—Ä–æ–π */}
      <CoinControls 
        onFlip={handleFlip}
        isFlipping={loading || isFlipping}
        balance={balance}
        lastResults={lastResults}
      />
    </div>
  );
};

export default CoinGame;
