// debug_balance_discrepancy.js - –ê–Ω–∞–ª–∏–∑ —Ä–∞—Å—Ö–æ–∂–¥–µ–Ω–∏—è –º–µ–∂–¥—É CryptoBot –∏ –±–∞–∑–æ–π –¥–∞–Ω–Ω—ã—Ö
require('dotenv').config();
const mongoose = require('mongoose');

// –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
const connectDB = async () => {
  try {
    await mongoose.connect(process.env.MONGODB_URI);
    console.log('‚úÖ –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ MongoDB —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ');
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ MongoDB:', error);
    process.exit(1);
  }
};

// –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º –º–æ–¥–µ–ª–∏
const { Transaction, Deposit, Withdrawal, CasinoFinance } = require('./src/models');

async function debugBalanceDiscrepancy() {
  try {
    console.log('üîç –ê–ù–ê–õ–ò–ó –†–ê–°–•–û–ñ–î–ï–ù–ò–Ø –ë–ê–õ–ê–ù–°–û–í');
    console.log('CryptoBot –±–∞–ª–∞–Ω—Å: 3.28 USDT');
    console.log('–ê–¥–º–∏–Ω–∫–∞ –ø–æ–∫–∞–∑—ã–≤–∞–µ—Ç: 4.72 USDT');
    console.log('–†–∞—Å—Ö–æ–∂–¥–µ–Ω–∏–µ: 1.44 USDT\n');

    // 1. –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –≤—Å–µ –¥–µ–ø–æ–∑–∏—Ç—ã
    const deposits = await Deposit.find({ status: 'paid' });
    let totalDepositsGross = 0;
    let totalDepositsNet = 0;
    let totalDepositFees = 0;

    console.log('üì• –î–ï–ü–û–ó–ò–¢–´:');
    deposits.forEach(deposit => {
      const amount = deposit.amount || 0;
      const fee = deposit.cryptoBotData?.fee || (amount * 0.03); // 3% –∫–æ–º–∏—Å—Å–∏—è
      const netAmount = deposit.cryptoBotData?.netAmount || (amount - fee);
      
      totalDepositsGross += amount;
      totalDepositsNet += netAmount;
      totalDepositFees += fee;
      
      console.log(`  –î–µ–ø–æ–∑–∏—Ç: ${amount} USDT, –∫–æ–º–∏—Å—Å–∏—è: ${fee.toFixed(2)} USDT, —á–∏—Å—Ç—ã–º–∏: ${netAmount.toFixed(2)} USDT`);
    });

    console.log(`  –ò–¢–û–ì–û –¥–µ–ø–æ–∑–∏—Ç–æ–≤: ${totalDepositsGross.toFixed(2)} USDT (–≤–∞–ª–æ–≤—ã—Ö)`);
    console.log(`  –ò–¢–û–ì–û —á–∏—Å—Ç—ã–º–∏: ${totalDepositsNet.toFixed(2)} USDT`);
    console.log(`  –ò–¢–û–ì–û –∫–æ–º–∏—Å—Å–∏–π: ${totalDepositFees.toFixed(2)} USDT\n`);

    // 2. –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –≤—Å–µ –≤—ã–≤–æ–¥—ã
    const withdrawals = await Withdrawal.find({ 
      status: { $in: ['completed', 'processing', 'pending'] } 
    });
    let totalWithdrawalsGross = 0;
    let totalWithdrawalsNet = 0;
    let totalWithdrawalFees = 0;

    console.log('üì§ –í–´–í–û–î–´:');
    withdrawals.forEach(withdrawal => {
      const amount = withdrawal.amount || 0;
      const fee = withdrawal.cryptoBotData?.fee || (amount * 0.03); // 3% –∫–æ–º–∏—Å—Å–∏—è
      const netAmount = withdrawal.cryptoBotData?.netAmount || (amount - fee);
      
      totalWithdrawalsGross += amount;
      totalWithdrawalsNet += netAmount;
      totalWithdrawalFees += fee;
      
      console.log(`  –í—ã–≤–æ–¥: ${amount} USDT, –∫–æ–º–∏—Å—Å–∏—è: ${fee.toFixed(2)} USDT, –ø–µ—Ä–µ–≤–µ–¥–µ–Ω–æ: ${netAmount.toFixed(2)} USDT, —Å—Ç–∞—Ç—É—Å: ${withdrawal.status}`);
    });

    console.log(`  –ò–¢–û–ì–û –≤—ã–≤–æ–¥–æ–≤: ${totalWithdrawalsGross.toFixed(2)} USDT (–≤–∞–ª–æ–≤—ã—Ö)`);
    console.log(`  –ò–¢–û–ì–û –ø–µ—Ä–µ–≤–µ–¥–µ–Ω–æ: ${totalWithdrawalsNet.toFixed(2)} USDT`);
    console.log(`  –ò–¢–û–ì–û –∫–æ–º–∏—Å—Å–∏–π: ${totalWithdrawalFees.toFixed(2)} USDT\n`);

    // 3. –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º –æ–∂–∏–¥–∞–µ–º—ã–π –±–∞–ª–∞–Ω—Å CryptoBot
    const expectedCryptoBotBalance = totalDepositsGross - totalWithdrawalsNet;
    console.log('üßÆ –†–ê–°–ß–ï–¢ –û–ñ–ò–î–ê–ï–ú–û–ì–û –ë–ê–õ–ê–ù–°–ê CRYPTOBOT:');
    console.log(`  –ü–æ—Å—Ç—É–ø–∏–ª–æ: ${totalDepositsGross.toFixed(2)} USDT`);
    console.log(`  –í—ã–≤–µ–¥–µ–Ω–æ: ${totalWithdrawalsNet.toFixed(2)} USDT`);
    console.log(`  –û–∂–∏–¥–∞–µ–º—ã–π –±–∞–ª–∞–Ω—Å: ${expectedCryptoBotBalance.toFixed(2)} USDT`);
    console.log(`  –§–∞–∫—Ç–∏—á–µ—Å–∫–∏–π –±–∞–ª–∞–Ω—Å: 3.28 USDT`);
    console.log(`  –†–∞—Å—Ö–æ–∂–¥–µ–Ω–∏–µ: ${(expectedCryptoBotBalance - 3.28).toFixed(2)} USDT\n`);

    // 4. –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏ —Å –∫–æ–º–∏—Å—Å–∏—è–º–∏
    const transactionsWithFees = await Transaction.find({
      'payment.fee': { $exists: true, $gt: 0 }
    });

    console.log('üí∞ –¢–†–ê–ù–ó–ê–ö–¶–ò–ò –° –ö–û–ú–ò–°–°–ò–Ø–ú–ò:');
    let totalTrackedFees = 0;
    transactionsWithFees.forEach(tx => {
      const fee = tx.payment.fee || 0;
      totalTrackedFees += fee;
      console.log(`  ${tx.type}: ${tx.amount} USDT, –∫–æ–º–∏—Å—Å–∏—è: ${fee.toFixed(2)} USDT`);
    });
    console.log(`  –ò–¢–û–ì–û –æ—Ç—Å–ª–µ–∂–µ–Ω–Ω—ã—Ö –∫–æ–º–∏—Å—Å–∏–π: ${totalTrackedFees.toFixed(2)} USDT\n`);

    // 5. –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º casino finance
    const finance = await CasinoFinance.findOne();
    if (finance) {
      console.log('üè¶ CASINO FINANCE:');
      console.log(`  totalDeposits: ${finance.totalDeposits?.toFixed(2) || 0} USDT`);
      console.log(`  totalWithdrawals: ${finance.totalWithdrawals?.toFixed(2) || 0} USDT`);
      console.log(`  totalCryptoBotFees: ${finance.totalCryptoBotFees?.toFixed(2) || 0} USDT`);
      console.log(`  operationalBalance: ${finance.operationalBalance?.toFixed(2) || 0} USDT`);
    }

    // 6. –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –∏–≥—Ä –¥–ª—è –ø–æ–∏—Å–∫–∞ "–ø–æ—Ç–µ—Ä—è–Ω–Ω–æ–≥–æ –¥–æ–ª–ª–∞—Ä–∞"
    console.log('\nüéÆ –ü–û–ò–°–ö –ü–†–û–ë–õ–ï–ú –í –ò–ì–†–ê–•:');
    const gameTransactions = await Transaction.find({
      type: { $in: ['bet', 'win'] }
    });

    let totalBets = 0;
    let totalWins = 0;
    gameTransactions.forEach(tx => {
      if (tx.type === 'bet') {
        totalBets += Math.abs(tx.amount);
      } else if (tx.type === 'win') {
        totalWins += tx.amount;
      }
    });

    console.log(`  –í—Å–µ–≥–æ —Å—Ç–∞–≤–æ–∫: ${totalBets.toFixed(2)} USDT`);
    console.log(`  –í—Å–µ–≥–æ –≤—ã–∏–≥—Ä—ã—à–µ–π: ${totalWins.toFixed(2)} USDT`);
    console.log(`  Profit/Loss: ${(totalBets - totalWins).toFixed(2)} USDT`);

  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∞–Ω–∞–ª–∏–∑–µ:', error);
  }
}

async function main() {
  await connectDB();
  await debugBalanceDiscrepancy();
  await mongoose.disconnect();
  console.log('üîå –°–æ–µ–¥–∏–Ω–µ–Ω–∏–µ —Å –ë–î –∑–∞–∫—Ä—ã—Ç–æ');
  process.exit(0);
}

// –ó–∞–ø—É—Å–∫ —Å–∫—Ä–∏–ø—Ç–∞
main().catch(error => {
  console.error('‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞:', error);
  process.exit(1);
});