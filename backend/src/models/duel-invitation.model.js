const { DataTypes } = require('sequelize');
const { sequelize } = require('../config/database');

const DuelInvitation = sequelize.define('DuelInvitation', {
  id: {
    type: DataTypes.INTEGER,
    primaryKey: true,
    autoIncrement: true
  },
  
  // –£–Ω–∏–∫–∞–ª—å–Ω—ã–π –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏—è
  inviteId: {
    type: DataTypes.STRING,
    unique: true,
    allowNull: false,
    comment: '–£–Ω–∏–∫–∞–ª—å–Ω—ã–π ID –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏—è –¥–ª—è inline —Ä–µ–∂–∏–º–∞'
  },
  
  // –£—á–∞—Å—Ç–Ω–∏–∫–∏
  challengerId: {
    type: DataTypes.STRING,
    allowNull: false,
    comment: 'ID –∏–Ω–∏—Ü–∏–∞—Ç–æ—Ä–∞ –¥—É—ç–ª–∏'
  },
  challengerUsername: {
    type: DataTypes.STRING,
    allowNull: false,
    comment: 'Username –∏–Ω–∏—Ü–∏–∞—Ç–æ—Ä–∞'
  },
  targetUsername: {
    type: DataTypes.STRING,
    allowNull: true,
    comment: 'Username —Ü–µ–ª–µ–≤–æ–≥–æ –∏–≥—Ä–æ–∫–∞ (null –¥–ª—è –æ—Ç–∫—Ä—ã—Ç—ã—Ö –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏–π)'
  },
  targetUserId: {
    type: DataTypes.STRING,
    allowNull: true,
    comment: 'ID —Ü–µ–ª–µ–≤–æ–≥–æ –∏–≥—Ä–æ–∫–∞ (–∑–∞–ø–æ–ª–Ω—è–µ—Ç—Å—è –ø—Ä–∏ –ø—Ä–∏–Ω—è—Ç–∏–∏)'
  },
  
  // –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –¥—É—ç–ª–∏
  gameType: {
    type: DataTypes.ENUM('üé≤', 'üéØ', '‚öΩ', 'üèÄ', 'üé≥', 'üé∞'),
    allowNull: false,
    comment: '–¢–∏–ø –∏–≥—Ä—ã —á–µ—Ä–µ–∑ —ç–º–æ–¥–∑–∏'
  },
  format: {
    type: DataTypes.ENUM('bo1', 'bo3', 'bo5', 'bo7'),
    allowNull: false,
    defaultValue: 'bo1',
    comment: '–§–æ—Ä–º–∞—Ç –¥—É—ç–ª–∏'
  },
  amount: {
    type: DataTypes.DECIMAL(10, 2),
    allowNull: false,
    comment: '–°—Ç–∞–≤–∫–∞ –∫–∞–∂–¥–æ–≥–æ –∏–≥—Ä–æ–∫–∞ –≤ USDT'
  },
  
  // –°—Ç–∞—Ç—É—Å –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏—è
  status: {
    type: DataTypes.ENUM('pending', 'accepted', 'declined', 'cancelled', 'expired'),
    allowNull: false,
    defaultValue: 'pending',
    comment: '–°—Ç–∞—Ç—É—Å –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏—è'
  },
  
  // –°–≤—è–∑–∞–Ω–Ω–∞—è –¥—É—ç–ª—å
  duelId: {
    type: DataTypes.INTEGER,
    allowNull: true,
    references: {
      model: 'duels',
      key: 'id'
    },
    comment: 'ID —Å–æ–∑–¥–∞–Ω–Ω–æ–π –¥—É—ç–ª–∏ (–ø–æ—Å–ª–µ –ø—Ä–∏–Ω—è—Ç–∏—è)'
  },
  
  // –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —á–∞—Ç–∞—Ö
  sourceChat: {
    type: DataTypes.JSON,
    allowNull: true,
    comment: '–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ–± –∏—Å—Ö–æ–¥–Ω–æ–º —á–∞—Ç–µ –≥–¥–µ –±—ã–ª–æ —Å–æ–∑–¥–∞–Ω–æ –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏–µ'
  },
  
  // Telegram –¥–∞–Ω–Ω—ã–µ
  inviteMessageId: {
    type: DataTypes.INTEGER,
    allowNull: true,
    comment: 'ID —Å–æ–æ–±—â–µ–Ω–∏—è —Å –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏–µ–º –≤ –ª–∏—á–Ω–æ–º —á–∞—Ç–µ'
  },
  sourceMessageId: {
    type: DataTypes.INTEGER,
    allowNull: true,
    comment: 'ID –∏—Å—Ö–æ–¥–Ω–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è –≤ –≥—Ä—É–ø–ø–µ/–∫–∞–Ω–∞–ª–µ'
  },
  
  // –í—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è
  expiresAt: {
    type: DataTypes.DATE,
    allowNull: false,
    comment: '–í—Ä–µ–º—è –∏—Å—Ç–µ—á–µ–Ω–∏—è –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏—è'
  },
  acceptedAt: {
    type: DataTypes.DATE,
    allowNull: true,
    comment: '–í—Ä–µ–º—è –ø—Ä–∏–Ω—è—Ç–∏—è –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏—è'
  },
  
  // –ú–µ—Ç–∞–¥–∞–Ω–Ω—ã–µ
  metadata: {
    type: DataTypes.JSON,
    allowNull: true,
    comment: '–î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ (source, IP –∏ —Ç.–¥.)'
  }
}, {
  tableName: 'duel_invitations',
  timestamps: true,
  paranoid: true,
  indexes: [
    { fields: ['inviteId'] },
    { fields: ['challengerId'] },
    { fields: ['targetUsername'] },
    { fields: ['targetUserId'] },
    { fields: ['status'] },
    { fields: ['expiresAt'] },
    { fields: ['duelId'] },
    { fields: ['createdAt'] }
  ]
});

// –í–∏—Ä—Ç—É–∞–ª—å–Ω—ã–µ –ø–æ–ª—è –∏ –º–µ—Ç–æ–¥—ã
DuelInvitation.prototype.isExpired = function() {
  return new Date() > this.expiresAt;
};

DuelInvitation.prototype.canAccept = function(userId, username) {
  return this.status === 'pending' && 
         !this.isExpired() && 
         this.challengerId !== userId &&
         (!this.targetUsername || this.targetUsername === username);
};

DuelInvitation.prototype.canCancel = function(userId) {
  return this.status === 'pending' && 
         this.challengerId === userId &&
         !this.isExpired();
};

DuelInvitation.prototype.getGameName = function() {
  const gameNames = {
    'üé≤': '–ö–æ—Å—Ç–∏',
    'üéØ': '–î–∞—Ä—Ç—Å',
    '‚öΩ': '–§—É—Ç–±–æ–ª',
    'üèÄ': '–ë–∞—Å–∫–µ—Ç–±–æ–ª',
    'üé≥': '–ë–æ—É–ª–∏–Ω–≥',
    'üé∞': '–°–ª–æ—Ç—ã'
  };
  return gameNames[this.gameType] || '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∏–≥—Ä–∞';
};

DuelInvitation.prototype.getFormatName = function() {
  const formatNames = {
    'bo1': 'Bo1 (1 —Ä–∞—É–Ω–¥)',
    'bo3': 'Bo3 (–¥–æ 2 –ø–æ–±–µ–¥)',
    'bo5': 'Bo5 (–¥–æ 3 –ø–æ–±–µ–¥)',
    'bo7': 'Bo7 (–¥–æ 4 –ø–æ–±–µ–¥)'
  };
  return formatNames[this.format] || '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç';
};

DuelInvitation.prototype.getInviteText = function() {
  const target = this.targetUsername ? `@${this.targetUsername}` : '–ª—é–±–æ–≥–æ –∏–≥—Ä–æ–∫–∞';
  return `üéÆ **–ü–†–ò–ì–õ–ê–®–ï–ù–ò–ï –ù–ê –î–£–≠–õ–¨** üéÆ\n\n` +
         `${this.gameType} **${this.getGameName()}** ${this.gameType}\n` +
         `üë§ –û—Ç: @${this.challengerUsername}\n` +
         `üéØ –í—ã–∑—ã–≤–∞–µ—Ç: ${target}\n` +
         `üí∞ –°—Ç–∞–≤–∫–∞: ${this.amount} USDT –∫–∞–∂–¥—ã–π\n` +
         `üèÜ –§–æ—Ä–º–∞—Ç: ${this.getFormatName()}\n` +
         `‚è± –î–µ–π—Å—Ç–≤—É–µ—Ç –¥–æ: ${this.expiresAt.toLocaleTimeString('ru')}`;
};

// –•—É–∫–∏ –º–æ–¥–µ–ª–∏
DuelInvitation.addHook('beforeCreate', (invitation) => {
  // –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —É–Ω–∏–∫–∞–ª—å–Ω—ã–π ID –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏—è
  if (!invitation.inviteId) {
    invitation.inviteId = `inv_${Date.now()}_${Math.random().toString(36).substr(2, 9)}`;
  }
  
  // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –≤—Ä–µ–º—è –∏—Å—Ç–µ—á–µ–Ω–∏—è (5 –º–∏–Ω—É—Ç)
  if (!invitation.expiresAt) {
    invitation.expiresAt = new Date(Date.now() + 5 * 60 * 1000);
  }
});

DuelInvitation.addHook('beforeUpdate', (invitation) => {
  // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –≤—Ä–µ–º—è –ø—Ä–∏–Ω—è—Ç–∏—è
  if (invitation.changed('status') && invitation.status === 'accepted' && !invitation.acceptedAt) {
    invitation.acceptedAt = new Date();
  }
});

// –°—Ç–∞—Ç–∏—á–µ—Å–∫–∏–µ –º–µ—Ç–æ–¥—ã
DuelInvitation.cleanupExpired = async function() {
  const expiredInvitations = await this.findAll({
    where: {
      status: 'pending',
      expiresAt: {
        [require('sequelize').Op.lt]: new Date()
      }
    }
  });
  
  for (const invitation of expiredInvitations) {
    await invitation.update({ status: 'expired' });
  }
  
  return expiredInvitations.length;
};

// –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å–≤—è–∑–∏ —Å –¥—Ä—É–≥–∏–º–∏ –º–æ–¥–µ–ª—è–º–∏  
DuelInvitation.associate = function(models) {
  // –ü—Ä–∏–≥–ª–∞—à–µ–Ω–∏–µ –º–æ–∂–µ—Ç –±—ã—Ç—å —Å–≤—è–∑–∞–Ω–æ —Å –¥—É—ç–ª—å—é
  DuelInvitation.belongsTo(models.Duel, {
    foreignKey: 'duelId',
    as: 'duel'
  });
};

module.exports = DuelInvitation;