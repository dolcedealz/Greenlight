// admin/src/commands/security.command.js
const { Markup } = require('telegraf');
const axios = require('axios');

// –ü–æ–ª—É—á–∞–µ–º API URL –∏ —Ç–æ–∫–µ–Ω –∏–∑ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è
const apiUrl = process.env.API_URL || 'https://api.greenlight-casino.eu/api';
const adminToken = process.env.ADMIN_API_TOKEN;

// –°–æ–∑–¥–∞–µ–º axios instance —Å –ø—Ä–µ–¥—É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–Ω—ã–º–∏ –∑–∞–≥–æ–ª–æ–≤–∫–∞–º–∏
const apiClient = axios.create({
  baseURL: apiUrl,
  headers: {
    'Authorization': `Bearer ${adminToken}`,
    'Content-Type': 'application/json'
  },
  timeout: 30000
});

/**
 * –ü–æ–∫–∞–∑–∞—Ç—å –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏
 */
async function showSecurityMenu(ctx) {
  console.log('ADMIN: –ü–æ–∫–∞–∑ –º–µ–Ω—é –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏');
  
  const keyboard = Markup.inlineKeyboard([
    [Markup.button.callback('üìä –°–∏—Å—Ç–µ–º–Ω—ã–µ –∞–ª–µ—Ä—Ç—ã', 'security_alerts')],
    [Markup.button.callback('üìã –ñ—É—Ä–Ω–∞–ª –∞—É–¥–∏—Ç–∞', 'security_audit')],
    [Markup.button.callback('üö® –ü–æ–¥–æ–∑—Ä–∏—Ç–µ–ª—å–Ω–∞—è –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å', 'security_suspicious')],
    [Markup.button.callback('üîí –ó–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ IP', 'security_blocked_ips')],
    [Markup.button.callback('‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏', 'security_settings')],
    [Markup.button.callback('‚óÄÔ∏è –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é', 'main_menu')]
  ]);

  const message = 'üõ°Ô∏è *–ë–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç—å –∏ –∞—É–¥–∏—Ç*\n\n–í—ã–±–µ—Ä–∏—Ç–µ —Ä–∞–∑–¥–µ–ª:';
  
  try {
    if (ctx.callbackQuery) {
      await ctx.editMessageText(message, {
        parse_mode: 'Markdown',
        ...keyboard
      });
    } else {
      await ctx.reply(message, {
        parse_mode: 'Markdown',
        ...keyboard
      });
    }
  } catch (error) {
    console.error('ADMIN: –û—à–∏–±–∫–∞ –ø–æ–∫–∞–∑–∞ –º–µ–Ω—é –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏:', error);
    await ctx.reply(message, {
      parse_mode: 'Markdown',
      ...keyboard
    });
  }
}

/**
 * –ü–æ–∫–∞–∑–∞—Ç—å —Å–∏—Å—Ç–µ–º–Ω—ã–µ –∞–ª–µ—Ä—Ç—ã
 */
async function showSecurityAlerts(ctx) {
  console.log('ADMIN: –ó–∞–ø—Ä–æ—Å —Å–∏—Å—Ç–µ–º–Ω—ã—Ö –∞–ª–µ—Ä—Ç–æ–≤');
  
  try {
    const response = await apiClient.get('/admin/security/alerts');
    
    if (!response.data.success) {
      throw new Error(response.data.message || '–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∞–ª–µ—Ä—Ç–æ–≤');
    }
    
    const alerts = response.data.data.alerts;
    
    if (alerts.length === 0) {
      const message = 'üìä *–°–∏—Å—Ç–µ–º–Ω—ã–µ –∞–ª–µ—Ä—Ç—ã*\n\n‚úÖ –ê–∫—Ç–∏–≤–Ω—ã—Ö –∞–ª–µ—Ä—Ç–æ–≤ –Ω–µ—Ç.';
      const keyboard = Markup.inlineKeyboard([
        [Markup.button.callback('üîÑ –û–±–Ω–æ–≤–∏—Ç—å', 'security_alerts')],
        [Markup.button.callback('‚óÄÔ∏è –ù–∞–∑–∞–¥', 'security_menu')]
      ]);
      
      if (ctx.callbackQuery) {
        await ctx.editMessageText(message, {
          parse_mode: 'Markdown',
          ...keyboard
        });
      } else {
        await ctx.reply(message, {
          parse_mode: 'Markdown',
          ...keyboard
        });
      }
      return;
    }
    
    let message = `üö® *–°–∏—Å—Ç–µ–º–Ω—ã–µ –∞–ª–µ—Ä—Ç—ã* (${alerts.length})\n\n`;
    
    const buttons = [];
    
    alerts.slice(0, 10).forEach((alert, index) => {
      const priorityEmoji = {
        'critical': 'üî¥',
        'high': 'üü†',
        'medium': 'üü°',
        'low': 'üü¢'
      }[alert.priority] || '‚ö™';
      
      const typeEmoji = {
        'security_breach': 'üö®',
        'suspicious_activity': '‚ö†Ô∏è',
        'financial_anomaly': 'üí∞',
        'system_error': '‚öôÔ∏è',
        'user_violation': 'üë§'
      }[alert.type] || 'üì¢';
      
      message += `${index + 1}. ${priorityEmoji} ${typeEmoji} *${alert.title}*\n`;
      message += `   üìù ${alert.description}\n`;
      message += `   üìÖ ${new Date(alert.createdAt).toLocaleString('ru-RU')}\n`;
      
      if (alert.affectedUser) {
        message += `   üë§ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: ${alert.affectedUser.firstName} (${alert.affectedUser.telegramId})\n`;
      }
      
      if (alert.metadata && alert.metadata.amount) {
        message += `   üí∞ –°—É–º–º–∞: ${alert.metadata.amount} USDT\n`;
      }
      
      message += '\n';
      
      // –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –¥–µ—Ç–∞–ª–µ–π
      buttons.push([Markup.button.callback(
        `üîç ${alert.title.substring(0, 25)}...`, 
        `alert_details_${alert._id}`
      )]);
    });
    
    if (alerts.length > 10) {
      message += `\n... –∏ –µ—â–µ ${alerts.length - 10} –∞–ª–µ—Ä—Ç–æ–≤`;
    }
    
    // –î–æ–±–∞–≤–ª—è–µ–º –æ–±—â–∏–µ –∫–Ω–æ–ø–∫–∏
    buttons.push([
      Markup.button.callback('‚úÖ –ó–∞–∫—Ä—ã—Ç—å –≤—Å–µ', 'alerts_close_all'),
      Markup.button.callback('üîÑ –û–±–Ω–æ–≤–∏—Ç—å', 'security_alerts')
    ]);
    
    buttons.push([Markup.button.callback('‚óÄÔ∏è –ù–∞–∑–∞–¥', 'security_menu')]);
    
    const keyboard = Markup.inlineKeyboard(buttons);
    
    if (ctx.callbackQuery) {
      await ctx.editMessageText(message, {
        parse_mode: 'Markdown',
        ...keyboard
      });
    } else {
      await ctx.reply(message, {
        parse_mode: 'Markdown',
        ...keyboard
      });
    }
    
  } catch (error) {
    console.error('ADMIN: –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∞–ª–µ—Ä—Ç–æ–≤:', error);
    const errorMessage = `‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∞–ª–µ—Ä—Ç–æ–≤: ${error.message}`;
    
    if (ctx.callbackQuery) {
      await ctx.answerCbQuery(errorMessage);
    } else {
      await ctx.reply(errorMessage);
    }
  }
}

/**
 * –ü–æ–∫–∞–∑–∞—Ç—å –∂—É—Ä–Ω–∞–ª –∞—É–¥–∏—Ç–∞
 */
async function showAuditLog(ctx, page = 1) {
  console.log('ADMIN: –ó–∞–ø—Ä–æ—Å –∂—É—Ä–Ω–∞–ª–∞ –∞—É–¥–∏—Ç–∞, —Å—Ç—Ä–∞–Ω–∏—Ü–∞:', page);
  
  try {
    const response = await apiClient.get('/admin/security/audit', {
      params: { 
        page: page,
        limit: 15
      }
    });
    
    if (!response.data.success) {
      throw new Error(response.data.message || '–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∂—É—Ä–Ω–∞–ª–∞');
    }
    
    const data = response.data.data;
    const logs = data.logs;
    const pagination = data.pagination;
    
    if (logs.length === 0) {
      const message = 'üìã *–ñ—É—Ä–Ω–∞–ª –∞—É–¥–∏—Ç–∞*\n\n–ó–∞–ø–∏—Å–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã.';
      const keyboard = Markup.inlineKeyboard([[
        Markup.button.callback('‚óÄÔ∏è –ù–∞–∑–∞–¥', 'security_menu')
      ]]);
      
      if (ctx.callbackQuery) {
        await ctx.editMessageText(message, {
          parse_mode: 'Markdown',
          ...keyboard
        });
      } else {
        await ctx.reply(message, {
          parse_mode: 'Markdown',
          ...keyboard
        });
      }
      return;
    }
    
    let message = `üìã *–ñ—É—Ä–Ω–∞–ª –∞—É–¥–∏—Ç–∞* (—Å—Ç—Ä. ${pagination.current}/${pagination.pages})\n\n`;
    
    logs.forEach((log, index) => {
      const actionEmoji = {
        'user_login': 'üîë',
        'user_block': 'üö´',
        'balance_adjust': 'üí∞',
        'withdrawal_approve': '‚úÖ',
        'withdrawal_reject': '‚ùå',
        'promo_create': 'üéÅ',
        'settings_change': '‚öôÔ∏è',
        'admin_action': 'üëë'
      }[log.action] || 'üìù';
      
      message += `${(pagination.current - 1) * 15 + index + 1}. ${actionEmoji} *${getActionDisplayName(log.action)}*\n`;
      message += `   üë§ –ê–¥–º–∏–Ω: ${log.admin.firstName} (${log.admin.telegramId})\n`;
      
      if (log.targetUser) {
        message += `   üéØ –¶–µ–ª—å: ${log.targetUser.firstName} (${log.targetUser.telegramId})\n`;
      }
      
      if (log.details) {
        message += `   üìù –î–µ—Ç–∞–ª–∏: ${log.details}\n`;
      }
      
      if (log.metadata) {
        if (log.metadata.amount) {
          message += `   üí∞ –°—É–º–º–∞: ${log.metadata.amount} USDT\n`;
        }
        if (log.metadata.reason) {
          message += `   üìã –ü—Ä–∏—á–∏–Ω–∞: ${log.metadata.reason}\n`;
        }
      }
      
      message += `   üìÖ ${new Date(log.createdAt).toLocaleString('ru-RU')}\n`;
      message += `   üåê IP: ${log.ipAddress || '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ'}\n\n`;
    });
    
    // –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –Ω–∞–≤–∏–≥–∞—Ü–∏–µ–π
    const buttons = [];
    
    // –ö–Ω–æ–ø–∫–∏ –Ω–∞–≤–∏–≥–∞—Ü–∏–∏
    if (pagination.current > 1 || pagination.current < pagination.pages) {
      const navButtons = [];
      if (pagination.current > 1) {
        navButtons.push(Markup.button.callback('‚¨ÖÔ∏è –ü—Ä–µ–¥.', `audit_log_${pagination.current - 1}`));
      }
      if (pagination.current < pagination.pages) {
        navButtons.push(Markup.button.callback('–°–ª–µ–¥. ‚û°Ô∏è', `audit_log_${pagination.current + 1}`));
      }
      buttons.push(navButtons);
    }
    
    // –§–∏–ª—å—Ç—Ä—ã
    buttons.push([
      Markup.button.callback('üîë –¢–æ–ª—å–∫–æ –ª–æ–≥–∏–Ω—ã', 'audit_filter_login'),
      Markup.button.callback('üí∞ –¢–æ–ª—å–∫–æ —Ñ–∏–Ω–∞–Ω—Å—ã', 'audit_filter_finance')
    ]);
    
    buttons.push([
      Markup.button.callback('üîÑ –û–±–Ω–æ–≤–∏—Ç—å', 'security_audit'),
      Markup.button.callback('‚óÄÔ∏è –ù–∞–∑–∞–¥', 'security_menu')
    ]);
    
    const keyboard = Markup.inlineKeyboard(buttons);
    
    if (ctx.callbackQuery) {
      await ctx.editMessageText(message, {
        parse_mode: 'Markdown',
        ...keyboard
      });
    } else {
      await ctx.reply(message, {
        parse_mode: 'Markdown',
        ...keyboard
      });
    }
    
  } catch (error) {
    console.error('ADMIN: –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∂—É—Ä–Ω–∞–ª–∞ –∞—É–¥–∏—Ç–∞:', error);
    const errorMessage = `‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∂—É—Ä–Ω–∞–ª–∞: ${error.message}`;
    
    if (ctx.callbackQuery) {
      await ctx.answerCbQuery(errorMessage);
    } else {
      await ctx.reply(errorMessage);
    }
  }
}

/**
 * –ü–æ–∫–∞–∑–∞—Ç—å –ø–æ–¥–æ–∑—Ä–∏—Ç–µ–ª—å–Ω—É—é –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å
 */
async function showSuspiciousActivity(ctx) {
  console.log('ADMIN: –ó–∞–ø—Ä–æ—Å –ø–æ–¥–æ–∑—Ä–∏—Ç–µ–ª—å–Ω–æ–π –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏');
  
  try {
    const response = await apiClient.get('/admin/security/suspicious');
    
    if (!response.data.success) {
      throw new Error(response.data.message || '–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö');
    }
    
    const data = response.data.data;
    const activities = data.activities;
    
    if (activities.length === 0) {
      const message = 'üö® *–ü–æ–¥–æ–∑—Ä–∏—Ç–µ–ª—å–Ω–∞—è –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å*\n\n‚úÖ –ü–æ–¥–æ–∑—Ä–∏—Ç–µ–ª—å–Ω–æ–π –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ –Ω–µ –æ–±–Ω–∞—Ä—É–∂–µ–Ω–æ.';
      const keyboard = Markup.inlineKeyboard([
        [Markup.button.callback('üîÑ –û–±–Ω–æ–≤–∏—Ç—å', 'security_suspicious')],
        [Markup.button.callback('‚óÄÔ∏è –ù–∞–∑–∞–¥', 'security_menu')]
      ]);
      
      if (ctx.callbackQuery) {
        await ctx.editMessageText(message, {
          parse_mode: 'Markdown',
          ...keyboard
        });
      } else {
        await ctx.reply(message, {
          parse_mode: 'Markdown',
          ...keyboard
        });
      }
      return;
    }
    
    let message = `üö® *–ü–æ–¥–æ–∑—Ä–∏—Ç–µ–ª—å–Ω–∞—è –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å* (${activities.length})\n\n`;
    
    const buttons = [];
    
    activities.slice(0, 8).forEach((activity, index) => {
      const typeEmoji = {
        'multiple_accounts': 'üë•',
        'unusual_winrate': 'üéØ',
        'large_withdrawals': 'üí∏',
        'ip_change': 'üåê',
        'betting_pattern': 'üìä',
        'bot_activity': 'ü§ñ'
      }[activity.type] || '‚ö†Ô∏è';
      
      const riskLevel = activity.riskScore >= 80 ? 'üî¥ –í—ã—Å–æ–∫–∏–π' : 
                       activity.riskScore >= 50 ? 'üü† –°—Ä–µ–¥–Ω–∏–π' : 'üü° –ù–∏–∑–∫–∏–π';
      
      message += `${index + 1}. ${typeEmoji} *${getSuspiciousTypeDisplayName(activity.type)}*\n`;
      message += `   üë§ ${activity.user.firstName} ${activity.user.lastName || ''}\n`;
      message += `   üì± ID: \`${activity.user.telegramId}\`\n`;
      message += `   üéØ –†–∏—Å–∫: ${riskLevel} (${activity.riskScore}%)\n`;
      message += `   üìù ${activity.description}\n`;
      message += `   üìÖ ${new Date(activity.detectedAt).toLocaleString('ru-RU')}\n\n`;
      
      // –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫–∏ –¥–µ–π—Å—Ç–≤–∏–π
      buttons.push([
        Markup.button.callback(`üîç –ü—Ä–æ–≤–µ—Ä–∏—Ç—å ${activity.user.firstName}`, `investigate_user_${activity.user._id}`),
        Markup.button.callback(`üö´ –ó–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞—Ç—å`, `block_suspicious_${activity.user._id}`)
      ]);
    });
    
    if (activities.length > 8) {
      message += `\n... –∏ –µ—â–µ ${activities.length - 8} —Å–ª—É—á–∞–µ–≤`;
    }
    
    // –î–æ–±–∞–≤–ª—è–µ–º –æ–±—â–∏–µ –∫–Ω–æ–ø–∫–∏
    buttons.push([
      Markup.button.callback('üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞', 'suspicious_stats'),
      Markup.button.callback('üîÑ –û–±–Ω–æ–≤–∏—Ç—å', 'security_suspicious')
    ]);
    
    buttons.push([Markup.button.callback('‚óÄÔ∏è –ù–∞–∑–∞–¥', 'security_menu')]);
    
    const keyboard = Markup.inlineKeyboard(buttons);
    
    if (ctx.callbackQuery) {
      await ctx.editMessageText(message, {
        parse_mode: 'Markdown',
        ...keyboard
      });
    } else {
      await ctx.reply(message, {
        parse_mode: 'Markdown',
        ...keyboard
      });
    }
    
  } catch (error) {
    console.error('ADMIN: –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –ø–æ–¥–æ–∑—Ä–∏—Ç–µ–ª—å–Ω–æ–π –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏:', error);
    const errorMessage = `‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö: ${error.message}`;
    
    if (ctx.callbackQuery) {
      await ctx.answerCbQuery(errorMessage);
    } else {
      await ctx.reply(errorMessage);
    }
  }
}

/**
 * –ü–æ–∫–∞–∑–∞—Ç—å –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ IP
 */
async function showBlockedIPs(ctx) {
  console.log('ADMIN: –ó–∞–ø—Ä–æ—Å –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö IP');
  
  try {
    const response = await apiClient.get('/admin/security/blocked-ips');
    
    if (!response.data.success) {
      throw new Error(response.data.message || '–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è IP');
    }
    
    const blockedIPs = response.data.data.blockedIPs;
    
    if (blockedIPs.length === 0) {
      const message = 'üîí *–ó–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ IP*\n\n–ó–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö IP –∞–¥—Ä–µ—Å–æ–≤ –Ω–µ—Ç.';
      const keyboard = Markup.inlineKeyboard([
        [Markup.button.callback('‚ûï –î–æ–±–∞–≤–∏—Ç—å IP', 'add_blocked_ip')],
        [Markup.button.callback('‚óÄÔ∏è –ù–∞–∑–∞–¥', 'security_menu')]
      ]);
      
      if (ctx.callbackQuery) {
        await ctx.editMessageText(message, {
          parse_mode: 'Markdown',
          ...keyboard
        });
      } else {
        await ctx.reply(message, {
          parse_mode: 'Markdown',
          ...keyboard
        });
      }
      return;
    }
    
    let message = `üîí *–ó–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ IP* (${blockedIPs.length})\n\n`;
    
    const buttons = [];
    
    blockedIPs.slice(0, 15).forEach((ip, index) => {
      message += `${index + 1}. üåê \`${ip.address}\`\n`;
      message += `   üìù –ü—Ä–∏—á–∏–Ω–∞: ${ip.reason}\n`;
      message += `   üìÖ –ó–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω: ${new Date(ip.blockedAt).toLocaleString('ru-RU')}\n`;
      
      if (ip.expiresAt) {
        message += `   ‚è∞ –ò—Å—Ç–µ–∫–∞–µ—Ç: ${new Date(ip.expiresAt).toLocaleString('ru-RU')}\n`;
      } else {
        message += `   ‚è∞ –ü–æ—Å—Ç–æ—è–Ω–Ω–∞—è –±–ª–æ–∫–∏—Ä–æ–≤–∫–∞\n`;
      }
      
      message += '\n';
      
      // –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É –¥–ª—è —Ä–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∫–∏
      buttons.push([Markup.button.callback(
        `üîì –†–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∞—Ç—å ${ip.address}`, 
        `unblock_ip_${ip._id}`
      )]);
    });
    
    if (blockedIPs.length > 15) {
      message += `\n... –∏ –µ—â–µ ${blockedIPs.length - 15} IP –∞–¥—Ä–µ—Å–æ–≤`;
    }
    
    // –î–æ–±–∞–≤–ª—è–µ–º –æ–±—â–∏–µ –∫–Ω–æ–ø–∫–∏
    buttons.push([
      Markup.button.callback('‚ûï –î–æ–±–∞–≤–∏—Ç—å IP', 'add_blocked_ip'),
      Markup.button.callback('üîÑ –û–±–Ω–æ–≤–∏—Ç—å', 'security_blocked_ips')
    ]);
    
    buttons.push([Markup.button.callback('‚óÄÔ∏è –ù–∞–∑–∞–¥', 'security_menu')]);
    
    const keyboard = Markup.inlineKeyboard(buttons);
    
    if (ctx.callbackQuery) {
      await ctx.editMessageText(message, {
        parse_mode: 'Markdown',
        ...keyboard
      });
    } else {
      await ctx.reply(message, {
        parse_mode: 'Markdown',
        ...keyboard
      });
    }
    
  } catch (error) {
    console.error('ADMIN: –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö IP:', error);
    const errorMessage = `‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è IP: ${error.message}`;
    
    if (ctx.callbackQuery) {
      await ctx.answerCbQuery(errorMessage);
    } else {
      await ctx.reply(errorMessage);
    }
  }
}

/**
 * –ü–æ–∫–∞–∑–∞—Ç—å –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏
 */
async function showSecuritySettings(ctx) {
  console.log('ADMIN: –ó–∞–ø—Ä–æ—Å –Ω–∞—Å—Ç—Ä–æ–µ–∫ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏');
  
  try {
    const response = await apiClient.get('/admin/security/settings');
    
    if (!response.data.success) {
      throw new Error(response.data.message || '–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –Ω–∞—Å—Ç—Ä–æ–µ–∫');
    }
    
    const settings = response.data.data.settings;
    
    let message = '‚öôÔ∏è *–ù–∞—Å—Ç—Ä–æ–π–∫–∏ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏*\n\n';
    
    message += `**–ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏:**\n`;
    message += `üîç –û—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏–µ IP: ${settings.trackIpChanges ? '‚úÖ –í–∫–ª—é—á–µ–Ω–æ' : '‚ùå –í—ã–∫–ª—é—á–µ–Ω–æ'}\n`;
    message += `üéØ –ê–Ω–∞–ª–∏–∑ —Å—Ç–∞–≤–æ–∫: ${settings.analyzeBettingPatterns ? '‚úÖ –í–∫–ª—é—á–µ–Ω–æ' : '‚ùå –í—ã–∫–ª—é—á–µ–Ω–æ'}\n`;
    message += `üí∞ –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –≤—ã–≤–æ–¥–æ–≤: ${settings.monitorWithdrawals ? '‚úÖ –í–∫–ª—é—á–µ–Ω–æ' : '‚ùå –í—ã–∫–ª—é—á–µ–Ω–æ'}\n\n`;
    
    message += `**–õ–∏–º–∏—Ç—ã –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏:**\n`;
    message += `üí∏ –õ–∏–º–∏—Ç –≤—ã–≤–æ–¥–∞: ${settings.withdrawalLimit} USDT\n`;
    message += `‚è∞ –ü–µ—Ä–∏–æ–¥ –∞–Ω–∞–ª–∏–∑–∞: ${settings.analysisWindow} —á–∞—Å–æ–≤\n`;
    message += `üéØ –ü–æ—Ä–æ–≥ —Ä–∏—Å–∫–∞: ${settings.riskThreshold}%\n\n`;
    
    message += `**–ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–µ –¥–µ–π—Å—Ç–≤–∏—è:**\n`;
    message += `üö´ –ê–≤—Ç–æ–±–ª–æ–∫–∏—Ä–æ–≤–∫–∞: ${settings.autoBlock ? '‚úÖ –í–∫–ª—é—á–µ–Ω–∞' : '‚ùå –í—ã–∫–ª—é—á–µ–Ω–∞'}\n`;
    message += `üìß –£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è: ${settings.notifications ? '‚úÖ –í–∫–ª—é—á–µ–Ω—ã' : '‚ùå –í—ã–∫–ª—é—á–µ–Ω—ã'}\n`;
    message += `üîí –î–≤–æ–π–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞: ${settings.doubleCheck ? '‚úÖ –í–∫–ª—é—á–µ–Ω–∞' : '‚ùå –í—ã–∫–ª—é—á–µ–Ω–∞'}`;
    
    const keyboard = Markup.inlineKeyboard([
      [
        Markup.button.callback('üîß –ò–∑–º–µ–Ω–∏—Ç—å –ª–∏–º–∏—Ç—ã', 'security_edit_limits'),
        Markup.button.callback('üîî –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –∞–ª–µ—Ä—Ç–æ–≤', 'security_edit_alerts')
      ],
      [
        Markup.button.callback('üîÑ –°–±—Ä–æ—Å–∏—Ç—å –Ω–∞—Å—Ç—Ä–æ–π–∫–∏', 'security_reset'),
        Markup.button.callback('üíæ –≠–∫—Å–ø–æ—Ä—Ç –Ω–∞—Å—Ç—Ä–æ–µ–∫', 'security_export')
      ],
      [
        Markup.button.callback('üîÑ –û–±–Ω–æ–≤–∏—Ç—å', 'security_settings'),
        Markup.button.callback('‚óÄÔ∏è –ù–∞–∑–∞–¥', 'security_menu')
      ]
    ]);
    
    if (ctx.callbackQuery) {
      await ctx.editMessageText(message, {
        parse_mode: 'Markdown',
        ...keyboard
      });
    } else {
      await ctx.reply(message, {
        parse_mode: 'Markdown',
        ...keyboard
      });
    }
    
  } catch (error) {
    console.error('ADMIN: –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –Ω–∞—Å—Ç—Ä–æ–µ–∫ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏:', error);
    const errorMessage = `‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –Ω–∞—Å—Ç—Ä–æ–µ–∫: ${error.message}`;
    
    if (ctx.callbackQuery) {
      await ctx.answerCbQuery(errorMessage);
    } else {
      await ctx.reply(errorMessage);
    }
  }
}

// –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏
function getActionDisplayName(action) {
  const names = {
    'user_login': '–í—Ö–æ–¥ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è',
    'user_block': '–ë–ª–æ–∫–∏—Ä–æ–≤–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è',
    'balance_adjust': '–ö–æ—Ä—Ä–µ–∫—Ç–∏—Ä–æ–≤–∫–∞ –±–∞–ª–∞–Ω—Å–∞',
    'withdrawal_approve': '–û–¥–æ–±—Ä–µ–Ω–∏–µ –≤—ã–≤–æ–¥–∞',
    'withdrawal_reject': '–û—Ç–∫–ª–æ–Ω–µ–Ω–∏–µ –≤—ã–≤–æ–¥–∞',
    'promo_create': '–°–æ–∑–¥–∞–Ω–∏–µ –ø—Ä–æ–º–æ–∫–æ–¥–∞',
    'settings_change': '–ò–∑–º–µ–Ω–µ–Ω–∏–µ –Ω–∞—Å—Ç—Ä–æ–µ–∫',
    'admin_action': '–î–µ–π—Å—Ç–≤–∏–µ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞'
  };
  return names[action] || action;
}

function getSuspiciousTypeDisplayName(type) {
  const names = {
    'multiple_accounts': '–ú–Ω–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω—ã–µ –∞–∫–∫–∞—É–Ω—Ç—ã',
    'unusual_winrate': '–ù–µ–æ–±—ã—á–Ω—ã–π –≤–∏–Ω—Ä–µ–π—Ç',
    'large_withdrawals': '–ö—Ä—É–ø–Ω—ã–µ –≤—ã–≤–æ–¥—ã',
    'ip_change': '–°–º–µ–Ω–∞ IP',
    'betting_pattern': '–ü–æ–¥–æ–∑—Ä–∏—Ç–µ–ª—å–Ω—ã–µ —Å—Ç–∞–≤–∫–∏',
    'bot_activity': '–ê–∫—Ç–∏–≤–Ω–æ—Å—Ç—å –±–æ—Ç–∞'
  };
  return names[type] || type;
}

module.exports = {
  showSecurityMenu,
  showSecurityAlerts,
  showAuditLog,
  showSuspiciousActivity,
  showBlockedIPs,
  showSecuritySettings
};