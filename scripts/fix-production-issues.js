#!/usr/bin/env node

/**
 * –°–∫—Ä–∏–ø—Ç –¥–ª—è –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è –ø—Ä–æ–±–ª–µ–º —Å –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç—å—é –ø–µ—Ä–µ–¥ –ø—Ä–æ–¥–∞–∫—à–µ–Ω–æ–º
 * –ó–∞–ø—É—Å—Ç–∏—Ç–µ: node scripts/fix-production-issues.js
 */

const fs = require('fs');
const path = require('path');

const issues = [
  {
    file: 'backend/src/services/auth.service.js',
    pattern: /process\.env\.JWT_SECRET \|\| 'default-secret-key'/g,
    replacement: 'process.env.JWT_SECRET',
    description: '–£–¥–∞–ª–µ–Ω–∏–µ fallback –¥–ª—è JWT_SECRET'
  },
  {
    file: 'backend/src/utils/telegram-auth.js',
    pattern: /process\.env\.JWT_SECRET \|\| 'fallback-secret-key'/g,
    replacement: 'process.env.JWT_SECRET',
    description: '–£–¥–∞–ª–µ–Ω–∏–µ fallback –¥–ª—è JWT_SECRET'
  },
  {
    file: 'frontend/src/services/websocket.service.js',
    pattern: /process\.env\.NODE_ENV === 'production'\s*\?\s*'https:\/\/greenlight-api-ghqh\.onrender\.com'\s*:\s*\(process\.env\.REACT_APP_WS_URL \|\| 'https:\/\/greenlight-api-ghqh\.onrender\.com'\)/g,
    replacement: "process.env.REACT_APP_WS_URL || 'https://greenlight-api-ghqh.onrender.com'",
    description: '–£–ø—Ä–æ—â–µ–Ω–∏–µ URL –¥–ª—è WebSocket'
  },
  {
    file: 'frontend/src/services/api.js',
    pattern: /const API_BASE_URL = process\.env\.NODE_ENV === 'production'\s*\?\s*'https:\/\/greenlight-api-ghqh\.onrender\.com\/api'\s*:\s*\(process\.env\.REACT_APP_API_URL \|\| 'http:\/\/localhost:3001\/api'\);/g,
    replacement: "const API_BASE_URL = process.env.REACT_APP_API_URL || 'http://localhost:3001/api';",
    description: '–£–ø—Ä–æ—â–µ–Ω–∏–µ API URL'
  }
];

console.log('üîß –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø—Ä–æ–±–ª–µ–º —Å –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç—å—é –¥–ª—è –ø—Ä–æ–¥–∞–∫—à–µ–Ω–∞...\n');

let fixedCount = 0;
let errorCount = 0;

issues.forEach(issue => {
  const filePath = path.join(__dirname, '..', issue.file);
  
  try {
    if (!fs.existsSync(filePath)) {
      console.log(`‚ùå –§–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω: ${issue.file}`);
      errorCount++;
      return;
    }
    
    let content = fs.readFileSync(filePath, 'utf8');
    const originalContent = content;
    
    content = content.replace(issue.pattern, issue.replacement);
    
    if (content !== originalContent) {
      fs.writeFileSync(filePath, content, 'utf8');
      console.log(`‚úÖ –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–æ: ${issue.file}`);
      console.log(`   ${issue.description}`);
      fixedCount++;
    } else {
      console.log(`‚ÑπÔ∏è  –£–∂–µ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–æ: ${issue.file}`);
    }
  } catch (error) {
    console.error(`‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ ${issue.file}:`, error.message);
    errorCount++;
  }
});

console.log('\nüìä –†–µ–∑—É–ª—å—Ç–∞—Ç—ã:');
console.log(`   –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–æ —Ñ–∞–π–ª–æ–≤: ${fixedCount}`);
console.log(`   –û—à–∏–±–æ–∫: ${errorCount}`);

// –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –ø—Ä–æ–≤–µ—Ä–∫–∏
console.log('\nüîç –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏:');
console.log('1. –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ –≤—Å–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã –≤ Render.com');
console.log('2. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ CORS –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –≤ backend/src/app.js');
console.log('3. –£–¥–∞–ª–∏—Ç–µ –≤—Å–µ console.log –∏–∑ production –∫–æ–¥–∞');
console.log('4. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ rate limiting –Ω–∞—Å—Ç—Ä–æ–π–∫–∏');
console.log('5. –ù–∞—Å—Ç—Ä–æ–π—Ç–µ –ø—Ä–∞–≤–∏–ª—å–Ω—ã–µ –ª–æ–≥–∏ –¥–ª—è production');

console.log('\n‚ú® –ì–æ—Ç–æ–≤–æ! –ù–µ –∑–∞–±—É–¥—å—Ç–µ –ø—Ä–æ–≤–µ—Ä–∏—Ç—å –∏–∑–º–µ–Ω–µ–Ω–∏—è –ø–µ—Ä–µ–¥ –∫–æ–º–º–∏—Ç–æ–º.');