// bot/src/handlers/inline.handler.js
const config = require('../config');
const { Markup } = require('telegraf');

function registerInlineHandlers(bot) {
  bot.on('inline_query', async (ctx) => {
    try {
      const query = ctx.inlineQuery.query.toLowerCase().trim();
      const results = [];
      
      // –ü—Ä–æ—Å—Ç–æ–π —Ç–µ—Å—Ç - –ª—é–±–æ–π –∑–∞–ø—Ä–æ—Å
      results.push({
        type: 'article',
        id: 'test_casino_' + Date.now(),
        title: 'üé∞ –û—Ç–∫—Ä—ã—Ç—å –∫–∞–∑–∏–Ω–æ',
        description: '–ù–∞–∂–º–∏—Ç–µ —á—Ç–æ–±—ã –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –∫–Ω–æ–ø–∫—É –∫–∞–∑–∏–Ω–æ',
        thumb_url: 'https://cdn-icons-png.flaticon.com/512/3163/3163238.png',
        input_message_content: {
          message_text: 'üé∞ **Greenlight Casino** üé∞\n\nüéÆ –ò–≥—Ä–∞–π—Ç–µ –∏ –≤—ã–∏–≥—Ä—ã–≤–∞–π—Ç–µ!',
          parse_mode: 'Markdown'
        },
        reply_markup: {
          inline_keyboard: [[
            {
              text: 'üéÆ –û—Ç–∫—Ä—ã—Ç—å –∫–∞–∑–∏–Ω–æ',
              web_app: { url: config.webAppUrl }
            }
          ]]
        }
      });
      
      // –¢–µ—Å—Ç —Å –æ–±—ã—á–Ω–æ–π callback –∫–Ω–æ–ø–∫–æ–π
      results.push({
        type: 'article',
        id: 'test_callback_' + Date.now(),
        title: 'üîò –¢–µ—Å—Ç callback –∫–Ω–æ–ø–∫–∏',
        description: '–ü—Ä–æ–≤–µ—Ä–∫–∞ —Ä–∞–±–æ—Ç—ã callback',
        input_message_content: {
          message_text: 'üß™ –¢–µ—Å—Ç callback –∫–Ω–æ–ø–∫–∏'
        },
        reply_markup: {
          inline_keyboard: [[
            {
              text: 'üëã –ù–∞–∂–º–∏ –º–µ–Ω—è',
              callback_data: 'test_button'
            }
          ]]
        }
      });
      
      // –¢–µ—Å—Ç —Å URL –∫–Ω–æ–ø–∫–æ–π
      results.push({
        type: 'article',
        id: 'test_url_' + Date.now(),
        title: 'üîó –¢–µ—Å—Ç URL –∫–Ω–æ–ø–∫–∏',
        description: '–ü—Ä–æ–≤–µ—Ä–∫–∞ —Ä–∞–±–æ—Ç—ã URL',
        input_message_content: {
          message_text: 'üîó –¢–µ—Å—Ç URL –∫–Ω–æ–ø–∫–∏'
        },
        reply_markup: {
          inline_keyboard: [[
            {
              text: 'üåê Google',
              url: 'https://google.com'
            }
          ]]
        }
      });
      
      await ctx.answerInlineQuery(results, {
        cache_time: 0,
        is_personal: true
      });
      
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ inline query:', error);
      await ctx.answerInlineQuery([{
        type: 'article',
        id: 'error',
        title: '‚ùå –û—à–∏–±–∫–∞',
        description: error.message,
        input_message_content: {
          message_text: '‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞: ' + error.message
        }
      }]);
    }
  });
}

module.exports = {
  registerInlineHandlers
};