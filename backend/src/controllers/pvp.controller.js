// backend/src/controllers/pvp.controller.js
const { pvpService } = require('../services');
const { validationMiddleware } = require('../middleware');

/**
 * –°–æ–∑–¥–∞—Ç—å –≤—ã–∑–æ–≤ –Ω–∞ –¥—É—ç–ª—å
 */
const createChallenge = async (req, res) => {
  try {
    const {
      opponentId,
      opponentUsername,
      amount,
      gameType,
      format,
      winsRequired,
      chatId,
      chatType,
      messageId
    } = req.body;

    // –í–∞–ª–∏–¥–∞—Ü–∏—è –≤—Ö–æ–¥–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö
    if (!opponentId || !opponentUsername || !amount || !chatId || messageId === undefined) {
      return res.status(400).json({
        success: false,
        message: '–û—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ –ø–æ–ª—è',
        required: ['opponentId', 'opponentUsername', 'amount', 'chatId', 'messageId']
      });
    }

    if (typeof amount !== 'number' || amount < 1 || amount > 1000) {
      return res.status(400).json({
        success: false,
        message: '–°—É–º–º–∞ —Å—Ç–∞–≤–∫–∏ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –æ—Ç 1 –¥–æ 1000 USDT'
      });
    }

    const challengeData = {
      challengerId: req.user.telegramId,
      challengerUsername: req.user.username,
      opponentId,
      opponentUsername,
      amount,
      gameType: gameType || 'üé≤',
      format: format || 'bo1',
      winsRequired: winsRequired || 1,
      chatId,
      chatType: chatType || 'private',
      messageId
    };

    const result = await pvpService.createChallenge(challengeData);
    res.status(201).json(result);

  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –≤—ã–∑–æ–≤–∞:', error);
    res.status(400).json({
      success: false,
      message: error.message || '–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –≤—ã–∑–æ–≤–∞'
    });
  }
};

/**
 * –û—Ç–≤–µ—Ç–∏—Ç—å –Ω–∞ –≤—ã–∑–æ–≤ (–ø—Ä–∏–Ω—è—Ç—å –∏–ª–∏ –æ—Ç–∫–ª–æ–Ω–∏—Ç—å)
 */
const respondToChallenge = async (req, res) => {
  try {
    const { duelId } = req.params;
    const { action } = req.body;

    if (!duelId || !action) {
      return res.status(400).json({
        success: false,
        message: '–û—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ –ø–æ–ª—è'
      });
    }

    if (!['accept', 'decline'].includes(action)) {
      return res.status(400).json({
        success: false,
        message: '–î–µ–π—Å—Ç–≤–∏–µ –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å accept –∏–ª–∏ decline'
      });
    }

    const result = await pvpService.respondToChallenge(duelId, req.user.telegramId, action);
    res.json(result);

  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ –æ—Ç–≤–µ—Ç–∞ –Ω–∞ –≤—ã–∑–æ–≤:', error);
    res.status(400).json({
      success: false,
      message: error.message || '–û—à–∏–±–∫–∞ –æ—Ç–≤–µ—Ç–∞ –Ω–∞ –≤—ã–∑–æ–≤'
    });
  }
};

/**
 * –ü–æ–ª—É—á–∏—Ç—å —Å–æ—Å—Ç–æ—è–Ω–∏–µ –∏–≥—Ä–æ–≤–æ–π —Å–µ—Å—Å–∏–∏
 */
const getSession = async (req, res) => {
  try {
    const { sessionId } = req.params;

    if (!sessionId) {
      return res.status(400).json({
        success: false,
        message: '–ù–µ —É–∫–∞–∑–∞–Ω ID —Å–µ—Å—Å–∏–∏'
      });
    }

    const result = await pvpService.getSession(sessionId, req.user.telegramId);
    res.json(result);

  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å–µ—Å—Å–∏–∏:', error);
    res.status(400).json({
      success: false,
      message: error.message || '–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å–µ—Å—Å–∏–∏'
    });
  }
};

/**
 * –ü—Ä–∏—Å–æ–µ–¥–∏–Ω–∏—Ç—å—Å—è –∫ –∏–≥—Ä–æ–≤–æ–π —Å–µ—Å—Å–∏–∏
 */
const joinSession = async (req, res) => {
  try {
    const { sessionId } = req.params;

    if (!sessionId) {
      return res.status(400).json({
        success: false,
        message: '–ù–µ —É–∫–∞–∑–∞–Ω ID —Å–µ—Å—Å–∏–∏'
      });
    }

    const result = await pvpService.joinSession(sessionId, req.user.telegramId);
    res.json(result);

  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏—Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è –∫ —Å–µ—Å—Å–∏–∏:', error);
    res.status(400).json({
      success: false,
      message: error.message || '–û—à–∏–±–∫–∞ –ø—Ä–∏—Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è –∫ —Å–µ—Å—Å–∏–∏'
    });
  }
};

/**
 * –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å –≥–æ—Ç–æ–≤–Ω–æ—Å—Ç—å –∫ –∏–≥—Ä–µ
 */
const setReady = async (req, res) => {
  try {
    const { sessionId } = req.params;
    const { ready = true } = req.body;

    if (!sessionId) {
      return res.status(400).json({
        success: false,
        message: '–ù–µ —É–∫–∞–∑–∞–Ω ID —Å–µ—Å—Å–∏–∏'
      });
    }

    const result = await pvpService.setReady(sessionId, req.user.telegramId, ready);
    res.json(result);

  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ —É—Å—Ç–∞–Ω–æ–≤–∫–∏ –≥–æ—Ç–æ–≤–Ω–æ—Å—Ç–∏:', error);
    res.status(400).json({
      success: false,
      message: error.message || '–û—à–∏–±–∫–∞ —É—Å—Ç–∞–Ω–æ–≤–∫–∏ –≥–æ—Ç–æ–≤–Ω–æ—Å—Ç–∏'
    });
  }
};

/**
 * –ó–∞–ø—É—Å—Ç–∏—Ç—å –∏–≥—Ä—É
 */
const startGame = async (req, res) => {
  try {
    const { sessionId } = req.params;

    if (!sessionId) {
      return res.status(400).json({
        success: false,
        message: '–ù–µ —É–∫–∞–∑–∞–Ω ID —Å–µ—Å—Å–∏–∏'
      });
    }

    const result = await pvpService.startGame(sessionId, req.user.telegramId);
    res.json(result);

  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞ –∏–≥—Ä—ã:', error);
    res.status(400).json({
      success: false,
      message: error.message || '–û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞ –∏–≥—Ä—ã'
    });
  }
};

/**
 * –ü–æ–ª—É—á–∏—Ç—å –∞–∫—Ç–∏–≤–Ω—ã–µ –¥—É—ç–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
 */
const getActiveDuels = async (req, res) => {
  try {
    const result = await pvpService.getActiveDuels(req.user.telegramId);
    res.json(result);

  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∞–∫—Ç–∏–≤–Ω—ã—Ö –¥—É—ç–ª–µ–π:', error);
    res.status(500).json({
      success: false,
      message: '–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∞–∫—Ç–∏–≤–Ω—ã—Ö –¥—É—ç–ª–µ–π'
    });
  }
};

/**
 * –ü–æ–ª—É—á–∏—Ç—å –∏—Å—Ç–æ—Ä–∏—é PvP –∏–≥—Ä –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
 */
const getHistory = async (req, res) => {
  try {
    const { limit = 20, offset = 0 } = req.query;
    const parsedLimit = Math.min(parseInt(limit) || 20, 100); // –ú–∞–∫—Å–∏–º—É–º 100

    const result = await pvpService.getHistory(req.user.telegramId, parsedLimit);
    res.json(result);

  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∏—Å—Ç–æ—Ä–∏–∏:', error);
    res.status(500).json({
      success: false,
      message: '–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∏—Å—Ç–æ—Ä–∏–∏'
    });
  }
};

/**
 * –ü–æ–ª—É—á–∏—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É PvP –∏–≥—Ä –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
 */
const getStats = async (req, res) => {
  try {
    const result = await pvpService.getStats(req.user.telegramId);
    res.json(result);

  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏:', error);
    res.status(500).json({
      success: false,
      message: '–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏'
    });
  }
};

/**
 * –û—Ç–º–µ–Ω–∏—Ç—å —Å–≤–æ–π –≤—ã–∑–æ–≤ –Ω–∞ –¥—É—ç–ª—å
 */
const cancelChallenge = async (req, res) => {
  try {
    const { duelId } = req.params;

    if (!duelId) {
      return res.status(400).json({
        success: false,
        message: '–ù–µ —É–∫–∞–∑–∞–Ω ID –¥—É—ç–ª–∏'
      });
    }

    const result = await pvpService.cancelChallenge(duelId, req.user.telegramId);
    res.json(result);

  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ –æ—Ç–º–µ–Ω—ã –≤—ã–∑–æ–≤–∞:', error);
    res.status(400).json({
      success: false,
      message: error.message || '–û—à–∏–±–∫–∞ –æ—Ç–º–µ–Ω—ã –≤—ã–∑–æ–≤–∞'
    });
  }
};

/**
 * –ü—Ä–µ–¥–ª–æ–∂–∏—Ç—å —Ä–µ–≤–∞–Ω—à
 */
const createRematch = async (req, res) => {
  try {
    const { duelId } = req.params;

    if (!duelId) {
      return res.status(400).json({
        success: false,
        message: '–ù–µ —É–∫–∞–∑–∞–Ω ID –¥—É—ç–ª–∏'
      });
    }

    const result = await pvpService.createRematch(duelId, req.user.telegramId);
    res.status(201).json(result);

  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è —Ä–µ–≤–∞–Ω—à–∞:', error);
    res.status(400).json({
      success: false,
      message: error.message || '–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è —Ä–µ–≤–∞–Ω—à–∞'
    });
  }
};

/**
 * –ü–æ–ª—É—á–∏—Ç—å –æ–∂–∏–¥–∞—é—â–∏–µ –¥—É—ç–ª–∏ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
 */
const getPendingDuels = async (req, res) => {
  try {
    const result = await pvpService.getActiveDuels(req.user.telegramId);
    
    // –§–∏–ª—å—Ç—Ä—É–µ–º —Ç–æ–ª—å–∫–æ pending –¥—É—ç–ª–∏
    const pendingDuels = result.data.filter(duel => duel.status === 'pending');
    
    res.json({
      success: true,
      data: pendingDuels
    });

  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –æ–∂–∏–¥–∞—é—â–∏—Ö –¥—É—ç–ª–µ–π:', error);
    res.status(500).json({
      success: false,
      message: '–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –æ–∂–∏–¥–∞—é—â–∏—Ö –¥—É—ç–ª–µ–π'
    });
  }
};

/**
 * –í–∞–ª–∏–¥–∏—Ä–æ–≤–∞—Ç—å –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å —Å–æ–∑–¥–∞–Ω–∏—è –≤—ã–∑–æ–≤–∞
 */
const validateChallenge = async (req, res) => {
  try {
    const { opponentId, amount } = req.body;

    if (!opponentId || !amount) {
      return res.status(400).json({
        success: false,
        message: '–û—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ –ø–æ–ª—è'
      });
    }

    // –ò—Å–ø–æ–ª—å–∑—É–µ–º –≤–∞–ª–∏–¥–∞—Ü–∏—é –∏–∑ —Å–µ—Ä–≤–∏—Å–∞
    await pvpService.validateChallenge(req.user.telegramId, opponentId, amount);

    res.json({
      success: true,
      message: '–í—ã–∑–æ–≤ –º–æ–∂–Ω–æ —Å–æ–∑–¥–∞—Ç—å'
    });

  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ –≤–∞–ª–∏–¥–∞—Ü–∏–∏ –≤—ã–∑–æ–≤–∞:', error);
    res.status(400).json({
      success: false,
      message: error.message || '–û—à–∏–±–∫–∞ –≤–∞–ª–∏–¥–∞—Ü–∏–∏ –≤—ã–∑–æ–≤–∞'
    });
  }
};

/**
 * –ü–æ–ª—É—á–∏—Ç—å —Ç–∞–±–ª–∏—Ü—É –ª–∏–¥–µ—Ä–æ–≤ PvP
 */
const getLeaderboard = async (req, res) => {
  try {
    const { limit = 10, period = 'all' } = req.query;
    const parsedLimit = Math.min(parseInt(limit) || 10, 50); // –ú–∞–∫—Å–∏–º—É–º 50

    // TODO: –†–µ–∞–ª–∏–∑–æ–≤–∞—Ç—å —Ç–∞–±–ª–∏—Ü—É –ª–∏–¥–µ—Ä–æ–≤
    // –ü–æ–∫–∞ –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –∑–∞–≥–ª—É—à–∫—É
    res.json({
      success: true,
      data: [],
      message: '–¢–∞–±–ª–∏—Ü–∞ –ª–∏–¥–µ—Ä–æ–≤ –≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ'
    });

  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Ç–∞–±–ª–∏—Ü—ã –ª–∏–¥–µ—Ä–æ–≤:', error);
    res.status(500).json({
      success: false,
      message: '–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Ç–∞–±–ª–∏—Ü—ã –ª–∏–¥–µ—Ä–æ–≤'
    });
  }
};

/**
 * –°–æ—Ö—Ä–∞–Ω–∏—Ç—å —Ä–µ–∑—É–ª—å—Ç–∞—Ç —Ä–∞—É–Ω–¥–∞
 */
const saveRound = async (req, res) => {
  try {
    const { sessionId } = req.params;
    const roundData = req.body;
    
    const result = await pvpService.saveRound(sessionId, roundData);
    res.json(result);
    
  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è —Ä–∞—É–Ω–¥–∞:', error);
    res.status(400).json({
      success: false,
      message: error.message || '–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è —Ä–∞—É–Ω–¥–∞'
    });
  }
};

/**
 * –ó–∞–≤–µ—Ä—à–∏—Ç—å –¥—É—ç–ª—å
 */
const finishDuel = async (req, res) => {
  try {
    const { sessionId } = req.params;
    const { winnerId } = req.body;
    
    if (!winnerId) {
      return res.status(400).json({
        success: false,
        message: '–ù–µ —É–∫–∞–∑–∞–Ω –ø–æ–±–µ–¥–∏—Ç–µ–ª—å'
      });
    }
    
    const result = await pvpService.finishDuel(sessionId, winnerId);
    res.json(result);
    
  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –¥—É—ç–ª–∏:', error);
    res.status(400).json({
      success: false,
      message: error.message || '–û—à–∏–±–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –¥—É—ç–ª–∏'
    });
  }
};

module.exports = {
  createChallenge,
  respondToChallenge,
  getSession,
  joinSession,
  setReady,
  startGame,
  saveRound,
  finishDuel,
  getActiveDuels,
  getHistory,
  getStats,
  cancelChallenge,
  createRematch,
  getPendingDuels,
  validateChallenge,
  getLeaderboard
};