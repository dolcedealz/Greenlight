// frontend/src/components/profile/Withdrawals.js
import React, { useState, useEffect } from 'react';
import { paymentApi } from '../../services/api';
import { showNotification, showConfirmation } from '../../utils/telegram';
import '../../styles/Withdrawals.css';

const Withdrawals = ({ balance, onBalanceUpdate }) => {
  const [showWithdrawalModal, setShowWithdrawalModal] = useState(false);
  const [withdrawalAmount, setWithdrawalAmount] = useState('');
  const [recipient, setRecipient] = useState('');
  const [recipientType, setRecipientType] = useState('username');
  const [comment, setComment] = useState('');
  const [loading, setLoading] = useState(false);
  const [withdrawals, setWithdrawals] = useState([]);
  const [loadingHistory, setLoadingHistory] = useState(false);

  // –ü—Ä–µ–¥—É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–Ω—ã–µ —Å—É–º–º—ã
  const presetAmounts = [10, 20, 50, 100, 500, 1000];

  // –ó–∞–≥—Ä—É–∑–∫–∞ –∏—Å—Ç–æ—Ä–∏–∏ –≤—ã–≤–æ–¥–æ–≤
  useEffect(() => {
    fetchWithdrawalHistory();
  }, []);

  const fetchWithdrawalHistory = async () => {
    try {
      setLoadingHistory(true);
      const response = await paymentApi.getUserWithdrawals({ limit: 5 });
      setWithdrawals(response.data.data.withdrawals || []);
    } catch (error) {

    } finally {
      setLoadingHistory(false);
    }
  };

  // –í–∞–ª–∏–¥–∞—Ü–∏—è username
  const validateUsername = (username) => {
    return /^[a-zA-Z0-9_]{5,32}$/.test(username);
  };

  // –°–æ–∑–¥–∞–Ω–∏–µ –∑–∞–ø—Ä–æ—Å–∞ –Ω–∞ –≤—ã–≤–æ–¥
  const handleCreateWithdrawal = async () => {
    const amount = parseFloat(withdrawalAmount);

    // –í–∞–ª–∏–¥–∞—Ü–∏—è —Å—É–º–º—ã
    if (isNaN(amount) || amount <= 0) {
      showNotification('–í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—É—é —Å—É–º–º—É');
      return;
    }

    if (amount < 1) {
      showNotification('–ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è —Å—É–º–º–∞ –≤—ã–≤–æ–¥–∞: 1 USDT');
      return;
    }

    if (amount > 10000) {
      showNotification('–ú–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è —Å—É–º–º–∞ –≤—ã–≤–æ–¥–∞: 10000 USDT');
      return;
    }

    if (amount > balance) {
      showNotification(`–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å—Ä–µ–¥—Å—Ç–≤. –í–∞—à –±–∞–ª–∞–Ω—Å: ${balance.toFixed(2)} USDT`);
      return;
    }

    // –í–∞–ª–∏–¥–∞—Ü–∏—è –ø–æ–ª—É—á–∞—Ç–µ–ª—è
    if (!recipient.trim()) {
      showNotification('–í–≤–µ–¥–∏—Ç–µ –ø–æ–ª—É—á–∞—Ç–µ–ª—è');
      return;
    }

    if (recipientType === 'username' && !validateUsername(recipient)) {
      showNotification('–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π username. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ —Ç–æ–ª—å–∫–æ –±—É–∫–≤—ã, —Ü–∏—Ñ—Ä—ã –∏ _ (5-32 —Å–∏–º–≤–æ–ª–∞)');
      return;
    }

    // –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –æ–ø–µ—Ä–∞—Ü–∏–∏
    const netAmount = (amount * 0.97).toFixed(2);
    showConfirmation(
      `–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç–µ –≤—ã–≤–æ–¥:\n\n–°—É–º–º–∞ –∫ —Å–ø–∏—Å–∞–Ω–∏—é: ${amount} USDT\n–ö–æ–º–∏—Å—Å–∏—è CryptoBot: ${(amount * 0.03).toFixed(2)} USDT (3%)\n–í—ã –ø–æ–ª—É—á–∏—Ç–µ: ${netAmount} USDT\n–ü–æ–ª—É—á–∞—Ç–µ–ª—å: @${recipient}\n${amount > 300 ? '‚ö†Ô∏è –¢—Ä–µ–±—É–µ—Ç –æ–¥–æ–±—Ä–µ–Ω–∏—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞' : '‚ö° –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞'}`,
      async () => {
        try {
          setLoading(true);

          const response = await paymentApi.createWithdrawal({
            amount,
            recipient: recipient.replace('@', ''),
            recipientType,
            comment: comment || undefined
          });

          const withdrawalData = response.data.data;

          showNotification(
            withdrawalData.requiresApproval 
              ? `‚úÖ –ó–∞–ø—Ä–æ—Å –Ω–∞ –≤—ã–≤–æ–¥ —Å–æ–∑–¥–∞–Ω!\n–¢—Ä–µ–±—É–µ—Ç—Å—è –æ–¥–æ–±—Ä–µ–Ω–∏–µ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞.\n–í—Ä–µ–º—è –æ–±—Ä–∞–±–æ—Ç–∫–∏: 24-48 —á–∞—Å–æ–≤`
              : `‚úÖ –ó–∞–ø—Ä–æ—Å –Ω–∞ –≤—ã–≤–æ–¥ —Å–æ–∑–¥–∞–Ω!\n–û–∂–∏–¥–∞–π—Ç–µ –ø–æ—Å—Ç—É–ø–ª–µ–Ω–∏—è —Å—Ä–µ–¥—Å—Ç–≤ –≤ —Ç–µ—á–µ–Ω–∏–µ 5-15 –º–∏–Ω—É—Ç`
          );

          // –ó–∞–∫—Ä—ã–≤–∞–µ–º –º–æ–¥–∞–ª—å–Ω–æ–µ –æ–∫–Ω–æ
          setShowWithdrawalModal(false);
          resetForm();

          // –û–±–Ω–æ–≤–ª—è–µ–º –∏—Å—Ç–æ—Ä–∏—é
          fetchWithdrawalHistory();

          // –û–±–Ω–æ–≤–ª—è–µ–º –±–∞–ª–∞–Ω—Å
          if (onBalanceUpdate) {
            onBalanceUpdate();
          }

          // –ù–∞—á–∏–Ω–∞–µ–º –ø—Ä–æ–≤–µ—Ä–∫—É —Å—Ç–∞—Ç—É—Å–∞ –¥–ª—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏—Ö –≤—ã–≤–æ–¥–æ–≤
          if (!withdrawalData.requiresApproval) {
            startStatusPolling(withdrawalData.withdrawalId);
          }

        } catch (error) {

          showNotification(error.response?.data?.message || '–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –∑–∞–ø—Ä–æ—Å–∞ –Ω–∞ –≤—ã–≤–æ–¥');
        } finally {
          setLoading(false);
        }
      }
    );
  };

  // –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç–∞—Ç—É—Å–∞ –≤—ã–≤–æ–¥–∞
  const startStatusPolling = (withdrawalId) => {
    let attempts = 0;
    const maxAttempts = 60; // 5 –º–∏–Ω—É—Ç –º–∞–∫—Å–∏–º—É–º

    const checkStatus = async () => {
      try {
        const response = await paymentApi.checkWithdrawalStatus(withdrawalId);
        const status = response.data.data;

        if (status.isCompleted) {
          showNotification('‚úÖ –í—ã–≤–æ–¥ —É—Å–ø–µ—à–Ω–æ –≤—ã–ø–æ–ª–Ω–µ–Ω!');
          fetchWithdrawalHistory();
          return;
        }

        if (status.isRejected) {
          showNotification(`‚ùå –í—ã–≤–æ–¥ –æ—Ç–∫–ª–æ–Ω–µ–Ω: ${status.rejectionReason || '–±–µ–∑ —É–∫–∞–∑–∞–Ω–∏—è –ø—Ä–∏—á–∏–Ω—ã'}`);

          // –û–±–Ω–æ–≤–ª—è–µ–º –±–∞–ª–∞–Ω—Å (—Å—Ä–µ–¥—Å—Ç–≤–∞ –≤–æ–∑–≤—Ä–∞—â–µ–Ω—ã)
          if (onBalanceUpdate) {
            onBalanceUpdate();
          }

          fetchWithdrawalHistory();
          return;
        }

        if (status.isFailed) {
          showNotification('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –≤—ã–≤–æ–¥–∞. –°—Ä–µ–¥—Å—Ç–≤–∞ –≤–æ–∑–≤—Ä–∞—â–µ–Ω—ã –Ω–∞ –±–∞–ª–∞–Ω—Å.');

          // –û–±–Ω–æ–≤–ª—è–µ–º –±–∞–ª–∞–Ω—Å
          if (onBalanceUpdate) {
            onBalanceUpdate();
          }

          fetchWithdrawalHistory();
          return;
        }

        // –ü—Ä–æ–¥–æ–ª–∂–∞–µ–º –ø—Ä–æ–≤–µ—Ä–∫—É
        attempts++;
        if (attempts < maxAttempts) {
          setTimeout(checkStatus, 5000); // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–∞–∂–¥—ã–µ 5 —Å–µ–∫—É–Ω–¥
        }
      } catch (error) {

      }
    };

    // –ù–∞—á–∏–Ω–∞–µ–º –ø—Ä–æ–≤–µ—Ä–∫—É —á–µ—Ä–µ–∑ 5 —Å–µ–∫—É–Ω–¥
    setTimeout(checkStatus, 5000);
  };

  // –°–±—Ä–æ—Å —Ñ–æ—Ä–º—ã
  const resetForm = () => {
    setWithdrawalAmount('');
    setRecipient('');
    setComment('');
  };

  // –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–∞—Ç—ã
  const formatDate = (dateString) => {
    return new Date(dateString).toLocaleDateString('ru-RU', {
      day: '2-digit',
      month: '2-digit',
      year: 'numeric',
      hour: '2-digit',
      minute: '2-digit'
    });
  };

  // –ü–æ–ª—É—á–µ–Ω–∏–µ –∏–∫–æ–Ω–∫–∏ —Å—Ç–∞—Ç—É—Å–∞
  const getStatusIcon = (status) => {
    switch (status) {
      case 'completed': return '‚úÖ';
      case 'pending': return '‚è≥';
      case 'approved': return '‚úÖ';
      case 'processing': return '‚öôÔ∏è';
      case 'rejected': return '‚ùå';
      case 'failed': return '‚ö†Ô∏è';
      default: return '‚ùì';
    }
  };

  // –ü–æ–ª—É—á–µ–Ω–∏–µ –Ω–∞–∑–≤–∞–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞
  const getStatusName = (status) => {
    switch (status) {
      case 'completed': return '–í—ã–ø–æ–ª–Ω–µ–Ω';
      case 'pending': return '–û–∂–∏–¥–∞–µ—Ç';
      case 'approved': return '–û–¥–æ–±—Ä–µ–Ω';
      case 'processing': return '–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç—Å—è';
      case 'rejected': return '–û—Ç–∫–ª–æ–Ω–µ–Ω';
      case 'failed': return '–û—à–∏–±–∫–∞';
      default: return status;
    }
  };

  // –û—Ç–º–µ–Ω–∞ –∑–∞–ø—Ä–æ—Å–∞ –Ω–∞ –≤—ã–≤–æ–¥
  const handleCancelWithdrawal = async (withdrawalId) => {
    showConfirmation(
      '–í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ –æ—Ç–º–µ–Ω–∏—Ç—å —ç—Ç–æ—Ç –∑–∞–ø—Ä–æ—Å –Ω–∞ –≤—ã–≤–æ–¥?',
      async () => {
        try {
          await paymentApi.cancelWithdrawal(withdrawalId);
          showNotification('–ó–∞–ø—Ä–æ—Å –Ω–∞ –≤—ã–≤–æ–¥ –æ—Ç–º–µ–Ω–µ–Ω. –°—Ä–µ–¥—Å—Ç–≤–∞ –≤–æ–∑–≤—Ä–∞—â–µ–Ω—ã –Ω–∞ –±–∞–ª–∞–Ω—Å.');

          // –û–±–Ω–æ–≤–ª—è–µ–º –∏—Å—Ç–æ—Ä–∏—é –∏ –±–∞–ª–∞–Ω—Å
          fetchWithdrawalHistory();
          if (onBalanceUpdate) {
            onBalanceUpdate();
          }
        } catch (error) {

          showNotification(error.response?.data?.message || '–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–º–µ–Ω–∏—Ç—å –≤—ã–≤–æ–¥');
        }
      }
    );
  };

  return (
    <div className="withdrawals-section">
      <div className="withdrawals-header">
        <h3>üí∏ –í—ã–≤–æ–¥ —Å—Ä–µ–¥—Å—Ç–≤</h3>
        <button 
          className="withdrawal-button"
          onClick={() => setShowWithdrawalModal(true)}
          disabled={balance < 1}
        >
          –í—ã–≤–µ—Å—Ç–∏
        </button>
      </div>

      {balance < 1 && (
        <div className="withdrawal-warning">
          –ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è —Å—É–º–º–∞ –¥–ª—è –≤—ã–≤–æ–¥–∞: 1 USDT
        </div>
      )}

      {/* –ò—Å—Ç–æ—Ä–∏—è –ø–æ—Å–ª–µ–¥–Ω–∏—Ö –≤—ã–≤–æ–¥–æ–≤ */}
      <div className="withdrawals-history">
        <h4>–ü–æ—Å–ª–µ–¥–Ω–∏–µ –≤—ã–≤–æ–¥—ã</h4>
        {loadingHistory ? (
          <div className="withdrawals-loading">
            <div className="loader"></div>
          </div>
        ) : withdrawals.length === 0 ? (
          <div className="no-withdrawals">
            <p>–£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç –≤—ã–≤–æ–¥–æ–≤</p>
          </div>
        ) : (
          <div className="withdrawals-list">
            {withdrawals.map(withdrawal => (
              <div key={withdrawal.id} className="withdrawal-item">
                <div className="withdrawal-icon">
                  {getStatusIcon(withdrawal.status)}
                </div>
                <div className="withdrawal-details">
                  <div className="withdrawal-header">
                    <span className="withdrawal-amount">{withdrawal.amount} USDT</span>
                    <span className="withdrawal-status">{getStatusName(withdrawal.status)}</span>
                  </div>
                  <div className="withdrawal-info">
                    <span className="withdrawal-recipient">@{withdrawal.recipient}</span>
                    <span className="withdrawal-date">{formatDate(withdrawal.createdAt)}</span>
                  </div>
                  {withdrawal.rejectionReason && (
                    <div className="withdrawal-rejection">
                      –ü—Ä–∏—á–∏–Ω–∞ –æ—Ç–∫–ª–æ–Ω–µ–Ω–∏—è: {withdrawal.rejectionReason}
                    </div>
                  )}
                  {withdrawal.status === 'pending' && !withdrawal.requiresApproval && (
                    <button 
                      className="cancel-withdrawal-button"
                      onClick={() => handleCancelWithdrawal(withdrawal.id)}
                    >
                      –û—Ç–º–µ–Ω–∏—Ç—å
                    </button>
                  )}
                </div>
              </div>
            ))}
          </div>
        )}
      </div>

      {/* –ú–æ–¥–∞–ª—å–Ω–æ–µ –æ–∫–Ω–æ –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –≤—ã–≤–æ–¥–∞ */}
      {showWithdrawalModal && (
        <div className="withdrawal-modal">
          <div className="withdrawal-modal-content">
            <div className="withdrawal-modal-header">
              <h3>–í—ã–≤–æ–¥ —Å—Ä–µ–¥—Å—Ç–≤</h3>
              <button 
                className="close-button"
                onClick={() => setShowWithdrawalModal(false)}
              >
                ‚úï
              </button>
            </div>

            <div className="withdrawal-modal-body">
              <div className="withdrawal-balance-info">
                <span>–î–æ—Å—Ç—É–ø–Ω–æ –¥–ª—è –≤—ã–≤–æ–¥–∞:</span>
                <span className="balance-amount">{balance.toFixed(2)} USDT</span>
              </div>

              <div className="withdrawal-input-group">
                <label>–°—É–º–º–∞ –≤—ã–≤–æ–¥–∞ (USDT)</label>
                <input
                  type="number"
                  value={withdrawalAmount}
                  onChange={(e) => setWithdrawalAmount(e.target.value)}
                  placeholder="–í–≤–µ–¥–∏—Ç–µ —Å—É–º–º—É"
                  min="1"
                  max={Math.min(10000, balance)}
                  step="0.01"
                />
              </div>

              {/* –ù–û–í–û–ï: –ü–æ–∫–∞–∑ —Ä–∞—Å—á–µ—Ç–∞ –∫–æ–º–∏—Å—Å–∏–∏ */}
              {withdrawalAmount && !isNaN(parseFloat(withdrawalAmount)) && parseFloat(withdrawalAmount) > 0 && (
                <div className="commission-breakdown">
                  <div className="breakdown-item">
                    <span>–°—É–º–º–∞ –∫ —Å–ø–∏—Å–∞–Ω–∏—é:</span>
                    <span>{parseFloat(withdrawalAmount).toFixed(2)} USDT</span>
                  </div>
                  <div className="breakdown-item commission">
                    <span>–ö–æ–º–∏—Å—Å–∏—è CryptoBot (3%):</span>
                    <span>-{(parseFloat(withdrawalAmount) * 0.03).toFixed(2)} USDT</span>
                  </div>
                  <div className="breakdown-item total">
                    <span><strong>–í—ã –ø–æ–ª—É—á–∏—Ç–µ:</strong></span>
                    <span><strong>{(parseFloat(withdrawalAmount) * 0.97).toFixed(2)} USDT</strong></span>
                  </div>
                </div>
              )}

              <div className="preset-amounts">
                {presetAmounts.map(amount => (
                  <button
                    key={amount}
                    className="preset-amount-button"
                    onClick={() => setWithdrawalAmount(amount.toString())}
                    disabled={amount > balance}
                  >
                    {amount} USDT
                    <small>–ø–æ–ª—É—á–∏—Ç–µ {(amount * 0.97).toFixed(2)}</small>
                  </button>
                ))}
              </div>

              <div className="withdrawal-input-group">
                <label>Telegram username –ø–æ–ª—É—á–∞—Ç–µ–ª—è</label>
                <div className="input-with-prefix">
                  <span className="input-prefix">@</span>
                  <input
                    type="text"
                    value={recipient}
                    onChange={(e) => setRecipient(e.target.value.replace('@', ''))}
                    placeholder="username"
                    maxLength="32"
                  />
                </div>
                <small className="input-hint">
                  –ü–æ–ª—É—á–∞—Ç–µ–ª—å –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω –≤ @CryptoBot
                </small>
              </div>

              <div className="withdrawal-input-group">
                <label>–ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π (–Ω–µ–æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ)</label>
                <input
                  type="text"
                  value={comment}
                  onChange={(e) => setComment(e.target.value)}
                  placeholder="–ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π –∫ –≤—ã–≤–æ–¥—É"
                  maxLength="100"
                />
              </div>

              <div className="withdrawal-info">
                <p>üí° –ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è —Å—É–º–º–∞: 1 USDT</p>
                <p>üí° –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è —Å—É–º–º–∞: 10,000 USDT</p>
                <p>‚ö° –î–æ 300 USDT - –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ (5-15 –º–∏–Ω)</p>
                <p>‚è≥ –°–≤—ã—à–µ 300 USDT - —Ç—Ä–µ–±—É–µ—Ç –æ–¥–æ–±—Ä–µ–Ω–∏—è (24-48 —á)</p>
                <p>‚ÑπÔ∏è –ö–æ–º–∏—Å—Å–∏—è –ø–ª–∞—Ç–µ–∂–Ω–æ–π —Å–∏—Å—Ç–µ–º—ã: 3%</p>
              </div>
            </div>

            <div className="withdrawal-modal-footer">
              <button
                className="cancel-button"
                onClick={() => {
                  setShowWithdrawalModal(false);
                  resetForm();
                }}
              >
                –û—Ç–º–µ–Ω–∞
              </button>
              <button
                className="confirm-button"
                onClick={handleCreateWithdrawal}
                disabled={loading || !withdrawalAmount || !recipient}
              >
                {loading ? '–°–æ–∑–¥–∞–Ω–∏–µ...' : '–°–æ–∑–¥–∞—Ç—å –∑–∞–ø—Ä–æ—Å'}
              </button>
            </div>
          </div>
        </div>
      )}
    </div>
  );
};

export default Withdrawals;