// frontend/src/screens/HistoryScreen.js
import React, { useState, useEffect } from 'react';
import { Header } from '../components/layout';
import { userApi, gameApi, duelApi } from '../services';
import DuelHistoryItem from '../components/duels/DuelHistoryItem';
import '../styles/HistoryScreen.css';
import '../styles/DuelHistory.css';

const HistoryScreen = () => {
  const [balance, setBalance] = useState(0);
  const [games, setGames] = useState([]);
  const [duels, setDuels] = useState([]);
  const [transactions, setTransactions] = useState([]);
  const [activeSection, setActiveSection] = useState('games');
  const [loading, setLoading] = useState(true);
  const [error, setError] = useState(null);
  const [filterType, setFilterType] = useState('all');
  const [currentUserId, setCurrentUserId] = useState(null);

  // –ó–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö –ø—Ä–∏ –º–æ–Ω—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏
  useEffect(() => {
    fetchData();
  }, []);

  // –ó–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Ñ–∏–ª—å—Ç—Ä–æ–≤
  const fetchData = async (gameType = null, transactionType = null) => {
    try {
      setLoading(true);

      // –ó–∞–≥—Ä—É–∑–∫–∞ –±–∞–ª–∞–Ω—Å–∞ –∏ –ø—Ä–æ—Ñ–∏–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
      const balanceResponse = await userApi.getBalance();
      setBalance(balanceResponse.data.data.balance);

      const profileResponse = await userApi.getUserProfile();
      setCurrentUserId(profileResponse.data.data.telegramId?.toString());

      // –ó–∞–≥—Ä—É–∑–∫–∞ –∏—Å—Ç–æ—Ä–∏–∏ –∏–≥—Ä (–≤–∫–ª—é—á–∞–µ—Ç –¥—É—ç–ª–∏)
      const gameParams = { limit: 20 };
      if (gameType && gameType !== 'all') {
        gameParams.gameType = gameType;
      }

      const gamesResponse = await gameApi.getGameHistory(gameParams);
      const allGames = gamesResponse.data.data.games || [];

      // –†–∞–∑–¥–µ–ª—è–µ–º –æ–±—ã—á–Ω—ã–µ –∏–≥—Ä—ã –∏ –¥—É—ç–ª–∏
      const regularGames = allGames.filter(game => game.gameType !== 'duel');
      const duelGames = allGames.filter(game => game.gameType === 'duel');

      setGames(regularGames);
      setDuels(duelGames);

      // –ó–∞–≥—Ä—É–∑–∫–∞ –∏—Å—Ç–æ—Ä–∏–∏ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π
      const transactionParams = { limit: 20 };
      if (transactionType && transactionType !== 'all') {
        transactionParams.type = transactionType;
      }

      const transactionsResponse = await userApi.getTransactions(transactionParams);
      setTransactions(transactionsResponse.data.data.transactions || []);

      setLoading(false);
    } catch (err) {

      setError('–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –∏—Å—Ç–æ—Ä–∏—é. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.');
      setLoading(false);
    }
  };

  // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∏–∑–º–µ–Ω–µ–Ω–∏—è —Ñ–∏–ª—å—Ç—Ä–∞
  const handleFilterChange = (type) => {
    setFilterType(type);

    if (activeSection === 'games') {
      fetchData(type, null);
    } else {
      fetchData(null, type);
    }
  };

  // –ü–æ–ª—É—á–µ–Ω–∏–µ –∏–∫–æ–Ω–æ–∫ –¥–ª—è –∏–≥—Ä
  const getGameIcon = (gameType) => {
    switch (gameType) {
      case 'coin': return 'ü™ô';
      case 'mines': return 'üí£';
      case 'crash': return 'üìà';
      case 'slots': return 'üé∞';
      case 'duel': return '‚öîÔ∏è';
      case 'duels': return '‚öîÔ∏è';
      default: return 'üéÆ';
    }
  };

  // –ü–æ–ª—É—á–µ–Ω–∏–µ –Ω–∞–∑–≤–∞–Ω–∏–π –∏–≥—Ä
  const getGameName = (gameType) => {
    switch (gameType) {
      case 'coin': return '–ú–æ–Ω–µ—Ç–∫–∞';
      case 'mines': return '–ú–∏–Ω—ã';
      case 'crash': return '–ö—Ä–∞—à';
      case 'slots': return '–°–ª–æ—Ç—ã';
      case 'duel': return '–î—É—ç–ª—å';
      case 'duels': return '–î—É—ç–ª–∏';
      default: return gameType;
    }
  };

  // –ü–æ–ª—É—á–µ–Ω–∏–µ –∏–∫–æ–Ω–æ–∫ –¥–ª—è —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π
  const getTransactionIcon = (type) => {
    switch (type) {
      case 'deposit': return 'üí∞';
      case 'withdrawal': return 'üí∏';
      case 'bet': return 'üéÆ';
      case 'win': return 'üèÜ';
      case 'referral': return 'üë•';
      case 'bonus': return 'üéÅ';
      default: return 'üìã';
    }
  };

  // –ü–æ–ª—É—á–µ–Ω–∏–µ –Ω–∞–∑–≤–∞–Ω–∏–π —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π
  const getTransactionName = (type) => {
    switch (type) {
      case 'deposit': return '–ü–æ–ø–æ–ª–Ω–µ–Ω–∏–µ';
      case 'withdrawal': return '–í—ã–≤–æ–¥';
      case 'bet': return '–°—Ç–∞–≤–∫–∞';
      case 'win': return '–í—ã–∏–≥—Ä—ã—à';
      case 'referral': return '–†–µ—Ñ–µ—Ä–∞–ª—å–Ω—ã–π –±–æ–Ω—É—Å';
      case 'bonus': return '–ë–æ–Ω—É—Å';
      default: return type;
    }
  };

  // –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–∞—Ç—ã
  const formatDate = (dateString) => {
    const date = new Date(dateString);
    return date.toLocaleDateString('ru-RU', {
      day: '2-digit',
      month: '2-digit',
      year: 'numeric',
      hour: '2-digit',
      minute: '2-digit'
    });
  };

  // –†–µ–Ω–¥–µ—Ä —Ñ–∏–ª—å—Ç—Ä–æ–≤ –¥–ª—è –∏–≥—Ä
  const renderGameFilters = () => {
    return (
      <div className="history-filters">
        <button 
          className={`filter-button ${filterType === 'all' ? 'active' : ''}`}
          onClick={() => handleFilterChange('all')}
        >
          –í—Å–µ
        </button>
        <button 
          className={`filter-button ${filterType === 'coin' ? 'active' : ''}`}
          onClick={() => handleFilterChange('coin')}
        >
          –ú–æ–Ω–µ—Ç–∫–∞
        </button>
        <button 
          className={`filter-button ${filterType === 'mines' ? 'active' : ''}`}
          onClick={() => handleFilterChange('mines')}
        >
          –ú–∏–Ω—ã
        </button>
        <button 
          className={`filter-button ${filterType === 'crash' ? 'active' : ''}`}
          onClick={() => handleFilterChange('crash')}
        >
          –ö—Ä–∞—à
        </button>
        <button 
          className={`filter-button ${filterType === 'slots' ? 'active' : ''}`}
          onClick={() => handleFilterChange('slots')}
        >
          –°–ª–æ—Ç—ã
        </button>
        <button 
          className={`filter-button ${filterType === 'duel' ? 'active' : ''}`}
          onClick={() => handleFilterChange('duel')}
        >
          –î—É—ç–ª–∏ ‚öîÔ∏è
        </button>
      </div>
    );
  };

  // –†–µ–Ω–¥–µ—Ä —Ñ–∏–ª—å—Ç—Ä–æ–≤ –¥–ª—è —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π
  const renderTransactionFilters = () => {
    return (
      <div className="history-filters">
        <button 
          className={`filter-button ${filterType === 'all' ? 'active' : ''}`}
          onClick={() => handleFilterChange('all')}
        >
          –í—Å–µ
        </button>
        <button 
          className={`filter-button ${filterType === 'deposit' ? 'active' : ''}`}
          onClick={() => handleFilterChange('deposit')}
        >
          –ü–æ–ø–æ–ª–Ω–µ–Ω–∏—è
        </button>
        <button 
          className={`filter-button ${filterType === 'withdrawal' ? 'active' : ''}`}
          onClick={() => handleFilterChange('withdrawal')}
        >
          –í—ã–≤–æ–¥—ã
        </button>
        <button 
          className={`filter-button ${filterType === 'win' ? 'active' : ''}`}
          onClick={() => handleFilterChange('win')}
        >
          –í—ã–∏–≥—Ä—ã—à–∏
        </button>
        <button 
          className={`filter-button ${filterType === 'bet' ? 'active' : ''}`}
          onClick={() => handleFilterChange('bet')}
        >
          –°—Ç–∞–≤–∫–∏
        </button>
      </div>
    );
  };

  // –†–µ–Ω–¥–µ—Ä –∏—Å—Ç–æ—Ä–∏–∏ –∏–≥—Ä
  const renderGames = () => {
    // –û–±—ä–µ–¥–∏–Ω—è–µ–º –∏–≥—Ä—ã –∏ –¥—É—ç–ª–∏, –µ—Å–ª–∏ –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –≤—Å–µ
    let allItems = [];

    if (filterType === 'all') {
      // –î–æ–±–∞–≤–ª—è–µ–º –æ–±—ã—á–Ω—ã–µ –∏–≥—Ä—ã
      const gameItems = games.map(game => ({
        ...game,
        type: 'game',
        sortDate: new Date(game.createdAt)
      }));

      // –î–æ–±–∞–≤–ª—è–µ–º –¥—É—ç–ª–∏ (—Ç–µ–ø–µ—Ä—å –æ–Ω–∏ –≤ —Ñ–æ—Ä–º–∞—Ç–µ –∏–≥—Ä)
      const duelItems = duels.map(duel => ({
        ...duel,
        type: 'duel',
        sortDate: new Date(duel.createdAt)
      }));

      allItems = [...gameItems, ...duelItems].sort((a, b) => b.sortDate - a.sortDate);
    } else if (filterType === 'duel') {
      allItems = duels.map(duel => ({
        ...duel,
        type: 'duel',
        sortDate: new Date(duel.createdAt)
      }));
    } else {
      allItems = games.map(game => ({
        ...game,
        type: 'game',
        sortDate: new Date(game.createdAt)
      }));
    }

    if (allItems.length === 0) {
      return (
        <div className="no-history">
          <p>–£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç –∏—Å—Ç–æ—Ä–∏–∏ {filterType === 'duel' ? '–¥—É—ç–ª–µ–π' : '–∏–≥—Ä'}</p>
        </div>
      );
    }

    return (
      <div className="history-list">
        {allItems.map((item) => {
          if (item.type === 'duel') {
            // –†–µ–Ω–¥–µ—Ä –¥—É—ç–ª–∏ –≤ —Ñ–æ—Ä–º–∞—Ç–µ –∏–≥—Ä—ã
            const duel = item;
            return (
              <div key={duel._id} className={`history-item ${duel.win ? 'win' : 'lose'}`}>
                <div className="history-icon">
                  ‚öîÔ∏è
                </div>
                <div className="history-details">
                  <div className="history-header">
                    <span className="history-title">–î—É—ç–ª—å {duel.result.duelType}</span>
                    <span className={`history-amount ${duel.win ? 'positive' : 'negative'}`}>
                      {duel.win ? '+' : '-'}{Math.abs(duel.profit).toFixed(2)} USDT
                    </span>
                  </div>
                  <div className="history-info">
                    <span className="history-date">{formatDate(duel.createdAt)}</span>
                    <span className="history-result">{duel.win ? '–ü–æ–±–µ–¥–∞' : '–ü–æ—Ä–∞–∂–µ–Ω–∏–µ'}</span>
                  </div>
                  <div className="history-details-row">
                    <div className="detail-item">
                      <span className="detail-label">–°—Ç–∞–≤–∫–∞:</span>
                      <span className="detail-value">{duel.bet.toFixed(2)} USDT</span>
                    </div>
                    <div className="detail-item">
                      <span className="detail-label">–ü—Ä–æ—Ç–∏–≤–Ω–∏–∫:</span>
                      <span className="detail-value">@{duel.result.opponent}</span>
                    </div>
                    <div className="detail-item">
                      <span className="detail-label">–°—á—ë—Ç:</span>
                      <span className="detail-value">{duel.result.playerScore}:{duel.result.opponentScore}</span>
                    </div>
                  </div>
                  <div className="game-specific-details">
                    <div className="detail-item">
                      <span className="detail-label">–§–æ—Ä–º–∞—Ç:</span>
                      <span className="detail-value">{duel.result.format.toUpperCase()}</span>
                    </div>
                    <div className="detail-item">
                      <span className="detail-label">ID —Å–µ—Å—Å–∏–∏:</span>
                      <span className="detail-value">{duel.result.sessionId}</span>
                    </div>
                  </div>
                </div>
              </div>
            );
          }

          // –†–µ–Ω–¥–µ—Ä –æ–±—ã—á–Ω–æ–π –∏–≥—Ä—ã
          const game = item;
          return (
            <div key={game._id} className={`history-item ${game.win ? 'win' : 'lose'}`}>
            <div className="history-icon">
              {getGameIcon(game.gameType)}
            </div>
            <div className="history-details">
              <div className="history-header">
                <span className="history-title">{getGameName(game.gameType)}</span>
                <span className={`history-amount ${game.win ? 'positive' : 'negative'}`}>
                  {game.win ? '+' : '-'}{Math.abs(game.profit).toFixed(2)} USDT
                </span>
              </div>
              <div className="history-info">
                <span className="history-date">{formatDate(game.createdAt)}</span>
                <span className="history-result">{game.win ? '–í—ã–∏–≥—Ä—ã—à' : '–ü—Ä–æ–∏–≥—Ä—ã—à'}</span>
              </div>
              <div className="history-details-row">
                <div className="detail-item">
                  <span className="detail-label">–°—Ç–∞–≤–∫–∞:</span>
                  <span className="detail-value">{game.bet.toFixed(2)} USDT</span>
                </div>
                <div className="detail-item">
                  <span className="detail-label">–ú–Ω–æ–∂–∏—Ç–µ–ª—å:</span>
                  <span className="detail-value">x{game.multiplier.toFixed(2)}</span>
                </div>
                <div className="detail-item">
                  <span className="detail-label">–ë–∞–ª–∞–Ω—Å –ø–æ—Å–ª–µ:</span>
                  <span className="detail-value">{game.balanceAfter.toFixed(2)} USDT</span>
                </div>
              </div>
              {game.gameType === 'coin' && game.result && (
                <div className="game-specific-details">
                  <div className="detail-item">
                    <span className="detail-label">–í—ã–±—Ä–∞–Ω–æ:</span>
                    <span className="detail-value">
                      {game.result.selectedSide === 'heads' ? '–û—Ä—ë–ª' : '–†–µ—à–∫–∞'}
                    </span>
                  </div>
                  <div className="detail-item">
                    <span className="detail-label">–†–µ–∑—É–ª—å—Ç–∞—Ç:</span>
                    <span className="detail-value">
                      {game.result.result === 'heads' ? '–û—Ä—ë–ª' : '–†–µ—à–∫–∞'}
                    </span>
                  </div>
                </div>
              )}
            </div>
            </div>
          );
        })}
      </div>
    );
  };

  // –†–µ–Ω–¥–µ—Ä –∏—Å—Ç–æ—Ä–∏–∏ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π
  const renderTransactions = () => {
    if (transactions.length === 0) {
      return (
        <div className="no-history">
          <p>–£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç –∏—Å—Ç–æ—Ä–∏–∏ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π</p>
        </div>
      );
    }

    return (
      <div className="history-list">
        {transactions.map((transaction) => (
          <div key={transaction._id} className="history-item">
            <div className="history-icon">
              {getTransactionIcon(transaction.type)}
            </div>
            <div className="history-details">
              <div className="history-header">
                <span className="history-title">{getTransactionName(transaction.type)}</span>
                <span className={`history-amount ${transaction.amount >= 0 ? 'positive' : 'negative'}`}>
                  {transaction.amount >= 0 ? '+' : ''}{transaction.amount.toFixed(2)} USDT
                </span>
              </div>
              <div className="history-info">
                <span className="history-date">{formatDate(transaction.createdAt)}</span>
                <span className="history-status">{transaction.status}</span>
              </div>
              <div className="history-details-row">
                <div className="detail-item">
                  <span className="detail-label">–ë–∞–ª–∞–Ω—Å –¥–æ:</span>
                  <span className="detail-value">{transaction.balanceBefore.toFixed(2)} USDT</span>
                </div>
                <div className="detail-item">
                  <span className="detail-label">–ë–∞–ª–∞–Ω—Å –ø–æ—Å–ª–µ:</span>
                  <span className="detail-value">{transaction.balanceAfter.toFixed(2)} USDT</span>
                </div>
              </div>
              {transaction.description && (
                <div className="transaction-description">
                  {transaction.description}
                </div>
              )}
            </div>
          </div>
        ))}
      </div>
    );
  };

  return (
    <div className="history-screen">
      <Header balance={balance} />

      <div className="history-header">
        <h1 className="history-title">–ò—Å—Ç–æ—Ä–∏—è</h1>
      </div>

      <div className="history-sections">
        <button 
          className={`section-button ${activeSection === 'games' ? 'active' : ''}`}
          onClick={() => {
            setActiveSection('games');
            setFilterType('all');
            fetchData('all', null);
          }}
        >
          –ò–≥—Ä—ã
        </button>
        <button 
          className={`section-button ${activeSection === 'transactions' ? 'active' : ''}`}
          onClick={() => {
            setActiveSection('transactions');
            setFilterType('all');
            fetchData(null, 'all');
          }}
        >
          –¢—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏
        </button>
      </div>

      {/* –§–∏–ª—å—Ç—Ä—ã */}
      {activeSection === 'games' ? renderGameFilters() : renderTransactionFilters()}

      {loading ? (
        <div className="history-loading">
          <div className="loader"></div>
          <p>–ó–∞–≥—Ä—É–∑–∫–∞ –∏—Å—Ç–æ—Ä–∏–∏...</p>
        </div>
      ) : error ? (
        <div className="history-error">
          <p>{error}</p>
          <button onClick={() => {
            setFilterType('all');
            fetchData();
          }}>–ü–æ–ø—Ä–æ–±–æ–≤–∞—Ç—å —Å–Ω–æ–≤–∞</button>
        </div>
      ) : (
        /* –ö–æ–Ω—Ç–µ–Ω—Ç –∏—Å—Ç–æ—Ä–∏–∏ */
        <div className="history-content">
          {activeSection === 'games' ? renderGames() : renderTransactions()}
        </div>
      )}
    </div>
  );
};

export default HistoryScreen;