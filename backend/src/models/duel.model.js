const mongoose = require('mongoose');

const duelSchema = new mongoose.Schema({
  // –ë–∞–∑–æ–≤–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –¥—É—ç–ª–∏
  sessionId: {
    type: String,
    unique: true,
    required: true,
    default: () => `duel_${Date.now()}_${Math.random().toString(36).substr(2, 9)}`
  },
  
  // –£—á–∞—Å—Ç–Ω–∏–∫–∏ –¥—É—ç–ª–∏
  challengerId: {
    type: String,
    required: true
  },
  challengerUsername: {
    type: String,
    required: true
  },
  opponentId: {
    type: String,
    default: null
  },
  opponentUsername: {
    type: String,
    default: null
  },
  
  // –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –∏–≥—Ä—ã
  gameType: {
    type: String,
    enum: ['üé≤', 'üéØ', '‚öΩ', '‚öΩÔ∏è', 'üèÄ', 'üé≥', 'üé∞'],
    required: true
  },
  format: {
    type: String,
    enum: ['bo1', 'bo3', 'bo5', 'bo7'],
    default: 'bo1'
  },
  winsRequired: {
    type: Number,
    required: true
  },
  
  // –§–∏–Ω–∞–Ω—Å–æ–≤–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è
  amount: {
    type: Number,
    required: true,
    min: 1,
    max: 1000
  },
  totalAmount: {
    type: Number,
    required: true
  },
  winAmount: {
    type: Number,
    required: true
  },
  commission: {
    type: Number,
    required: true
  },
  
  // –°—Ç–∞—Ç—É—Å –¥—É—ç–ª–∏
  status: {
    type: String,
    enum: ['pending', 'accepted', 'active', 'completed', 'cancelled', 'expired'],
    default: 'pending'
  },
  
  // –†–µ–∑—É–ª—å—Ç–∞—Ç—ã
  winnerId: {
    type: String,
    default: null
  },
  winnerUsername: {
    type: String,
    default: null
  },
  challengerScore: {
    type: Number,
    default: 0
  },
  opponentScore: {
    type: Number,
    default: 0
  },
  
  // –†–∞—É–Ω–¥—ã –¥—É—ç–ª–∏
  rounds: [{
    roundNumber: {
      type: Number,
      required: true
    },
    challengerResult: {
      type: Number,
      default: null
    },
    opponentResult: {
      type: Number,
      default: null
    },
    winnerId: {
      type: String,
      default: null
    },
    timestamp: {
      type: Date,
      default: Date.now
    }
  }],
  
  // –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —á–∞—Ç–µ
  chatId: {
    type: String,
    required: true
  },
  chatType: {
    type: String,
    enum: ['private', 'group', 'supergroup', 'channel'],
    required: true
  },
  messageId: {
    type: Number,
    default: null
  },
  
  // –í—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è
  expiresAt: {
    type: Date,
    default: null
  },
  startedAt: {
    type: Date,
    default: null
  },
  completedAt: {
    type: Date,
    default: null
  },
  
  // –ú–µ—Ç–∞–¥–∞–Ω–Ω—ã–µ
  metadata: {
    type: mongoose.Schema.Types.Mixed,
    default: {}
  }
}, {
  timestamps: true
});

// –ò–Ω–¥–µ–∫—Å—ã
duelSchema.index({ sessionId: 1 });
duelSchema.index({ challengerId: 1 });
duelSchema.index({ opponentId: 1 });
duelSchema.index({ status: 1 });
duelSchema.index({ chatId: 1 });
duelSchema.index({ winnerId: 1 });
duelSchema.index({ gameType: 1 });
duelSchema.index({ createdAt: -1 });

// –í–∏—Ä—Ç—É–∞–ª—å–Ω—ã–µ –ø–æ–ª—è
duelSchema.virtual('gameName').get(function() {
  const gameNames = {
    'üé≤': '–ö–æ—Å—Ç–∏',
    'üéØ': '–î–∞—Ä—Ç—Å',
    '‚öΩ': '–§—É—Ç–±–æ–ª',
    '‚öΩÔ∏è': '–§—É—Ç–±–æ–ª',
    'üèÄ': '–ë–∞—Å–∫–µ—Ç–±–æ–ª',
    'üé≥': '–ë–æ—É–ª–∏–Ω–≥',
    'üé∞': '–°–ª–æ—Ç—ã'
  };
  return gameNames[this.gameType] || '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∏–≥—Ä–∞';
});

duelSchema.virtual('formatName').get(function() {
  const formatNames = {
    'bo1': 'Bo1 (1 —Ä–∞—É–Ω–¥)',
    'bo3': 'Bo3 (–¥–æ 2 –ø–æ–±–µ–¥)',
    'bo5': 'Bo5 (–¥–æ 3 –ø–æ–±–µ–¥)',
    'bo7': 'Bo7 (–¥–æ 4 –ø–æ–±–µ–¥)'
  };
  return formatNames[this.format] || '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç';
});

// –ú–µ—Ç–æ–¥—ã —ç–∫–∑–µ–º–ø–ª—è—Ä–∞
duelSchema.methods.isExpired = function() {
  return this.expiresAt && new Date() > this.expiresAt;
};

duelSchema.methods.canAccept = function(userId, username = null) {
  // –û—Å–Ω–æ–≤–Ω—ã–µ –ø—Ä–æ–≤–µ—Ä–∫–∏
  if (this.status !== 'pending' || this.isExpired() || this.challengerId === userId) {
    return false;
  }
  
  // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –º–µ—Å—Ç–æ –æ–ø–ø–æ–Ω–µ–Ω—Ç–∞ —Å–≤–æ–±–æ–¥–Ω–æ
  if (this.opponentId && this.opponentId !== userId) {
    return false;
  }
  
  // üîí –ö–†–ò–¢–ò–ß–ï–°–ö–ê–Ø –ü–†–û–í–ï–†–ö–ê: –ù–∞–ø—Ä–∞–≤–ª–µ–Ω–Ω–∞—è –¥—É—ç–ª—å
  if (this.opponentUsername && username && this.opponentUsername !== username) {
    console.warn(`üö´ DUEL SECURITY: –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å ${username} –ø—ã—Ç–∞–µ—Ç—Å—è –ø—Ä–∏–Ω—è—Ç—å –¥—É—ç–ª—å, –ø—Ä–µ–¥–Ω–∞–∑–Ω–∞—á–µ–Ω–Ω—É—é –¥–ª—è ${this.opponentUsername}`);
    return false;
  }
  
  return true;
};

duelSchema.methods.isParticipant = function(userId) {
  return this.challengerId === userId || this.opponentId === userId;
};

// –•—É–∫–∏ –º–æ–¥–µ–ª–∏
duelSchema.pre('save', function(next) {
  // –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º —Ñ–∏–Ω–∞–Ω—Å–æ–≤—ã–µ –ø–æ–ª—è
  if (this.isNew || this.isModified('amount')) {
    this.totalAmount = this.amount * 2;
    this.winAmount = this.totalAmount * 0.95;
    this.commission = this.totalAmount * 0.05;
  }
  
  // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–±–µ–¥ –¥–ª—è —Ñ–æ—Ä–º–∞—Ç–∞
  if (this.isNew || this.isModified('format')) {
    const winsMap = { bo1: 1, bo3: 2, bo5: 3, bo7: 4 };
    this.winsRequired = winsMap[this.format] || 1;
  }
  
  // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –≤—Ä–µ–º—è –∏—Å—Ç–µ—á–µ–Ω–∏—è (5 –º–∏–Ω—É—Ç –¥–ª—è –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏–π)
  if (this.isNew && this.status === 'pending') {
    this.expiresAt = new Date(Date.now() + 5 * 60 * 1000);
  }
  
  // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –≤—Ä–µ–º—è –Ω–∞—á–∞–ª–∞ –ø—Ä–∏ –ø—Ä–∏–Ω—è—Ç–∏–∏ –¥—É—ç–ª–∏
  if (this.isModified('status') && this.status === 'active' && !this.startedAt) {
    this.startedAt = new Date();
  }
  
  // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –≤—Ä–µ–º—è –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –ø—Ä–∏ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–∏ –¥—É—ç–ª–∏
  if (this.isModified('status') && this.status === 'completed' && !this.completedAt) {
    this.completedAt = new Date();
  }
  
  next();
});

module.exports = mongoose.model('Duel', duelSchema);