// emoji-duel.handler.js
const { Markup } = require('telegraf');
const config = require('../config');
const apiService = require('../services/api.service');

/**
 * –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –¥–ª—è PvP –¥—É—ç–ª–µ–π —á–µ—Ä–µ–∑ —ç–º–æ–¥–∑–∏
 */
function registerEmojiDuelHandlers(bot) {
  
  // –û–±—Ä–∞–±–æ—Ç–∫–∞ —É–ø–æ–º–∏–Ω–∞–Ω–∏—è –±–æ—Ç–∞ –≤ –≥—Ä—É–ø–ø–∞—Ö –¥–ª—è –¥—É—ç–ª–µ–π
  bot.on('text', async (ctx) => {
    try {
      const text = ctx.message.text;
      const botUsername = ctx.botInfo.username;
      
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º —É–ø–æ–º–∏–Ω–∞–Ω–∏–µ –±–æ—Ç–∞ –≤ –≥—Ä—É–ø–ø–∞—Ö/–∫–∞–Ω–∞–ª–∞—Ö
      if (ctx.chat.type !== 'private' && text.includes(`@${botUsername}`)) {
        
        // –ü–∞—Ä—Å–∏–º –∫–æ–º–∞–Ω–¥—É –¥—É—ç–ª–∏: @bot duel @username 50 üé≤ bo3
        const duelMatch = text.match(/@\w+\s+duel\s+@(\w+)\s+(\d+)\s*(üé≤|üéØ|‚öΩ|üèÄ|üé∞|üé≥)?\s*(bo\d+)?/i);
        
        if (duelMatch) {
          const opponentUsername = duelMatch[1];
          const amount = parseInt(duelMatch[2]);
          const gameType = duelMatch[3] || 'üé≤';
          const format = duelMatch[4] || 'bo1';
          
          // –í–∞–ª–∏–¥–∞—Ü–∏—è —Å—É–º–º—ã
          if (amount < 1 || amount > 1000) {
            await ctx.reply('‚ùå –°—É–º–º–∞ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –æ—Ç 1 –¥–æ 1000 USDT');
            return;
          }
          
          // –û–ø—Ä–µ–¥–µ–ª—è–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–±–µ–¥ –¥–ª—è —Ñ–æ—Ä–º–∞—Ç–∞
          const winsRequired = getWinsRequired(format);
          
          // –°–æ–∑–¥–∞–µ–º –∫–Ω–æ–ø–∫–∏ –¥–ª—è –¥—É—ç–ª–∏
          const keyboard = Markup.inlineKeyboard([
            [
              Markup.button.callback(`‚úÖ –ü—Ä–∏–Ω—è—Ç—å ${gameType}`, `emoji_accept_${ctx.from.id}_${amount}_${gameType}_${format}`),
              Markup.button.callback('‚ùå –û—Ç–∫–ª–æ–Ω–∏—Ç—å', `emoji_decline_${ctx.from.id}`)
            ]
          ]);
          
          await ctx.reply(
            `${gameType} **–í–´–ó–û–í –ù–ê –î–£–≠–õ–¨** ${gameType}\n\n` +
            `üë§ @${ctx.from.username} –≤—ã–∑—ã–≤–∞–µ—Ç @${opponentUsername}!\n` +
            `üí∞ –°—Ç–∞–≤–∫–∞: ${amount} USDT (–∑–∞ –≤—Å—é —Å–µ—Ä–∏—é)\n` +
            `üéÆ –ò–≥—Ä–∞: ${getGameName(gameType)}\n` +
            `üèÜ –§–æ—Ä–º–∞—Ç: ${format.toUpperCase()} (–¥–æ ${winsRequired} –ø–æ–±–µ–¥)\n` +
            `‚è± –í—ã–∑–æ–≤ –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª–µ–Ω 5 –º–∏–Ω—É—Ç`,
            {
              parse_mode: 'Markdown',
              reply_markup: keyboard
            }
          );
        }
      }
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —É–ø–æ–º–∏–Ω–∞–Ω–∏—è:', error);
    }
  });
  
  // –û–±—Ä–∞–±–æ—Ç–∫–∞ –ø—Ä–∏–Ω—è—Ç–∏—è —ç–º–æ–¥–∑–∏ –¥—É—ç–ª–∏
  bot.action(/^emoji_accept_(\d+)_(\d+)_(üé≤|üéØ|‚öΩ|üèÄ|üé∞|üé≥)_(bo\d+)$/, async (ctx) => {
    try {
      const challengerId = ctx.match[1];
      const amount = parseInt(ctx.match[2]);
      const gameType = ctx.match[3];
      const format = ctx.match[4];
      const opponentId = ctx.from.id.toString();
      
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —ç—Ç–æ –Ω–µ —Ç–æ—Ç –∂–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å
      if (challengerId === opponentId) {
        await ctx.answerCbQuery('‚ùå –ù–µ–ª—å–∑—è –ø—Ä–∏–Ω—è—Ç—å —Å–≤–æ–π —Å–æ–±—Å—Ç–≤–µ–Ω–Ω—ã–π –≤—ã–∑–æ–≤', true);
        return;
      }
      
      await ctx.answerCbQuery('‚è≥ –°–æ–∑–¥–∞–µ–º –¥—É—ç–ª—å...');
      
      // –ò–∑–≤–ª–µ–∫–∞–µ–º username –∏–∑ —Å–æ–æ–±—â–µ–Ω–∏—è
      const messageText = ctx.callbackQuery.message.text;
      const challengerMatch = messageText.match(/@(\w+)\s+–≤—ã–∑—ã–≤–∞–µ—Ç/);
      const challengerUsername = challengerMatch ? challengerMatch[1] : 'Unknown';
      
      // –°–æ–∑–¥–∞–µ–º –¥—É—ç–ª—å —á–µ—Ä–µ–∑ API
      const duelData = await apiService.createPvPChallenge({
        challengerId,
        challengerUsername,
        opponentId,
        opponentUsername: ctx.from.username,
        amount,
        gameType,
        format,
        winsRequired: getWinsRequired(format),
        chatId: ctx.chat.id.toString(),
        chatType: ctx.chat.type,
        messageId: ctx.callbackQuery.message.message_id
      });
      
      // –°—Ä–∞–∑—É –ø—Ä–∏–Ω–∏–º–∞–µ–º –¥—É—ç–ª—å
      const response = await apiService.respondToPvPChallenge(
        duelData.data.duelId,
        opponentId,
        'accept'
      );
      
      // –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
      await ctx.editMessageText(
        `${gameType} **–î–£–≠–õ–¨ –ü–†–ò–ù–Ø–¢–ê!** ${gameType}\n\n` +
        `‚öîÔ∏è @${challengerUsername} VS @${ctx.from.username}\n` +
        `üí∞ –ë–∞–Ω–∫: ${amount * 2} USDT\n` +
        `üèÜ –§–æ—Ä–º–∞—Ç: ${format.toUpperCase()}\n\n` +
        `üéÆ –ù–∞—á–∏–Ω–∞–µ–º —á–µ—Ä–µ–∑ 3 —Å–µ–∫—É–Ω–¥—ã...`,
        { parse_mode: 'Markdown' }
      );
      
      // –ó–∞–ø—É—Å–∫–∞–µ–º –∏–≥—Ä—É —á–µ—Ä–µ–∑ 3 —Å–µ–∫—É–Ω–¥—ã
      setTimeout(async () => {
        await startEmojiDuel(ctx, duelData.data, gameType);
      }, 3000);
      
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏–Ω—è—Ç–∏—è –¥—É—ç–ª–∏:', error);
      await ctx.answerCbQuery('‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞', true);
    }
  });
  
  // –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—Ç–∫–ª–æ–Ω–µ–Ω–∏—è —ç–º–æ–¥–∑–∏ –¥—É—ç–ª–∏
  bot.action(/^emoji_decline_(\d+)$/, async (ctx) => {
    try {
      const challengerId = ctx.match[1];
      
      await ctx.answerCbQuery('‚ùå –î—É—ç–ª—å –æ—Ç–∫–ª–æ–Ω–µ–Ω–∞');
      
      await ctx.editMessageText(
        `‚ùå **–î–£–≠–õ–¨ –û–¢–ö–õ–û–ù–ï–ù–ê** ‚ùå\n\n` +
        `@${ctx.from.username} –æ—Ç–∫–ª–æ–Ω–∏–ª(–∞) –≤—ã–∑–æ–≤`,
        { parse_mode: 'Markdown' }
      );
      
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ –æ—Ç–∫–ª–æ–Ω–µ–Ω–∏—è –¥—É—ç–ª–∏:', error);
    }
  });
  
  // –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ä–µ–≤–∞–Ω—à–∞
  bot.action(/^emoji_rematch_(.+)$/, async (ctx) => {
    try {
      const oldSessionId = ctx.match[1];
      const userId = ctx.from.id.toString();
      
      await ctx.answerCbQuery('‚è≥ –°–æ–∑–¥–∞–µ–º —Ä–µ–≤–∞–Ω—à...');
      
      // –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ —Å—Ç–∞—Ä–æ–π –¥—É—ç–ª–∏
      const oldDuel = await apiService.getPvPSession(oldSessionId, userId);
      
      // –ú–µ–Ω—è–µ–º –º–µ—Å—Ç–∞–º–∏ –∏–≥—Ä–æ–∫–æ–≤ –¥–ª—è —Ä–µ–≤–∞–Ω—à–∞
      const isChallenger = oldDuel.data.challengerId === userId;
      const newChallenger = isChallenger ? oldDuel.data.opponentId : oldDuel.data.challengerId;
      const newChallengerUsername = isChallenger ? oldDuel.data.opponentUsername : oldDuel.data.challengerUsername;
      const newOpponent = isChallenger ? oldDuel.data.challengerId : oldDuel.data.opponentId;
      const newOpponentUsername = isChallenger ? oldDuel.data.challengerUsername : oldDuel.data.opponentUsername;
      
      // –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—É—é –¥—É—ç–ª—å
      const newDuel = await apiService.createPvPChallenge({
        challengerId: newChallenger,
        challengerUsername: newChallengerUsername,
        opponentId: newOpponent,
        opponentUsername: newOpponentUsername,
        amount: oldDuel.data.amount,
        gameType: oldDuel.data.gameType,
        format: oldDuel.data.format,
        winsRequired: oldDuel.data.winsRequired,
        chatId: ctx.chat.id.toString(),
        chatType: ctx.chat.type,
        messageId: ctx.callbackQuery.message.message_id
      });
      
      await ctx.reply(
        `üîÑ **–†–ï–í–ê–ù–®!** üîÑ\n\n` +
        `@${newChallengerUsername} –≤—ã–∑—ã–≤–∞–µ—Ç @${newOpponentUsername} –Ω–∞ —Ä–µ–≤–∞–Ω—à!\n` +
        `üí∞ –°—Ç–∞–≤–∫–∞: ${oldDuel.data.amount} USDT\n` +
        `üéÆ –ò–≥—Ä–∞: ${getGameName(oldDuel.data.gameType)}\n` +
        `üèÜ –§–æ—Ä–º–∞—Ç: ${oldDuel.data.format.toUpperCase()}`,
        {
          parse_mode: 'Markdown',
          reply_markup: Markup.inlineKeyboard([
            [
              Markup.button.callback('‚úÖ –ü—Ä–∏–Ω—è—Ç—å —Ä–µ–≤–∞–Ω—à', `emoji_accept_${newChallenger}_${oldDuel.data.amount}_${oldDuel.data.gameType}_${oldDuel.data.format}`),
              Markup.button.callback('‚ùå –û—Ç–∫–ª–æ–Ω–∏—Ç—å', `emoji_decline_${newChallenger}`)
            ]
          ])
        }
      );
      
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è —Ä–µ–≤–∞–Ω—à–∞:', error);
      await ctx.answerCbQuery('‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å —Ä–µ–≤–∞–Ω—à', true);
    }
  });
}

/**
 * –ó–∞–ø—É—Å–∫ —ç–º–æ–¥–∑–∏ –¥—É—ç–ª–∏
 */
async function startEmojiDuel(ctx, duelData, gameType) {
  try {
    const sessionId = duelData.sessionId;
    let currentRound = 0;
    let score = { challenger: 0, opponent: 0 };
    
    // –§—É–Ω–∫—Ü–∏—è –¥–ª—è –∏–≥—Ä—ã –æ–¥–Ω–æ–≥–æ —Ä–∞—É–Ω–¥–∞
    async function playRound() {
      currentRound++;
      
      await ctx.reply(
        `${gameType} **–†–ê–£–ù–î ${currentRound}** ${gameType}\n` +
        `üìä –°—á–µ—Ç: ${score.challenger}-${score.opponent}`,
        { parse_mode: 'Markdown' }
      );
      
      // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —ç–º–æ–¥–∑–∏ –¥–ª—è –ø–µ—Ä–≤–æ–≥–æ –∏–≥—Ä–æ–∫–∞
      await ctx.reply(`@${duelData.challengerUsername} –±—Ä–æ—Å–∞–µ—Ç...`);
      const result1 = await ctx.replyWithDice({ emoji: gameType });
      const value1 = result1.dice.value;
      
      // –ü–∞—É–∑–∞ –º–µ–∂–¥—É –±—Ä–æ—Å–∫–∞–º–∏
      await new Promise(resolve => setTimeout(resolve, 3000));
      
      // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —ç–º–æ–¥–∑–∏ –¥–ª—è –≤—Ç–æ—Ä–æ–≥–æ –∏–≥—Ä–æ–∫–∞
      await ctx.reply(`@${duelData.opponentUsername} –±—Ä–æ—Å–∞–µ—Ç...`);
      const result2 = await ctx.replyWithDice({ emoji: gameType });
      const value2 = result2.dice.value;
      
      // –ü–∞—É–∑–∞ –¥–ª—è –∞–Ω–∏–º–∞—Ü–∏–∏
      await new Promise(resolve => setTimeout(resolve, 4000));
      
      // –û–ø—Ä–µ–¥–µ–ª—è–µ–º –ø–æ–±–µ–¥–∏—Ç–µ–ª—è —Ä–∞—É–Ω–¥–∞ –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Ç–∏–ø–∞ –∏–≥—Ä—ã
      let roundWinner;
      const roundResult = determineRoundWinner(gameType, value1, value2);
      
      if (roundResult === 'player1') {
        roundWinner = 'challenger';
        score.challenger++;
        await ctx.reply(`‚úÖ –†–∞—É–Ω–¥ –≤—ã–∏–≥—Ä–∞–ª @${duelData.challengerUsername}! ${getResultText(gameType, value1, value2)}`);
      } else if (roundResult === 'player2') {
        roundWinner = 'opponent';
        score.opponent++;
        await ctx.reply(`‚úÖ –†–∞—É–Ω–¥ –≤—ã–∏–≥—Ä–∞–ª @${duelData.opponentUsername}! ${getResultText(gameType, value1, value2)}`);
      } else {
        await ctx.reply(`ü§ù –ù–∏—á—å—è! ${getResultText(gameType, value1, value2)} –ü–µ—Ä–µ–∏–≥—Ä—ã–≤–∞–µ–º...`);
        setTimeout(() => playRound(), 2000);
        return;
      }
      
      // –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç —Ä–∞—É–Ω–¥–∞ —á–µ—Ä–µ–∑ API
      await apiService.saveDuelRound(sessionId, {
        round: currentRound,
        challengerResult: value1,
        opponentResult: value2,
        winnerId: roundWinner === 'challenger' ? duelData.challengerId : duelData.opponentId
      });
      
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –ø–æ–±–µ–¥–∏—Ç–µ–ª—å —Å–µ—Ä–∏–∏
      if (score.challenger >= duelData.winsRequired) {
        await finishDuel(ctx, duelData, 'challenger', score);
      } else if (score.opponent >= duelData.winsRequired) {
        await finishDuel(ctx, duelData, 'opponent', score);
      } else {
        // –ò–≥—Ä–∞–µ–º —Å–ª–µ–¥—É—é—â–∏–π —Ä–∞—É–Ω–¥
        setTimeout(() => playRound(), 3000);
      }
    }
    
    // –ù–∞—á–∏–Ω–∞–µ–º –ø–µ—Ä–≤—ã–π —Ä–∞—É–Ω–¥
    await playRound();
    
  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ –≤ —ç–º–æ–¥–∑–∏ –¥—É—ç–ª–∏:', error);
    await ctx.reply('‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –≤–æ –≤—Ä–µ–º—è –∏–≥—Ä—ã');
  }
}

/**
 * –ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ –¥—É—ç–ª–∏
 */
async function finishDuel(ctx, duelData, winner, score) {
  try {
    const winnerId = winner === 'challenger' ? duelData.challengerId : duelData.opponentId;
    const winnerUsername = winner === 'challenger' ? duelData.challengerUsername : duelData.opponentUsername;
    const loserId = winner === 'challenger' ? duelData.opponentId : duelData.challengerId;
    const loserUsername = winner === 'challenger' ? duelData.opponentUsername : duelData.challengerUsername;
    
    // –ó–∞–≤–µ—Ä—à–∞–µ–º –¥—É—ç–ª—å —á–µ—Ä–µ–∑ API
    const result = await apiService.finishPvPDuel(duelData.sessionId, winnerId);
    
    // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ñ–∏–Ω–∞–ª—å–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
    await ctx.reply(
      `üèÜ **–ü–û–ë–ï–î–ò–¢–ï–õ–¨ –î–£–≠–õ–ò** üèÜ\n\n` +
      `üëë @${winnerUsername} –ø–æ–±–µ–∂–¥–∞–µ—Ç —Å–æ —Å—á–µ—Ç–æ–º ${score.challenger}-${score.opponent}!\n` +
      `üí∞ –í—ã–∏–≥—Ä—ã—à: ${result.data.winAmount} USDT\n` +
      `üòî @${loserUsername} –ø—Ä–æ–∏–≥—Ä—ã–≤–∞–µ—Ç ${duelData.amount} USDT\n\n` +
      `üéÆ GG WP!`,
      {
        parse_mode: 'Markdown',
        reply_markup: Markup.inlineKeyboard([
          [Markup.button.callback('üîÑ –†–µ–≤–∞–Ω—à', `emoji_rematch_${duelData.sessionId}`)]
        ])
      }
    );
    
  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –¥—É—ç–ª–∏:', error);
  }
}

/**
 * –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏
 */
function getWinsRequired(format) {
  const formats = {
    'bo1': 1,
    'bo3': 2,
    'bo5': 3,
    'bo7': 4,
    'bo9': 5
  };
  return formats[format] || 1;
}

function getGameName(gameType) {
  const games = {
    'üé≤': '–ö–æ—Å—Ç–∏',
    'üéØ': '–î–∞—Ä—Ç—Å',
    '‚öΩ': '–§—É—Ç–±–æ–ª',
    'üèÄ': '–ë–∞—Å–∫–µ—Ç–±–æ–ª',
    'üé∞': '–°–ª–æ—Ç—ã',
    'üé≥': '–ë–æ—É–ª–∏–Ω–≥'
  };
  return games[gameType] || '–ò–≥—Ä–∞';
}

/**
 * –û–ø—Ä–µ–¥–µ–ª—è–µ—Ç –ø–æ–±–µ–¥–∏—Ç–µ–ª—è —Ä–∞—É–Ω–¥–∞ –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Ç–∏–ø–∞ –∏–≥—Ä—ã
 */
function determineRoundWinner(gameType, value1, value2) {
  switch (gameType) {
    case 'üé≤': // –ö–æ—Å—Ç–∏ - –±–æ–ª—å—à–µ –∑–Ω–∞—á–µ–Ω–∏–µ –ø–æ–±–µ–∂–¥–∞–µ—Ç
    case 'üé≥': // –ë–æ—É–ª–∏–Ω–≥ - –±–æ–ª—å—à–µ –∫–µ–≥–ª–µ–π –ø–æ–±–µ–∂–¥–∞–µ—Ç
      if (value1 > value2) return 'player1';
      if (value2 > value1) return 'player2';
      return 'draw';
      
    case 'üéØ': // –î–∞—Ä—Ç—Å - –ø–æ–ø–∞–¥–∞–Ω–∏–µ –≤ —Ü–µ–Ω—Ç—Ä (6) –ø–æ–±–µ–∂–¥–∞–µ—Ç
      if (value1 === 6 && value2 !== 6) return 'player1';
      if (value2 === 6 && value1 !== 6) return 'player2';
      if (value1 > value2) return 'player1';
      if (value2 > value1) return 'player2';
      return 'draw';
      
    case '‚öΩ': // –§—É—Ç–±–æ–ª - –≥–æ–ª (4,5) –ø–æ–±–µ–∂–¥–∞–µ—Ç
    case 'üèÄ': // –ë–∞—Å–∫–µ—Ç–±–æ–ª - –ø–æ–ø–∞–¥–∞–Ω–∏–µ (4,5) –ø–æ–±–µ–∂–¥–∞–µ—Ç
      const isGoal1 = value1 >= 4;
      const isGoal2 = value2 >= 4;
      if (isGoal1 && !isGoal2) return 'player1';
      if (isGoal2 && !isGoal1) return 'player2';
      if (isGoal1 && isGoal2) return 'draw';
      if (!isGoal1 && !isGoal2) return 'draw';
      break;
      
    case 'üé∞': // –°–ª–æ—Ç—ã - –≤—ã–∏–≥—Ä—ã—à–Ω—ã–µ –∫–æ–º–±–∏–Ω–∞—Ü–∏–∏
      const isWin1 = value1 >= 1 && value1 <= 64; // –ï—Å—Ç—å –≤—ã–∏–≥—Ä—ã—à
      const isWin2 = value2 >= 1 && value2 <= 64;
      if (isWin1 && !isWin2) return 'player1';
      if (isWin2 && !isWin1) return 'player2';
      if (value1 > value2) return 'player1';
      if (value2 > value1) return 'player2';
      return 'draw';
  }
  
  return 'draw';
}

/**
 * –ü–æ–ª—É—á–∞–µ—Ç —Ç–µ–∫—Å—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞ –¥–ª—è —Ä–∞–∑–Ω—ã—Ö —Ç–∏–ø–æ–≤ –∏–≥—Ä
 */
function getResultText(gameType, value1, value2) {
  switch (gameType) {
    case 'üé≤':
      return `(${value1} vs ${value2})`;
      
    case 'üéØ':
      const dartResult1 = value1 === 6 ? '–¶–µ–Ω—Ç—Ä!' : `${value1} –æ—á–∫–æ–≤`;
      const dartResult2 = value2 === 6 ? '–¶–µ–Ω—Ç—Ä!' : `${value2} –æ—á–∫–æ–≤`;
      return `(${dartResult1} vs ${dartResult2})`;
      
    case '‚öΩ':
      const goal1 = value1 >= 4 ? '–ì–û–õ!' : '–ú–∏–º–æ';
      const goal2 = value2 >= 4 ? '–ì–û–õ!' : '–ú–∏–º–æ';
      return `(${goal1} vs ${goal2})`;
      
    case 'üèÄ':
      const basket1 = value1 >= 4 ? '–ü–æ–ø–∞–ª!' : '–ú–∏–º–æ';
      const basket2 = value2 >= 4 ? '–ü–æ–ø–∞–ª!' : '–ú–∏–º–æ';
      return `(${basket1} vs ${basket2})`;
      
    case 'üé∞':
      const slot1 = value1 >= 1 && value1 <= 64 ? '–í—ã–∏–≥—Ä—ã—à!' : '–ü—Ä–æ–∏–≥—Ä—ã—à';
      const slot2 = value2 >= 1 && value2 <= 64 ? '–í—ã–∏–≥—Ä—ã—à!' : '–ü—Ä–æ–∏–≥—Ä—ã—à';
      return `(${slot1} vs ${slot2})`;
      
    case 'üé≥':
      return `(${value1} –∫–µ–≥–ª–µ–π vs ${value2} –∫–µ–≥–ª–µ–π)`;
      
    default:
      return `(${value1} vs ${value2})`;
  }
}

module.exports = {
  registerEmojiDuelHandlers
};