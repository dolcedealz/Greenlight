// backend/src/utils/game-validation.js
/**
 * –£–Ω–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞–Ω–Ω–∞—è –≤–∞–ª–∏–¥–∞—Ü–∏—è –∏–≥—Ä–æ–≤—ã—Ö —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –¥–ª—è –¥—É—ç–ª–µ–π
 */

class GameValidation {
  constructor() {
    // –û–ø—Ä–µ–¥–µ–ª—è–µ–º –ø—Ä–∞–≤–∏–ª–∞ –¥–ª—è –∫–∞–∂–¥–æ–≥–æ —Ç–∏–ø–∞ –∏–≥—Ä—ã
    this.gameRules = {
      'üé≤': {
        name: '–ö–æ—Å—Ç–∏',
        minResult: 1,
        maxResult: 6,
        description: '–†–µ–∑—É–ª—å—Ç–∞—Ç –±—Ä–æ—Å–∫–∞ –∫–æ—Å—Ç–∏ (1-6)'
      },
      'üéØ': {
        name: '–î–∞—Ä—Ç—Å',
        minResult: 1,
        maxResult: 6,
        description: '–†–µ–∑—É–ª—å—Ç–∞—Ç –±—Ä–æ—Å–∫–∞ –¥—Ä–æ—Ç–∏–∫–∞ (1-6)'
      },
      '‚öΩ': {
        name: '–§—É—Ç–±–æ–ª',
        minResult: 1,
        maxResult: 5,
        description: '–†–µ–∑—É–ª—å—Ç–∞—Ç —Ñ—É—Ç–±–æ–ª—å–Ω–æ–≥–æ –º—è—á–∞ (1-5)'
      },
      'üèÄ': {
        name: '–ë–∞—Å–∫–µ—Ç–±–æ–ª',
        minResult: 1,
        maxResult: 5,
        description: '–†–µ–∑—É–ª—å—Ç–∞—Ç –±–∞—Å–∫–µ—Ç–±–æ–ª—å–Ω–æ–≥–æ –º—è—á–∞ (1-5)'
      },
      'üé≥': {
        name: '–ë–æ—É–ª–∏–Ω–≥',
        minResult: 0,
        maxResult: 10,
        description: '–†–µ–∑—É–ª—å—Ç–∞—Ç –±–æ—É–ª–∏–Ω–≥–∞ (0-10 –∫–µ–≥–ª–µ–π)'
      },
      'üé∞': {
        name: '–°–ª–æ—Ç—ã',
        minResult: 1,
        maxResult: 64,
        description: '–†–µ–∑—É–ª—å—Ç–∞—Ç —Å–ª–æ—Ç–∞ (1-64)'
      }
    };

    // –î–æ–ø—É—Å—Ç–∏–º—ã–µ —Ç–∏–ø—ã –∏–≥—Ä
    this.validGameTypes = Object.keys(this.gameRules);
    
    // –î–æ–ø—É—Å—Ç–∏–º—ã–µ —Ñ–æ—Ä–º–∞—Ç—ã –¥—É—ç–ª–µ–π
    this.validFormats = ['bo1', 'bo3', 'bo5', 'bo7'];
  }

  /**
   * –í–∞–ª–∏–¥–∏—Ä—É–µ—Ç —Ç–∏–ø –∏–≥—Ä—ã
   * @param {string} gameType - –¢–∏–ø –∏–≥—Ä—ã (—ç–º–æ–¥–∑–∏)
   * @returns {Object} - { isValid: boolean, error?: string }
   */
  validateGameType(gameType) {
    if (!gameType) {
      return {
        isValid: false,
        error: '–¢–∏–ø –∏–≥—Ä—ã –Ω–µ —É–∫–∞–∑–∞–Ω'
      };
    }

    if (!this.validGameTypes.includes(gameType)) {
      return {
        isValid: false,
        error: `–ù–µ–ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–π —Ç–∏–ø –∏–≥—Ä—ã: ${gameType}. –î–æ—Å—Ç—É–ø–Ω—ã–µ: ${this.validGameTypes.join(', ')}`
      };
    }

    return { isValid: true };
  }

  /**
   * –í–∞–ª–∏–¥–∏—Ä—É–µ—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç –∏–≥—Ä—ã
   * @param {string} gameType - –¢–∏–ø –∏–≥—Ä—ã
   * @param {number} result - –†–µ–∑—É–ª—å—Ç–∞—Ç –∏–≥—Ä—ã
   * @returns {Object} - { isValid: boolean, error?: string }
   */
  validateGameResult(gameType, result) {
    // –°–Ω–∞—á–∞–ª–∞ –ø—Ä–æ–≤–µ—Ä—è–µ–º —Ç–∏–ø –∏–≥—Ä—ã
    const gameTypeValidation = this.validateGameType(gameType);
    if (!gameTypeValidation.isValid) {
      return gameTypeValidation;
    }

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ result —ç—Ç–æ —á–∏—Å–ª–æ
    if (typeof result !== 'number' || isNaN(result)) {
      return {
        isValid: false,
        error: '–†–µ–∑—É–ª—å—Ç–∞—Ç –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å —á–∏—Å–ª–æ–º'
      };
    }

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ result —Ü–µ–ª–æ–µ —á–∏—Å–ª–æ
    if (!Number.isInteger(result)) {
      return {
        isValid: false,
        error: '–†–µ–∑—É–ª—å—Ç–∞—Ç –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å —Ü–µ–ª—ã–º —á–∏—Å–ª–æ–º'
      };
    }

    const rules = this.gameRules[gameType];
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–∏–∞–ø–∞–∑–æ–Ω
    if (result < rules.minResult || result > rules.maxResult) {
      return {
        isValid: false,
        error: `–†–µ–∑—É–ª—å—Ç–∞—Ç –¥–ª—è ${rules.name} –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –æ—Ç ${rules.minResult} –¥–æ ${rules.maxResult}`
      };
    }

    return { isValid: true };
  }

  /**
   * –í–∞–ª–∏–¥–∏—Ä—É–µ—Ç —Ñ–æ—Ä–º–∞—Ç –¥—É—ç–ª–∏
   * @param {string} format - –§–æ—Ä–º–∞—Ç –¥—É—ç–ª–∏
   * @returns {Object} - { isValid: boolean, error?: string }
   */
  validateFormat(format) {
    if (!format) {
      return {
        isValid: false,
        error: '–§–æ—Ä–º–∞—Ç –¥—É—ç–ª–∏ –Ω–µ —É–∫–∞–∑–∞–Ω'
      };
    }

    if (!this.validFormats.includes(format)) {
      return {
        isValid: false,
        error: `–ù–µ–ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–π —Ñ–æ—Ä–º–∞—Ç: ${format}. –î–æ—Å—Ç—É–ø–Ω—ã–µ: ${this.validFormats.join(', ')}`
      };
    }

    return { isValid: true };
  }

  /**
   * –í–∞–ª–∏–¥–∏—Ä—É–µ—Ç —Å—É–º–º—É —Å—Ç–∞–≤–∫–∏
   * @param {number} amount - –°—É–º–º–∞ —Å—Ç–∞–≤–∫–∏
   * @returns {Object} - { isValid: boolean, error?: string }
   */
  validateAmount(amount) {
    if (typeof amount !== 'number' || isNaN(amount)) {
      return {
        isValid: false,
        error: '–°—É–º–º–∞ —Å—Ç–∞–≤–∫–∏ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å —á–∏—Å–ª–æ–º'
      };
    }

    if (amount < 1) {
      return {
        isValid: false,
        error: '–ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è —Å—Ç–∞–≤–∫–∞: 1 USDT'
      };
    }

    if (amount > 1000) {
      return {
        isValid: false,
        error: '–ú–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è —Å—Ç–∞–≤–∫–∞: 1000 USDT'
      };
    }

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ —Å—É–º–º–∞ –∏–º–µ–µ—Ç –Ω–µ –±–æ–ª–µ–µ 2 –∑–Ω–∞–∫–æ–≤ –ø–æ—Å–ª–µ –∑–∞–ø—è—Ç–æ–π
    if (Number(amount.toFixed(2)) !== amount) {
      return {
        isValid: false,
        error: '–°—É–º–º–∞ —Å—Ç–∞–≤–∫–∏ –¥–æ–ª–∂–Ω–∞ –∏–º–µ—Ç—å –Ω–µ –±–æ–ª–µ–µ 2 –∑–Ω–∞–∫–æ–≤ –ø–æ—Å–ª–µ –∑–∞–ø—è—Ç–æ–π'
      };
    }

    return { isValid: true };
  }

  /**
   * –í–∞–ª–∏–¥–∏—Ä—É–µ—Ç username
   * @param {string} username - Username –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
   * @returns {Object} - { isValid: boolean, error?: string }
   */
  validateUsername(username) {
    if (!username) {
      return {
        isValid: false,
        error: 'Username –Ω–µ —É–∫–∞–∑–∞–Ω'
      };
    }

    if (typeof username !== 'string') {
      return {
        isValid: false,
        error: 'Username –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å —Å—Ç—Ä–æ–∫–æ–π'
      };
    }

    // –£–±–∏—Ä–∞–µ–º —Å–∏–º–≤–æ–ª @ –µ—Å–ª–∏ –æ–Ω –µ—Å—Ç—å
    const cleanUsername = username.replace('@', '');

    if (cleanUsername.length < 5) {
      return {
        isValid: false,
        error: 'Username –¥–æ–ª–∂–µ–Ω —Å–æ–¥–µ—Ä–∂–∞—Ç—å –º–∏–Ω–∏–º—É–º 5 —Å–∏–º–≤–æ–ª–æ–≤'
      };
    }

    if (cleanUsername.length > 32) {
      return {
        isValid: false,
        error: 'Username –¥–æ–ª–∂–µ–Ω —Å–æ–¥–µ—Ä–∂–∞—Ç—å –º–∞–∫—Å–∏–º—É–º 32 —Å–∏–º–≤–æ–ª–∞'
      };
    }

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ username —Å–æ–¥–µ—Ä–∂–∏—Ç —Ç–æ–ª—å–∫–æ –¥–æ–ø—É—Å—Ç–∏–º—ã–µ —Å–∏–º–≤–æ–ª—ã
    const validUsernameRegex = /^[a-zA-Z0-9_]+$/;
    if (!validUsernameRegex.test(cleanUsername)) {
      return {
        isValid: false,
        error: 'Username –º–æ–∂–µ—Ç —Å–æ–¥–µ—Ä–∂–∞—Ç—å —Ç–æ–ª—å–∫–æ –±—É–∫–≤—ã, —Ü–∏—Ñ—Ä—ã –∏ –ø–æ–¥—á–µ—Ä–∫–∏–≤–∞–Ω–∏—è'
      };
    }

    return { isValid: true };
  }

  /**
   * –í–∞–ª–∏–¥–∏—Ä—É–µ—Ç ID —Å–µ—Å—Å–∏–∏ –¥—É—ç–ª–∏
   * @param {string} sessionId - ID —Å–µ—Å—Å–∏–∏
   * @returns {Object} - { isValid: boolean, error?: string }
   */
  validateSessionId(sessionId) {
    if (!sessionId) {
      return {
        isValid: false,
        error: 'ID —Å–µ—Å—Å–∏–∏ –Ω–µ —É–∫–∞–∑–∞–Ω'
      };
    }

    if (typeof sessionId !== 'string') {
      return {
        isValid: false,
        error: 'ID —Å–µ—Å—Å–∏–∏ –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å —Å—Ç—Ä–æ–∫–æ–π'
      };
    }

    if (sessionId.length < 10) {
      return {
        isValid: false,
        error: 'ID —Å–µ—Å—Å–∏–∏ —Å–ª–∏—à–∫–æ–º –∫–æ—Ä–æ—Ç–∫–∏–π'
      };
    }

    return { isValid: true };
  }

  /**
   * –ö–æ–º–ø–ª–µ–∫—Å–Ω–∞—è –≤–∞–ª–∏–¥–∞—Ü–∏—è —Å–æ–∑–¥–∞–Ω–∏—è –¥—É—ç–ª–∏
   * @param {Object} duelData - –î–∞–Ω–Ω—ã–µ –¥—É—ç–ª–∏
   * @returns {Object} - { isValid: boolean, errors: Array }
   */
  validateDuelCreation(duelData) {
    const errors = [];

    // –í–∞–ª–∏–¥–∏—Ä—É–µ–º –≤—Å–µ –ø–æ–ª—è
    const validations = [
      { name: 'gameType', validator: () => this.validateGameType(duelData.gameType) },
      { name: 'format', validator: () => this.validateFormat(duelData.format) },
      { name: 'amount', validator: () => this.validateAmount(duelData.amount) }
    ];

    // –î–æ–±–∞–≤–ª—è–µ–º –≤–∞–ª–∏–¥–∞—Ü–∏—é username –µ—Å–ª–∏ —É–∫–∞–∑–∞–Ω
    if (duelData.targetUsername || duelData.opponentUsername) {
      const username = duelData.targetUsername || duelData.opponentUsername;
      validations.push({ 
        name: 'username', 
        validator: () => this.validateUsername(username) 
      });
    }

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤—Å–µ –≤–∞–ª–∏–¥–∞—Ü–∏–∏
    for (const validation of validations) {
      const result = validation.validator();
      if (!result.isValid) {
        errors.push(`${validation.name}: ${result.error}`);
      }
    }

    return {
      isValid: errors.length === 0,
      errors: errors
    };
  }

  /**
   * –í–∞–ª–∏–¥–∞—Ü–∏—è —Ö–æ–¥–∞ –≤ –¥—É—ç–ª–∏
   * @param {Object} moveData - –î–∞–Ω–Ω—ã–µ —Ö–æ–¥–∞
   * @returns {Object} - { isValid: boolean, errors: Array }
   */
  validateMove(moveData) {
    const errors = [];

    // –í–∞–ª–∏–¥–∏—Ä—É–µ–º sessionId
    const sessionValidation = this.validateSessionId(moveData.sessionId);
    if (!sessionValidation.isValid) {
      errors.push(`sessionId: ${sessionValidation.error}`);
    }

    // –í–∞–ª–∏–¥–∏—Ä—É–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç –µ—Å–ª–∏ —É–∫–∞–∑–∞–Ω gameType
    if (moveData.gameType && moveData.result !== undefined) {
      const resultValidation = this.validateGameResult(moveData.gameType, moveData.result);
      if (!resultValidation.isValid) {
        errors.push(`result: ${resultValidation.error}`);
      }
    }

    return {
      isValid: errors.length === 0,
      errors: errors
    };
  }

  /**
   * –ü–æ–ª—É—á–∞–µ—Ç –ø—Ä–∞–≤–∏–ª–∞ –¥–ª—è —Ç–∏–ø–∞ –∏–≥—Ä—ã
   * @param {string} gameType - –¢–∏–ø –∏–≥—Ä—ã
   * @returns {Object|null} - –ü—Ä–∞–≤–∏–ª–∞ –∏–≥—Ä—ã –∏–ª–∏ null
   */
  getGameRules(gameType) {
    return this.gameRules[gameType] || null;
  }

  /**
   * –ü–æ–ª—É—á–∞–µ—Ç —Å–ø–∏—Å–æ–∫ –≤—Å–µ—Ö –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –∏–≥—Ä
   * @returns {Array} - –ú–∞—Å—Å–∏–≤ —Ç–∏–ø–æ–≤ –∏–≥—Ä —Å –æ–ø–∏—Å–∞–Ω–∏–µ–º
   */
  getAllGames() {
    return Object.entries(this.gameRules).map(([type, rules]) => ({
      type,
      name: rules.name,
      description: rules.description,
      minResult: rules.minResult,
      maxResult: rules.maxResult
    }));
  }

  /**
   * –û–ø—Ä–µ–¥–µ–ª—è–µ—Ç –ø–æ–±–µ–¥–∏—Ç–µ–ª—è —Ä–∞—É–Ω–¥–∞
   * @param {string} gameType - –¢–∏–ø –∏–≥—Ä—ã
   * @param {number} result1 - –†–µ–∑—É–ª—å—Ç–∞—Ç –ø–µ—Ä–≤–æ–≥–æ –∏–≥—Ä–æ–∫–∞
   * @param {number} result2 - –†–µ–∑—É–ª—å—Ç–∞—Ç –≤—Ç–æ—Ä–æ–≥–æ –∏–≥—Ä–æ–∫–∞
   * @returns {string} - 'player1', 'player2' –∏–ª–∏ 'draw'
   */
  determineWinner(gameType, result1, result2) {
    // –í–∞–ª–∏–¥–∏—Ä—É–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
    const validation1 = this.validateGameResult(gameType, result1);
    const validation2 = this.validateGameResult(gameType, result2);
    
    if (!validation1.isValid || !validation2.isValid) {
      throw new Error('–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –¥–ª—è –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è –ø–æ–±–µ–¥–∏—Ç–µ–ª—è');
    }

    if (result1 > result2) {
      return 'player1';
    } else if (result2 > result1) {
      return 'player2';
    } else {
      return 'draw';
    }
  }
}

// Singleton instance
const gameValidation = new GameValidation();

module.exports = gameValidation;