// backend/src/services/cryptobot-setup.service.js
const axios = require('axios');

/**
 * –°–µ—Ä–≤–∏—Å –¥–ª—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ webhook'–æ–≤ CryptoBot
 */
class CryptoBotSetupService {
  constructor() {
    this.cryptoBotApiUrl = process.env.CRYPTO_PAY_API_URL || 'https://pay.crypt.bot/api';
    this.cryptoBotToken = process.env.CRYPTO_PAY_API_TOKEN;
    this.webhookUrl = process.env.CRYPTO_PAY_WEBHOOK_URL || 'https://greenlight-api-ghqh.onrender.com/webhooks/cryptobot';
    
    if (!this.cryptoBotToken) {
      console.warn('‚ö†Ô∏è CRYPTO_PAY_API_TOKEN –Ω–µ —É–∫–∞–∑–∞–Ω –≤ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è');
      return;
    }
    
    // –°–æ–∑–¥–∞–µ–º axios instance –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å CryptoBot API
    this.api = axios.create({
      baseURL: this.cryptoBotApiUrl,
      headers: {
        'Crypto-Pay-API-Token': this.cryptoBotToken,
        'Content-Type': 'application/json'
      },
      timeout: 30000
    });
  }

  /**
   * –¢–µ—Å—Ç–∏—Ä—É–µ—Ç —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ —Å CryptoBot API
   */
  async testConnection() {
    try {
      if (!this.cryptoBotToken) {
        console.log('‚ùå CryptoBot token –Ω–µ –Ω–∞–π–¥–µ–Ω, —Ç–µ—Å—Ç –ø—Ä–æ–ø—É—â–µ–Ω');
        return false;
      }

      console.log('üß™ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è —Å CryptoBot API...');
      
      // –ò–°–ü–†–ê–í–õ–ï–ù–û: –ò—Å–ø–æ–ª—å–∑—É–µ–º GET –∑–∞–ø—Ä–æ—Å –¥–ª—è getMe
      const response = await this.api.get('/getMe');
      
      if (response.data.ok) {
        console.log('‚úÖ –°–æ–µ–¥–∏–Ω–µ–Ω–∏–µ —Å CryptoBot API —Ä–∞–±–æ—Ç–∞–µ—Ç');
        console.log(`ü§ñ App name: ${response.data.result.name}`);
        console.log(`üÜî App ID: ${response.data.result.app_id}`);
        return true;
      } else {
        console.error('‚ùå –û—à–∏–±–∫–∞ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è —Å CryptoBot API:', response.data.error);
        return false;
      }
      
    } catch (error) {
      console.error('‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è –∫ CryptoBot API:', error.message);
      
      if (error.response) {
        console.error('üì° HTTP Status:', error.response.status);
        console.error('üìÑ Response:', error.response.data);
      }
      
      return false;
    }
  }

  /**
   * –ü–æ–ª—É—á–∞–µ—Ç —Å–ø–∏—Å–æ–∫ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –º–µ—Ç–æ–¥–æ–≤ API
   */
  async getAvailableMethods() {
    try {
      console.log('üîç –ü–æ–ª—É—á–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –º–µ—Ç–æ–¥–æ–≤ API...');
      
      // –ü—Ä–æ–±—É–µ–º –Ω–µ—Å–∫–æ–ª—å–∫–æ –º–µ—Ç–æ–¥–æ–≤ –¥–ª—è –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è –ø—Ä–∞–≤–∏–ª—å–Ω—ã—Ö endpoint'–æ–≤
      const testMethods = [
        { method: 'GET', endpoint: '/getMe' },
        { method: 'GET', endpoint: '/getBalance' },
        { method: 'GET', endpoint: '/getExchangeRates' },
        { method: 'GET', endpoint: '/getCurrencies' }
      ];
      
      const availableMethods = [];
      
      for (const test of testMethods) {
        try {
          const response = await this.api.request({
            method: test.method,
            url: test.endpoint
          });
          
          if (response.data.ok) {
            availableMethods.push(`${test.method} ${test.endpoint}`);
          }
        } catch (error) {
          // –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º –æ—à–∏–±–∫–∏, –ø—Ä–æ—Å—Ç–æ –ø—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ –¥–æ—Å—Ç—É–ø–Ω–æ
        }
      }
      
      console.log('üìã –î–æ—Å—Ç—É–ø–Ω—ã–µ –º–µ—Ç–æ–¥—ã API:', availableMethods);
      return availableMethods;
      
    } catch (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å–ø–∏—Å–∫–∞ –º–µ—Ç–æ–¥–æ–≤:', error.message);
      return [];
    }
  }

  /**
   * –ü—Ä–æ–≤–µ—Ä—è–µ—Ç —Ç–µ–∫—É—â–µ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ webhook (–±–µ–∑ –ø–æ–ø—ã—Ç–∫–∏ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏)
   */
  async checkWebhookStatus() {
    console.log('‚ÑπÔ∏è –ü—Ä–æ–≤–µ—Ä–∫–∞ webhook —Å—Ç–∞—Ç—É—Å–∞...');
    console.log(`üì° –û–∂–∏–¥–∞–µ–º—ã–π Webhook URL: ${this.webhookUrl}`);
    console.log('üìù –ü—Ä–∏–º–µ—á–∞–Ω–∏–µ: CryptoBot API –Ω–µ –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª—è–µ—Ç –º–µ—Ç–æ–¥—ã –¥–ª—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ webhook —á–µ—Ä–µ–∑ API');
    console.log('üîß –î–ª—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ webhook –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –≤–µ–±-–∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å CryptoBot');
    console.log('üåê –ü–µ—Ä–µ–π–¥–∏—Ç–µ –≤ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è –Ω–∞ https://t.me/CryptoBot');
    return true;
  }

  /**
   * –ü–æ–ª–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ CryptoBot (–±–µ–∑ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ webhook)
   */
  async fullSetup() {
    console.log('üöÄ –ù–∞—á–∏–Ω–∞–µ–º –ø—Ä–æ–≤–µ—Ä–∫—É CryptoBot...');
    
    // –¢–µ—Å—Ç–∏—Ä—É–µ–º —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ
    const connectionOk = await this.testConnection();
    if (!connectionOk) {
      console.log('‚ùå –ü—Ä–æ–≤–µ—Ä–∫–∞ CryptoBot –ø—Ä–µ—Ä–≤–∞–Ω–∞ –∏–∑-–∑–∞ –ø—Ä–æ–±–ª–µ–º —Å —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ–º');
      return false;
    }
    
    // –ü–æ–ª—É—á–∞–µ–º –¥–æ—Å—Ç—É–ø–Ω—ã–µ –º–µ—Ç–æ–¥—ã
    await this.getAvailableMethods();
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º webhook —Å—Ç–∞—Ç—É—Å
    await this.checkWebhookStatus();
    
    console.log('‚úÖ –ü—Ä–æ–≤–µ—Ä–∫–∞ CryptoBot –∑–∞–≤–µ—Ä—à–µ–Ω–∞');
    console.log('üìå Webhook –Ω—É–∂–Ω–æ –Ω–∞—Å—Ç—Ä–æ–∏—Ç—å –≤—Ä—É—á–Ω—É—é –≤ CryptoBot');
    return true;
  }
}

// –°–æ–∑–¥–∞–µ–º singleton instance
const cryptoBotSetup = new CryptoBotSetupService();

module.exports = cryptoBotSetup;