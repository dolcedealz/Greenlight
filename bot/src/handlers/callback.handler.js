// ===== 1. bot/src/handlers/callback.handler.js =====

// callback.handler.js
const { Markup } = require('telegraf');
const config = require('../config');
const apiService = require('../services/api.service');

/**
 * –û–±—Ä–∞–±–æ—Ç—á–∏–∫ callback –∑–∞–ø—Ä–æ—Å–æ–≤ (–Ω–∞–∂–∞—Ç–∏—è –Ω–∞ inline –∫–Ω–æ–ø–∫–∏)
 * @param {Object} bot - –≠–∫–∑–µ–º–ø–ª—è—Ä –±–æ—Ç–∞ Telegraf
 */
function registerCallbackHandlers(bot) {
  // –ò–°–ü–†–ê–í–õ–ï–ù–û: –ë–æ–ª–µ–µ —Å–ø–µ—Ü–∏—Ñ–∏—á–Ω—ã–µ —Ä–µ–≥—É–ª—è—Ä–Ω—ã–µ –≤—ã—Ä–∞–∂–µ–Ω–∏—è –¥–ª—è –∏–∑–±–µ–∂–∞–Ω–∏—è –∫–æ–Ω—Ñ–ª–∏–∫—Ç–æ–≤
  
  // –û–±—Ä–∞–±–æ—Ç–∫–∞ –¥–µ–π—Å—Ç–≤–∏–π –ø–æ–ø–æ–ª–Ω–µ–Ω–∏—è –±–∞–ª–∞–Ω—Å–∞ - –°–¢–†–û–ì–û —Ç–æ–ª—å–∫–æ —á–∏—Å–ª–∞ –∏–ª–∏ 'custom'
  bot.action(/^deposit:(\d+|custom)$/, async (ctx) => {
    try {
      // –ü–æ–ª—É—á–∞–µ–º —Å—É–º–º—É –∏–∑ callback data
      const amount = ctx.match[1];
      
      console.log(`–î–ï–ü–û–ó–ò–¢: –û–±—Ä–∞–±–æ—Ç–∫–∞ callback deposit:${amount}`);
      
      if (amount === 'custom') {
        // –ó–∞–ø—Ä–∞—à–∏–≤–∞–µ–º —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤–≤–æ–¥ —Å—É–º–º—ã
        await ctx.reply('üí∞ –í–≤–µ–¥–∏—Ç–µ —Å—É–º–º—É –¥–ª—è –ø–æ–ø–æ–ª–Ω–µ–Ω–∏—è (–≤ USDT):\n\n–ú–∏–Ω–∏–º—É–º: 1 USDT\n–ú–∞–∫—Å–∏–º—É–º: 10000 USDT');
        // TODO: –î–æ–±–∞–≤–∏—Ç—å –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–æ–≥–æ –≤–≤–æ–¥–∞ —Å—É–º–º—ã
        return;
      }
      
      // –í–∞–ª–∏–¥–∞—Ü–∏—è —Å—É–º–º—ã
      const amountFloat = parseFloat(amount);
      console.log(`–î–ï–ü–û–ó–ò–¢: Parsed amount = ${amountFloat}`);
      
      if (isNaN(amountFloat) || amountFloat <= 0) {
        await ctx.reply('‚ùå –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–∞—è —Å—É–º–º–∞ –¥–ª—è –ø–æ–ø–æ–ª–Ω–µ–Ω–∏—è');
        return;
      }
      
      if (amountFloat < 1) {
        await ctx.reply('‚ùå –ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è —Å—É–º–º–∞ –ø–æ–ø–æ–ª–Ω–µ–Ω–∏—è: 1 USDT');
        return;
      }
      
      if (amountFloat > 10000) {
        await ctx.reply('‚ùå –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è —Å—É–º–º–∞ –ø–æ–ø–æ–ª–Ω–µ–Ω–∏—è: 10000 USDT');
        return;
      }
      
      // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä –∑–∞–≥—Ä—É–∑–∫–∏
      await ctx.answerCbQuery('‚è≥ –°–æ–∑–¥–∞–µ–º —Å—á–µ—Ç –¥–ª—è –æ–ø–ª–∞—Ç—ã...');
      
      console.log(`–î–ï–ü–û–ó–ò–¢: –°–æ–∑–¥–∞–Ω–∏–µ –¥–µ–ø–æ–∑–∏—Ç–∞ —á–µ—Ä–µ–∑ API –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ${ctx.from.id} –Ω–∞ —Å—É–º–º—É ${amountFloat} USDT`);
      
      try {
        // –°–æ–∑–¥–∞–µ–º –¥–µ–ø–æ–∑–∏—Ç —á–µ—Ä–µ–∑ API backend'–∞
        const depositData = await apiService.createDeposit(ctx.from, amountFloat, {
          source: 'bot',
          description: `–ü–æ–ø–æ–ª–Ω–µ–Ω–∏–µ —á–µ—Ä–µ–∑ Telegram –±–æ—Ç –Ω–∞ ${amountFloat} USDT`
        });
        
        console.log(`–î–ï–ü–û–ó–ò–¢: –î–µ–ø–æ–∑–∏—Ç —Å–æ–∑–¥–∞–Ω —á–µ—Ä–µ–∑ API:`, depositData);
        
        // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é —Å—Å—ã–ª–∫—É –Ω–∞ –æ–ø–ª–∞—Ç—É
        await ctx.reply(
          `üí∞ –°–æ–∑–¥–∞–Ω —Å—á–µ—Ç –Ω–∞ –ø–æ–ø–æ–ª–Ω–µ–Ω–∏–µ –±–∞–ª–∞–Ω—Å–∞\n\n` +
          `üíµ –°—É–º–º–∞: ${amountFloat} USDT\n` +
          `üÜî ID –¥–µ–ø–æ–∑–∏—Ç–∞: ${depositData.depositId}\n` +
          `üßæ ID –∏–Ω–≤–æ–π—Å–∞: ${depositData.invoiceId}\n` +
          `‚è∞ –°—Ä–æ–∫ –¥–µ–π—Å—Ç–≤–∏—è: 1 —á–∞—Å\n\n` +
          `–ù–∞–∂–º–∏—Ç–µ –Ω–∞ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ –¥–ª—è –æ–ø–ª–∞—Ç—ã:`,
          Markup.inlineKeyboard([
            [Markup.button.url('üí≥ –û–ø–ª–∞—Ç–∏—Ç—å', depositData.payUrl)],
            [Markup.button.callback('üìã –°—Ç–∞—Ç—É—Å –ø–ª–∞—Ç–µ–∂–∞', `check_deposit_status:${depositData.depositId}`)]
          ])
        );
        
      } catch (apiError) {
        console.error('–î–ï–ü–û–ó–ò–¢: –û—à–∏–±–∫–∞ API –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –¥–µ–ø–æ–∑–∏—Ç–∞:', apiError);
        
        // Fallback: –∏—Å–ø–æ–ª—å–∑—É–µ–º —Å—Ç–∞—Ä—ã–π –º–µ—Ç–æ–¥ —á–µ—Ä–µ–∑ –ø—Ä—è–º–æ–µ –æ–±—Ä–∞—â–µ–Ω–∏–µ –∫ CryptoBot
        console.log('–î–ï–ü–û–ó–ò–¢: Fallback: —Å–æ–∑–¥–∞–µ–º –∏–Ω–≤–æ–π—Å –Ω–∞–ø—Ä—è–º—É—é —á–µ—Ä–µ–∑ CryptoBot');
        
        const paymentService = require('../services/payment.service');
        const invoice = await paymentService.createInvoice(ctx.from.id, amountFloat);
        
        if (!invoice || !invoice.pay_url) {
          throw new Error('–ù–µ–≤–µ—Ä–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –∏–Ω–≤–æ–π—Å–∞ –æ—Ç CryptoBot');
        }
        
        console.log(`–î–ï–ü–û–ó–ò–¢: Fallback –∏–Ω–≤–æ–π—Å —Å–æ–∑–¥–∞–Ω: ${invoice.invoice_id}`);
        
        // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é —Å—Å—ã–ª–∫—É –Ω–∞ –æ–ø–ª–∞—Ç—É (fallback —Ä–µ–∂–∏–º)
        await ctx.reply(
          `üí∞ –°–æ–∑–¥–∞–Ω —Å—á–µ—Ç –Ω–∞ –ø–æ–ø–æ–ª–Ω–µ–Ω–∏–µ –±–∞–ª–∞–Ω—Å–∞ (—Ä–µ–∑–µ—Ä–≤–Ω—ã–π —Ä–µ–∂–∏–º)\n\n` +
          `üíµ –°—É–º–º–∞: ${amountFloat} USDT\n` +
          `üÜî ID —Å—á–µ—Ç–∞: ${invoice.invoice_id}\n` +
          `‚è∞ –°—Ä–æ–∫ –¥–µ–π—Å—Ç–≤–∏—è: 1 —á–∞—Å\n\n` +
          `‚ö†Ô∏è –í–Ω–∏–º–∞–Ω–∏–µ: –°—Ä–µ–¥—Å—Ç–≤–∞ –±—É–¥—É—Ç –∑–∞—á–∏—Å–ª–µ–Ω—ã –ø–æ—Å–ª–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º\n\n` +
          `–ù–∞–∂–º–∏—Ç–µ –Ω–∞ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ –¥–ª—è –æ–ø–ª–∞—Ç—ã:`,
          Markup.inlineKeyboard([
            [Markup.button.url('üí≥ –û–ø–ª–∞—Ç–∏—Ç—å', invoice.pay_url)],
            [Markup.button.callback('üìã –°—Ç–∞—Ç—É—Å –ø–ª–∞—Ç–µ–∂–∞', `check_payment_fallback:${invoice.invoice_id}`)]
          ])
        );
      }
      
    } catch (error) {
      console.error('–î–ï–ü–û–ó–ò–¢: –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –¥–µ–π—Å—Ç–≤–∏—è –ø–æ–ø–æ–ª–Ω–µ–Ω–∏—è:', error);
      
      // –ë–æ–ª–µ–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ç–∏–≤–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è –æ–± –æ—à–∏–±–∫–∞—Ö
      let errorMessage = '–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ —Å—á–µ—Ç–∞ –¥–ª—è –æ–ø–ª–∞—Ç—ã. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.';
      
      if (error.message.includes('CryptoBot API Error')) {
        errorMessage = '‚ùå –û—à–∏–±–∫–∞ –ø–ª–∞—Ç–µ–∂–Ω–æ–π —Å–∏—Å—Ç–µ–º—ã. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ –∏–ª–∏ –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –≤ –ø–æ–¥–¥–µ—Ä–∂–∫—É.';
      } else if (error.message.includes('–Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω')) {
        errorMessage = '‚ùå –ü–ª–∞—Ç–µ–∂–Ω–∞—è —Å–∏—Å—Ç–µ–º–∞ –≤—Ä–µ–º–µ–Ω–Ω–æ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞. –û–±—Ä–∞—Ç–∏—Ç–µ—Å—å –≤ –ø–æ–¥–¥–µ—Ä–∂–∫—É.';
      } else if (error.message.includes('–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω')) {
        errorMessage = '‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ—Ñ–∏–ª—è. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É /start';
      }
      
      await ctx.reply(errorMessage);
      
      // –û—Ç–≤–µ—á–∞–µ–º –Ω–∞ callback query, –µ—Å–ª–∏ —ç—Ç–æ –µ—â–µ –Ω–µ —Å–¥–µ–ª–∞–Ω–æ
      try {
        await ctx.answerCbQuery('‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è —Å—á–µ—Ç–∞');
      } catch (cbError) {
        // –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º –æ—à–∏–±–∫—É, –µ—Å–ª–∏ callback query —É–∂–µ –æ—Ç–≤–µ—á–µ–Ω
      }
    }
  });
  
  // –ò–°–ü–†–ê–í–õ–ï–ù–û: –ë–æ–ª–µ–µ —Å–ø–µ—Ü–∏—Ñ–∏—á–Ω—ã–π –ø–∞—Ç—Ç–µ—Ä–Ω –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å—Ç–∞—Ç—É—Å–∞ –¥–µ–ø–æ–∑–∏—Ç–∞
  bot.action(/^check_deposit_status:([0-9a-fA-F]{24})$/, async (ctx) => {
    try {
      const depositId = ctx.match[1];
      
      console.log(`–°–¢–ê–¢–£–°: –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç–∞—Ç—É—Å–∞ –¥–µ–ø–æ–∑–∏—Ç–∞: ${depositId}`);
      
      await ctx.answerCbQuery('‚è≥ –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç–∞—Ç—É—Å –¥–µ–ø–æ–∑–∏—Ç–∞...');
      
      const depositInfo = await apiService.getDepositStatus(ctx.from, depositId);
      
      let statusMessage = '';
      let statusEmoji = '';
      
      switch (depositInfo.status) {
        case 'pending':
          statusEmoji = '‚è≥';
          statusMessage = '–û–∂–∏–¥–∞–µ—Ç –æ–ø–ª–∞—Ç—ã';
          break;
        case 'paid':
          statusEmoji = '‚úÖ';
          statusMessage = '–û–ø–ª–∞—á–µ–Ω - —Å—Ä–µ–¥—Å—Ç–≤–∞ –∑–∞—á–∏—Å–ª–µ–Ω—ã –Ω–∞ –±–∞–ª–∞–Ω—Å';
          break;
        case 'expired':
          statusEmoji = '‚è∞';
          statusMessage = '–ò—Å—Ç–µ–∫ —Å—Ä–æ–∫ –¥–µ–π—Å—Ç–≤–∏—è';
          break;
        default:
          statusEmoji = '‚ùì';
          statusMessage = '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —Å—Ç–∞—Ç—É—Å';
      }
      
      await ctx.reply(
        `üìä –°—Ç–∞—Ç—É—Å –¥–µ–ø–æ–∑–∏—Ç–∞\n\n` +
        `üÜî ID: ${depositInfo.id}\n` +
        `üíµ –°—É–º–º–∞: ${depositInfo.amount} USDT\n` +
        `${statusEmoji} –°—Ç–∞—Ç—É—Å: ${statusMessage}\n` +
        `üìÖ –°–æ–∑–¥–∞–Ω: ${new Date(depositInfo.createdAt).toLocaleString('ru-RU')}`
      );
      
    } catch (error) {
      console.error('–°–¢–ê–¢–£–°: –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ —Å—Ç–∞—Ç—É—Å–∞ –¥–µ–ø–æ–∑–∏—Ç–∞ —á–µ—Ä–µ–∑ API:', error);
      await ctx.reply('‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø—Ä–æ–≤–µ—Ä–∏—Ç—å —Å—Ç–∞—Ç—É—Å –¥–µ–ø–æ–∑–∏—Ç–∞ —á–µ—Ä–µ–∑ API');
      await ctx.answerCbQuery('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏');
    }
  });
  
  // –ò–°–ü–†–ê–í–õ–ï–ù–û: Fallback –¥–ª—è —Å—Ç–∞—Ä—ã—Ö –¥–µ–ø–æ–∑–∏—Ç–æ–≤ —Å –¥—Ä—É–≥–∏–º –ø–∞—Ç—Ç–µ—Ä–Ω–æ–º
  bot.action(/^check_payment_fallback:(\d+)$/, async (ctx) => {
    try {
      const invoiceId = ctx.match[1];
      
      console.log(`–°–¢–ê–¢–£–° FALLBACK: –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç–∞—Ç—É—Å–∞ –ø–ª–∞—Ç–µ–∂–∞: ${invoiceId}`);
      
      await ctx.answerCbQuery('‚è≥ –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç–∞—Ç—É—Å –ø–ª–∞—Ç–µ–∂–∞...');
      
      const paymentService = require('../services/payment.service');
      const invoiceData = await paymentService.checkInvoice(invoiceId);
      
      if (!invoiceData) {
        await ctx.reply('‚ùå –°—á–µ—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω');
        return;
      }
      
      let statusMessage = '';
      let statusEmoji = '';
      
      switch (invoiceData.status) {
        case 'active':
          statusEmoji = '‚è≥';
          statusMessage = '–û–∂–∏–¥–∞–µ—Ç –æ–ø–ª–∞—Ç—ã';
          break;
        case 'paid':
          statusEmoji = '‚úÖ';
          statusMessage = '–û–ø–ª–∞—á–µ–Ω (—Ç—Ä–µ–±—É–µ—Ç —Ä—É—á–Ω–æ–≥–æ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è)';
          break;
        case 'expired':
          statusEmoji = '‚è∞';
          statusMessage = '–ò—Å—Ç–µ–∫ —Å—Ä–æ–∫ –¥–µ–π—Å—Ç–≤–∏—è';
          break;
        default:
          statusEmoji = '‚ùì';
          statusMessage = '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —Å—Ç–∞—Ç—É—Å';
      }
      
      await ctx.reply(
        `üìä –°—Ç–∞—Ç—É—Å –ø–ª–∞—Ç–µ–∂–∞ (—Ä–µ–∑–µ—Ä–≤–Ω—ã–π —Ä–µ–∂–∏–º)\n\n` +
        `üÜî ID: ${invoiceData.invoice_id}\n` +
        `üíµ –°—É–º–º–∞: ${invoiceData.amount} ${invoiceData.asset}\n` +
        `${statusEmoji} –°—Ç–∞—Ç—É—Å: ${statusMessage}\n` +
        `üìÖ –°–æ–∑–¥–∞–Ω: ${new Date(invoiceData.created_at).toLocaleString('ru-RU')}\n\n` +
        `‚ÑπÔ∏è –ï—Å–ª–∏ –ø–ª–∞—Ç–µ–∂ –æ–ø–ª–∞—á–µ–Ω, –Ω–æ —Å—Ä–µ–¥—Å—Ç–≤–∞ –Ω–µ –∑–∞—á–∏—Å–ª–µ–Ω—ã, –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –≤ –ø–æ–¥–¥–µ—Ä–∂–∫—É`
      );
      
    } catch (error) {
      console.error('–°–¢–ê–¢–£–° FALLBACK: –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ —Å—Ç–∞—Ç—É—Å–∞ –ø–ª–∞—Ç–µ–∂–∞:', error);
      await ctx.reply('‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø—Ä–æ–≤–µ—Ä–∏—Ç—å —Å—Ç–∞—Ç—É—Å –ø–ª–∞—Ç–µ–∂–∞');
      await ctx.answerCbQuery('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏');
    }
  });

  // –û–±—Ä–∞–±–æ—Ç–∫–∞ –¥–µ–π—Å—Ç–≤–∏–π –≤—ã–≤–æ–¥–∞ —Å—Ä–µ–¥—Å—Ç–≤
  bot.action(/^withdraw:(\d+|custom)$/, async (ctx) => {
    try {
      const amount = ctx.match[1];
      
      console.log(`–í–´–í–û–î: –û–±—Ä–∞–±–æ—Ç–∫–∞ callback withdraw:${amount}`);
      
      // –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å—É–º–º—É –≤ —Å–µ—Å—Å–∏–∏
      ctx.session = ctx.session || {};
      ctx.session.withdrawAmount = amount;
      
      if (amount === 'custom') {
        // –ó–∞–ø—Ä–∞—à–∏–≤–∞–µ–º —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤–≤–æ–¥ —Å—É–º–º—ã
        await ctx.reply(
          'üí∞ –í–≤–µ–¥–∏—Ç–µ —Å—É–º–º—É –¥–ª—è –≤—ã–≤–æ–¥–∞ (–≤ USDT):\n\n' +
          '–ú–∏–Ω–∏–º—É–º: 1 USDT\n–ú–∞–∫—Å–∏–º—É–º: 10000 USDT'
        );
        ctx.session.waitingForWithdrawAmount = true;
        return;
      }
      
      // –í–∞–ª–∏–¥–∞—Ü–∏—è —Å—É–º–º—ã
      const amountFloat = parseFloat(amount);
      
      if (isNaN(amountFloat) || amountFloat <= 0) {
        await ctx.reply('‚ùå –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–∞—è —Å—É–º–º–∞ –¥–ª—è –≤—ã–≤–æ–¥–∞');
        return;
      }
      
      if (amountFloat < 1) {
        await ctx.reply('‚ùå –ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è —Å—É–º–º–∞ –≤—ã–≤–æ–¥–∞: 1 USDT');
        return;
      }
      
      if (amountFloat > 10000) {
        await ctx.reply('‚ùå –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è —Å—É–º–º–∞ –≤—ã–≤–æ–¥–∞: 10000 USDT');
        return;
      }
      
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º –±–∞–ª–∞–Ω—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
      await ctx.answerCbQuery('‚è≥ –ü—Ä–æ–≤–µ—Ä—è–µ–º –±–∞–ª–∞–Ω—Å...');
      
      const apiService = require('../services/api.service');
      const balance = await apiService.getUserBalance(ctx.from);
      
      if (balance < amountFloat) {
        await ctx.reply(`‚ùå –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å—Ä–µ–¥—Å—Ç–≤\n\n–í–∞—à –±–∞–ª–∞–Ω—Å: ${balance.toFixed(2)} USDT\n–ó–∞–ø—Ä–æ—à–µ–Ω–æ: ${amountFloat} USDT`);
        return;
      }
      
      // –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å—É–º–º—É –∏ –∑–∞–ø—Ä–∞—à–∏–≤–∞–µ–º –ø–æ–ª—É—á–∞—Ç–µ–ª—è
      ctx.session.withdrawAmount = amountFloat;
      
      await ctx.reply(
        'üì§ –ö—É–¥–∞ –≤—ã–≤–µ—Å—Ç–∏ —Å—Ä–µ–¥—Å—Ç–≤–∞?\n\n' +
        '–í–≤–µ–¥–∏—Ç–µ Telegram username –ø–æ–ª—É—á–∞—Ç–µ–ª—è (–±–µ–∑ @):\n\n' +
        '‚ö†Ô∏è –í–∞–∂–Ω–æ:\n' +
        '‚Ä¢ –ü–æ–ª—É—á–∞—Ç–µ–ª—å –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω –≤ @CryptoBot\n' +
        '‚Ä¢ Username –≤–≤–æ–¥–∏—Ç—Å—è –±–µ–∑ —Å–∏–º–≤–æ–ª–∞ @\n' +
        '‚Ä¢ –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ø—Ä–∞–≤–∏–ª—å–Ω–æ—Å—Ç—å username –ø–µ—Ä–µ–¥ –æ—Ç–ø—Ä–∞–≤–∫–æ–π'
      );
      
      ctx.session.waitingForWithdrawRecipient = true;
      
    } catch (error) {
      console.error('–í–´–í–û–î: –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –¥–µ–π—Å—Ç–≤–∏—è –≤—ã–≤–æ–¥–∞:', error);
      await ctx.reply('‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.');
      await ctx.answerCbQuery('‚ùå –û—à–∏–±–∫–∞');
    }
  });

  // –û–±—Ä–∞–±–æ—Ç–∫–∞ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –≤—ã–≤–æ–¥–∞
  bot.action(/^confirm_withdraw:(.+)$/, async (ctx) => {
    try {
      const data = ctx.match[1];
      const [amount, recipient] = data.split(':');
      
      await ctx.answerCbQuery('‚è≥ –°–æ–∑–¥–∞–µ–º –∑–∞–ø—Ä–æ—Å –Ω–∞ –≤—ã–≤–æ–¥...');
      
      console.log(`–í–´–í–û–î: –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –≤—ã–≤–æ–¥–∞ ${amount} USDT –¥–ª—è ${recipient}`);
      
      const apiService = require('../services/api.service');
      
      try {
        // –°–æ–∑–¥–∞–µ–º –∑–∞–ø—Ä–æ—Å –Ω–∞ –≤—ã–≤–æ–¥ —á–µ—Ä–µ–∑ API
        const withdrawalData = await apiService.createWithdrawal(ctx.from, {
          amount: parseFloat(amount),
          recipient: recipient,
          recipientType: 'username',
          comment: `–í—ã–≤–æ–¥ —á–µ—Ä–µ–∑ Telegram –±–æ—Ç`
        });
        
        console.log(`–í–´–í–û–î: –ó–∞–ø—Ä–æ—Å –Ω–∞ –≤—ã–≤–æ–¥ —Å–æ–∑–¥–∞–Ω:`, withdrawalData);
        
        // –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Å—É–º–º—ã
        let message = `‚úÖ –ó–∞–ø—Ä–æ—Å –Ω–∞ –≤—ã–≤–æ–¥ —Å–æ–∑–¥–∞–Ω\n\n` +
          `üíµ –°—É–º–º–∞: ${amount} USDT\n` +
          `üì§ –ü–æ–ª—É—á–∞—Ç–µ–ª—å: @${recipient}\n` +
          `üÜî ID –≤—ã–≤–æ–¥–∞: ${withdrawalData.withdrawalId}\n`;
        
        if (withdrawalData.requiresApproval) {
          message += `\n‚è≥ –°—Ç–∞—Ç—É—Å: –¢—Ä–µ–±—É–µ—Ç –æ–¥–æ–±—Ä–µ–Ω–∏—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞\n` +
            `‚è∞ –í—Ä–µ–º—è –æ–±—Ä–∞–±–æ—Ç–∫–∏: 24-48 —á–∞—Å–æ–≤`;
        } else {
          message += `\n‚ö° –°—Ç–∞—Ç—É—Å: –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞\n` +
            `‚è∞ –í—Ä–µ–º—è –æ–±—Ä–∞–±–æ—Ç–∫–∏: 5-15 –º–∏–Ω—É—Ç`;
        }
        
        await ctx.editMessageText(message, 
          Markup.inlineKeyboard([
            [Markup.button.callback('üìä –ü—Ä–æ–≤–µ—Ä–∏—Ç—å —Å—Ç–∞—Ç—É—Å', `check_withdrawal_status:${withdrawalData.withdrawalId}`)],
            [Markup.button.callback('üìã –ò—Å—Ç–æ—Ä–∏—è –≤—ã–≤–æ–¥–æ–≤', 'withdrawals_history')]
          ])
        );
        
        // –û—á–∏—â–∞–µ–º —Å–µ—Å—Å–∏—é
        delete ctx.session.withdrawAmount;
        delete ctx.session.withdrawRecipient;
        
      } catch (apiError) {
        console.error('–í–´–í–û–î: –û—à–∏–±–∫–∞ API –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –≤—ã–≤–æ–¥–∞:', apiError);
        
        let errorMessage = '‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å –∑–∞–ø—Ä–æ—Å –Ω–∞ –≤—ã–≤–æ–¥\n\n';
        
        if (apiError.message.includes('–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å—Ä–µ–¥—Å—Ç–≤')) {
          errorMessage += '–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å—Ä–µ–¥—Å—Ç–≤ –Ω–∞ –±–∞–ª–∞–Ω—Å–µ';
        } else if (apiError.message.includes('–∞–∫—Ç–∏–≤–Ω—ã–π –∑–∞–ø—Ä–æ—Å')) {
          errorMessage += '–£ –≤–∞—Å —É–∂–µ –µ—Å—Ç—å –∞–∫—Ç–∏–≤–Ω—ã–π –∑–∞–ø—Ä–æ—Å –Ω–∞ –≤—ã–≤–æ–¥';
        } else if (apiError.message.includes('username')) {
          errorMessage += '–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π username –ø–æ–ª—É—á–∞—Ç–µ–ª—è';
        } else {
          errorMessage += apiError.message || '–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ';
        }
        
        await ctx.editMessageText(errorMessage);
      }
      
    } catch (error) {
      console.error('–í–´–í–û–î: –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–∏ –≤—ã–≤–æ–¥–∞:', error);
      await ctx.reply('‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.');
      await ctx.answerCbQuery('‚ùå –û—à–∏–±–∫–∞');
    }
  });

  // –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—Ç–º–µ–Ω—ã –≤—ã–≤–æ–¥–∞
  bot.action('cancel_withdraw', async (ctx) => {
    await ctx.answerCbQuery('–û—Ç–º–µ–Ω–µ–Ω–æ');
    
    // –û—á–∏—â–∞–µ–º —Å–µ—Å—Å–∏—é
    delete ctx.session.withdrawAmount;
    delete ctx.session.withdrawRecipient;
    
    await ctx.editMessageText('‚ùå –í—ã–≤–æ–¥ —Å—Ä–µ–¥—Å—Ç–≤ –æ—Ç–º–µ–Ω–µ–Ω');
  });

  // –û–±—Ä–∞–±–æ—Ç–∫–∞ –∏—Å—Ç–æ—Ä–∏–∏ –≤—ã–≤–æ–¥–æ–≤
  bot.action('withdrawals_history', async (ctx) => {
    try {
      console.log(`–ò–°–¢–û–†–ò–Ø –í–´–í–û–î–û–í: –ó–∞–ø—Ä–æ—Å –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ${ctx.from.id}`);
      
      await ctx.answerCbQuery('‚è≥ –ó–∞–≥—Ä—É–∂–∞–µ–º –∏—Å—Ç–æ—Ä–∏—é –≤—ã–≤–æ–¥–æ–≤...');
      
      // –ü–æ–ª—É—á–∞–µ–º –∏—Å—Ç–æ—Ä–∏—é –≤—ã–≤–æ–¥–æ–≤ —á–µ—Ä–µ–∑ API
      const apiService = require('../services/api.service');
      const withdrawalsData = await apiService.getUserWithdrawals(ctx.from, { limit: 10 });
      
      if (!withdrawalsData.withdrawals || withdrawalsData.withdrawals.length === 0) {
        await ctx.reply('üìã –£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç –∑–∞–ø—Ä–æ—Å–æ–≤ –Ω–∞ –≤—ã–≤–æ–¥ —Å—Ä–µ–¥—Å—Ç–≤');
        return;
      }
      
      // –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∏—Å—Ç–æ—Ä–∏–µ–π
      let message = 'üìã –ò—Å—Ç–æ—Ä–∏—è –≤—ã–≤–æ–¥–æ–≤ (–ø–æ—Å–ª–µ–¥–Ω–∏–µ 10):\n\n';
      
      for (const withdrawal of withdrawalsData.withdrawals) {
        const date = new Date(withdrawal.createdAt).toLocaleDateString('ru-RU');
        let statusEmoji = '';
        let statusText = '';
        
        switch (withdrawal.status) {
          case 'pending':
            statusEmoji = '‚è≥';
            statusText = '–û–∂–∏–¥–∞–µ—Ç';
            break;
          case 'approved':
            statusEmoji = '‚úÖ';
            statusText = '–û–¥–æ–±—Ä–µ–Ω';
            break;
          case 'processing':
            statusEmoji = '‚öôÔ∏è';
            statusText = '–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç—Å—è';
            break;
          case 'completed':
            statusEmoji = '‚úÖ';
            statusText = '–í—ã–ø–æ–ª–Ω–µ–Ω';
            break;
          case 'rejected':
            statusEmoji = '‚ùå';
            statusText = '–û—Ç–∫–ª–æ–Ω–µ–Ω';
            break;
          case 'failed':
            statusEmoji = '‚ö†Ô∏è';
            statusText = '–û—à–∏–±–∫–∞';
            break;
        }
        
        message += `${statusEmoji} ${date} - ${withdrawal.amount} USDT\n`;
        message += `   –ü–æ–ª—É—á–∞—Ç–µ–ª—å: ${withdrawal.recipient}\n`;
        message += `   –°—Ç–∞—Ç—É—Å: ${statusText}\n`;
        
        if (withdrawal.rejectionReason) {
          message += `   –ü—Ä–∏—á–∏–Ω–∞: ${withdrawal.rejectionReason}\n`;
        }
        
        message += '\n';
      }
      
      await ctx.reply(message);
      
    } catch (error) {
      console.error('–ò–°–¢–û–†–ò–Ø –í–´–í–û–î–û–í: –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∏—Å—Ç–æ—Ä–∏–∏:', error);
      await ctx.reply('‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –∏—Å—Ç–æ—Ä–∏—é –≤—ã–≤–æ–¥–æ–≤');
    }
  });
  
  // –û–±—Ä–∞–±–æ—Ç–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å—Ç–∞—Ç—É—Å–∞ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ –≤—ã–≤–æ–¥–∞
  bot.action(/^check_withdrawal_status:([0-9a-fA-F]{24})$/, async (ctx) => {
    try {
      const withdrawalId = ctx.match[1];
      
      console.log(`–°–¢–ê–¢–£–° –í–´–í–û–î–ê: –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç–∞—Ç—É—Å–∞ –≤—ã–≤–æ–¥–∞: ${withdrawalId}`);
      
      await ctx.answerCbQuery('‚è≥ –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç–∞—Ç—É—Å –≤—ã–≤–æ–¥–∞...');
      
      const apiService = require('../services/api.service');
      const withdrawalInfo = await apiService.getWithdrawalStatus(ctx.from, withdrawalId);
      
      let statusMessage = '';
      let statusEmoji = '';
      
      switch (withdrawalInfo.status) {
        case 'pending':
          statusEmoji = '‚è≥';
          statusMessage = withdrawalInfo.amount > 300 
            ? '–û–∂–∏–¥–∞–µ—Ç –æ–¥–æ–±—Ä–µ–Ω–∏—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞' 
            : '–û–∂–∏–¥–∞–µ—Ç –æ–±—Ä–∞–±–æ—Ç–∫–∏';
          break;
        case 'approved':
          statusEmoji = '‚úÖ';
          statusMessage = '–û–¥–æ–±—Ä–µ–Ω –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º';
          break;
        case 'processing':
          statusEmoji = '‚öôÔ∏è';
          statusMessage = '–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç—Å—è —Å–∏—Å—Ç–µ–º–æ–π';
          break;
        case 'completed':
          statusEmoji = '‚úÖ';
          statusMessage = '–£—Å–ø–µ—à–Ω–æ –≤—ã–ø–æ–ª–Ω–µ–Ω';
          break;
        case 'rejected':
          statusEmoji = '‚ùå';
          statusMessage = '–û—Ç–∫–ª–æ–Ω–µ–Ω –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º';
          break;
        case 'failed':
          statusEmoji = '‚ö†Ô∏è';
          statusMessage = '–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ';
          break;
      }
      
      let replyMessage = `üìä –°—Ç–∞—Ç—É—Å –≤—ã–≤–æ–¥–∞\n\n` +
        `üÜî ID: ${withdrawalInfo.id}\n` +
        `üíµ –°—É–º–º–∞: ${withdrawalInfo.amount} USDT\n` +
        `${statusEmoji} –°—Ç–∞—Ç—É—Å: ${statusMessage}\n` +
        `üìÖ –°–æ–∑–¥–∞–Ω: ${new Date(withdrawalInfo.createdAt).toLocaleString('ru-RU')}`;
      
      if (withdrawalInfo.processedAt) {
        replyMessage += `\n‚úÖ –û–±—Ä–∞–±–æ—Ç–∞–Ω: ${new Date(withdrawalInfo.processedAt).toLocaleString('ru-RU')}`;
      }
      
      if (withdrawalInfo.rejectionReason) {
        replyMessage += `\n\n‚ùå –ü—Ä–∏—á–∏–Ω–∞ –æ—Ç–∫–ª–æ–Ω–µ–Ω–∏—è: ${withdrawalInfo.rejectionReason}`;
      }
      
      await ctx.reply(replyMessage);
      
    } catch (error) {
      console.error('–°–¢–ê–¢–£–° –í–´–í–û–î–ê: –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ —Å—Ç–∞—Ç—É—Å–∞:', error);
      await ctx.reply('‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø—Ä–æ–≤–µ—Ä–∏—Ç—å —Å—Ç–∞—Ç—É—Å –≤—ã–≤–æ–¥–∞');
      await ctx.answerCbQuery('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏');
    }
  });
  
  return bot;
}

module.exports = {
  registerCallbackHandlers
};