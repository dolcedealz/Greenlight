// frontend/src/components/games/slots/SlotMachine.js - –ò–°–ü–†–ê–í–õ–ï–ù–ù–ê–Ø –ê–ù–ò–ú–ê–¶–ò–Ø
import React, { useState, useEffect, useCallback, useRef } from 'react';
import '../../../styles/SlotMachine.css';
// –û–ë–ù–û–í–õ–ï–ù–ù–´–ï –ö–û–≠–§–§–ò–¶–ò–ï–ù–¢–´ (–¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ —É—Ä–µ–∑–∞–Ω—ã –Ω–∞ 20% –∫—Ä–æ–º–µ jackpot)
const SLOT_SYMBOLS = [
  { symbol: 'cherry', name: 'cherry', weight: 25, payout: 1.6, emoji: 'üçí' },
  { symbol: 'lemon', name: 'lemon', weight: 20, payout: 2.4, emoji: 'üçã' },
  { symbol: 'persik', name: 'persik', weight: 15, payout: 3.2, emoji: 'üçë' },
  { symbol: 'grape', name: 'grape', weight: 12, payout: 4.8, emoji: 'üçá' },
  { symbol: 'bell', name: 'bell', weight: 8, payout: 7.2, emoji: 'üîî' },
  { symbol: 'diamond', name: 'diamond', weight: 5, payout: 12, emoji: 'üíé' },
  { symbol: 'star', name: 'star', weight: 3, payout: 20, emoji: '‚≠ê' },
  { symbol: 'jackpot', name: 'jackpot', weight: 2, payout: 50, emoji: 'üé∞' }
];
const SlotMachine = ({ 
  onSpin, 
  isSpinning, 
  balance, 
  betAmount,
  lastResult,
  autoplay,
  loading,
  gameStats,
  onAnimationComplete
}) => {
  // –ù–∞—á–∞–ª—å–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –±–∞—Ä–∞–±–∞–Ω–æ–≤
  const [reels, setReels] = useState(() => [
    ['cherry', 'lemon', 'persik', 'grape'],
    ['cherry', 'lemon', 'persik', 'grape'],
    ['cherry', 'lemon', 'persik', 'grape'],
    ['cherry', 'lemon', 'persik', 'grape']
  ]);
  // –°–æ—Å—Ç–æ—è–Ω–∏—è –∞–Ω–∏–º–∞—Ü–∏–∏
  const [isAnimating, setIsAnimating] = useState(false);
  const [animatingReels, setAnimatingReels] = useState([false, false, false, false]);
  const [winningLines, setWinningLines] = useState([]);
  const [showingResult, setShowingResult] = useState(false);
  const [spinPhase, setSpinPhase] = useState('idle');
  // –†–µ—Ñ—ã –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –∞–Ω–∏–º–∞—Ü–∏–µ–π
  const animationFrames = useRef([]);
  const animationTimeouts = useRef([]);
  const lastResultRef = useRef(null);
  const finalResultRef = useRef(null);
  const isStoppingRef = useRef(false);
  const animationCompleteRef = useRef(false);
  const frameCounters = useRef([0, 0, 0, 0]); // –°—á–µ—Ç—á–∏–∫–∏ –∫–∞–¥—Ä–æ–≤ –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –±–∞—Ä–∞–±–∞–Ω–∞
  // –û–ü–¢–ò–ú–ò–ó–ê–¶–ò–Ø: –î–µ—Ç–µ–∫—Ç–æ—Ä –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞
  const [isLowPerformance, setIsLowPerformance] = useState(false);
  useEffect(() => {
    // –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞
    const checkPerformance = () => {
      const start = performance.now();
      for (let i = 0; i < 5000; i++) {
        Math.random();
      }
      const end = performance.now();
      const isLow = (end - start) > 8; // –ï—Å–ª–∏ –æ–ø–µ—Ä–∞—Ü–∏—è –∑–∞–Ω—è–ª–∞ –±–æ–ª—å—à–µ 8ms
      setIsLowPerformance(isLow);
      console.log('üé∞ PERFORMANCE: –£—Å—Ç—Ä–æ–π—Å—Ç–≤–æ', isLow ? '—Å–ª–∞–±–æ–µ' : '–º–æ—â–Ω–æ–µ', `(${(end - start).toFixed(2)}ms)`);
    };
    checkPerformance();
  }, []);
  // –ü–æ–ª—É—á–∏—Ç—å –¥–∞–Ω–Ω—ã–µ —Å–∏–º–≤–æ–ª–∞
  const getSymbolData = useCallback((symbolName) => {
    return SLOT_SYMBOLS.find(s => s.symbol === symbolName) || SLOT_SYMBOLS[0];
  }, []);
  // –ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Å–ª—É—á–∞–π–Ω–æ–≥–æ —Å–∏–º–≤–æ–ª–∞ –¥–ª—è –∞–Ω–∏–º–∞—Ü–∏–∏
  const getRandomSymbol = useCallback(() => {
    const totalWeight = SLOT_SYMBOLS.reduce((sum, s) => sum + s.weight, 0);
    let random = Math.random() * totalWeight;
    for (const symbolData of SLOT_SYMBOLS) {
      random -= symbolData.weight;
      if (random <= 0) {
        return symbolData.symbol;
      }
    }
    return SLOT_SYMBOLS[0].symbol;
  }, []);
  // –û—á–∏—Å—Ç–∫–∞ –∞–Ω–∏–º–∞—Ü–∏–π
  const clearAnimations = useCallback(() => {
    animationFrames.current.forEach((frameId, index) => {
      if (frameId) {
        cancelAnimationFrame(frameId);
      }
    });
    animationFrames.current = [];
    frameCounters.current = [0, 0, 0, 0];
    animationTimeouts.current.forEach((timeout, index) => {
      if (timeout) {
        clearTimeout(timeout);
      }
    });
    animationTimeouts.current = [];
  }, []);
  // –§—É–Ω–∫—Ü–∏—è –∞–Ω–∏–º–∞—Ü–∏–∏ –æ–¥–Ω–æ–≥–æ –±–∞—Ä–∞–±–∞–Ω–∞ —Å requestAnimationFrame
  const animateReel = useCallback((reelIndex) => {
    if (isStoppingRef.current || animationCompleteRef.current) {
      return;
    }
    const animate = () => {
      // –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º —Å—á–µ—Ç—á–∏–∫ –∫–∞–¥—Ä–æ–≤
      frameCounters.current[reelIndex]++;
      // –û–ü–¢–ò–ú–ò–ó–ê–¶–ò–Ø: –û–±–Ω–æ–≤–ª—è–µ–º —Å–∏–º–≤–æ–ª—ã –Ω–µ –∫–∞–∂–¥—ã–π –∫–∞–¥—Ä
      const frameSkip = isLowPerformance ? 8 : 4; // –î–ª—è —Å–ª–∞–±—ã—Ö —É—Å—Ç—Ä–æ–π—Å—Ç–≤ - –∫–∞–∂–¥—ã–π 8–π –∫–∞–¥—Ä, –¥–ª—è –º–æ—â–Ω—ã—Ö - –∫–∞–∂–¥—ã–π 4–π
      if (frameCounters.current[reelIndex] % frameSkip === 0) {
        setReels(prevReels => {
          if (isStoppingRef.current || animationCompleteRef.current) {
            return prevReels;
          }
          const newReels = [...prevReels];
          newReels[reelIndex] = Array(4).fill().map(() => getRandomSymbol());
          return newReels;
        });
      }
      // –ü—Ä–æ–¥–æ–ª–∂–∞–µ–º –∞–Ω–∏–º–∞—Ü–∏—é, –µ—Å–ª–∏ –Ω–µ –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞
      if (!isStoppingRef.current && !animationCompleteRef.current) {
        animationFrames.current[reelIndex] = requestAnimationFrame(animate);
      }
    };
    // –ó–∞–ø—É—Å–∫–∞–µ–º –∞–Ω–∏–º–∞—Ü–∏—é
    animationFrames.current[reelIndex] = requestAnimationFrame(animate);
  }, [getRandomSymbol, isLowPerformance]);
  // –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–ª–Ω–æ–π –æ—Å—Ç–∞–Ω–æ–≤–∫–∏ –∞–Ω–∏–º–∞—Ü–∏–∏
  const stopAllAnimations = useCallback(() => {
    clearAnimations();
    setIsAnimating(false);
    setAnimatingReels([false, false, false, false]);
    setSpinPhase('stopped');
    isStoppingRef.current = false;
    animationCompleteRef.current = true;
  }, [clearAnimations]);
  // –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–ª–∞–≤–Ω–æ–π –æ—Å—Ç–∞–Ω–æ–≤–∫–∏ –±–∞—Ä–∞–±–∞–Ω–∞ –Ω–∞ –Ω—É–∂–Ω–æ–º —Å–∏–º–≤–æ–ª–µ
  const stopReelWithResult = useCallback((reelIndex, targetColumn, delay) => {
    const timeout = setTimeout(() => {
      // –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∞–Ω–∏–º–∞—Ü–∏—é –¥–ª—è —ç—Ç–æ–≥–æ –±–∞—Ä–∞–±–∞–Ω–∞
      if (animationFrames.current[reelIndex]) {
        cancelAnimationFrame(animationFrames.current[reelIndex]);
        animationFrames.current[reelIndex] = null;
      }
      // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ñ–∏–Ω–∞–ª—å–Ω—ã–µ —Å–∏–º–≤–æ–ª—ã –¥–ª—è —ç—Ç–æ–≥–æ –±–∞—Ä–∞–±–∞–Ω–∞
      setReels(prevReels => {
        const newReels = [...prevReels];
        newReels[reelIndex] = [...targetColumn];
        return newReels;
      });
      // –û—Ç–∫–ª—é—á–∞–µ–º –∞–Ω–∏–º–∞—Ü–∏—é –¥–ª—è –±–∞—Ä–∞–±–∞–Ω–∞
      setAnimatingReels(prev => {
        const newState = [...prev];
        newState[reelIndex] = false;
        return newState;
      });
      // –ï—Å–ª–∏ —ç—Ç–æ –ø–æ—Å–ª–µ–¥–Ω–∏–π –±–∞—Ä–∞–±–∞–Ω
      if (reelIndex === 3) {
        // –ó–∞–≤–µ—Ä—à–∞–µ–º –∞–Ω–∏–º–∞—Ü–∏—é
        setIsAnimating(false);
        setSpinPhase('stopped');
        isStoppingRef.current = false;
        animationCompleteRef.current = true;
        // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç —á–µ—Ä–µ–∑ –∫–æ—Ä–æ—Ç–∫—É—é –∑–∞–¥–µ—Ä–∂–∫—É
        setTimeout(() => {
          setShowingResult(true);
          if (finalResultRef.current && finalResultRef.current.winningLines && finalResultRef.current.winningLines.length > 0) {
            setTimeout(() => {
              setWinningLines([...finalResultRef.current.winningLines]);
              // –£–±–∏—Ä–∞–µ–º –ø–æ–¥—Å–≤–µ—Ç–∫—É —á–µ—Ä–µ–∑ 4 —Å–µ–∫—É–Ω–¥—ã
              setTimeout(() => {
                setWinningLines([]);
              }, 4000);
            }, 300);
          }
          // –£–≤–µ–¥–æ–º–ª—è–µ–º —Ä–æ–¥–∏—Ç–µ–ª—å—Å–∫–∏–π –∫–æ–º–ø–æ–Ω–µ–Ω—Ç –ü–û–°–õ–ï –≤–∏–∑—É–∞–ª—å–Ω–æ–≥–æ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è
          setTimeout(() => {
            if (onAnimationComplete) {
              onAnimationComplete();
            }
          }, 800);
        }, 200);
      }
    }, delay);
    animationTimeouts.current.push(timeout);
  }, [onAnimationComplete]);
  // –°–±—Ä–æ—Å —Å–æ—Å—Ç–æ—è–Ω–∏—è –ø—Ä–∏ –Ω–∞—á–∞–ª–µ –Ω–æ–≤–æ–≥–æ —Å–ø–∏–Ω–∞
  useEffect(() => {
    if (isSpinning && !isAnimating && !animationCompleteRef.current) {
      // –°–±—Ä–∞—Å—ã–≤–∞–µ–º –≤—Å–µ —Å–æ—Å—Ç–æ—è–Ω–∏—è
      clearAnimations();
      setWinningLines([]);
      setShowingResult(false);
      setIsAnimating(true);
      setSpinPhase('spinning');
      setAnimatingReels([true, true, true, true]);
      isStoppingRef.current = false;
      finalResultRef.current = null;
      lastResultRef.current = null;
      animationCompleteRef.current = false;
      frameCounters.current = [0, 0, 0, 0];
      // –ó–∞–ø—É—Å–∫–∞–µ–º –∞–Ω–∏–º–∞—Ü–∏—é –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –±–∞—Ä–∞–±–∞–Ω–∞
      for (let reelIndex = 0; reelIndex < 4; reelIndex++) {
        animateReel(reelIndex);
      }
    }
  }, [isSpinning, isAnimating, clearAnimations, animateReel]);
  // –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞ —Å —Å–µ—Ä–≤–µ—Ä–∞
  useEffect(() => {
    if (lastResult && 
        lastResult !== lastResultRef.current && 
        lastResult.reels && 
        isAnimating && 
        !isStoppingRef.current &&
        !animationCompleteRef.current) {
      lastResultRef.current = lastResult;
      finalResultRef.current = lastResult;
      isStoppingRef.current = true;
      setSpinPhase('stopping');
      // –û–ü–¢–ò–ú–ò–ó–ê–¶–ò–Ø: –ê–¥–∞–ø—Ç–∏–≤–Ω—ã–µ –∑–∞–¥–µ—Ä–∂–∫–∏ –º–µ–∂–¥—É –æ—Å—Ç–∞–Ω–æ–≤–∫–∞–º–∏ –±–∞—Ä–∞–±–∞–Ω–æ–≤
      const stopDelays = isLowPerformance ? [200, 350, 500, 650] : [300, 500, 700, 900];
      lastResult.reels.forEach((targetColumn, reelIndex) => {
        stopReelWithResult(reelIndex, targetColumn, stopDelays[reelIndex]);
      });
    }
  }, [lastResult, isAnimating, stopReelWithResult, isLowPerformance]);
  // –°–±—Ä–æ—Å —Å–æ—Å—Ç–æ—è–Ω–∏—è –∞–Ω–∏–º–∞—Ü–∏–∏ –ø—Ä–∏ –æ—Å—Ç–∞–Ω–æ–≤–∫–µ —Å–ø–∏–Ω–∞
  useEffect(() => {
    if (!isSpinning && animationCompleteRef.current) {
      animationCompleteRef.current = false;
    }
  }, [isSpinning]);
  // –ê–≤–∞—Ä–∏–π–Ω–∞—è –æ—Å—Ç–∞–Ω–æ–≤–∫–∞ –∞–Ω–∏–º–∞—Ü–∏–∏
  useEffect(() => {
    if (!isSpinning && isAnimating) {
      const emergencyTimeout = setTimeout(() => {
        stopAllAnimations();
      }, 500);
      return () => clearTimeout(emergencyTimeout);
    }
  }, [isSpinning, isAnimating, stopAllAnimations]);
  // –û—á–∏—Å—Ç–∫–∞ –ø—Ä–∏ —Ä–∞–∑–º–æ–Ω—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏
  useEffect(() => {
    return () => {
      clearAnimations();
    };
  }, [clearAnimations]);
  // –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –∫–ª–∞—Å—Å–∞ —è—á–µ–π–∫–∏
  const getCellClass = useCallback((reelIndex, rowIndex) => {
    const baseClass = 'slot-cell';
    const position = `${reelIndex}-${rowIndex}`;
    if (winningLines.length > 0) {
      const isWinning = winningLines.some(line => line.includes(position));
      if (isWinning) {
        return `${baseClass} winning`;
      }
    }
    return baseClass;
  }, [winningLines]);
  // –û–ü–¢–ò–ú–ò–ó–ê–¶–ò–Ø: –ú–µ–º–æ–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –∫–æ–º–ø–æ–Ω–µ–Ω—Ç —Å–∏–º–≤–æ–ª–∞
  const SymbolComponent = React.memo(({ symbolName }) => {
    const symbolData = getSymbolData(symbolName);
    return <span className="slot-symbol">{symbolData.emoji}</span>;
  });
  return (
    <div className={`slot-machine ${isLowPerformance ? 'low-performance' : ''}`}>
      {/* –ò–≥—Ä–æ–≤–æ–µ –ø–æ–ª–µ 4x4 */}
      <div className="slot-display">
        <div className="slot-reels">
          {reels.map((reel, reelIndex) => (
            <div 
              key={reelIndex} 
              className={`slot-reel ${animatingReels[reelIndex] ? 'spinning' : ''} ${spinPhase}`}
            >
              {reel.map((symbolName, rowIndex) => (
                <div
                  key={`${reelIndex}-${rowIndex}`}
                  className={getCellClass(reelIndex, rowIndex)}
                  data-position={`${reelIndex}-${rowIndex}`}
                >
                  <SymbolComponent symbolName={symbolName} />
                </div>
              ))}
            </div>
          ))}
        </div>
        {/* –û–ü–¢–ò–ú–ò–ó–ê–¶–ò–Ø: –£–ø—Ä–æ—â–µ–Ω–Ω—ã–µ –ª–∏–Ω–∏–∏ –≤—ã–ø–ª–∞—Ç —Ç–æ–ª—å–∫–æ –¥–ª—è –º–æ—â–Ω—ã—Ö —É—Å—Ç—Ä–æ–π—Å—Ç–≤ */}
        {!isLowPerformance && winningLines.length > 0 && (
          <div className="paylines">
            {/* –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ç–æ–ª—å–∫–æ –∞–∫—Ç–∏–≤–Ω—ã–µ –ª–∏–Ω–∏–∏ */}
            {winningLines.map((line, index) => (
              <div key={index} className="payline active" style={{
                // –ü—Ä–æ—Å—Ç–∞—è —Å—Ç–∏–ª–∏–∑–∞—Ü–∏—è –±–µ–∑ —Å–ª–æ–∂–Ω—ã—Ö –∞–Ω–∏–º–∞—Ü–∏–π
                position: 'absolute',
                background: 'rgba(11, 168, 74, 0.8)',
                height: '2px',
                borderRadius: '1px',
                zIndex: 10
              }}></div>
            ))}
          </div>
        )}
      </div>
      {/* –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–µ */}
      {showingResult && finalResultRef.current && !isSpinning && !isAnimating && (
        <div className="last-spin-info">
          {finalResultRef.current.win ? (
            <div className="win-display">
              <span className="win-text">üí∞ –í–´–ò–ì–†–´–®! üí∞</span>
              <span className="win-amount">+{(Math.abs(finalResultRef.current.profit) || 0).toFixed(2)} USDT</span>
              {finalResultRef.current.winningSymbols && finalResultRef.current.winningSymbols.length > 0 && (
                <div className="winning-symbols">
                  {finalResultRef.current.winningSymbols.map((symbolName, index) => {
                    const symbolData = getSymbolData(symbolName);
                    return (
                      <span key={index} className="winning-symbol">
                        {symbolData.emoji}
                      </span>
                    );
                  })}
                </div>
              )}
              {finalResultRef.current.winningLines && finalResultRef.current.winningLines.length > 0 && (
                <>
                  <div className="winning-lines-count">
                    üéØ –í—ã–∏–≥—Ä—ã—à–Ω—ã—Ö –ª–∏–Ω–∏–π: {finalResultRef.current.winningLines.length} | –ú–Ω–æ–∂–∏—Ç–µ–ª—å: √ó{(finalResultRef.current.multiplier || 0).toFixed(2)}
                  </div>
                  <div className="winning-lines-details">
                    {finalResultRef.current.winningLines.map((line, index) => {
                      // –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ç–∏–ø –ª–∏–Ω–∏–∏
                      let lineType = '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è';
                      if (line.length >= 3) {
                        const firstPos = line[0].split('-');
                        const lastPos = line[line.length - 1].split('-');
                        if (firstPos[1] === lastPos[1]) {
                          lineType = `–°—Ç—Ä–æ–∫–∞ ${parseInt(firstPos[1]) + 1}`;
                        }
                        else if (line.every((pos, i) => {
                          const [col, row] = pos.split('-');
                          return col === String(i) && row === String(i);
                        })) {
                          lineType = '–ì–ª–∞–≤–Ω–∞—è –¥–∏–∞–≥–æ–Ω–∞–ª—å';
                        }
                        else if (line.every((pos, i) => {
                          const [col, row] = pos.split('-');
                          return col === String(i) && row === String(3 - i);
                        })) {
                          lineType = '–ü–æ–±–æ—á–Ω–∞—è –¥–∏–∞–≥–æ–Ω–∞–ª—å';
                        }
                      }
                      return (
                        <div key={index} className="line-detail">
                          ‚Ä¢ {lineType}: {line.length} –≤ —Ä—è–¥
                        </div>
                      );
                    })}
                  </div>
                </>
              )}
            </div>
          ) : (
            <div className="lose-display">
              <span className="lose-text">üéØ –£–¥–∞—á–∞ –≤ —Å–ª–µ–¥—É—é—â–∏–π —Ä–∞–∑!</span>
            </div>
          )}
        </div>
      )}
    </div>
  );
};
export default SlotMachine;