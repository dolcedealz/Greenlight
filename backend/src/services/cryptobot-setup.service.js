// ===== 3. backend/src/services/cryptobot-setup.service.js (–ù–û–í–´–ô –§–ê–ô–õ) =====

// backend/src/services/cryptobot-setup.service.js
const axios = require('axios');

/**
 * –°–µ—Ä–≤–∏—Å –¥–ª—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ webhook'–æ–≤ CryptoBot
 */
class CryptoBotSetupService {
  constructor() {
    this.cryptoBotApiUrl = process.env.CRYPTO_PAY_API_URL || 'https://pay.crypt.bot/api';
    this.cryptoBotToken = process.env.CRYPTO_PAY_API_TOKEN;
    this.webhookUrl = process.env.CRYPTO_PAY_WEBHOOK_URL || 'https://greenlight-api-ghqh.onrender.com/webhooks/cryptobot';
    
    if (!this.cryptoBotToken) {
      console.warn('‚ö†Ô∏è CRYPTO_PAY_API_TOKEN –Ω–µ —É–∫–∞–∑–∞–Ω –≤ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è');
      return;
    }
    
    // –°–æ–∑–¥–∞–µ–º axios instance –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å CryptoBot API
    this.api = axios.create({
      baseURL: this.cryptoBotApiUrl,
      headers: {
        'Crypto-Pay-API-Token': this.cryptoBotToken,
        'Content-Type': 'application/json'
      },
      timeout: 30000
    });
  }

  /**
   * –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ—Ç webhook URL –≤ CryptoBot
   */
  async setupWebhook() {
    try {
      if (!this.cryptoBotToken) {
        console.log('‚ùå CryptoBot token –Ω–µ –Ω–∞–π–¥–µ–Ω, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫—É webhook');
        return false;
      }

      console.log('üîß –ù–∞—Å—Ç—Ä–æ–π–∫–∞ CryptoBot webhook...');
      console.log(`üì° Webhook URL: ${this.webhookUrl}`);
      
      // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º webhook
      const response = await this.api.post('/setWebhook', {
        url: this.webhookUrl
      });
      
      if (response.data.ok) {
        console.log('‚úÖ CryptoBot webhook —É—Å–ø–µ—à–Ω–æ –Ω–∞—Å—Ç—Ä–æ–µ–Ω');
        console.log('üìù –û—Ç–≤–µ—Ç:', response.data.result);
        return true;
      } else {
        console.error('‚ùå –û—à–∏–±–∫–∞ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ CryptoBot webhook:', response.data.error);
        return false;
      }
      
    } catch (error) {
      console.error('‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ CryptoBot webhook:', error.message);
      
      if (error.response) {
        console.error('üì° –°—Ç–∞—Ç—É—Å –æ—Ç–≤–µ—Ç–∞:', error.response.status);
        console.error('üìÑ –î–∞–Ω–Ω—ã–µ –æ—Ç–≤–µ—Ç–∞:', error.response.data);
      }
      
      return false;
    }
  }

  /**
   * –ü–æ–ª—É—á–∞–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ç–µ–∫—É—â–µ–º webhook
   */
  async getWebhookInfo() {
    try {
      if (!this.cryptoBotToken) {
        console.log('‚ùå CryptoBot token –Ω–µ –Ω–∞–π–¥–µ–Ω');
        return null;
      }

      console.log('üîç –ü–æ–ª—É—á–µ–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ CryptoBot webhook...');
      
      const response = await this.api.post('/getWebhookInfo');
      
      if (response.data.ok) {
        const webhookInfo = response.data.result;
        console.log('üìã –¢–µ–∫—É—â–∏–π webhook info:');
        console.log(`   URL: ${webhookInfo.url || '–Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω'}`);
        console.log(`   –°—Ç–∞—Ç—É—Å: ${webhookInfo.has_custom_certificate ? '—Å —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç–æ–º' : '–±–µ–∑ —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç–∞'}`);
        console.log(`   Pending updates: ${webhookInfo.pending_update_count || 0}`);
        
        if (webhookInfo.last_error_date) {
          const errorDate = new Date(webhookInfo.last_error_date * 1000);
          console.log(`‚ö†Ô∏è –ü–æ—Å–ª–µ–¥–Ω—è—è –æ—à–∏–±–∫–∞: ${webhookInfo.last_error_message} (${errorDate.toISOString()})`);
        }
        
        return webhookInfo;
      } else {
        console.error('‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è webhook info:', response.data.error);
        return null;
      }
      
    } catch (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è CryptoBot webhook info:', error.message);
      return null;
    }
  }

  /**
   * –¢–µ—Å—Ç–∏—Ä—É–µ—Ç —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ —Å CryptoBot API
   */
  async testConnection() {
    try {
      if (!this.cryptoBotToken) {
        console.log('‚ùå CryptoBot token –Ω–µ –Ω–∞–π–¥–µ–Ω, —Ç–µ—Å—Ç –ø—Ä–æ–ø—É—â–µ–Ω');
        return false;
      }

      console.log('üß™ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è —Å CryptoBot API...');
      
      const response = await this.api.post('/getMe');
      
      if (response.data.ok) {
        console.log('‚úÖ –°–æ–µ–¥–∏–Ω–µ–Ω–∏–µ —Å CryptoBot API —Ä–∞–±–æ—Ç–∞–µ—Ç');
        console.log(`ü§ñ App name: ${response.data.result.name}`);
        console.log(`üÜî App ID: ${response.data.result.app_id}`);
        return true;
      } else {
        console.error('‚ùå –û—à–∏–±–∫–∞ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è —Å CryptoBot API:', response.data.error);
        return false;
      }
      
    } catch (error) {
      console.error('‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è –∫ CryptoBot API:', error.message);
      
      if (error.response) {
        console.error('üì° HTTP Status:', error.response.status);
        console.error('üìÑ Response:', error.response.data);
      }
      
      return false;
    }
  }

  /**
   * –ü–æ–ª–Ω–∞—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∞ CryptoBot (—Ç–µ—Å—Ç + webhook)
   */
  async fullSetup() {
    console.log('üöÄ –ù–∞—á–∏–Ω–∞–µ–º –ø–æ–ª–Ω—É—é –Ω–∞—Å—Ç—Ä–æ–π–∫—É CryptoBot...');
    
    // –¢–µ—Å—Ç–∏—Ä—É–µ–º —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ
    const connectionOk = await this.testConnection();
    if (!connectionOk) {
      console.log('‚ùå –ù–∞—Å—Ç—Ä–æ–π–∫–∞ CryptoBot –ø—Ä–µ—Ä–≤–∞–Ω–∞ –∏–∑-–∑–∞ –ø—Ä–æ–±–ª–µ–º —Å —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ–º');
      return false;
    }
    
    // –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ webhook
    await this.getWebhookInfo();
    
    // –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º webhook
    const webhookOk = await this.setupWebhook();
    if (!webhookOk) {
      console.log('‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞—Å—Ç—Ä–æ–∏—Ç—å webhook');
      return false;
    }
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
    await this.getWebhookInfo();
    
    console.log('‚úÖ –ü–æ–ª–Ω–∞—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∞ CryptoBot –∑–∞–≤–µ—Ä—à–µ–Ω–∞');
    return true;
  }
}

// –°–æ–∑–¥–∞–µ–º singleton instance
const cryptoBotSetup = new CryptoBotSetupService();

module.exports = cryptoBotSetup;