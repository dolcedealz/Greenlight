// frontend/src/components/events/UserEventBets.js - –£–õ–£–ß–®–ï–ù–ù–ê–Ø –í–ï–†–°–ò–Ø –° –î–ï–¢–ê–õ–¨–ù–´–ú –õ–û–ì–ò–†–û–í–ê–ù–ò–ï–ú
import React, { useState, useEffect } from 'react';
import { eventsApi } from '../../services/api';

const UserEventBets = ({ onRefresh }) => {
  const [bets, setBets] = useState([]);
  const [loading, setLoading] = useState(true);
  const [error, setError] = useState(null);
  const [refreshing, setRefreshing] = useState(false);

  console.log('UserEventBets: –ö–æ–º–ø–æ–Ω–µ–Ω—Ç –∑–∞–≥—Ä—É–∂–µ–Ω');

  // –ó–∞–≥—Ä—É–∑–∫–∞ —Å—Ç–∞–≤–æ–∫ –ø—Ä–∏ –º–æ–Ω—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏
  useEffect(() => {
    console.log('UserEventBets: useEffect - –Ω–∞—á–∞–ª—å–Ω–∞—è –∑–∞–≥—Ä—É–∑–∫–∞');
    fetchUserBets();
  }, []);

  // –ó–∞–≥—Ä—É–∑–∫–∞ —Å—Ç–∞–≤–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Å –¥–µ—Ç–∞–ª—å–Ω—ã–º –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ–º
  const fetchUserBets = async (showLoader = true) => {
    try {
      console.log('UserEventBets: === –ù–ê–ß–ê–õ–û –ó–ê–ì–†–£–ó–ö–ò –°–¢–ê–í–û–ö ===');
      console.log('UserEventBets: showLoader:', showLoader);
      
      if (showLoader) {
        setLoading(true);
        console.log('UserEventBets: –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º loading = true');
      } else {
        setRefreshing(true);
        console.log('UserEventBets: –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º refreshing = true');
      }

      setError(null);
      console.log('UserEventBets: –°–±—Ä–∞—Å—ã–≤–∞–µ–º –æ—à–∏–±–∫—É');

      // –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å API –º–µ—Ç–æ–¥–∞
      if (!eventsApi || typeof eventsApi.getUserBets !== 'function') {
        throw new Error('API –º–µ—Ç–æ–¥ eventsApi.getUserBets –Ω–µ –Ω–∞–π–¥–µ–Ω');
      }

      console.log('UserEventBets: –í—ã–∑—ã–≤–∞–µ–º eventsApi.getUserBets...');
      console.log('UserEventBets: API URL:', eventsApi.defaults?.baseURL || '–Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–æ');
      
      const startTime = Date.now();
      const response = await eventsApi.getUserBets({ limit: 50 });
      const endTime = Date.now();
      
      console.log(`UserEventBets: API –∑–∞–ø—Ä–æ—Å –∑–∞–Ω—è–ª ${endTime - startTime}ms`);
      console.log('UserEventBets: –ü–æ–ª–Ω—ã–π –æ—Ç–≤–µ—Ç API:', response);
      console.log('UserEventBets: response.data:', response.data);
      
      if (!response) {
        throw new Error('–ü–æ–ª—É—á–µ–Ω –ø—É—Å—Ç–æ–π –æ—Ç–≤–µ—Ç –æ—Ç API');
      }

      if (!response.data) {
        throw new Error('–û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç –ø–æ–ª–µ data –≤ –æ—Ç–≤–µ—Ç–µ API');
      }
      
      if (response.data.success === false) {
        throw new Error(response.data.message || 'API –≤–µ—Ä–Ω—É–ª success: false');
      }

      if (response.data.success === true) {
        console.log('UserEventBets: API –≤–µ—Ä–Ω—É–ª success: true');
        
        if (!response.data.data) {
          console.warn('UserEventBets: –û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç –ø–æ–ª–µ data.data, —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –ø—É—Å—Ç–æ–π –º–∞—Å—Å–∏–≤');
          setBets([]);
        } else {
          console.log('UserEventBets: response.data.data:', response.data.data);
          
          const betsData = response.data.data.bets || response.data.data || [];
          console.log('UserEventBets: –ò–∑–≤–ª–µ—á–µ–Ω–Ω—ã–µ —Å—Ç–∞–≤–∫–∏:', betsData);
          console.log('UserEventBets: –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å—Ç–∞–≤–æ–∫:', Array.isArray(betsData) ? betsData.length : '–Ω–µ –º–∞—Å—Å–∏–≤');
          
          if (Array.isArray(betsData)) {
            setBets(betsData);
            console.log('UserEventBets: –°—Ç–∞–≤–∫–∏ —É—Å–ø–µ—à–Ω–æ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã');
          } else {
            console.warn('UserEventBets: betsData –Ω–µ —è–≤–ª—è–µ—Ç—Å—è –º–∞—Å—Å–∏–≤–æ–º:', typeof betsData);
            setBets([]);
          }
        }
      } else {
        console.warn('UserEventBets: –ù–µ–æ–ø—Ä–µ–¥–µ–ª–µ–Ω–Ω—ã–π —Å—Ç–∞—Ç—É—Å success:', response.data.success);
        setBets([]);
      }
      
      console.log('UserEventBets: === –£–°–ü–ï–®–ù–û–ï –ó–ê–í–ï–†–®–ï–ù–ò–ï –ó–ê–ì–†–£–ó–ö–ò ===');
      
    } catch (err) {
      console.error('UserEventBets: === –û–®–ò–ë–ö–ê –ü–†–ò –ó–ê–ì–†–£–ó–ö–ï ===');
      console.error('UserEventBets: –¢–∏–ø –æ—à–∏–±–∫–∏:', err.constructor.name);
      console.error('UserEventBets: –°–æ–æ–±—â–µ–Ω–∏–µ –æ—à–∏–±–∫–∏:', err.message);
      console.error('UserEventBets: –ü–æ–ª–Ω–∞—è –æ—à–∏–±–∫–∞:', err);
      
      if (err.response) {
        console.error('UserEventBets: HTTP —Å—Ç–∞—Ç—É—Å:', err.response.status);
        console.error('UserEventBets: –ó–∞–≥–æ–ª–æ–≤–∫–∏ –æ—Ç–≤–µ—Ç–∞:', err.response.headers);
        console.error('UserEventBets: –î–∞–Ω–Ω—ã–µ –æ—Ç–≤–µ—Ç–∞:', err.response.data);
      } else if (err.request) {
        console.error('UserEventBets: –ó–∞–ø—Ä–æ—Å –±—ã–ª –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω, –Ω–æ –æ—Ç–≤–µ—Ç –Ω–µ –ø–æ–ª—É—á–µ–Ω');
        console.error('UserEventBets: –î–µ—Ç–∞–ª–∏ –∑–∞–ø—Ä–æ—Å–∞:', err.request);
      } else {
        console.error('UserEventBets: –û—à–∏–±–∫–∞ –ø—Ä–∏ –Ω–∞—Å—Ç—Ä–æ–π–∫–µ –∑–∞–ø—Ä–æ—Å–∞:', err.message);
      }
      
      // –î–µ—Ç–∞–ª—å–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ –æ—à–∏–±–æ–∫
      let errorMessage = '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞';
      
      if (err.message.includes('getUserBets –Ω–µ –Ω–∞–π–¥–µ–Ω')) {
        errorMessage = 'API –º–µ—Ç–æ–¥ getUserBets –µ—â–µ –Ω–µ —Ä–µ–∞–ª–∏–∑–æ–≤–∞–Ω';
      } else if (err.response?.status === 404) {
        errorMessage = '–≠–Ω–¥–ø–æ–∏–Ω—Ç –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞–≤–æ–∫ –Ω–µ –Ω–∞–π–¥–µ–Ω (404)';
      } else if (err.response?.status === 401) {
        errorMessage = '–û—à–∏–±–∫–∞ –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏ (401) - –ø—Ä–æ–≤–µ—Ä—å—Ç–µ –¥–∞–Ω–Ω—ã–µ Telegram';
      } else if (err.response?.status === 403) {
        errorMessage = '–î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω (403)';
      } else if (err.response?.status === 500) {
        errorMessage = '–û—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞ (500)';
      } else if (err.response?.status >= 400) {
        errorMessage = `–û—à–∏–±–∫–∞ HTTP ${err.response.status}: ${err.response.data?.message || err.message}`;
      } else if (err.code === 'NETWORK_ERROR' || !err.response) {
        errorMessage = '–û—à–∏–±–∫–∞ —Å–µ—Ç–∏ - —Å–µ—Ä–≤–µ—Ä –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω';
      } else {
        errorMessage = err.message;
      }
      
      console.error('UserEventBets: –§–∏–Ω–∞–ª—å–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± –æ—à–∏–±–∫–µ:', errorMessage);
      setError(errorMessage);
      setBets([]); // –í—Å–µ–≥–¥–∞ —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –ø—É—Å—Ç–æ–π –º–∞—Å—Å–∏–≤ –ø—Ä–∏ –æ—à–∏–±–∫–µ
      
    } finally {
      console.log('UserEventBets: === –ë–õ–û–ö FINALLY ===');
      setLoading(false);
      setRefreshing(false);
      console.log('UserEventBets: loading –∏ refreshing —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã –≤ false');
    }
  };

  // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è
  const handleRefresh = () => {
    console.log('UserEventBets: –†—É—á–Ω–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º');
    fetchUserBets(false);
    if (onRefresh) {
      console.log('UserEventBets: –í—ã–∑—ã–≤–∞–µ–º onRefresh callback');
      onRefresh();
    }
  };

  // –ü–æ–ª—É—á–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞ —Å—Ç–∞–≤–∫–∏
  const getBetStatus = (bet) => {
    if (!bet.isSettled) {
      if (bet.event?.status === 'finished') {
        return { text: '–û–∂–∏–¥–∞–µ—Ç —Ä–∞—Å—á–µ—Ç–∞', color: '#ff9500', icon: '‚è≥' };
      }
      return { text: '–ê–∫—Ç–∏–≤–Ω–∞', color: '#0ba84a', icon: 'üéØ' };
    }

    if (bet.isWin) {
      return { text: '–í—ã–∏–≥—Ä—ã—à', color: '#0ba84a', icon: 'üèÜ' };
    } else {
      return { text: '–ü—Ä–æ–∏–≥—Ä—ã—à', color: '#ff3b30', icon: '‚ùå' };
    }
  };

  // –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–∞—Ç—ã
  const formatDate = (dateString) => {
    try {
      return new Date(dateString).toLocaleDateString('ru-RU', {
        day: '2-digit',
        month: '2-digit',
        year: 'numeric',
        hour: '2-digit',
        minute: '2-digit'
      });
    } catch (err) {
      console.error('UserEventBets: –û—à–∏–±–∫–∞ —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –¥–∞—Ç—ã:', dateString, err);
      return '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ';
    }
  };

  // –†–∞—Å—á–µ—Ç –ø–æ—Ç–µ–Ω—Ü–∏–∞–ª—å–Ω–æ–≥–æ –≤—ã–∏–≥—Ä—ã—à–∞
  const getPotentialWin = (bet) => {
    try {
      const win = bet.potentialWin || (bet.betAmount * bet.odds) || (bet.amount * bet.odds);
      return win.toFixed(2);
    } catch (err) {
      console.error('UserEventBets: –û—à–∏–±–∫–∞ —Ä–∞—Å—á–µ—Ç–∞ –ø–æ—Ç–µ–Ω—Ü–∏–∞–ª—å–Ω–æ–≥–æ –≤—ã–∏–≥—Ä—ã—à–∞:', bet, err);
      return '0.00';
    }
  };

  // –°–æ–∑–¥–∞–µ–º —Ç–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ –¥–ª—è –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–∏ –ø—Ä–∏ –æ—à–∏–±–∫–µ API
  const createMockBets = () => {
    console.log('UserEventBets: –°–æ–∑–¥–∞–µ–º —Ç–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ');
    return [
      {
        _id: 'demo1',
        event: { title: '–î–µ–º–æ: Bitcoin –¥–æ—Å—Ç–∏–≥–Ω–µ—Ç $100,000 –¥–æ –∫–æ–Ω—Ü–∞ –≥–æ–¥–∞?', status: 'active' },
        outcomeName: '–î–∞',
        betAmount: 10.50,
        odds: 2.5,
        potentialWin: 26.25,
        isSettled: false,
        isWin: false,
        placedAt: new Date().toISOString()
      },
      {
        _id: 'demo2',
        event: { title: '–î–µ–º–æ: Ethereum –¥–æ—Å—Ç–∏–≥–Ω–µ—Ç $5000 –≤ —ç—Ç–æ–º –º–µ—Å—è—Ü–µ?', status: 'finished' },
        outcomeName: '–ù–µ—Ç',
        betAmount: 25.00,
        odds: 1.8,
        potentialWin: 45.00,
        actualWin: 45.00,
        isSettled: true,
        isWin: true,
        placedAt: new Date(Date.now() - 86400000).toISOString(),
        settledAt: new Date().toISOString()
      },
      {
        _id: 'demo3',
        event: { title: '–î–µ–º–æ: Tesla –≤—ã–ø—É—Å—Ç–∏—Ç –Ω–æ–≤—É—é –º–æ–¥–µ–ª—å –≤ Q1?', status: 'finished' },
        outcomeName: '–î–∞',
        betAmount: 15.00,
        odds: 3.2,
        potentialWin: 48.00,
        actualWin: 0,
        isSettled: true,
        isWin: false,
        placedAt: new Date(Date.now() - 172800000).toISOString(),
        settledAt: new Date(Date.now() - 86400000).toISOString()
      }
    ];
  };

  // –°—Ç–∏–ª–∏
  const styles = {
    container: {
      padding: '20px',
      backgroundColor: '#1e1e1e',
      borderRadius: '12px',
      color: 'white',
      minHeight: '300px'
    },
    header: {
      display: 'flex',
      justifyContent: 'space-between',
      alignItems: 'center',
      marginBottom: '20px'
    },
    title: {
      color: '#0ba84a',
      margin: 0,
      fontSize: '20px',
      fontWeight: 'bold'
    },
    refreshBtn: {
      background: 'none',
      border: 'none',
      color: 'white',
      fontSize: '18px',
      cursor: 'pointer',
      padding: '8px',
      borderRadius: '50%',
      transition: 'all 0.3s ease'
    },
    loading: {
      textAlign: 'center',
      padding: '40px',
      color: 'rgba(255, 255, 255, 0.7)'
    },
    errorBox: {
      backgroundColor: 'rgba(255, 149, 0, 0.1)',
      border: '1px solid rgba(255, 149, 0, 0.3)',
      borderRadius: '8px',
      padding: '15px',
      marginBottom: '20px'
    },
    noBets: {
      textAlign: 'center',
      padding: '60px 20px',
      backgroundColor: 'rgba(255, 255, 255, 0.05)',
      borderRadius: '8px',
      border: '2px dashed rgba(255, 255, 255, 0.1)'
    },
    betsList: {
      display: 'flex',
      flexDirection: 'column',
      gap: '15px'
    },
    betItem: {
      backgroundColor: 'rgba(255, 255, 255, 0.05)',
      borderRadius: '8px',
      padding: '15px',
      border: '1px solid rgba(255, 255, 255, 0.1)',
      borderLeft: '4px solid transparent'
    },
    betHeader: {
      display: 'flex',
      justifyContent: 'space-between',
      alignItems: 'flex-start',
      marginBottom: '10px',
      gap: '10px'
    },
    eventTitle: {
      fontSize: '16px',
      fontWeight: 'bold',
      color: 'white',
      flex: 1
    },
    betStatus: {
      fontSize: '12px',
      fontWeight: 'bold',
      padding: '4px 8px',
      borderRadius: '12px',
      backgroundColor: 'rgba(255, 255, 255, 0.1)'
    },
    outcomeInfo: {
      marginBottom: '10px',
      padding: '8px',
      backgroundColor: 'rgba(11, 168, 74, 0.1)',
      borderRadius: '6px'
    },
    detailsGrid: {
      display: 'grid',
      gridTemplateColumns: 'repeat(auto-fit, minmax(120px, 1fr))',
      gap: '8px',
      marginBottom: '10px'
    },
    detailItem: {
      padding: '6px',
      backgroundColor: 'rgba(255, 255, 255, 0.05)',
      borderRadius: '4px',
      fontSize: '12px'
    },
    label: {
      color: 'rgba(255, 255, 255, 0.7)',
      display: 'block'
    },
    value: {
      fontWeight: 'bold',
      color: 'white'
    },
    positive: {
      color: '#0ba84a'
    },
    negative: {
      color: '#ff3b30'
    }
  };

  // –î–∞–Ω–Ω—ã–µ –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è (—Ä–µ–∞–ª—å–Ω—ã–µ –∏–ª–∏ –¥–µ–º–æ –ø—Ä–∏ –æ—à–∏–±–∫–µ)
  const displayBets = error ? createMockBets() : bets;

  // –†–µ–Ω–¥–µ—Ä –∑–∞–≥—Ä—É–∑–∫–∏
  if (loading) {
    return (
      <div style={styles.container}>
        <div style={styles.loading}>
          <div style={{ fontSize: '24px', marginBottom: '10px' }}>‚è≥</div>
          <div>–ó–∞–≥—Ä—É–∑–∫–∞ —Å—Ç–∞–≤–æ–∫...</div>
        </div>
      </div>
    );
  }

  return (
    <div style={styles.container}>
      {/* –ó–∞–≥–æ–ª–æ–≤–æ–∫ */}
      <div style={styles.header}>
        <h3 style={styles.title}>üéØ –ú–æ–∏ —Å—Ç–∞–≤–∫–∏ –Ω–∞ —Å–æ–±—ã—Ç–∏—è</h3>
        <button 
          style={styles.refreshBtn}
          onClick={handleRefresh}
          disabled={refreshing}
        >
          {refreshing ? '‚ü≥' : 'üîÑ'}
        </button>
      </div>

      {/* –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ–± –æ—à–∏–±–∫–µ API */}
      {error && (
        <div style={styles.errorBox}>
          <div style={{ display: 'flex', alignItems: 'center', gap: '8px', marginBottom: '8px' }}>
            <span>‚ö†Ô∏è</span>
            <strong style={{ color: '#ff9500' }}>–ü—Ä–æ–±–ª–µ–º–∞ —Å API</strong>
          </div>
          <div style={{ fontSize: '14px', color: 'rgba(255, 255, 255, 0.8)', marginBottom: '10px' }}>
            {error}
          </div>
          <div style={{ fontSize: '12px', color: 'rgba(255, 255, 255, 0.6)' }}>
            –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –¥–µ–º–æ-–∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å —Å —Ç–µ—Å—Ç–æ–≤—ã–º–∏ –¥–∞–Ω–Ω—ã–º–∏
          </div>
        </div>
      )}

      {/* –ö–æ–Ω—Ç–µ–Ω—Ç */}
      {displayBets.length === 0 ? (
        <div style={styles.noBets}>
          <div style={{ fontSize: '48px', marginBottom: '15px' }}>üìä</div>
          <h3>–ù–µ—Ç —Å—Ç–∞–≤–æ–∫</h3>
          <p style={{ color: 'rgba(255, 255, 255, 0.7)' }}>
            {!error 
              ? '–í—ã –µ—â–µ –Ω–µ –¥–µ–ª–∞–ª–∏ —Å—Ç–∞–≤–∫–∏ –Ω–∞ —Å–æ–±—ã—Ç–∏—è. –í—ã–±–µ—Ä–∏—Ç–µ —Å–æ–±—ã—Ç–∏–µ –∏ —Å–¥–µ–ª–∞–π—Ç–µ —Å–≤–æ—é –ø–µ—Ä–≤—É—é —Å—Ç–∞–≤–∫—É!'
              : '–ó–¥–µ—Å—å –±—É–¥—É—Ç –æ—Ç–æ–±—Ä–∞–∂–∞—Ç—å—Å—è –≤–∞—à–∏ —Å—Ç–∞–≤–∫–∏ –ø–æ—Å–ª–µ —É—Å—Ç—Ä–∞–Ω–µ–Ω–∏—è –ø—Ä–æ–±–ª–µ–º —Å API.'
            }
          </p>
        </div>
      ) : (
        <div style={styles.betsList}>
          {displayBets.map(bet => {
            const status = getBetStatus(bet);
            const potentialWin = getPotentialWin(bet);

            return (
              <div 
                key={bet._id} 
                style={{
                  ...styles.betItem,
                  borderLeftColor: bet.isSettled 
                    ? (bet.isWin ? '#0ba84a' : '#ff3b30') 
                    : '#ff9500'
                }}
              >
                {/* –ó–∞–≥–æ–ª–æ–≤–æ–∫ —Å—Ç–∞–≤–∫–∏ */}
                <div style={styles.betHeader}>
                  <div style={styles.eventTitle}>{bet.event.title}</div>
                  <div style={{ ...styles.betStatus, color: status.color }}>
                    {status.icon} {status.text}
                  </div>
                </div>

                {/* –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ–± –∏—Å—Ö–æ–¥–µ */}
                <div style={styles.outcomeInfo}>
                  <strong style={{ color: '#0ba84a' }}>–ò—Å—Ö–æ–¥:</strong> {bet.outcomeName}
                </div>

                {/* –î–µ—Ç–∞–ª–∏ —Å—Ç–∞–≤–∫–∏ */}
                <div style={styles.detailsGrid}>
                  <div style={styles.detailItem}>
                    <span style={styles.label}>–°—Ç–∞–≤–∫–∞:</span>
                    <span style={styles.value}>{bet.betAmount.toFixed(2)} USDT</span>
                  </div>
                  
                  <div style={styles.detailItem}>
                    <span style={styles.label}>–ö–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç:</span>
                    <span style={styles.value}>√ó{bet.odds.toFixed(2)}</span>
                  </div>

                  <div style={styles.detailItem}>
                    <span style={styles.label}>
                      {bet.isSettled && bet.isWin ? '–í—ã–∏–≥—Ä—ã—à:' : '–ü–æ—Ç–µ–Ω—Ü–∏–∞–ª—å–Ω—ã–π –≤—ã–∏–≥—Ä—ã—à:'}
                    </span>
                    <span style={{ ...styles.value, ...styles.positive }}>
                      {bet.isSettled && bet.isWin ? bet.actualWin.toFixed(2) : potentialWin} USDT
                    </span>
                  </div>

                  {bet.isSettled && (
                    <div style={styles.detailItem}>
                      <span style={styles.label}>–ü—Ä–∏–±—ã–ª—å:</span>
                      <span style={{
                        ...styles.value,
                        ...(bet.isWin ? styles.positive : styles.negative)
                      }}>
                        {bet.isWin ? '+' : '-'}{Math.abs(bet.isWin ? (bet.actualWin - bet.betAmount) : bet.betAmount).toFixed(2)} USDT
                      </span>
                    </div>
                  )}
                </div>

                {/* –î–∞—Ç–∞ */}
                <div style={{ fontSize: '12px', color: 'rgba(255, 255, 255, 0.5)', marginTop: '8px' }}>
                  –°–æ–∑–¥–∞–Ω–∞: {formatDate(bet.placedAt)}
                  {bet.isSettled && bet.settledAt && (
                    <span style={{ marginLeft: '15px' }}>
                      ‚Ä¢ –†–∞—Å—Å—á–∏—Ç–∞–Ω–∞: {formatDate(bet.settledAt)}
                    </span>
                  )}
                </div>
              </div>
            );
          })}
        </div>
      )}

      {/* –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ */}
      {displayBets.length > 0 && (
        <div style={{ 
          marginTop: '20px', 
          padding: '15px', 
          backgroundColor: 'rgba(11, 168, 74, 0.1)', 
          borderRadius: '8px',
          border: '1px solid rgba(11, 168, 74, 0.3)'
        }}>
          <h4 style={{ margin: '0 0 10px 0', color: '#0ba84a' }}>üìà –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞</h4>
          <div style={{ display: 'grid', gridTemplateColumns: 'repeat(auto-fit, minmax(100px, 1fr))', gap: '10px' }}>
            <div style={{ textAlign: 'center' }}>
              <div style={{ fontSize: '18px', fontWeight: 'bold', color: '#0ba84a' }}>
                {displayBets.length}
              </div>
              <div style={{ fontSize: '12px', color: 'rgba(255, 255, 255, 0.7)' }}>
                –í—Å–µ–≥–æ —Å—Ç–∞–≤–æ–∫
              </div>
            </div>
            <div style={{ textAlign: 'center' }}>
              <div style={{ fontSize: '18px', fontWeight: 'bold', color: '#0ba84a' }}>
                {displayBets.filter(bet => bet.isSettled && bet.isWin).length}
              </div>
              <div style={{ fontSize: '12px', color: 'rgba(255, 255, 255, 0.7)' }}>
                –í—ã–∏–≥—Ä–∞–Ω–æ
              </div>
            </div>
            <div style={{ textAlign: 'center' }}>
              <div style={{ fontSize: '18px', fontWeight: 'bold', color: 'white' }}>
                {displayBets.reduce((sum, bet) => sum + bet.betAmount, 0).toFixed(2)}
              </div>
              <div style={{ fontSize: '12px', color: 'rgba(255, 255, 255, 0.7)' }}>
                –ü–æ—Å—Ç–∞–≤–ª–µ–Ω–æ USDT
              </div>
            </div>
          </div>
        </div>
      )}
    </div>
  );
};

export default UserEventBets;
