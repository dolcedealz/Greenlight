const mongoose = require('mongoose');

const duelInvitationSchema = new mongoose.Schema({
  // –£–Ω–∏–∫–∞–ª—å–Ω—ã–π ID –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏—è
  inviteId: {
    type: String,
    unique: true,
    required: true,
    default: () => `invite_${Date.now()}_${Math.random().toString(36).substr(2, 9)}`
  },
  
  // –°–æ–∑–¥–∞—Ç–µ–ª—å –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏—è
  challengerId: {
    type: String,
    required: true
  },
  challengerUsername: {
    type: String,
    required: true
  },
  
  // –¶–µ–ª–µ–≤–æ–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å (–º–æ–∂–µ—Ç –±—ã—Ç—å null –¥–ª—è –æ—Ç–∫—Ä—ã—Ç—ã—Ö –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏–π)
  targetUserId: {
    type: String,
    default: null
  },
  targetUsername: {
    type: String,
    default: null
  },
  
  // –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –∏–≥—Ä—ã
  gameType: {
    type: String,
    enum: ['üé≤', 'üéØ', '‚öΩ', '‚öΩÔ∏è', 'üèÄ', 'üé≥', 'üé∞'],
    required: true
  },
  format: {
    type: String,
    enum: ['bo1', 'bo3', 'bo5', 'bo7'],
    default: 'bo1'
  },
  amount: {
    type: Number,
    required: true,
    min: 1,
    max: 1000
  },
  
  // –°—Ç–∞—Ç—É—Å –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏—è
  status: {
    type: String,
    enum: ['pending', 'accepted', 'declined', 'expired', 'cancelled'],
    default: 'pending'
  },
  
  // –°–≤—è–∑–∞–Ω–Ω–∞—è –¥—É—ç–ª—å (—É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç—Å—è –ø—Ä–∏ –ø—Ä–∏–Ω—è—Ç–∏–∏)
  duelId: {
    type: mongoose.Schema.Types.ObjectId,
    ref: 'Duel',
    default: null
  },
  
  // –í—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è
  expiresAt: {
    type: Date,
    default: () => new Date(Date.now() + 10 * 60 * 1000) // 10 –º–∏–Ω—É—Ç
  },
  acceptedAt: {
    type: Date,
    default: null
  },
  
  // –ò—Å—Ç–æ—á–Ω–∏–∫ –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏—è
  source: {
    type: String,
    enum: ['inline', 'direct', 'group'],
    default: 'inline'
  },
  
  // –ö–æ–Ω—Ç–µ–∫—Å—Ç (chat –≥–¥–µ –±—ã–ª–æ —Å–æ–∑–¥–∞–Ω–æ –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏–µ)
  contextChatId: {
    type: String,
    default: null
  },
  contextMessageId: {
    type: Number,
    default: null
  },
  
  // Telegram –¥–∞–Ω–Ω—ã–µ
  inviteMessageId: {
    type: Number,
    default: null
  },
  sourceMessageId: {
    type: Number,
    default: null
  },
  
  // –ú–µ—Ç–∞–¥–∞–Ω–Ω—ã–µ
  metadata: {
    type: mongoose.Schema.Types.Mixed,
    default: {}
  }
}, {
  timestamps: true
});

// –ò–Ω–¥–µ–∫—Å—ã
duelInvitationSchema.index({ inviteId: 1 });
duelInvitationSchema.index({ challengerId: 1 });
duelInvitationSchema.index({ targetUserId: 1 });
duelInvitationSchema.index({ targetUsername: 1 });
duelInvitationSchema.index({ status: 1 });
duelInvitationSchema.index({ expiresAt: 1 });
duelInvitationSchema.index({ createdAt: -1 });

// –í–∏—Ä—Ç—É–∞–ª—å–Ω—ã–µ –ø–æ–ª—è
duelInvitationSchema.virtual('gameName').get(function() {
  const gameNames = {
    'üé≤': '–ö–æ—Å—Ç–∏',
    'üéØ': '–î–∞—Ä—Ç—Å',
    '‚öΩ': '–§—É—Ç–±–æ–ª',
    '‚öΩÔ∏è': '–§—É—Ç–±–æ–ª',
    'üèÄ': '–ë–∞—Å–∫–µ—Ç–±–æ–ª',
    'üé≥': '–ë–æ—É–ª–∏–Ω–≥',
    'üé∞': '–°–ª–æ—Ç—ã'
  };
  return gameNames[this.gameType] || '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∏–≥—Ä–∞';
});

duelInvitationSchema.virtual('formatName').get(function() {
  const formatNames = {
    'bo1': 'Bo1 (1 —Ä–∞—É–Ω–¥)',
    'bo3': 'Bo3 (–¥–æ 2 –ø–æ–±–µ–¥)',
    'bo5': 'Bo5 (–¥–æ 3 –ø–æ–±–µ–¥)',
    'bo7': 'Bo7 (–¥–æ 4 –ø–æ–±–µ–¥)'
  };
  return formatNames[this.format] || 'Bo1';
});

// –ú–µ—Ç–æ–¥—ã —ç–∫–∑–µ–º–ø–ª—è—Ä–∞
duelInvitationSchema.methods.isExpired = function() {
  return new Date() > this.expiresAt;
};

duelInvitationSchema.methods.canAccept = function(userId, username = null) {
  if (this.status !== 'pending' || this.isExpired()) {
    return false;
  }
  
  // –ù–µ–ª—å–∑—è –ø—Ä–∏–Ω—è—Ç—å —Å–æ–±—Å—Ç–≤–µ–Ω–Ω–æ–µ –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏–µ
  if (this.challengerId === userId) {
    return false;
  }
  
  // –ï—Å–ª–∏ –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏–µ –∞–¥—Ä–µ—Å–æ–≤–∞–Ω–æ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–º—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
  if (this.targetUserId && this.targetUserId !== userId) {
    return false;
  }
  
  // –ï—Å–ª–∏ –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏–µ –∞–¥—Ä–µ—Å–æ–≤–∞–Ω–æ –ø–æ username
  if (this.targetUsername && username && this.targetUsername !== username) {
    return false;
  }
  
  return true;
};

duelInvitationSchema.methods.canCancel = function(userId) {
  return this.status === 'pending' && 
         this.challengerId === userId &&
         !this.isExpired();
};

duelInvitationSchema.methods.getInviteText = function() {
  const target = this.targetUsername ? `@${this.targetUsername}` : '–ª—é–±–æ–≥–æ –∏–≥—Ä–æ–∫–∞';
  return `üéÆ **–ü–†–ò–ì–õ–ê–®–ï–ù–ò–ï –ù–ê –î–£–≠–õ–¨** üéÆ\n\n` +
         `${this.gameType} **${this.gameName}** ${this.gameType}\n` +
         `üë§ –û—Ç: @${this.challengerUsername}\n` +
         `üéØ –í—ã–∑—ã–≤–∞–µ—Ç: ${target}\n` +
         `üí∞ –°—Ç–∞–≤–∫–∞: ${this.amount} USDT –∫–∞–∂–¥—ã–π\n` +
         `üèÜ –§–æ—Ä–º–∞—Ç: ${this.formatName}\n` +
         `‚è± –î–µ–π—Å—Ç–≤—É–µ—Ç –¥–æ: ${this.expiresAt.toLocaleTimeString('ru')}`;
};

// –°—Ç–∞—Ç–∏—á–µ—Å–∫–∏–µ –º–µ—Ç–æ–¥—ã
duelInvitationSchema.statics.cleanupExpired = async function() {
  const expiredInvitations = await this.find({
    status: 'pending',
    expiresAt: { $lt: new Date() }
  });
  
  await this.updateMany(
    {
      status: 'pending',
      expiresAt: { $lt: new Date() }
    },
    {
      status: 'expired'
    }
  );
  
  return expiredInvitations.length;
};

duelInvitationSchema.statics.findActiveByUser = async function(userId) {
  return await this.find({
    $or: [
      { challengerId: userId },
      { targetUserId: userId },
      { targetUserId: null } // –û—Ç–∫—Ä—ã—Ç—ã–µ –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏—è
    ],
    status: 'pending',
    expiresAt: { $gt: new Date() }
  }).sort({ createdAt: -1 });
};

// –•—É–∫–∏ –º–æ–¥–µ–ª–∏
duelInvitationSchema.pre('save', function(next) {
  // –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å—Ç–∞—Ç—É—Å expired –¥–ª—è –∏—Å—Ç–µ–∫—à–∏—Ö –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏–π
  if (this.status === 'pending' && this.isExpired()) {
    this.status = 'expired';
  }
  
  // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –≤—Ä–µ–º—è –ø—Ä–∏–Ω—è—Ç–∏—è
  if (this.isModified('status') && this.status === 'accepted' && !this.acceptedAt) {
    this.acceptedAt = new Date();
  }
  
  next();
});

module.exports = mongoose.model('DuelInvitation', duelInvitationSchema);