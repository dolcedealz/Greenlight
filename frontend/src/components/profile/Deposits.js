// frontend/src/components/profile/Deposits.js
import React, { useState, useEffect } from 'react';
import { paymentApi } from '../../services/api';
import { showNotification } from '../../utils/telegram';
import '../../styles/Deposits.css';

const Deposits = ({ balance, onBalanceUpdate }) => {
  const [showDepositModal, setShowDepositModal] = useState(false);
  const [depositAmount, setDepositAmount] = useState('');
  const [loading, setLoading] = useState(false);
  const [deposits, setDeposits] = useState([]);
  const [loadingHistory, setLoadingHistory] = useState(false);

  // –ü—Ä–µ–¥—É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–Ω—ã–µ —Å—É–º–º—ã
  const presetAmounts = [10, 20, 50, 100, 500, 1000];

  // –ó–∞–≥—Ä—É–∑–∫–∞ –∏—Å—Ç–æ—Ä–∏–∏ –¥–µ–ø–æ–∑–∏—Ç–æ–≤
  useEffect(() => {
    fetchDepositHistory();
  }, []);

  const fetchDepositHistory = async () => {
    try {
      setLoadingHistory(true);
      const response = await paymentApi.getUserDeposits({ limit: 5 });
      setDeposits(response.data.data.deposits || []);
    } catch (error) {

    } finally {
      setLoadingHistory(false);
    }
  };

  // –°–æ–∑–¥–∞–Ω–∏–µ –¥–µ–ø–æ–∑–∏—Ç–∞
  const handleCreateDeposit = async () => {
    const amount = parseFloat(depositAmount);

    if (isNaN(amount) || amount <= 0) {
      showNotification('–í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—É—é —Å—É–º–º—É');
      return;
    }

    if (amount < 1) {
      showNotification('–ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è —Å—É–º–º–∞: 1 USDT');
      return;
    }

    if (amount > 10000) {
      showNotification('–ú–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è —Å—É–º–º–∞: 10000 USDT');
      return;
    }

    try {
      setLoading(true);

      const response = await paymentApi.createDeposit({
        amount,
        description: `–ü–æ–ø–æ–ª–Ω–µ–Ω–∏–µ –±–∞–ª–∞–Ω—Å–∞ –Ω–∞ ${amount} USDT`
      });

      const depositData = response.data.data;

      // –û—Ç–∫—Ä—ã–≤–∞–µ–º —Å—Å—ã–ª–∫—É –¥–ª—è –æ–ø–ª–∞—Ç—ã
      if (window.Telegram && window.Telegram.WebApp) {
        window.Telegram.WebApp.openLink(depositData.payUrl);
      } else {
        window.open(depositData.payUrl, '_blank');
      }

      showNotification('–°—á–µ—Ç —Å–æ–∑–¥–∞–Ω! –ü–µ—Ä–µ–Ω–∞–ø—Ä–∞–≤–ª—è–µ–º –Ω–∞ –æ–ø–ª–∞—Ç—É...');

      // –ó–∞–∫—Ä—ã–≤–∞–µ–º –º–æ–¥–∞–ª—å–Ω–æ–µ –æ–∫–Ω–æ
      setShowDepositModal(false);
      setDepositAmount('');

      // –û–±–Ω–æ–≤–ª—è–µ–º –∏—Å—Ç–æ—Ä–∏—é
      fetchDepositHistory();

      // –ù–∞—á–∏–Ω–∞–µ–º –ø—Ä–æ–≤–µ—Ä–∫—É —Å—Ç–∞—Ç—É—Å–∞
      startStatusPolling(depositData.depositId);

    } catch (error) {

      showNotification(error.response?.data?.message || '–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –¥–µ–ø–æ–∑–∏—Ç–∞');
    } finally {
      setLoading(false);
    }
  };

  // –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç–∞—Ç—É—Å–∞ –¥–µ–ø–æ–∑–∏—Ç–∞
  const startStatusPolling = (depositId) => {
    let attempts = 0;
    const maxAttempts = 60; // 5 –º–∏–Ω—É—Ç –º–∞–∫—Å–∏–º—É–º

    const checkStatus = async () => {
      try {
        const response = await paymentApi.checkDepositStatus(depositId);
        const status = response.data.data;

        if (status.isPaid) {
          showNotification('‚úÖ –î–µ–ø–æ–∑–∏—Ç —É—Å–ø–µ—à–Ω–æ –∑–∞—á–∏—Å–ª–µ–Ω!');

          // –û–±–Ω–æ–≤–ª—è–µ–º –±–∞–ª–∞–Ω—Å
          if (onBalanceUpdate) {
            const newBalance = await onBalanceUpdate();
            showNotification(`–ù–æ–≤—ã–π –±–∞–ª–∞–Ω—Å: ${newBalance.toFixed(2)} USDT`);
          }

          // –û–±–Ω–æ–≤–ª—è–µ–º –∏—Å—Ç–æ—Ä–∏—é
          fetchDepositHistory();
          return;
        }

        if (status.isExpired) {
          showNotification('‚è∞ –°—Ä–æ–∫ –¥–µ–π—Å—Ç–≤–∏—è —Å—á–µ—Ç–∞ –∏—Å—Ç–µ–∫');
          fetchDepositHistory();
          return;
        }

        // –ü—Ä–æ–¥–æ–ª–∂–∞–µ–º –ø—Ä–æ–≤–µ—Ä–∫—É
        attempts++;
        if (attempts < maxAttempts) {
          setTimeout(checkStatus, 5000); // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–∞–∂–¥—ã–µ 5 —Å–µ–∫—É–Ω–¥
        }
      } catch (error) {

      }
    };

    // –ù–∞—á–∏–Ω–∞–µ–º –ø—Ä–æ–≤–µ—Ä–∫—É —á–µ—Ä–µ–∑ 5 —Å–µ–∫—É–Ω–¥
    setTimeout(checkStatus, 5000);
  };

  // –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–∞—Ç—ã
  const formatDate = (dateString) => {
    return new Date(dateString).toLocaleDateString('ru-RU', {
      day: '2-digit',
      month: '2-digit',
      year: 'numeric',
      hour: '2-digit',
      minute: '2-digit'
    });
  };

  // –ü–æ–ª—É—á–µ–Ω–∏–µ –∏–∫–æ–Ω–∫–∏ —Å—Ç–∞—Ç—É—Å–∞
  const getStatusIcon = (status) => {
    switch (status) {
      case 'paid': return '‚úÖ';
      case 'pending': return '‚è≥';
      case 'expired': return '‚è∞';
      case 'failed': return '‚ùå';
      default: return '‚ùì';
    }
  };

  // –ü–æ–ª—É—á–µ–Ω–∏–µ –Ω–∞–∑–≤–∞–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞
  const getStatusName = (status) => {
    switch (status) {
      case 'paid': return '–û–ø–ª–∞—á–µ–Ω';
      case 'pending': return '–û–∂–∏–¥–∞–µ—Ç –æ–ø–ª–∞—Ç—ã';
      case 'expired': return '–ò—Å—Ç–µ–∫';
      case 'failed': return '–û—à–∏–±–∫–∞';
      default: return status;
    }
  };

  return (
    <div className="deposits-section">
      <div className="deposits-header">
        <h3>üí∞ –ü–æ–ø–æ–ª–Ω–µ–Ω–∏–µ –±–∞–ª–∞–Ω—Å–∞</h3>
        <button 
          className="deposit-button"
          onClick={() => setShowDepositModal(true)}
        >
          –ü–æ–ø–æ–ª–Ω–∏—Ç—å
        </button>
      </div>

      {/* –ò—Å—Ç–æ—Ä–∏—è –ø–æ—Å–ª–µ–¥–Ω–∏—Ö –¥–µ–ø–æ–∑–∏—Ç–æ–≤ */}
      <div className="deposits-history">
        <h4>–ü–æ—Å–ª–µ–¥–Ω–∏–µ –ø–æ–ø–æ–ª–Ω–µ–Ω–∏—è</h4>
        {loadingHistory ? (
          <div className="deposits-loading">
            <div className="loader"></div>
          </div>
        ) : deposits.length === 0 ? (
          <div className="no-deposits">
            <p>–£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç –ø–æ–ø–æ–ª–Ω–µ–Ω–∏–π</p>
          </div>
        ) : (
          <div className="deposits-list">
            {deposits.map(deposit => (
              <div key={deposit._id} className="deposit-item">
                <div className="deposit-icon">
                  {getStatusIcon(deposit.status)}
                </div>
                <div className="deposit-details">
                  <div className="deposit-header">
                    <span className="deposit-amount">{deposit.amount} USDT</span>
                    <span className="deposit-status">{getStatusName(deposit.status)}</span>
                  </div>
                  <div className="deposit-date">{formatDate(deposit.createdAt)}</div>
                </div>
              </div>
            ))}
          </div>
        )}
      </div>

      {/* –ú–æ–¥–∞–ª—å–Ω–æ–µ –æ–∫–Ω–æ –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –¥–µ–ø–æ–∑–∏—Ç–∞ */}
      {showDepositModal && (
        <div className="deposit-modal">
          <div className="deposit-modal-content">
            <div className="deposit-modal-header">
              <h3>–ü–æ–ø–æ–ª–Ω–µ–Ω–∏–µ –±–∞–ª–∞–Ω—Å–∞</h3>
              <button 
                className="close-button"
                onClick={() => setShowDepositModal(false)}
              >
                ‚úï
              </button>
            </div>

            <div className="deposit-modal-body">
              <div className="deposit-input-group">
                <label>–°—É–º–º–∞ –ø–æ–ø–æ–ª–Ω–µ–Ω–∏—è (USDT)</label>
                <input
                  type="number"
                  value={depositAmount}
                  onChange={(e) => setDepositAmount(e.target.value)}
                  placeholder="–í–≤–µ–¥–∏—Ç–µ —Å—É–º–º—É"
                  min="1"
                  max="10000"
                  step="0.01"
                />
              </div>

              <div className="preset-amounts">
                {presetAmounts.map(amount => (
                  <button
                    key={amount}
                    className="preset-amount-button"
                    onClick={() => setDepositAmount(amount.toString())}
                  >
                    {amount} USDT
                  </button>
                ))}
              </div>

              <div className="deposit-info">
                <p>üí° –ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è —Å—É–º–º–∞: 1 USDT</p>
                <p>üí° –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è —Å—É–º–º–∞: 10,000 USDT</p>
                <p>üí° –ü–æ–ø–æ–ª–Ω–µ–Ω–∏–µ —á–µ—Ä–µ–∑ @CryptoBot</p>
              </div>
            </div>

            <div className="deposit-modal-footer">
              <button
                className="cancel-button"
                onClick={() => setShowDepositModal(false)}
              >
                –û—Ç–º–µ–Ω–∞
              </button>
              <button
                className="confirm-button"
                onClick={handleCreateDeposit}
                disabled={loading || !depositAmount}
              >
                {loading ? '–°–æ–∑–¥–∞–Ω–∏–µ...' : '–°–æ–∑–¥–∞—Ç—å —Å—á–µ—Ç'}
              </button>
            </div>
          </div>
        </div>
      )}
    </div>
  );
};

export default Deposits;