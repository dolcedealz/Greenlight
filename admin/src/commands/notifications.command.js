// admin/src/commands/notifications.command.js
const { Markup } = require('telegraf');
const axios = require('axios');

// –ü–æ–ª—É—á–∞–µ–º API URL –∏ —Ç–æ–∫–µ–Ω –∏–∑ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è
const apiUrl = process.env.API_URL || 'https://greenlight-api-ghqh.onrender.com/api';
const adminToken = process.env.ADMIN_API_TOKEN;

// –°–æ–∑–¥–∞–µ–º axios instance —Å –ø—Ä–µ–¥—É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–Ω—ã–º–∏ –∑–∞–≥–æ–ª–æ–≤–∫–∞–º–∏
const apiClient = axios.create({
  baseURL: apiUrl,
  headers: {
    'Authorization': `Bearer ${adminToken}`,
    'Content-Type': 'application/json'
  },
  timeout: 60000 // –£–≤–µ–ª–∏—á–µ–Ω–Ω—ã–π —Ç–∞–π–º–∞—É—Ç –¥–ª—è –º–∞—Å—Å–æ–≤—ã—Ö –æ–ø–µ—Ä–∞—Ü–∏–π
});

/**
 * –ü–æ–∫–∞–∑–∞—Ç—å –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é –º–∞—Å—Å–æ–≤—ã—Ö —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
 */
async function showNotificationsMenu(ctx) {
  console.log('ADMIN: –ü–æ–∫–∞–∑ –º–µ–Ω—é –º–∞—Å—Å–æ–≤—ã—Ö —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π');
  
  const keyboard = Markup.inlineKeyboard([
    [Markup.button.callback('üì¢ –°–æ–∑–¥–∞—Ç—å —Ä–∞—Å—Å—ã–ª–∫—É', 'notifications_create')],
    [Markup.button.callback('üìã –ò—Å—Ç–æ—Ä–∏—è —Ä–∞—Å—Å—ã–ª–æ–∫', 'notifications_history')],
    [Markup.button.callback('üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π', 'notifications_stats')],
    [Markup.button.callback('üë• –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø–æ–¥–ø–∏—Å–∫–∞–º–∏', 'notifications_subscriptions')],
    [Markup.button.callback('üìù –®–∞–±–ª–æ–Ω—ã —Å–æ–æ–±—â–µ–Ω–∏–π', 'notifications_templates')],
    [Markup.button.callback('‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏ —Ä–∞—Å—Å—ã–ª–æ–∫', 'notifications_settings')],
    [Markup.button.callback('‚óÄÔ∏è –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é', 'main_menu')]
  ]);

  const message = 'üì¢ *–ú–∞—Å—Å–æ–≤—ã–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è*\n\n–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:';
  
  try {
    if (ctx.callbackQuery) {
      await ctx.editMessageText(message, {
        parse_mode: 'Markdown',
        ...keyboard
      });
    } else {
      await ctx.reply(message, {
        parse_mode: 'Markdown',
        ...keyboard
      });
    }
  } catch (error) {
    console.error('ADMIN: –û—à–∏–±–∫–∞ –ø–æ–∫–∞–∑–∞ –º–µ–Ω—é —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π:', error);
    await ctx.reply(message, {
      parse_mode: 'Markdown',
      ...keyboard
    });
  }
}

/**
 * –ù–∞—á–∞—Ç—å —Å–æ–∑–¥–∞–Ω–∏–µ —Ä–∞—Å—Å—ã–ª–∫–∏
 */
async function startNotificationCreation(ctx) {
  console.log('ADMIN: –ù–∞—á–∞–ª–æ —Å–æ–∑–¥–∞–Ω–∏—è —Ä–∞—Å—Å—ã–ª–∫–∏');
  
  ctx.session = ctx.session || {};
  ctx.session.creatingNotification = {
    step: 'type'
  };
  
  const keyboard = Markup.inlineKeyboard([
    [
      Markup.button.callback('üë• –í—Å–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º', 'notif_type_all'),
      Markup.button.callback('üéÆ –ê–∫—Ç–∏–≤–Ω—ã–º –∏–≥—Ä–æ–∫–∞–º', 'notif_type_active')
    ],
    [
      Markup.button.callback('üí∞ VIP –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º', 'notif_type_vip'),
      Markup.button.callback('üò¥ –ù–µ–∞–∫—Ç–∏–≤–Ω—ã–º', 'notif_type_inactive')
    ],
    [
      Markup.button.callback('üéØ –ü–æ —Å–µ–≥–º–µ–Ω—Ç–∞–º', 'notif_type_segmented'),
      Markup.button.callback('üÜî –ü–æ ID —Å–ø–∏—Å–∫—É', 'notif_type_custom')
    ],
    [
      Markup.button.callback('‚ùå –û—Ç–º–µ–Ω–∞', 'notifications_cancel')
    ]
  ]);

  const message = 'üì¢ *–°–æ–∑–¥–∞–Ω–∏–µ –Ω–æ–≤–æ–π —Ä–∞—Å—Å—ã–ª–∫–∏*\n\n–®–∞–≥ 1/5: –í—ã–±–µ—Ä–∏—Ç–µ —Ü–µ–ª–µ–≤—É—é –∞—É–¥–∏—Ç–æ—Ä–∏—é:';
  
  try {
    if (ctx.callbackQuery) {
      await ctx.editMessageText(message, {
        parse_mode: 'Markdown',
        ...keyboard
      });
    } else {
      await ctx.reply(message, {
        parse_mode: 'Markdown',
        ...keyboard
      });
    }
  } catch (error) {
    console.error('ADMIN: –û—à–∏–±–∫–∞ –ø–æ–∫–∞–∑–∞ —Å–æ–∑–¥–∞–Ω–∏—è —Ä–∞—Å—Å—ã–ª–∫–∏:', error);
    await ctx.reply(message, {
      parse_mode: 'Markdown',
      ...keyboard
    });
  }
}

/**
 * –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ —Ç–∏–ø–∞ –∞—É–¥–∏—Ç–æ—Ä–∏–∏
 */
async function handleAudienceSelection(ctx, audienceType) {
  console.log('ADMIN: –í—ã–±–æ—Ä –∞—É–¥–∏—Ç–æ—Ä–∏–∏:', audienceType);
  
  if (!ctx.session || !ctx.session.creatingNotification) {
    return ctx.answerCbQuery('‚ùå –°–µ—Å—Å–∏—è —Å–æ–∑–¥–∞–Ω–∏—è —Ä–∞—Å—Å—ã–ª–∫–∏ –∏—Å—Ç–µ–∫–ª–∞');
  }
  
  ctx.session.creatingNotification.audienceType = audienceType;
  ctx.session.creatingNotification.step = 'message';
  
  let message = 'üìù *–°–æ–∑–¥–∞–Ω–∏–µ —Ä–∞—Å—Å—ã–ª–∫–∏*\n\n';
  message += `–®–∞–≥ 2/5: –í–≤–µ–¥–∏—Ç–µ —Ç–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è –¥–ª—è —Ä–∞—Å—Å—ã–ª–∫–∏\n\n`;
  message += `üë• –ê—É–¥–∏—Ç–æ—Ä–∏—è: ${getAudienceTypeDisplayName(audienceType)}\n\n`;
  message += `üí° *–ü–æ–¥—Å–∫–∞–∑–∫–∏:*\n`;
  message += `‚Ä¢ –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ *–∂–∏—Ä–Ω—ã–π —Ç–µ–∫—Å—Ç* –∏ _–∫—É—Ä—Å–∏–≤_\n`;
  message += `‚Ä¢ –î–æ–±–∞–≤–ª—è–π—Ç–µ —ç–º–æ–¥–∑–∏ –¥–ª—è –ø—Ä–∏–≤–ª–µ—á–µ–Ω–∏—è –≤–Ω–∏–º–∞–Ω–∏—è\n`;
  message += `‚Ä¢ –ú–∞–∫—Å–∏–º—É–º 4096 —Å–∏–º–≤–æ–ª–æ–≤\n`;
  message += `‚Ä¢ –ò–∑–±–µ–≥–∞–π—Ç–µ —Å–ø–∞–º-—Å–ª–æ–≤`;
  
  const keyboard = Markup.inlineKeyboard([
    [Markup.button.callback('üìù –ò—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å —à–∞–±–ª–æ–Ω', 'notif_use_template')],
    [Markup.button.callback('‚ùå –û—Ç–º–µ–Ω–∞', 'notifications_cancel')]
  ]);
  
  await ctx.editMessageText(message, {
    parse_mode: 'Markdown',
    ...keyboard
  });
  
  await ctx.answerCbQuery();
}

/**
 * –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ç–µ–∫—Å—Ç–∞ —Å–æ–æ–±—â–µ–Ω–∏—è —Ä–∞—Å—Å—ã–ª–∫–∏
 */
async function handleNotificationCreation(ctx) {
  if (!ctx.session || !ctx.session.creatingNotification) {
    return;
  }
  
  const notificationData = ctx.session.creatingNotification;
  const text = ctx.message.text;
  
  console.log(`ADMIN: –®–∞–≥ —Å–æ–∑–¥–∞–Ω–∏—è —Ä–∞—Å—Å—ã–ª–∫–∏: ${notificationData.step}, —Ç–µ–∫—Å—Ç: ${text.substring(0, 50)}...`);
  
  switch (notificationData.step) {
    case 'message':
      if (text.length > 4096) {
        await ctx.reply('‚ùå –°–æ–æ–±—â–µ–Ω–∏–µ —Å–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω–æ–µ. –ú–∞–∫—Å–∏–º—É–º 4096 —Å–∏–º–≤–æ–ª–æ–≤.');
        return;
      }
      
      notificationData.message = text;
      notificationData.step = 'priority';
      
      const keyboard = Markup.inlineKeyboard([
        [
          Markup.button.callback('üî¥ –í—ã—Å–æ–∫–∏–π', 'notif_priority_high'),
          Markup.button.callback('üü° –°—Ä–µ–¥–Ω–∏–π', 'notif_priority_medium')
        ],
        [
          Markup.button.callback('üü¢ –ù–∏–∑–∫–∏–π', 'notif_priority_low'),
          Markup.button.callback('üì¢ –û–±—ã—á–Ω—ã–π', 'notif_priority_normal')
        ],
        [
          Markup.button.callback('‚ùå –û—Ç–º–µ–Ω–∞', 'notifications_cancel')
        ]
      ]);
      
      await ctx.reply(
        'üìä –®–∞–≥ 3/5: –í—ã–±–µ—Ä–∏—Ç–µ –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç —Ä–∞—Å—Å—ã–ª–∫–∏:',
        keyboard
      );
      break;
      
    case 'schedule':
      // –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è (–µ—Å–ª–∏ –≤—ã–±—Ä–∞–Ω–æ –æ—Ç–ª–æ–∂–µ–Ω–Ω–æ–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∏–µ)
      notificationData.scheduleTime = text;
      await showNotificationPreview(ctx, notificationData);
      break;
  }
}

/**
 * –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç–∞
 */
async function handlePrioritySelection(ctx, priority) {
  console.log('ADMIN: –í—ã–±–æ—Ä –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç–∞:', priority);
  
  if (!ctx.session || !ctx.session.creatingNotification) {
    return ctx.answerCbQuery('‚ùå –°–µ—Å—Å–∏—è —Å–æ–∑–¥–∞–Ω–∏—è —Ä–∞—Å—Å—ã–ª–∫–∏ –∏—Å—Ç–µ–∫–ª–∞');
  }
  
  ctx.session.creatingNotification.priority = priority;
  ctx.session.creatingNotification.step = 'timing';
  
  const keyboard = Markup.inlineKeyboard([
    [Markup.button.callback('üöÄ –û—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–µ–π—á–∞—Å', 'notif_timing_now')],
    [Markup.button.callback('‚è∞ –ó–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞—Ç—å', 'notif_timing_scheduled')],
    [Markup.button.callback('üéØ A/B —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ', 'notif_timing_ab_test')],
    [Markup.button.callback('‚ùå –û—Ç–º–µ–Ω–∞', 'notifications_cancel')]
  ]);
  
  let message = '‚è∞ *–°–æ–∑–¥–∞–Ω–∏–µ —Ä–∞—Å—Å—ã–ª–∫–∏*\n\n';
  message += `–®–∞–≥ 4/5: –í—ã–±–µ—Ä–∏—Ç–µ –≤—Ä–µ–º—è –æ—Ç–ø—Ä–∞–≤–∫–∏:\n\n`;
  message += `üìä –ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç: ${getPriorityDisplayName(priority)}`;
  
  await ctx.editMessageText(message, {
    parse_mode: 'Markdown',
    ...keyboard
  });
  
  await ctx.answerCbQuery();
}

/**
 * –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ –≤—Ä–µ–º–µ–Ω–∏ –æ—Ç–ø—Ä–∞–≤–∫–∏
 */
async function handleTimingSelection(ctx, timing) {
  console.log('ADMIN: –í—ã–±–æ—Ä –≤—Ä–µ–º–µ–Ω–∏:', timing);
  
  if (!ctx.session || !ctx.session.creatingNotification) {
    return ctx.answerCbQuery('‚ùå –°–µ—Å—Å–∏—è —Å–æ–∑–¥–∞–Ω–∏—è —Ä–∞—Å—Å—ã–ª–∫–∏ –∏—Å—Ç–µ–∫–ª–∞');
  }
  
  ctx.session.creatingNotification.timing = timing;
  
  if (timing === 'scheduled') {
    ctx.session.creatingNotification.step = 'schedule';
    
    await ctx.editMessageText(
      '‚è∞ –®–∞–≥ 4.1/5: –í–≤–µ–¥–∏—Ç–µ –¥–∞—Ç—É –∏ –≤—Ä–µ–º—è –æ—Ç–ø—Ä–∞–≤–∫–∏:\n\n' +
      '–§–æ—Ä–º–∞—Ç: –î–î.–ú–ú.–ì–ì–ì–ì –ß–ß:–ú–ú\n' +
      '–ü—Ä–∏–º–µ—Ä: 25.12.2024 15:30',
      {
        parse_mode: 'Markdown',
        ...Markup.inlineKeyboard([
          [Markup.button.callback('‚ùå –û—Ç–º–µ–Ω–∞', 'notifications_cancel')]
        ])
      }
    );
  } else {
    await showNotificationPreview(ctx, ctx.session.creatingNotification);
  }
  
  await ctx.answerCbQuery();
}

/**
 * –ü–æ–∫–∞–∑–∞—Ç—å –ø—Ä–µ–¥–≤–∞—Ä–∏—Ç–µ–ª—å–Ω—ã–π –ø—Ä–æ—Å–º–æ—Ç—Ä —Ä–∞—Å—Å—ã–ª–∫–∏
 */
async function showNotificationPreview(ctx, notificationData) {
  console.log('ADMIN: –ü–æ–∫–∞–∑ –ø—Ä–µ–≤—å—é —Ä–∞—Å—Å—ã–ª–∫–∏');
  
  try {
    // –ü–æ–ª—É—á–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –∞—É–¥–∏—Ç–æ—Ä–∏–∏
    const audienceResponse = await apiClient.post('/admin/notifications/audience-stats', {
      audienceType: notificationData.audienceType
    });
    
    const audienceCount = audienceResponse.data.success ? 
      audienceResponse.data.data.count : 0;
    
    let message = 'üëÄ *–ü—Ä–µ–¥–≤–∞—Ä–∏—Ç–µ–ª—å–Ω—ã–π –ø—Ä–æ—Å–º–æ—Ç—Ä —Ä–∞—Å—Å—ã–ª–∫–∏*\n\n';
    message += `üë• **–ê—É–¥–∏—Ç–æ—Ä–∏—è:** ${getAudienceTypeDisplayName(notificationData.audienceType)}\n`;
    message += `üìä **–ü–æ–ª—É—á–∞—Ç–µ–ª–µ–π:** ${audienceCount} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π\n`;
    message += `üìä **–ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç:** ${getPriorityDisplayName(notificationData.priority)}\n`;
    message += `‚è∞ **–û—Ç–ø—Ä–∞–≤–∫–∞:** ${getTimingDisplayName(notificationData.timing, notificationData.scheduleTime)}\n\n`;
    
    message += `üìù **–¢–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è:**\n`;
    message += `‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ\n`;
    message += `${notificationData.message}\n`;
    message += `‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ\n\n`;
    
    // –ü—Ä–∏–º–µ—Ä–Ω–∞—è —Å—Ç–æ–∏–º–æ—Å—Ç—å –æ—Ç–ø—Ä–∞–≤–∫–∏
    const estimatedCost = Math.ceil(audienceCount * 0.001); // –ü—Ä–∏–º–µ—Ä–Ω–∞—è —Å—Ç–æ–∏–º–æ—Å—Ç—å
    message += `üí∞ **–ü—Ä–∏–º–µ—Ä–Ω–∞—è —Å—Ç–æ–∏–º–æ—Å—Ç—å:** $${estimatedCost.toFixed(2)} USD\n`;
    message += `‚è±Ô∏è **–í—Ä–µ–º—è –¥–æ—Å—Ç–∞–≤–∫–∏:** ~${Math.ceil(audienceCount / 100)} –º–∏–Ω—É—Ç`;
    
    const keyboard = Markup.inlineKeyboard([
      [
        Markup.button.callback('‚úÖ –û—Ç–ø—Ä–∞–≤–∏—Ç—å —Ä–∞—Å—Å—ã–ª–∫—É', 'notif_confirm_send'),
        Markup.button.callback('üíæ –°–æ—Ö—Ä–∞–Ω–∏—Ç—å –∫–∞–∫ —á–µ—Ä–Ω–æ–≤–∏–∫', 'notif_save_draft')
      ],
      [
        Markup.button.callback('‚úèÔ∏è –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å', 'notif_edit'),
        Markup.button.callback('üß™ –¢–µ—Å—Ç–æ–≤–∞—è –æ—Ç–ø—Ä–∞–≤–∫–∞', 'notif_test_send')
      ],
      [
        Markup.button.callback('‚ùå –û—Ç–º–µ–Ω–∞', 'notifications_cancel')
      ]
    ]);
    
    if (ctx.callbackQuery) {
      await ctx.editMessageText(message, {
        parse_mode: 'Markdown',
        ...keyboard
      });
    } else {
      await ctx.reply(message, {
        parse_mode: 'Markdown',
        ...keyboard
      });
    }
    
  } catch (error) {
    console.error('ADMIN: –û—à–∏–±–∫–∞ –ø–æ–∫–∞–∑–∞ –ø—Ä–µ–≤—å—é:', error);
    await ctx.reply('‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –ø—Ä–µ–≤—å—é. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.');
  }
}

/**
 * –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –∏ –æ—Ç–ø—Ä–∞–≤–∫–∞ —Ä–∞—Å—Å—ã–ª–∫–∏
 */
async function confirmNotificationSend(ctx) {
  console.log('ADMIN: –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Ä–∞—Å—Å—ã–ª–∫–∏');
  
  if (!ctx.session || !ctx.session.creatingNotification) {
    return ctx.answerCbQuery('‚ùå –°–µ—Å—Å–∏—è —Å–æ–∑–¥–∞–Ω–∏—è —Ä–∞—Å—Å—ã–ª–∫–∏ –∏—Å—Ç–µ–∫–ª–∞');
  }
  
  try {
    await ctx.answerCbQuery();
    
    await ctx.editMessageText(
      'üì§ *–û—Ç–ø—Ä–∞–≤–∫–∞ —Ä–∞—Å—Å—ã–ª–∫–∏...*\n\n‚è≥ –≠—Ç–æ –º–æ–∂–µ—Ç –∑–∞–Ω—è—Ç—å –Ω–µ—Å–∫–æ–ª—å–∫–æ –º–∏–Ω—É—Ç.\n–ù–µ –∑–∞–∫—Ä—ã–≤–∞–π—Ç–µ –±–æ—Ç–∞.',
      { parse_mode: 'Markdown' }
    );
    
    const notificationData = ctx.session.creatingNotification;
    
    const response = await apiClient.post('/admin/notifications/send', {
      audienceType: notificationData.audienceType,
      message: notificationData.message,
      priority: notificationData.priority,
      timing: notificationData.timing,
      scheduleTime: notificationData.scheduleTime,
      adminId: ctx.from.id
    });
    
    if (!response.data.success) {
      throw new Error(response.data.message || '–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Ä–∞—Å—Å—ã–ª–∫–∏');
    }
    
    const result = response.data.data.notification;
    
    let message = '‚úÖ *–†–∞—Å—Å—ã–ª–∫–∞ –∑–∞–ø—É—â–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ!*\n\n';
    message += `üìä **–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏:**\n`;
    message += `üì§ –û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ: ${result.sent || 0}\n`;
    message += `‚ùå –û—à–∏–±–æ–∫: ${result.failed || 0}\n`;
    message += `‚è≥ –í –æ—á–µ—Ä–µ–¥–∏: ${result.queued || 0}\n`;
    message += `üÜî ID —Ä–∞—Å—Å—ã–ª–∫–∏: \`${result._id}\`\n\n`;
    
    if (notificationData.timing === 'scheduled') {
      message += `‚è∞ –ó–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–æ –Ω–∞: ${notificationData.scheduleTime}\n`;
    } else {
      message += `‚ö° –í—Ä–µ–º—è –æ—Ç–ø—Ä–∞–≤–∫–∏: ${result.duration || 0}ms\n`;
    }
    
    message += `\nüìä –ü–æ–¥—Ä–æ–±–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –¥–æ—Å—Ç—É–ø–Ω–∞ –≤ —Ä–∞–∑–¥–µ–ª–µ "–ò—Å—Ç–æ—Ä–∏—è —Ä–∞—Å—Å—ã–ª–æ–∫"`;
    
    const keyboard = Markup.inlineKeyboard([
      [Markup.button.callback('üìã –ò—Å—Ç–æ—Ä–∏—è —Ä–∞—Å—Å—ã–ª–æ–∫', 'notifications_history')],
      [Markup.button.callback('üì¢ –°–æ–∑–¥–∞—Ç—å –µ—â–µ –æ–¥–Ω—É', 'notifications_create')],
      [Markup.button.callback('‚óÄÔ∏è –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é', 'notifications_menu')]
    ]);
    
    await ctx.editMessageText(message, {
      parse_mode: 'Markdown',
      ...keyboard
    });
    
    // –û—á–∏—â–∞–µ–º —Å–µ—Å—Å–∏—é
    delete ctx.session.creatingNotification;
    
  } catch (error) {
    console.error('ADMIN: –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Ä–∞—Å—Å—ã–ª–∫–∏:', error);
    
    let errorMessage = '‚ùå *–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Ä–∞—Å—Å—ã–ª–∫–∏*\n\n';
    errorMessage += `üìù ${error.message}\n\n`;
    errorMessage += '–ü—Ä–æ–≤–µ—Ä—å—Ç–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –∏ –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.';
    
    const keyboard = Markup.inlineKeyboard([
      [Markup.button.callback('üîÑ –ü–æ–ø—Ä–æ–±–æ–≤–∞—Ç—å —Å–Ω–æ–≤–∞', 'notif_confirm_send')],
      [Markup.button.callback('üíæ –°–æ—Ö—Ä–∞–Ω–∏—Ç—å —á–µ—Ä–Ω–æ–≤–∏–∫', 'notif_save_draft')],
      [Markup.button.callback('‚óÄÔ∏è –ù–∞–∑–∞–¥', 'notifications_menu')]
    ]);
    
    await ctx.editMessageText(errorMessage, {
      parse_mode: 'Markdown',
      ...keyboard
    });
  }
}

/**
 * –ü–æ–∫–∞–∑–∞—Ç—å –∏—Å—Ç–æ—Ä–∏—é —Ä–∞—Å—Å—ã–ª–æ–∫
 */
async function showNotificationsHistory(ctx, page = 1) {
  console.log('ADMIN: –ó–∞–ø—Ä–æ—Å –∏—Å—Ç–æ—Ä–∏–∏ —Ä–∞—Å—Å—ã–ª–æ–∫, —Å—Ç—Ä–∞–Ω–∏—Ü–∞:', page);
  
  try {
    const response = await apiClient.get('/admin/notifications/history', {
      params: { 
        page: page,
        limit: 10
      }
    });
    
    if (!response.data.success) {
      throw new Error(response.data.message || '–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∏—Å—Ç–æ—Ä–∏–∏');
    }
    
    const data = response.data.data;
    const notifications = data.notifications;
    const pagination = data.pagination;
    
    if (notifications.length === 0) {
      const message = 'üìã *–ò—Å—Ç–æ—Ä–∏—è —Ä–∞—Å—Å—ã–ª–æ–∫*\n\n–†–∞—Å—Å—ã–ª–∫–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã.';
      const keyboard = Markup.inlineKeyboard([
        [Markup.button.callback('üì¢ –°–æ–∑–¥–∞—Ç—å –ø–µ—Ä–≤—É—é —Ä–∞—Å—Å—ã–ª–∫—É', 'notifications_create')],
        [Markup.button.callback('‚óÄÔ∏è –ù–∞–∑–∞–¥', 'notifications_menu')]
      ]);
      
      if (ctx.callbackQuery) {
        await ctx.editMessageText(message, {
          parse_mode: 'Markdown',
          ...keyboard
        });
      } else {
        await ctx.reply(message, {
          parse_mode: 'Markdown',
          ...keyboard
        });
      }
      return;
    }
    
    let message = `üìã *–ò—Å—Ç–æ—Ä–∏—è —Ä–∞—Å—Å—ã–ª–æ–∫* (—Å—Ç—Ä. ${pagination.current}/${pagination.pages})\n\n`;
    
    const buttons = [];
    
    notifications.forEach((notification, index) => {
      const statusEmoji = {
        'sent': '‚úÖ',
        'sending': '‚è≥',
        'scheduled': '‚è∞',
        'failed': '‚ùå',
        'draft': 'üìù'
      }[notification.status] || '‚ùì';
      
      const priorityEmoji = {
        'high': 'üî¥',
        'medium': 'üü°',
        'low': 'üü¢',
        'normal': 'üì¢'
      }[notification.priority] || 'üì¢';
      
      message += `${(pagination.current - 1) * 10 + index + 1}. ${statusEmoji} ${priorityEmoji} *${notification.title || '–ë–µ–∑ –Ω–∞–∑–≤–∞–Ω–∏—è'}*\n`;
      message += `   üë• –ê—É–¥–∏—Ç–æ—Ä–∏—è: ${getAudienceTypeDisplayName(notification.audienceType)}\n`;
      message += `   üìä –û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ: ${notification.sent || 0}/${notification.totalRecipients || 0}\n`;
      message += `   üìÖ ${new Date(notification.createdAt).toLocaleString('ru-RU')}\n`;
      message += `   üÜî \`${notification._id}\`\n\n`;
      
      // –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫–∏ –¥–µ–π—Å—Ç–≤–∏–π
      buttons.push([
        Markup.button.callback(`üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ ${index + 1}`, `notif_stats_${notification._id}`),
        Markup.button.callback(`üîÑ –ü–æ–≤—Ç–æ—Ä–∏—Ç—å ${index + 1}`, `notif_repeat_${notification._id}`)
      ]);
    });
    
    // –ù–∞–≤–∏–≥–∞—Ü–∏—è –ø–æ —Å—Ç—Ä–∞–Ω–∏—Ü–∞–º
    if (pagination.current > 1 || pagination.current < pagination.pages) {
      const navButtons = [];
      if (pagination.current > 1) {
        navButtons.push(Markup.button.callback('‚¨ÖÔ∏è –ü—Ä–µ–¥.', `notifications_history_${pagination.current - 1}`));
      }
      if (pagination.current < pagination.pages) {
        navButtons.push(Markup.button.callback('–°–ª–µ–¥. ‚û°Ô∏è', `notifications_history_${pagination.current + 1}`));
      }
      buttons.push(navButtons);
    }
    
    // –û—Å–Ω–æ–≤–Ω—ã–µ –∫–Ω–æ–ø–∫–∏
    buttons.push([
      Markup.button.callback('üì¢ –°–æ–∑–¥–∞—Ç—å –Ω–æ–≤—É—é', 'notifications_create'),
      Markup.button.callback('üîÑ –û–±–Ω–æ–≤–∏—Ç—å', 'notifications_history')
    ]);
    
    buttons.push([Markup.button.callback('‚óÄÔ∏è –ù–∞–∑–∞–¥', 'notifications_menu')]);
    
    const keyboard = Markup.inlineKeyboard(buttons);
    
    if (ctx.callbackQuery) {
      await ctx.editMessageText(message, {
        parse_mode: 'Markdown',
        ...keyboard
      });
    } else {
      await ctx.reply(message, {
        parse_mode: 'Markdown',
        ...keyboard
      });
    }
    
  } catch (error) {
    console.error('ADMIN: –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∏—Å—Ç–æ—Ä–∏–∏ —Ä–∞—Å—Å—ã–ª–æ–∫:', error);
    const errorMessage = `‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∏—Å—Ç–æ—Ä–∏–∏: ${error.message}`;
    
    if (ctx.callbackQuery) {
      await ctx.answerCbQuery(errorMessage);
    } else {
      await ctx.reply(errorMessage);
    }
  }
}

/**
 * –ü–æ–∫–∞–∑–∞—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
 */
async function showNotificationsStats(ctx) {
  console.log('ADMIN: –ó–∞–ø—Ä–æ—Å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π');
  
  try {
    const response = await apiClient.get('/admin/notifications/stats');
    
    if (!response.data.success) {
      throw new Error(response.data.message || '–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏');
    }
    
    const stats = response.data.data.stats;
    
    let message = 'üìä *–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π*\n\n';
    
    message += `**üìà –û–±—â–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:**\n`;
    message += `üì§ –í—Å–µ–≥–æ —Ä–∞—Å—Å—ã–ª–æ–∫: ${stats.total}\n`;
    message += `‚úÖ –£—Å–ø–µ—à–Ω—ã—Ö: ${stats.successful}\n`;
    message += `‚ùå –ù–µ—É–¥–∞—á–Ω—ã—Ö: ${stats.failed}\n`;
    message += `‚è∞ –ó–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö: ${stats.scheduled}\n`;
    message += `üìù –ß–µ—Ä–Ω–æ–≤–∏–∫–æ–≤: ${stats.drafts}\n\n`;
    
    message += `**üë• –û—Ö–≤–∞—Ç –∞—É–¥–∏—Ç–æ—Ä–∏–∏:**\n`;
    message += `üì® –í—Å–µ–≥–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ: ${stats.totalSent.toLocaleString()}\n`;
    message += `üìñ –ü—Ä–æ—á–∏—Ç–∞–Ω–æ: ${stats.totalRead.toLocaleString()} (${stats.readRate.toFixed(1)}%)\n`;
    message += `üëÜ –ù–∞–∂–∞—Ç–æ –Ω–∞ –∫–Ω–æ–ø–∫–∏: ${stats.totalClicks.toLocaleString()} (${stats.clickRate.toFixed(1)}%)\n`;
    message += `üö´ –û—Ç–ø–∏—Å–∞–ª–∏—Å—å: ${stats.totalUnsubscribed.toLocaleString()}\n\n`;
    
    message += `**üéØ –ü–æ —Ç–∏–ø–∞–º –∞—É–¥–∏—Ç–æ—Ä–∏–∏:**\n`;
    Object.entries(stats.byAudience).forEach(([type, data]) => {
      message += `${getAudienceTypeEmoji(type)} ${getAudienceTypeDisplayName(type)}: ${data.count} (${data.successRate.toFixed(1)}%)\n`;
    });
    message += '\n';
    
    message += `**üìÖ –ó–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–µ 30 –¥–Ω–µ–π:**\n`;
    message += `üì§ –û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ: ${stats.last30Days.sent}\n`;
    message += `üìà –°—Ä–µ–¥–Ω–∏–π CTR: ${stats.last30Days.averageCTR.toFixed(2)}%\n`;
    message += `üîù –õ—É—á—à–∏–π –¥–µ–Ω—å: ${stats.last30Days.bestDay.date} (${stats.last30Days.bestDay.sent} –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∏–π)\n\n`;
    
    message += `**‚ö° –ü—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å:**\n`;
    message += `üöÄ –°–∫–æ—Ä–æ—Å—Ç—å –æ—Ç–ø—Ä–∞–≤–∫–∏: ${stats.performance.averageSpeed} —Å–æ–æ–±—â–µ–Ω–∏–π/–º–∏–Ω\n`;
    message += `‚è±Ô∏è –°—Ä–µ–¥–Ω–µ–µ –≤—Ä–µ–º—è –¥–æ—Å—Ç–∞–≤–∫–∏: ${stats.performance.averageDeliveryTime}—Å\n`;
    message += `üíæ –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ –æ—á–µ—Ä–µ–¥–∏: ${stats.performance.queueUsage}%`;
    
    const keyboard = Markup.inlineKeyboard([
      [
        Markup.button.callback('üìä –ü–æ–¥—Ä–æ–±–Ω–∞—è –∞–Ω–∞–ª–∏—Ç–∏–∫–∞', 'notifications_analytics'),
        Markup.button.callback('üìà –¢—Ä–µ–Ω–¥—ã', 'notifications_trends')
      ],
      [
        Markup.button.callback('üîÑ –û–±–Ω–æ–≤–∏—Ç—å', 'notifications_stats'),
        Markup.button.callback('‚óÄÔ∏è –ù–∞–∑–∞–¥', 'notifications_menu')
      ]
    ]);
    
    if (ctx.callbackQuery) {
      await ctx.editMessageText(message, {
        parse_mode: 'Markdown',
        ...keyboard
      });
    } else {
      await ctx.reply(message, {
        parse_mode: 'Markdown',
        ...keyboard
      });
    }
    
  } catch (error) {
    console.error('ADMIN: –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π:', error);
    const errorMessage = `‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏: ${error.message}`;
    
    if (ctx.callbackQuery) {
      await ctx.answerCbQuery(errorMessage);
    } else {
      await ctx.reply(errorMessage);
    }
  }
}

// –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏
function getAudienceTypeDisplayName(type) {
  const names = {
    'all': '–í—Å–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏',
    'active': '–ê–∫—Ç–∏–≤–Ω—ã–µ –∏–≥—Ä–æ–∫–∏',
    'vip': 'VIP –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏',
    'inactive': '–ù–µ–∞–∫—Ç–∏–≤–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏',
    'segmented': '–ü–æ —Å–µ–≥–º–µ–Ω—Ç–∞–º',
    'custom': '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏–π —Å–ø–∏—Å–æ–∫'
  };
  return names[type] || type;
}

function getAudienceTypeEmoji(type) {
  const emojis = {
    'all': 'üë•',
    'active': 'üéÆ',
    'vip': 'üí∞',
    'inactive': 'üò¥',
    'segmented': 'üéØ',
    'custom': 'üÜî'
  };
  return emojis[type] || 'üì¢';
}

function getPriorityDisplayName(priority) {
  const names = {
    'high': 'üî¥ –í—ã—Å–æ–∫–∏–π',
    'medium': 'üü° –°—Ä–µ–¥–Ω–∏–π',
    'low': 'üü¢ –ù–∏–∑–∫–∏–π',
    'normal': 'üì¢ –û–±—ã—á–Ω—ã–π'
  };
  return names[priority] || priority;
}

function getTimingDisplayName(timing, scheduleTime) {
  if (timing === 'now') {
    return 'üöÄ –°–µ–π—á–∞—Å';
  } else if (timing === 'scheduled') {
    return `‚è∞ ${scheduleTime}`;
  } else if (timing === 'ab_test') {
    return 'üß™ A/B —Ç–µ—Å—Ç';
  }
  return timing;
}

module.exports = {
  showNotificationsMenu,
  startNotificationCreation,
  handleAudienceSelection,
  handleNotificationCreation,
  handlePrioritySelection,
  handleTimingSelection,
  showNotificationPreview,
  confirmNotificationSend,
  showNotificationsHistory,
  showNotificationsStats
};