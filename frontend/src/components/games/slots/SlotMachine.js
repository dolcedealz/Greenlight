// frontend/src/components/games/slots/SlotMachine.js
import React, { useState, useEffect, useCallback } from 'react';
import '../../../styles/SlotMachine.css';

// –°–∏–º–≤–æ–ª—ã —Å–ª–æ—Ç–æ–≤ —Å –≤–µ—Å–∞–º–∏ –∏ –≤—ã–ø–ª–∞—Ç–∞–º–∏
const SLOT_SYMBOLS = [
  { symbol: 'üçí', name: 'cherry', weight: 25, payout: 2 },
  { symbol: 'üçã', name: 'lemon', weight: 20, payout: 3 },
  { symbol: 'üçä', name: 'orange', weight: 15, payout: 4 },
  { symbol: 'üçá', name: 'grape', weight: 12, payout: 5 },
  { symbol: 'üîî', name: 'bell', weight: 8, payout: 8 },
  { symbol: 'üíé', name: 'diamond', weight: 5, payout: 15 },
  { symbol: '‚≠ê', name: 'star', weight: 3, payout: 25 },
  { symbol: 'üé∞', name: 'jackpot', weight: 2, payout: 50 }
];

const SlotMachine = ({ 
  onSpin, 
  isSpinning, 
  balance, 
  betAmount,
  lastResult,
  autoplay,
  loading,
  gameStats 
}) => {
  // –°–æ—Å—Ç–æ—è–Ω–∏–µ –±–∞—Ä–∞–±–∞–Ω–æ–≤ —Å–æ—Ö—Ä–∞–Ω—è–µ—Ç—Å—è –º–µ–∂–¥—É –∏–≥—Ä–∞–º–∏
  const [reels, setReels] = useState(() => {
    // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Å–ª—É—á–∞–π–Ω—ã–º–∏ —Å–∏–º–≤–æ–ª–∞–º–∏
    return [
      ['üçí', 'üçã', 'üçä', 'üçá'],
      ['üçí', 'üçã', 'üçä', 'üçá'],
      ['üçí', 'üçã', 'üçä', 'üçá'],
      ['üçí', 'üçã', 'üçä', 'üçá']
    ];
  });
  
  const [animatingReels, setAnimatingReels] = useState([false, false, false, false]);
  const [winningLines, setWinningLines] = useState([]);
  const [finalResult, setFinalResult] = useState(null);
  const [currentGameId, setCurrentGameId] = useState(null); // –ù–û–í–û–ï: –æ—Ç—Å–ª–µ–∂–∏–≤–∞–µ–º ID —Ç–µ–∫—É—â–µ–π –∏–≥—Ä—ã
  
  // –§—É–Ω–∫—Ü–∏—è –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —Å–ª—É—á–∞–π–Ω–æ–≥–æ —Å–∏–º–≤–æ–ª–∞ –¥–ª—è –∞–Ω–∏–º–∞—Ü–∏–∏
  const getRandomSymbol = useCallback(() => {
    const totalWeight = SLOT_SYMBOLS.reduce((sum, s) => sum + s.weight, 0);
    let random = Math.random() * totalWeight;
    
    for (const symbolData of SLOT_SYMBOLS) {
      random -= symbolData.weight;
      if (random <= 0) {
        return symbolData.symbol;
      }
    }
    
    return SLOT_SYMBOLS[0].symbol;
  }, []);
  
  // –ò–°–ü–†–ê–í–õ–ï–ù–û: –ø—Ä–∞–≤–∏–ª—å–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–æ–≤–æ–≥–æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞
  useEffect(() => {
    if (lastResult && lastResult.reels) {
      console.log('–ü–æ–ª—É—á–µ–Ω —Ä–µ–∑—É–ª—å—Ç–∞—Ç —Å —Å–µ—Ä–≤–µ—Ä–∞:', lastResult.reels);
      
      // –ù–û–í–û–ï: —Å–æ–∑–¥–∞–µ–º —É–Ω–∏–∫–∞–ª—å–Ω—ã–π ID –¥–ª—è –∫–∞–∂–¥–æ–π –∏–≥—Ä—ã
      const gameId = Date.now() + Math.random();
      setCurrentGameId(gameId);
      
      // –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ñ–∏–Ω–∞–ª—å–Ω—ã–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç
      setFinalResult({ ...lastResult, gameId });
      
      // –ò–°–ü–†–ê–í–õ–ï–ù–û: –Ω–µ–º–µ–¥–ª–µ–Ω–Ω–æ –æ—á–∏—â–∞–µ–º –≤—ã–∏–≥—Ä—ã—à–Ω—ã–µ –ª–∏–Ω–∏–∏ –ø—Ä–∏ –Ω–æ–≤–æ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç–µ
      setWinningLines([]);
    }
  }, [lastResult]);
  
  // –ò–°–ü–†–ê–í–õ–ï–ù–û: –æ—á–∏—Å—Ç–∫–∞ –≤—ã–∏–≥—Ä—ã—à–Ω—ã—Ö –ª–∏–Ω–∏–π –ø—Ä–∏ –Ω–∞—á–∞–ª–µ —Å–ø–∏–Ω–∞
  useEffect(() => {
    if (isSpinning) {
      console.log('–°–ø–∏–Ω –Ω–∞—á–∞–ª—Å—è - –æ—á–∏—â–∞–µ–º –≤—ã–∏–≥—Ä—ã—à–Ω—ã–µ –ª–∏–Ω–∏–∏');
      setWinningLines([]); // –ù–µ–º–µ–¥–ª–µ–Ω–Ω–æ –æ—á–∏—â–∞–µ–º –ø—Ä–∏ –Ω–∞—á–∞–ª–µ —Å–ø–∏–Ω–∞
      setFinalResult(null); // –û—á–∏—â–∞–µ–º –ø—Ä–µ–¥—ã–¥—É—â–∏–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç
      setCurrentGameId(null); // –°–±—Ä–∞—Å—ã–≤–∞–µ–º ID –∏–≥—Ä—ã
    }
  }, [isSpinning]);
  
  // –ê–Ω–∏–º–∞—Ü–∏—è —Å –ø—Ä–∞–≤–∏–ª—å–Ω–æ–π —É—Å—Ç–∞–Ω–æ–≤–∫–æ–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞
  useEffect(() => {
    if (isSpinning && finalResult && finalResult.gameId === currentGameId) {
      // –ó–∞–ø—É—Å–∫–∞–µ–º –∞–Ω–∏–º–∞—Ü–∏—é –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –±–∞—Ä–∞–±–∞–Ω–∞ —Å –∑–∞–¥–µ—Ä–∂–∫–æ–π
      const delays = [0, 200, 400, 600];
      
      delays.forEach((delay, index) => {
        setTimeout(() => {
          setAnimatingReels(prev => {
            const newState = [...prev];
            newState[index] = true;
            return newState;
          });
          
          // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∞–Ω–∏–º–∞—Ü–∏–æ–Ω–Ω—ã–µ —Å–∏–º–≤–æ–ª—ã
          const interval = setInterval(() => {
            setReels(prev => {
              const newReels = [...prev];
              newReels[index] = [
                getRandomSymbol(),
                getRandomSymbol(),
                getRandomSymbol(),
                getRandomSymbol()
              ];
              return newReels;
            });
          }, 100);
          
          // –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∞–Ω–∏–º–∞—Ü–∏—é —á–µ—Ä–µ–∑ 2 —Å–µ–∫—É–Ω–¥—ã + –∑–∞–¥–µ—Ä–∂–∫–∞
          setTimeout(() => {
            clearInterval(interval);
            
            // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –º—ã –≤—Å–µ –µ—â–µ —Ä–∞–±–æ—Ç–∞–µ–º —Å —Ç–µ–º –∂–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–º
            if (finalResult.gameId === currentGameId) {
              // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –§–ò–ù–ê–õ–¨–ù–´–ô —Ä–µ–∑—É–ª—å—Ç–∞—Ç —Å —Å–µ—Ä–≤–µ—Ä–∞
              setReels(prev => {
                const newReels = [...prev];
                newReels[index] = finalResult.reels[index];
                return newReels;
              });
              
              setAnimatingReels(prev => {
                const newState = [...prev];
                newState[index] = false;
                return newState;
              });
              
              // –ï—Å–ª–∏ —ç—Ç–æ –ø–æ—Å–ª–µ–¥–Ω–∏–π –±–∞—Ä–∞–±–∞–Ω, –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –≤—ã–∏–≥—Ä—ã—à–Ω—ã–µ –ª–∏–Ω–∏–∏
              if (index === delays.length - 1) {
                setTimeout(() => {
                  // –ò–°–ü–†–ê–í–õ–ï–ù–û: –ø—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —ç—Ç–æ –≤—Å–µ –µ—â–µ —Ç–∞ –∂–µ –∏–≥—Ä–∞
                  if (finalResult.gameId === currentGameId && finalResult.winningLines && finalResult.winningLines.length > 0) {
                    console.log('–£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –≤—ã–∏–≥—Ä—ã—à–Ω—ã–µ –ª–∏–Ω–∏–∏ –¥–ª—è –∏–≥—Ä—ã:', finalResult.gameId);
                    setWinningLines(finalResult.winningLines);
                    
                    // –£–±–∏—Ä–∞–µ–º –ø–æ–¥—Å–≤–µ—Ç–∫—É —á–µ—Ä–µ–∑ 3 —Å–µ–∫—É–Ω–¥—ã
                    setTimeout(() => {
                      // –ò–°–ü–†–ê–í–õ–ï–ù–û: –ø—Ä–æ–≤–µ—Ä—è–µ–º ID –∏–≥—Ä—ã –ø–µ—Ä–µ–¥ –æ—á–∏—Å—Ç–∫–æ–π
                      setWinningLines(prev => {
                        // –û—á–∏—â–∞–µ–º —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ —ç—Ç–æ –≤—Å–µ –µ—â–µ —Ç–∞ –∂–µ –∏–≥—Ä–∞
                        if (finalResult.gameId === currentGameId) {
                          console.log('–û—á–∏—â–∞–µ–º –≤—ã–∏–≥—Ä—ã—à–Ω—ã–µ –ª–∏–Ω–∏–∏ –¥–ª—è –∏–≥—Ä—ã:', finalResult.gameId);
                          return [];
                        }
                        return prev;
                      });
                    }, 3000);
                  }
                }, 300);
              }
            }
          }, 2000 + delay);
        }, delay);
      });
    }
  }, [isSpinning, finalResult, currentGameId, getRandomSymbol]);
  
  // –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –∫–ª–∞—Å—Å–∞ —è—á–µ–π–∫–∏
  const getCellClass = useCallback((reelIndex, rowIndex) => {
    const baseClass = 'slot-cell';
    const position = `${reelIndex}-${rowIndex}`;
    
    if (winningLines.some(line => line.includes(position))) {
      return `${baseClass} winning`;
    }
    
    return baseClass;
  }, [winningLines]);
  
  return (
    <div className="slot-machine">
      {/* –ò–≥—Ä–æ–≤–æ–µ –ø–æ–ª–µ 4x4 */}
      <div className="slot-display">
        <div className="slot-reels">
          {reels.map((reel, reelIndex) => (
            <div 
              key={reelIndex} 
              className={`slot-reel ${animatingReels[reelIndex] ? 'spinning' : ''}`}
            >
              {reel.map((symbol, rowIndex) => (
                <div
                  key={`${reelIndex}-${rowIndex}`}
                  className={getCellClass(reelIndex, rowIndex)}
                  data-position={`${reelIndex}-${rowIndex}`}
                >
                  <span className="slot-symbol">{symbol}</span>
                </div>
              ))}
            </div>
          ))}
        </div>
        
        {/* –õ–∏–Ω–∏–∏ –≤—ã–ø–ª–∞—Ç –¥–ª—è 4x4 –ø–æ–ª—è */}
        <div className="paylines">
          {/* –ì–æ—Ä–∏–∑–æ–Ω—Ç–∞–ª—å–Ω—ã–µ –ª–∏–Ω–∏–∏ */}
          <div className="payline horizontal line-1"></div>
          <div className="payline horizontal line-2"></div>
          <div className="payline horizontal line-3"></div>
          <div className="payline horizontal line-4"></div>
          {/* –í–µ—Ä—Ç–∏–∫–∞–ª—å–Ω—ã–µ –ª–∏–Ω–∏–∏ */}
          <div className="payline vertical line-5"></div>
          <div className="payline vertical line-6"></div>
          <div className="payline vertical line-7"></div>
          <div className="payline vertical line-8"></div>
          {/* –î–∏–∞–≥–æ–Ω–∞–ª—å–Ω—ã–µ –ª–∏–Ω–∏–∏ */}
          <div className="payline diagonal line-9"></div>
          <div className="payline diagonal line-10"></div>
        </div>
      </div>
      
      {/* –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ø–æ—Å–ª–µ–¥–Ω–µ–º —Å–ø–∏–Ω–µ */}
      {finalResult && !isSpinning && finalResult.gameId === currentGameId && (
        <div className="last-spin-info">
          {finalResult.win ? (
            <div className="win-display">
              <span className="win-text">–í–´–ò–ì–†–´–®!</span>
              <span className="win-amount">+{(Math.abs(finalResult.profit) || 0).toFixed(2)} USDT</span>
              {finalResult.winningSymbols && (
                <div className="winning-symbols">
                  {finalResult.winningSymbols.map((symbol, index) => (
                    <span key={index} className="winning-symbol">{symbol}</span>
                  ))}
                </div>
              )}
              {finalResult.winningLines && finalResult.winningLines.length > 0 && (
                <div className="winning-lines-count">
                  –í—ã–∏–≥—Ä—ã—à–Ω—ã—Ö –ª–∏–Ω–∏–π: {finalResult.winningLines.length}
                </div>
              )}
            </div>
          ) : (
            <div className="lose-display">
              <span className="lose-text">–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑!</span>
            </div>
          )}
        </div>
      )}
    </div>
  );
};

export default SlotMachine;
