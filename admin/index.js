// admin/index.js - –û–ë–ù–û–í–õ–ï–ù–ù–ê–Ø –í–ï–†–°–ò–Ø —Å –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π —Ä–∞—Å—à–∏—Ä–µ–Ω–Ω—ã—Ö —Ñ—É–Ω–∫—Ü–∏–π –∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
require('dotenv').config();
const { Telegraf, session } = require('telegraf');
const { commands, middleware, handlers } = require('./src');
let EventsNotificationService;
try {
  EventsNotificationService = require('./src/services/events-notifications.service');
  console.log('‚úÖ EventsNotificationService –∏–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω —É—Å–ø–µ—à–Ω–æ');
} catch (error) {
  console.error('‚ùå –û—à–∏–±–∫–∞ –∏–º–ø–æ—Ä—Ç–∞ EventsNotificationService:', error.message);
  EventsNotificationService = null;
}
const eventsExtendedCommands = require('./src/commands/events-extended.command');
const express = require('express');

// –°–æ–∑–¥–∞–µ–º Express –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ
const app = express();

// –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ JSON
app.use(express.json());

// –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ —Ç–æ–∫–µ–Ω–∞
if (!process.env.ADMIN_BOT_TOKEN) {
  console.error('‚ùå –û—à–∏–±–∫–∞: ADMIN_BOT_TOKEN –Ω–µ —É–∫–∞–∑–∞–Ω –≤ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è');
  process.exit(1);
}

// –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ API —Ç–æ–∫–µ–Ω–∞
if (!process.env.ADMIN_API_TOKEN) {
  console.error('‚ùå –û—à–∏–±–∫–∞: ADMIN_API_TOKEN –Ω–µ —É–∫–∞–∑–∞–Ω –≤ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è');
  console.error('   –≠—Ç–æ—Ç —Ç–æ–∫–µ–Ω –Ω–µ–æ–±—Ö–æ–¥–∏–º –¥–ª—è –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏—è —Å API');
}

// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–æ—Ç–∞ —Å —Ç–æ–∫–µ–Ω–æ–º –∏–∑ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è
const bot = new Telegraf(process.env.ADMIN_BOT_TOKEN);

// –°–ø–∏—Å–æ–∫ ID –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤
const adminIds = process.env.ADMIN_IDS 
  ? process.env.ADMIN_IDS.split(',').map(id => Number(id.trim()))
  : [];

console.log('Admin IDs:', adminIds);
console.log('API URL:', process.env.API_URL || 'https://api.greenlight-casino.eu/api');
console.log('Admin API Token –Ω–∞—Å—Ç—Ä–æ–µ–Ω:', !!process.env.ADMIN_API_TOKEN);

// –í–ê–ñ–ù–û: –ü–æ–¥–∫–ª—é—á–∞–µ–º –ø–æ–¥–¥–µ—Ä–∂–∫—É —Å–µ—Å—Å–∏–π –î–û –≤—Å–µ—Ö –æ—Å—Ç–∞–ª—å–Ω—ã—Ö middleware
bot.use(session({
  defaultSession: () => ({})
}));

// –ü—Ä–∏–º–µ–Ω—è–µ–º middleware –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –∞–¥–º–∏–Ω—Å–∫–∏—Ö –ø—Ä–∞–≤
middleware.applyMiddleware(bot, adminIds);

// –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º –∫–æ–º–∞–Ω–¥—ã (–≤–∫–ª—é—á–∞—è –∫–æ–º–∞–Ω–¥—ã –¥–ª—è —Å–æ–±—ã—Ç–∏–π)
commands.registerCommands(bot);

// –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏–π –∏ callback
handlers.registerHandlers(bot);

// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º —Å–µ—Ä–≤–∏—Å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –æ —Å–æ–±—ã—Ç–∏—è—Ö
let notificationService;
if (EventsNotificationService && process.env.ADMIN_API_TOKEN && adminIds.length > 0) {
  try {
    notificationService = new EventsNotificationService(bot);
    console.log('‚úÖ –°–µ—Ä–≤–∏—Å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –æ —Å–æ–±—ã—Ç–∏—è—Ö –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω');
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ —Å–µ—Ä–≤–∏—Å–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π:', error.message);
    notificationService = null;
  }
} else {
  console.warn('‚ö†Ô∏è –°–µ—Ä–≤–∏—Å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω');
  if (!EventsNotificationService) console.warn('   - EventsNotificationService –Ω–µ –Ω–∞–π–¥–µ–Ω');
  if (!process.env.ADMIN_API_TOKEN) console.warn('   - ADMIN_API_TOKEN –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω');
  if (adminIds.length === 0) console.warn('   - –ù–µ—Ç –∞–¥–º–∏–Ω–æ–≤ –≤ ADMIN_IDS');
}

// === –†–ï–ì–ò–°–¢–†–ê–¶–ò–Ø –ù–û–í–´–• –û–ë–†–ê–ë–û–¢–ß–ò–ö–û–í –î–õ–Ø –†–ê–°–®–ò–†–ï–ù–ù–´–• –§–£–ù–ö–¶–ò–ô ===

// –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –¥–ª—è –∏–∑–º–µ–Ω–µ–Ω–∏—è –≤—Ä–µ–º–µ–Ω–∏ —Å–æ–±—ã—Ç–∏—è
bot.action('events_edit_time', async (ctx) => {
  console.log('ADMIN: Callback events_edit_time');
  await ctx.answerCbQuery();
  await eventsExtendedCommands.startTimeEdit(ctx);
});

bot.action(/^time_edit_(end|betting|both)$/, async (ctx) => {
  console.log('ADMIN: Callback time_edit_type:', ctx.match[1]);
  await eventsExtendedCommands.handleTimeTypeSelection(ctx, ctx.match[1]);
});

// –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –¥–ª—è –¥–æ—Å—Ä–æ—á–Ω–æ–≥–æ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è
bot.action('events_early_finish', async (ctx) => {
  console.log('ADMIN: Callback events_early_finish');
  await ctx.answerCbQuery();
  await eventsExtendedCommands.startEarlyFinish(ctx);
});

bot.action(/^early_finish_outcome_(.+)$/, async (ctx) => {
  console.log('ADMIN: Callback early_finish_outcome:', ctx.match[1]);
  const outcomeId = ctx.match[1];
  await eventsExtendedCommands.confirmEarlyFinish(ctx, outcomeId);
});

// –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –¥–ª—è —É—Å—Ç–∞–Ω–æ–≤–∫–∏ –∏—Å—Ö–æ–¥–∞
bot.action('events_set_outcome', async (ctx) => {
  console.log('ADMIN: Callback events_set_outcome');
  await ctx.answerCbQuery();
  await eventsExtendedCommands.setEventOutcome(ctx);
});

bot.action(/^set_outcome_(.+)$/, async (ctx) => {
  console.log('ADMIN: Callback set_outcome:', ctx.match[1]);
  const outcomeId = ctx.match[1];
  await eventsExtendedCommands.saveSetOutcome(ctx, outcomeId);
});

// –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –ø–æ–¥–≥–æ—Ç–æ–≤–ª–µ–Ω–Ω–æ–≥–æ —Å–æ–±—ã—Ç–∏—è
bot.action(/^finish_prepared_(.+)$/, async (ctx) => {
  console.log('ADMIN: Callback finish_prepared:', ctx.match[1]);
  const eventId = ctx.match[1];
  await eventsExtendedCommands.finishPreparedEvent(ctx, eventId);
});

// –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –¥–ª—è –±—ã—Å—Ç—Ä—ã—Ö –¥–µ–π—Å—Ç–≤–∏–π –∏–∑ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
bot.action(/^quick_(set_outcome|early_finish|edit_time)_(.+)$/, async (ctx) => {
  console.log('ADMIN: Quick action:', ctx.match[1], 'for event:', ctx.match[2]);
  if (notificationService) {
    await notificationService.handleQuickAction(ctx);
  } else {
    await ctx.answerCbQuery('‚ùå –°–µ—Ä–≤–∏—Å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω');
  }
});

// –û–±–Ω–æ–≤–ª–µ–Ω–Ω–æ–µ –º–µ–Ω—é —Å–æ–±—ã—Ç–∏–π —Å —Ä–∞—Å—à–∏—Ä–µ–Ω–Ω—ã–º–∏ —Ñ—É–Ω–∫—Ü–∏—è–º–∏
bot.action('events_menu', async (ctx) => {
  console.log('ADMIN: Callback events_menu (extended)');
  await ctx.answerCbQuery();
  await eventsExtendedCommands.showExtendedEventsMenu(ctx);
});

// –ö–æ–º–∞–Ω–¥–∞ –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
bot.command('test_notifications', async (ctx) => {
  if (notificationService) {
    await notificationService.sendTestNotification();
    await ctx.reply('‚úÖ –¢–µ—Å—Ç–æ–≤–æ–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ');
  } else {
    await ctx.reply('‚ùå –°–µ—Ä–≤–∏—Å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω');
  }
});

// –ö–æ–º–∞–Ω–¥–∞ –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
bot.command('notification_stats', async (ctx) => {
  if (notificationService) {
    const stats = notificationService.getNotificationStats();
    await ctx.reply(
      `üìä *–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π*\n\n` +
      `üë• –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤: ${stats.adminsCount}\n` +
      `üîî –£–≤–µ–¥–æ–º–ª–µ–Ω–Ω—ã—Ö —Å–æ–±—ã—Ç–∏–π: ${stats.notifiedEventsCount}\n` +
      `‚è∞ –ü–æ—Å–ª–µ–¥–Ω—è—è –ø—Ä–æ–≤–µ—Ä–∫–∞: ${stats.lastCheck.toLocaleString('ru-RU')}\n` +
      `üü¢ –°—Ç–∞—Ç—É—Å: ${stats.isActive ? '–ê–∫—Ç–∏–≤–µ–Ω' : '–ù–µ–∞–∫—Ç–∏–≤–µ–Ω'}`,
      { parse_mode: 'Markdown' }
    );
  } else {
    await ctx.reply('‚ùå –°–µ—Ä–≤–∏—Å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω');
  }
});

// –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π –¥–ª—è –Ω–æ–≤—ã—Ö —Ñ—É–Ω–∫—Ü–∏–π
bot.on('text', async (ctx, next) => {
  console.log('ADMIN: –ü–æ–ª—É—á–µ–Ω–æ —Ç–µ–∫—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ:', ctx.message.text);
  
  // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å–ª–∏ —ç—Ç–æ –ø—Ä–æ—Ü–µ—Å—Å –∏–∑–º–µ–Ω–µ–Ω–∏—è –≤—Ä–µ–º–µ–Ω–∏
  if (ctx.session && ctx.session.editingTime) {
    console.log('ADMIN: –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∏–∑–º–µ–Ω–µ–Ω–∏–µ –≤—Ä–µ–º–µ–Ω–∏ —Å–æ–±—ã—Ç–∏—è');
    await eventsExtendedCommands.handleTimeEdit(ctx);
    return;
  }
  
  // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å–ª–∏ —ç—Ç–æ –ø—Ä–æ—Ü–µ—Å—Å –¥–æ—Å—Ä–æ—á–Ω–æ–≥–æ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è
  if (ctx.session && ctx.session.earlyFinishing) {
    console.log('ADMIN: –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –¥–æ—Å—Ä–æ—á–Ω–æ–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–µ —Å–æ–±—ã—Ç–∏—è');
    await eventsExtendedCommands.handleEarlyFinish(ctx);
    return;
  }
  
  // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å–ª–∏ —ç—Ç–æ –ø—Ä–æ—Ü–µ—Å—Å —É—Å—Ç–∞–Ω–æ–≤–∫–∏ –∏—Å—Ö–æ–¥–∞
  if (ctx.session && ctx.session.settingOutcome) {
    console.log('ADMIN: –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —É—Å—Ç–∞–Ω–æ–≤–∫—É –∏—Å—Ö–æ–¥–∞ —Å–æ–±—ã—Ç–∏—è');
    await eventsExtendedCommands.handleSetOutcome(ctx);
    return;
  }
  
  // –ü–µ—Ä–µ–¥–∞–µ–º —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Å–ª–µ–¥—É—é—â–µ–º—É –æ–±—Ä–∞–±–æ—Ç—á–∏–∫—É
  return next();
});

// –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—à–∏–±–æ–∫
bot.catch((err, ctx) => {
  console.error(`–û—à–∏–±–∫–∞ –¥–ª—è ${ctx.updateType}:`, err);
  console.error('Stack trace:', err.stack);
  
  // –ü–æ–ø—ã—Ç–∞–µ–º—Å—è –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± –æ—à–∏–±–∫–µ
  ctx.reply('–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.')
    .catch(e => console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Å–æ–æ–±—â–µ–Ω–∏—è –æ–± –æ—à–∏–±–∫–µ:', e));
});

// –ú–∞—Ä—à—Ä—É—Ç –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Ä–∞–±–æ—Ç–æ—Å–ø–æ—Å–æ–±–Ω–æ—Å—Ç–∏
app.get('/', (req, res) => {
  const notificationStats = notificationService ? notificationService.getNotificationStats() : null;
  
  res.send(`
    <h1>Greenlight Admin Bot</h1>
    <p>–ë–æ—Ç –∞–∫—Ç–∏–≤–µ–Ω –∏ —Ä–∞–±–æ—Ç–∞–µ—Ç –≤ —Ä–µ–∂–∏–º–µ webhook</p>
    <h2>–°—Ç–∞—Ç—É—Å –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏:</h2>
    <ul>
      <li>ADMIN_BOT_TOKEN: ‚úÖ –ù–∞—Å—Ç—Ä–æ–µ–Ω</li>
      <li>ADMIN_API_TOKEN: ${process.env.ADMIN_API_TOKEN ? '‚úÖ –ù–∞—Å—Ç—Ä–æ–µ–Ω' : '‚ùå –ù–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω'}</li>
      <li>API_URL: ${process.env.API_URL || 'https://api.greenlight-casino.eu/api'}</li>
      <li>–ê–¥–º–∏–Ω—ã: ${adminIds.length > 0 ? adminIds.join(', ') : '–ù–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω—ã'}</li>
    </ul>
    <h2>–†–∞—Å—à–∏—Ä–µ–Ω–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏:</h2>
    <ul>
      <li>–ò–∑–º–µ–Ω–µ–Ω–∏–µ –≤—Ä–µ–º–µ–Ω–∏ —Å–æ–±—ã—Ç–∏–π: ‚úÖ –î–æ—Å—Ç—É–ø–Ω–æ</li>
      <li>–î–æ—Å—Ä–æ—á–Ω–æ–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–µ: ‚úÖ –î–æ—Å—Ç—É–ø–Ω–æ</li>
      <li>–£—Å—Ç–∞–Ω–æ–≤–∫–∞ –∏—Å—Ö–æ–¥–æ–≤: ‚úÖ –î–æ—Å—Ç—É–ø–Ω–æ</li>
      <li>–£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ —Å–æ–±—ã—Ç–∏—è—Ö: ${notificationStats ? '‚úÖ –ê–∫—Ç–∏–≤–Ω—ã' : '‚ùå –ù–µ–∞–∫—Ç–∏–≤–Ω—ã'}</li>
    </ul>
    ${notificationStats ? `
    <h2>–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π:</h2>
    <ul>
      <li>–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤: ${notificationStats.adminsCount}</li>
      <li>–£–≤–µ–¥–æ–º–ª–µ–Ω–Ω—ã—Ö —Å–æ–±—ã—Ç–∏–π: ${notificationStats.notifiedEventsCount}</li>
      <li>–ü–æ—Å–ª–µ–¥–Ω—è—è –ø—Ä–æ–≤–µ—Ä–∫–∞: ${notificationStats.lastCheck.toLocaleString('ru-RU')}</li>
    </ul>
    ` : ''}
  `);
});

// –ü–æ–ª—É—á–∞–µ–º –ø–æ—Ä—Ç –∏ –¥–æ–º–µ–Ω –∏–∑ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è
const PORT = process.env.PORT || 3000;
const WEBHOOK_DOMAIN = process.env.RENDER_EXTERNAL_URL || process.env.WEBHOOK_DOMAIN;

// –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞ –∏ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞ webhook
if (WEBHOOK_DOMAIN) {
  // –ü—É—Ç—å –¥–ª—è webhook (–¥–æ–±–∞–≤–ª—è–µ–º —Ç–æ–∫–µ–Ω –¥–ª—è –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏)
  const secretPath = `/webhook/${bot.secretPathComponent()}`;
  
  // –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –º–∞—Ä—à—Ä—É—Ç–∞ –¥–ª—è webhook
  app.use(bot.webhookCallback(secretPath));
  
  // –§–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–æ–ª–Ω–æ–≥–æ URL –¥–ª—è webhook
  const webhookUrl = `${WEBHOOK_DOMAIN}${secretPath}`;
  
  // –ó–∞–ø—É—Å–∫ —Å–µ—Ä–≤–µ—Ä–∞
  app.listen(PORT, '0.0.0.0', async () => {
    console.log(`‚úÖ –ê–¥–º–∏–Ω-–±–æ—Ç —Å–µ—Ä–≤–µ—Ä –∑–∞–ø—É—â–µ–Ω –Ω–∞ –ø–æ—Ä—Ç—É ${PORT}`);
    
    try {
      // –°–Ω–∞—á–∞–ª–∞ —É–¥–∞–ª—è–µ–º –ª—é–±—ã–µ —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ webhook –∏–ª–∏ polling —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è
      await bot.telegram.deleteWebhook();
      
      console.log(`–ù–∞—Å—Ç—Ä–æ–π–∫–∞ webhook URL: ${webhookUrl}`);
      
      // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º webhook
      await bot.telegram.setWebhook(webhookUrl);
      console.log(`‚úÖ Webhook —É—Å–ø–µ—à–Ω–æ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω: ${webhookUrl}`);
      
      // –ü—Ä–æ–≤–µ—Ä–∫–∞ webhook
      const webhookInfo = await bot.telegram.getWebhookInfo();
      console.log('–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ webhook:', JSON.stringify(webhookInfo, null, 2));
      
      if (webhookInfo.url !== webhookUrl) {
        console.warn(`‚ö†Ô∏è –ù–∞—Å—Ç—Ä–æ–µ–Ω–Ω—ã–π webhook URL (${webhookInfo.url}) –Ω–µ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É–µ—Ç –æ–∂–∏–¥–∞–µ–º–æ–º—É (${webhookUrl})`);
      }
      
      if (webhookInfo.last_error_date) {
        const errorTime = new Date(webhookInfo.last_error_date * 1000);
        console.warn(`‚ö†Ô∏è –ü–æ—Å–ª–µ–¥–Ω—è—è –æ—à–∏–±–∫–∞ webhook: ${webhookInfo.last_error_message} (${errorTime})`);
      }
      
      console.log(`üîÆ –§—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω–æ—Å—Ç—å —Å–æ–±—ã—Ç–∏–π: ${process.env.ADMIN_API_TOKEN ? '‚úÖ –ì–æ—Ç–æ–≤–∞' : '‚ùå –¢—Ä–µ–±—É–µ—Ç ADMIN_API_TOKEN'}`);
      console.log(`üîî –£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ —Å–æ–±—ã—Ç–∏—è—Ö: ${notificationService ? '‚úÖ –ê–∫—Ç–∏–≤–Ω—ã' : '‚ùå –ù–µ–∞–∫—Ç–∏–≤–Ω—ã'}`);
      console.log(`‚ö° –†–∞—Å—à–∏—Ä–µ–Ω–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏: ‚úÖ –ó–∞–≥—Ä—É–∂–µ–Ω—ã`);
      
    } catch (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –Ω–∞—Å—Ç—Ä–æ–π–∫–µ webhook:', error);
    }
  });
} else {
  console.error('‚ùå –ù–µ —É–∫–∞–∑–∞–Ω WEBHOOK_DOMAIN –∏–ª–∏ RENDER_EXTERNAL_URL –≤ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è');
  console.log('üîÑ –ü–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–µ –Ω–∞ —Ä–µ–∂–∏–º long polling (–Ω–µ —Ä–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç—Å—è –≤ –ø—Ä–æ–¥–∞–∫—à–µ–Ω–µ)');
  
  // –†–µ–∑–µ—Ä–≤–Ω—ã–π –≤–∞—Ä–∏–∞–Ω—Ç - long polling –∏ HTTP-—Å–µ—Ä–≤–µ—Ä
  app.listen(PORT, '0.0.0.0', () => {
    console.log(`‚úÖ HTTP-—Å–µ—Ä–≤–µ—Ä –∑–∞–ø—É—â–µ–Ω –Ω–∞ –ø–æ—Ä—Ç—É ${PORT}`);
    bot.launch()
      .then(() => {
        console.log('‚úÖ –ê–¥–º–∏–Ω-–±–æ—Ç –∑–∞–ø—É—â–µ–Ω –≤ —Ä–µ–∂–∏–º–µ polling');
        console.log(`üîÆ –§—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω–æ—Å—Ç—å —Å–æ–±—ã—Ç–∏–π: ${process.env.ADMIN_API_TOKEN ? '‚úÖ –ì–æ—Ç–æ–≤–∞' : '‚ùå –¢—Ä–µ–±—É–µ—Ç ADMIN_API_TOKEN'}`);
        console.log(`üîî –£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ —Å–æ–±—ã—Ç–∏—è—Ö: ${notificationService ? '‚úÖ –ê–∫—Ç–∏–≤–Ω—ã' : '‚ùå –ù–µ–∞–∫—Ç–∏–≤–Ω—ã'}`);
        console.log(`‚ö° –†–∞—Å—à–∏—Ä–µ–Ω–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏: ‚úÖ –ó–∞–≥—Ä—É–∂–µ–Ω—ã`);
      })
      .catch(err => console.error('‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞ –±–æ—Ç–∞:', err));
  });
}

// –ü—Ä–∞–≤–∏–ª—å–Ω–æ–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–µ —Ä–∞–±–æ—Ç—ã
process.once('SIGINT', () => {
  console.log('üõë –ü–æ–ª—É—á–µ–Ω SIGINT. –ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ —Ä–∞–±–æ—Ç—ã...');
  if (notificationService) {
    console.log('üîî –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å–µ—Ä–≤–∏—Å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π');
  }
  bot.stop('SIGINT');
});

process.once('SIGTERM', () => {
  console.log('üõë –ü–æ–ª—É—á–µ–Ω SIGTERM. –ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ —Ä–∞–±–æ—Ç—ã...');
  if (notificationService) {
    console.log('üîî –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å–µ—Ä–≤–∏—Å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π');
  }
  bot.stop('SIGTERM');
});
