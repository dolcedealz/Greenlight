const mongoose = require('mongoose');
const { Duel, DuelInvitation, User, Transaction } = require('../models');
const referralService = require('./referral.service');
const casinoFinanceService = require('./casino-finance.service');

class DuelService {
  
  // –°–æ–∑–¥–∞–Ω–∏–µ –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏—è –Ω–∞ –¥—É—ç–ª—å (–¥–ª—è inline —Ä–µ–∂–∏–º–∞)
  async createInvitation(data) {
    const { challengerId, challengerUsername, targetUsername, gameType, format, amount, metadata } = data;
    
    // –í–∞–ª–∏–¥–∞—Ü–∏—è
    await this.validateDuelParameters(challengerId, amount, gameType, format);
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –ª–∏–º–∏—Ç—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    await this.checkUserLimits(challengerId);
    
    // –°–æ–∑–¥–∞–µ–º –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏–µ
    const invitation = await DuelInvitation.create({
      challengerId,
      challengerUsername,
      targetUsername,
      gameType,
      format,
      amount,
      metadata
    });
    
    return invitation;
  }
  
  // –ü—Ä–∏–Ω—è—Ç–∏–µ –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏—è –∏ —Å–æ–∑–¥–∞–Ω–∏–µ –¥—É—ç–ª–∏
  async acceptInvitation(inviteId, acceptorId, acceptorUsername) {
    const session = await mongoose.startSession();
    session.startTransaction();
    
    try {
      // –ù–∞—Ö–æ–¥–∏–º –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏–µ
      const invitation = await DuelInvitation.findOne({
        inviteId,
        status: 'pending'
      }).session(session);
      
      if (!invitation) {
        throw new Error('–ü—Ä–∏–≥–ª–∞—à–µ–Ω–∏–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ –∏–ª–∏ —É–∂–µ –Ω–µ–¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–æ');
      }
      
      if (!invitation.canAccept(acceptorId, acceptorUsername)) {
        throw new Error('–í—ã –Ω–µ –º–æ–∂–µ—Ç–µ –ø—Ä–∏–Ω—è—Ç—å —ç—Ç–æ –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏–µ');
      }
      
      // –í–∞–ª–∏–¥–∞—Ü–∏—è —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤
      await this.validateDuelParameters(acceptorId, invitation.amount);
      
      // –ë–ª–æ–∫–∏—Ä—É–µ–º —Å—Ä–µ–¥—Å—Ç–≤–∞ —É –æ–±–æ–∏—Ö –∏–≥—Ä–æ–∫–æ–≤
      await this.lockUserFunds(invitation.challengerId, invitation.amount, session);
      await this.lockUserFunds(acceptorId, invitation.amount, session);
      
      // –í—ã—á–∏—Å–ª—è–µ–º –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –ø–æ–ª—è
      const winsRequired = this.getWinsRequired(invitation.format);
      const commission = Math.round(invitation.amount * 0.05 * 100) / 100; // 5% –∫–æ–º–∏—Å—Å–∏—è
      const totalAmount = invitation.amount * 2;
      const winAmount = totalAmount - commission;
      
      // –°–æ–∑–¥–∞–µ–º –¥—É—ç–ª—å
      const duel = await Duel.create([{
        challengerId: invitation.challengerId,
        challengerUsername: invitation.challengerUsername,
        opponentId: acceptorId,
        opponentUsername: acceptorUsername,
        gameType: invitation.gameType,
        format: invitation.format,
        amount: invitation.amount,
        winsRequired,
        commission,
        totalAmount,
        winAmount,
        status: 'accepted',
        chatId: '0', // –ë—É–¥–µ—Ç –æ–±–Ω–æ–≤–ª–µ–Ω–æ –ø—Ä–∏ —Å—Ç–∞—Ä—Ç–µ
        chatType: 'private'
      }], { session });
      
      // –û–±–Ω–æ–≤–ª—è–µ–º –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏–µ
      invitation.status = 'accepted';
      invitation.targetUserId = acceptorId;
      invitation.duelId = duel[0]._id;
      await invitation.save({ session });
      
      await session.commitTransaction();
      
      return { duel: duel[0], invitation };
      
    } catch (error) {
      await session.abortTransaction();
      throw error;
    } finally {
      session.endSession();
    }
  }
  
  // –°–æ–∑–¥–∞–Ω–∏–µ –¥—É—ç–ª–∏ –Ω–∞–ø—Ä—è–º—É—é (–¥–ª—è –≥—Ä—É–ø–ø–æ–≤—ã—Ö —á–∞—Ç–æ–≤)
  async createDuel(data) {
    const { 
      challengerId, challengerUsername, 
      opponentId, opponentUsername,
      gameType, format, amount, 
      chatId, chatType, messageId 
    } = data;
    
    const session = await mongoose.startSession();
    session.startTransaction();
    
    try {
      // –í–∞–ª–∏–¥–∞—Ü–∏—è
      await this.validateDuelParameters(challengerId, amount, gameType, format);
      if (opponentId) {
        await this.validateDuelParameters(opponentId, amount);
      }
      
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ –∏–≥—Ä–æ–∫–∏ —Ä–∞–∑–Ω—ã–µ
      if (challengerId === opponentId) {
        throw new Error('–ù–µ–ª—å–∑—è —Å–æ–∑–¥–∞—Ç—å –¥—É—ç–ª—å —Å —Å–∞–º–∏–º —Å–æ–±–æ–π');
      }
      
      // –ë–ª–æ–∫–∏—Ä—É–µ–º —Å—Ä–µ–¥—Å—Ç–≤–∞
      await this.lockUserFunds(challengerId, amount, session);
      if (opponentId) {
        await this.lockUserFunds(opponentId, amount, session);
      }
      
      // –í—ã—á–∏—Å–ª—è–µ–º –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –ø–æ–ª—è
      const winsRequired = this.getWinsRequired(format);
      const commission = Math.round(amount * 0.05 * 100) / 100; // 5% –∫–æ–º–∏—Å—Å–∏—è
      const totalAmount = amount * 2;
      const winAmount = totalAmount - commission;
      
      // –°–æ–∑–¥–∞–µ–º –¥—É—ç–ª—å
      const duel = await Duel.create([{
        challengerId,
        challengerUsername,
        opponentId,
        opponentUsername,
        gameType,
        format,
        amount,
        winsRequired,
        commission,
        totalAmount,
        winAmount,
        chatId,
        chatType,
        messageId,
        status: opponentId ? 'accepted' : 'pending'
      }], { session });
      
      await session.commitTransaction();
      
      return duel[0];
      
    } catch (error) {
      await session.abortTransaction();
      throw error;
    } finally {
      session.endSession();
    }
  }
  
  // –ü—Ä–∏—Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ –∫ –æ—Ç–∫—Ä—ã—Ç–æ–π –¥—É—ç–ª–∏
  async joinDuel(duelId, playerId, playerUsername) {
    const session = await mongoose.startSession();
    session.startTransaction();
    
    try {
      const duel = await Duel.findById(duelId).session(session);
      
      if (!duel) {
        throw new Error('–î—É—ç–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω–∞');
      }
      
      // üîí –ö–†–ò–¢–ò–ß–ï–°–ö–ê–Ø –ü–†–û–í–ï–†–ö–ê: –ò—Å–ø–æ–ª—å–∑—É–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–π –º–µ—Ç–æ–¥ canAccept
      if (!duel.canAccept(playerId, playerUsername)) {
        // –û–ø—Ä–µ–¥–µ–ª—è–µ–º –ø—Ä–∏—á–∏–Ω—É –æ—Ç–∫–∞–∑–∞
        if (duel.status !== 'pending') {
          throw new Error('–î—É—ç–ª—å —É–∂–µ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞ –¥–ª—è –ø—Ä–∏–Ω—è—Ç–∏—è');
        } else if (duel.isExpired()) {
          throw new Error('–í—Ä–µ–º—è –ø—Ä–∏–Ω—è—Ç–∏—è –¥—É—ç–ª–∏ –∏—Å—Ç–µ–∫–ª–æ');
        } else if (duel.challengerId === playerId) {
          throw new Error('–ù–µ–ª—å–∑—è –ø—Ä–∏—Å–æ–µ–¥–∏–Ω–∏—Ç—å—Å—è –∫ —Å–æ–±—Å—Ç–≤–µ–Ω–Ω–æ–π –¥—É—ç–ª–∏');
        } else if (duel.opponentId && duel.opponentId !== playerId) {
          throw new Error('–î—É—ç–ª—å —É–∂–µ –∑–∞–Ω—è—Ç–∞ –¥—Ä—É–≥–∏–º –∏–≥—Ä–æ–∫–æ–º');
        } else if (duel.opponentUsername && playerUsername && duel.opponentUsername !== playerUsername) {
          throw new Error(`–≠—Ç–æ—Ç –≤—ã–∑–æ–≤ –ø—Ä–µ–¥–Ω–∞–∑–Ω–∞—á–µ–Ω –¥–ª—è @${duel.opponentUsername}`);
        } else {
          throw new Error('–ù–µ–≤–æ–∑–º–æ–∂–Ω–æ –ø—Ä–∏–Ω—è—Ç—å –¥–∞–Ω–Ω—É—é –¥—É—ç–ª—å');
        }
      }
      
      // –í–∞–ª–∏–¥–∞—Ü–∏—è –∏ –±–ª–æ–∫–∏—Ä–æ–≤–∫–∞ —Å—Ä–µ–¥—Å—Ç–≤
      await this.validateDuelParameters(playerId, duel.amount);
      await this.lockUserFunds(playerId, duel.amount, session);
      
      // –û–±–Ω–æ–≤–ª—è–µ–º –¥—É—ç–ª—å
      duel.opponentId = playerId;
      duel.opponentUsername = playerUsername;
      duel.status = 'accepted';
      await duel.save({ session });
      
      await session.commitTransaction();
      
      return duel;
      
    } catch (error) {
      await session.abortTransaction();
      throw error;
    } finally {
      session.endSession();
    }
  }
  
  // –ù–∞—á–∞–ª–æ –∏–≥—Ä—ã (—Å–æ–∑–¥–∞–Ω–∏–µ –ø–µ—Ä–≤–æ–≥–æ —Ä–∞—É–Ω–¥–∞)
  async startGame(sessionId, playerId) {
    const duel = await Duel.findOne({ sessionId });
    
    if (!duel) {
      throw new Error('–î—É—ç–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω–∞');
    }
    
    if (!duel.isParticipant(playerId)) {
      throw new Error('–í—ã –Ω–µ —É—á–∞—Å—Ç–≤—É–µ—Ç–µ –≤ —ç—Ç–æ–π –¥—É—ç–ª–∏');
    }
    
    if (duel.status !== 'accepted') {
      throw new Error('–î—É—ç–ª—å –Ω–µ –≥–æ—Ç–æ–≤–∞ –∫ –Ω–∞—á–∞–ª—É');
    }
    
    // –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å –¥—É—ç–ª–∏
    duel.status = 'active';
    
    // –°–æ–∑–¥–∞–µ–º –ø–µ—Ä–≤—ã–π —Ä–∞—É–Ω–¥ –µ—Å–ª–∏ –µ–≥–æ –µ—â–µ –Ω–µ—Ç
    if (duel.rounds.length === 0) {
      const firstRound = {
        roundNumber: 1,
        challengerResult: null,
        opponentResult: null,
        winnerId: null,
        timestamp: new Date()
      };
      duel.rounds.push(firstRound);
    }
    
    await duel.save();
    
    return { duel, round: duel.rounds[0] };
  }
  
  // –°–¥–µ–ª–∞—Ç—å —Ö–æ–¥ –≤ –¥—É—ç–ª–∏
  async makeMove(sessionId, playerId, result, messageId = null) {
    const session = await mongoose.startSession();
    session.startTransaction();
    
    try {
      const duel = await Duel.findOne({ sessionId }).session(session);
      
      if (!duel || !duel.isParticipant(playerId)) {
        throw new Error('–î—É—ç–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –∏–ª–∏ –≤—ã –Ω–µ —É—á–∞—Å—Ç–≤—É–µ—Ç–µ –≤ –Ω–µ–π');
      }
      
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ –¥—É—ç–ª—å –Ω–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∞
      if (duel.status === 'completed' || duel.status === 'cancelled') {
        throw new Error(`–î—É—ç–ª—å —É–∂–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∞ (—Å—Ç–∞—Ç—É—Å: ${duel.status})`);
      }
      
      // –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –∞–∫—Ç–∏–≤–∏—Ä—É–µ–º –¥—É—ç–ª—å –µ—Å–ª–∏ –æ–Ω–∞ –ø—Ä–∏–Ω—è—Ç–∞
      if (duel.status === 'accepted') {
        duel.status = 'active';
        duel.startedAt = new Date();
        
        // –°–æ–∑–¥–∞–µ–º –ø–µ—Ä–≤—ã–π —Ä–∞—É–Ω–¥ –µ—Å–ª–∏ –µ–≥–æ –µ—â–µ –Ω–µ—Ç
        if (duel.rounds.length === 0) {
          const firstRound = {
            roundNumber: 1,
            challengerResult: null,
            opponentResult: null,
            winnerId: null,
            timestamp: new Date()
          };
          duel.rounds.push(firstRound);
        }
      }
      
      if (duel.status !== 'active') {
        throw new Error(`–î—É—ç–ª—å –Ω–µ –∞–∫—Ç–∏–≤–Ω–∞ (—Å—Ç–∞—Ç—É—Å: ${duel.status})`);
      }
      
      const isChallenger = duel.challengerId === playerId;
      
      // –ù–∞—Ö–æ–¥–∏–º –∏–ª–∏ —Å–æ–∑–¥–∞–µ–º —Ç–µ–∫—É—â–∏–π —Ä–∞—É–Ω–¥
      let currentRound = duel.rounds.find(round => 
        (isChallenger && round.challengerResult === null) || 
        (!isChallenger && round.opponentResult === null)
      );
      
      if (!currentRound) {
        // –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—ã–π —Ä–∞—É–Ω–¥
        currentRound = {
          roundNumber: duel.rounds.length + 1,
          challengerResult: null,
          opponentResult: null,
          winnerId: null,
          timestamp: new Date()
        };
        duel.rounds.push(currentRound);
      }
      
      // –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
      if (isChallenger) {
        if (currentRound.challengerResult !== null) {
          throw new Error('–í—ã —É–∂–µ —Å–¥–µ–ª–∞–ª–∏ —Ö–æ–¥ –≤ —ç—Ç–æ–º —Ä–∞—É–Ω–¥–µ');
        }
        currentRound.challengerResult = result;
      } else {
        if (currentRound.opponentResult !== null) {
          throw new Error('–í—ã —É–∂–µ —Å–¥–µ–ª–∞–ª–∏ —Ö–æ–¥ –≤ —ç—Ç–æ–º —Ä–∞—É–Ω–¥–µ');
        }
        currentRound.opponentResult = result;
      }
      
      // –ï—Å–ª–∏ –æ–±–∞ –∏–≥—Ä–æ–∫–∞ —Å–¥–µ–ª–∞–ª–∏ —Ö–æ–¥—ã, –æ–ø—Ä–µ–¥–µ–ª—è–µ–º –ø–æ–±–µ–¥–∏—Ç–µ–ª—è —Ä–∞—É–Ω–¥–∞
      if (currentRound.challengerResult !== null && currentRound.opponentResult !== null) {
        console.log(`üé≤ –û–±–∞ –∏–≥—Ä–æ–∫–∞ —Å–¥–µ–ª–∞–ª–∏ —Ö–æ–¥—ã. –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç —Ä–∞—É–Ω–¥–∞...`);
        await this.processRoundResult(duel, currentRound, session);
      }
      
      // –í–ê–ñ–ù–û: —Å–æ—Ö—Ä–∞–Ω—è–µ–º —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –¥—É—ç–ª—å –µ—â–µ –∞–∫—Ç–∏–≤–Ω–∞
      if (duel.status === 'active' || duel.status === 'completed') {
        await duel.save({ session });
      }
      
      await session.commitTransaction();
      
      return duel;
      
    } catch (error) {
      await session.abortTransaction();
      throw error;
    } finally {
      session.endSession();
    }
  }
  
  // –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞ —Ä–∞—É–Ω–¥–∞
  async processRoundResult(duel, round, session) {
    console.log(`üé≤ –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞ —Ä–∞—É–Ω–¥–∞ ${round.roundNumber}:`, {
      gameType: duel.gameType,
      challengerResult: round.challengerResult,
      opponentResult: round.opponentResult,
      challengerScore: duel.challengerScore,
      opponentScore: duel.opponentScore,
      winsRequired: duel.winsRequired,
      format: duel.format
    });
    
    const winner = this.determineWinner(duel.gameType, round.challengerResult, round.opponentResult);
    console.log(`üèÜ –ü–æ–±–µ–¥–∏—Ç–µ–ª—å —Ä–∞—É–Ω–¥–∞: ${winner}`);
    
    if (winner === 'challenger') {
      duel.challengerScore++;
      round.winnerId = duel.challengerId;
    } else if (winner === 'opponent') {
      duel.opponentScore++;
      round.winnerId = duel.opponentId;
    } else {
      // –ù–∏—á—å—è - —Å–æ–∑–¥–∞–µ–º –Ω–æ–≤—ã–π —Ä–∞—É–Ω–¥ –¥–ª—è –ø–µ—Ä–µ–∏–≥—Ä–æ–≤–∫–∏
      console.log('ü§ù –ù–∏—á—å—è! –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—ã–π —Ä–∞—É–Ω–¥ –¥–ª—è –ø–µ—Ä–µ–∏–≥—Ä–æ–≤–∫–∏');
      const newRound = {
        roundNumber: duel.rounds.length + 1,
        challengerResult: null,
        opponentResult: null,
        winnerId: null,
        timestamp: new Date()
      };
      duel.rounds.push(newRound);
      await duel.save({ session });
      return;
    }
    
    console.log(`üìä –û–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–π —Å—á—ë—Ç: ${duel.challengerScore}:${duel.opponentScore} (–Ω—É–∂–Ω–æ ${duel.winsRequired} –¥–ª—è –ø–æ–±–µ–¥—ã)`);
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–±–µ–¥–∏—Ç–µ–ª—è –¥—É—ç–ª–∏
    if (duel.challengerScore >= duel.winsRequired) {
      console.log(`üéÜ –î—É—ç–ª—å –∑–∞–≤–µ—Ä—à–µ–Ω–∞! –ü–æ–±–µ–¥–∏—Ç–µ–ª—å: ${duel.challengerUsername} (challenger)`);
      await this.finishDuel(duel, duel.challengerId, duel.challengerUsername, session);
    } else if (duel.opponentScore >= duel.winsRequired) {
      console.log(`üéÜ –î—É—ç–ª—å –∑–∞–≤–µ—Ä—à–µ–Ω–∞! –ü–æ–±–µ–¥–∏—Ç–µ–ª—å: ${duel.opponentUsername} (opponent)`);
      await this.finishDuel(duel, duel.opponentId, duel.opponentUsername, session);
    } else {
      console.log(`üîÑ –î—É—ç–ª—å –ø—Ä–æ–¥–æ–ª–∂–∞–µ—Ç—Å—è... –ù—É–∂–Ω–æ –µ—â—ë —Ä–∞—É–Ω–¥–æ–≤`);
      // –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—ã–π —Ä–∞—É–Ω–¥ –¥–ª—è –ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏—è –∏–≥—Ä—ã
      const newRound = {
        roundNumber: duel.rounds.length + 1,
        challengerResult: null,
        opponentResult: null,
        winnerId: null,
        timestamp: new Date()
      };
      duel.rounds.push(newRound);
      console.log(`üìù –°–æ–∑–¥–∞–Ω –Ω–æ–≤—ã–π —Ä–∞—É–Ω–¥ #${newRound.roundNumber} –¥–ª—è –ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏—è –¥—É—ç–ª–∏`);
    }
  }
  
  // –ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ –¥—É—ç–ª–∏
  async finishDuel(duel, winnerId, winnerUsername, session) {
    console.log(`üéØ –ó–∞–≤–µ—Ä—à–∞–µ–º –¥—É—ç–ª—å ${duel.sessionId}:`, {
      winnerId,
      winnerUsername,
      finalScore: `${duel.challengerScore}:${duel.opponentScore}`
    });
    
    // –û–±–Ω–æ–≤–ª—è–µ–º –¥—É—ç–ª—å
    duel.status = 'completed';
    duel.winnerId = winnerId;
    duel.winnerUsername = winnerUsername;
    duel.completedAt = new Date();
    await duel.save({ session });
    
    console.log(`‚úÖ –î—É—ç–ª—å ${duel.sessionId} –∑–∞–≤–µ—Ä—à–µ–Ω–∞ —Å–æ —Å—Ç–∞—Ç—É—Å–æ–º: ${duel.status}`);
    
    // –í—ã–ø–ª–∞—á–∏–≤–∞–µ–º –≤—ã–∏–≥—Ä—ã—à –∏ —Ä–∞–∑–±–ª–æ–∫–∏—Ä—É–µ–º —Å—Ä–µ–¥—Å—Ç–≤–∞
    await this.processPayouts(duel, session);
  }
  
  // –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–ø–ª–∞—Ç
  async processPayouts(duel, session) {
    const winnerId = duel.winnerId;
    const loserId = duel.challengerId === winnerId ? duel.opponentId : duel.challengerId;
    
    console.log(`üí∞ PAYOUTS: –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–ø–ª–∞—Ç –¥–ª—è –¥—É—ç–ª–∏ ${duel.sessionId}`);
    console.log(`üí∞ PAYOUTS: –ü–æ–±–µ–¥–∏—Ç–µ–ª—å: ${winnerId}, –ü—Ä–æ–∏–≥—Ä–∞–≤—à–∏–π: ${loserId}`);
    console.log(`üí∞ PAYOUTS: –°—É–º–º–∞ —Å—Ç–∞–≤–∫–∏: ${duel.amount}, –í—ã–∏–≥—Ä—ã—à: ${duel.winAmount}`);
    
    // –£–±–∏—Ä–∞–µ–º –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ —Å—Ä–µ–¥—Å—Ç–≤–∞ –ø—Ä–æ–∏–≥—Ä–∞–≤—à–µ–≥–æ –ë–ï–ó –≤–æ–∑–≤—Ä–∞—Ç–∞ –Ω–∞ –±–∞–ª–∞–Ω—Å
    await this.removeLockedFunds(loserId, duel.amount, session);
    
    // –£–±–∏—Ä–∞–µ–º –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ —Å—Ä–µ–¥—Å—Ç–≤–∞ –ø–æ–±–µ–¥–∏—Ç–µ–ª—è –ë–ï–ó –≤–æ–∑–≤—Ä–∞—Ç–∞ (–æ–Ω–∏ —É–∂–µ –±—ã–ª–∏ —Å–ø–∏—Å–∞–Ω—ã –ø—Ä–∏ –±–ª–æ–∫–∏—Ä–æ–≤–∫–µ)
    await this.removeLockedFunds(winnerId, duel.amount, session);
    
    // –ù–∞—á–∏—Å–ª—è–µ–º –ø–æ–±–µ–¥–∏—Ç–µ–ª—é –ø–æ–ª–Ω—ã–π –≤—ã–∏–≥—Ä—ã—à (–µ–≥–æ —Å—Ç–∞–≤–∫–∞ + –≤—ã–∏–≥—Ä—ã—à)
    await this.creditUserFunds(winnerId, duel.winAmount, 'duel_win', duel.sessionId, session);
    
    // –ù–∞—Ö–æ–¥–∏–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –¥–ª—è —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π
    const winner = await User.findOne({ telegramId: parseInt(winnerId) }).session(session);
    const loser = await User.findOne({ telegramId: parseInt(loserId) }).session(session);
    
    if (!winner || !loser) {
      throw new Error('–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã');
    }
    
    // –ó–∞–ø–∏—Å—ã–≤–∞–µ–º —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏
    await Transaction.create([{
      user: winner._id,
      type: 'win',
      amount: duel.winAmount,
      description: `–í—ã–∏–≥—Ä—ã—à –≤ –¥—É—ç–ª–∏ ${duel.sessionId}`,
      balanceBefore: winner.balance - duel.winAmount,
      balanceAfter: winner.balance
    }], { session });
    
    await Transaction.create([{
      user: loser._id,
      type: 'bet',
      amount: -duel.amount,
      description: `–ü—Ä–æ–∏–≥—Ä—ã—à –≤ –¥—É—ç–ª–∏ ${duel.sessionId}`,
      balanceBefore: loser.balance + duel.amount,
      balanceAfter: loser.balance
    }], { session });
    
    // –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω—ã–µ –Ω–∞—á–∏—Å–ª–µ–Ω–∏—è —Å –∫–æ–º–∏—Å—Å–∏–∏ –∫–∞–∑–∏–Ω–æ
    try {
      const referralResults = await referralService.processCommission({
        winnerId: duel.winnerId,
        loserId: loserId,
        commission: duel.commission,
        gameType: 'duel',
        gameId: duel.sessionId
      });
      
      if (referralResults.length > 0) {
        console.log(`‚úÖ –û–±—Ä–∞–±–æ—Ç–∞–Ω–æ ${referralResults.length} —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω–æ–µ –Ω–∞—á–∏—Å–ª–µ–Ω–∏–µ –¥–ª—è –¥—É—ç–ª–∏ ${duel.sessionId} (—Å –ø—Ä–æ–∏–≥—Ä–∞–≤—à–µ–≥–æ)`);
        referralResults.forEach(result => {
          console.log(`   üí∞ ${result.earnedAmount} USDT ‚Üí @${result.partnerUsername} (${result.commissionPercent}% –æ—Ç ${duel.commission} USDT –∫–æ–º–∏—Å—Å–∏–∏)`);
        });
      } else {
        console.log(`‚ÑπÔ∏è –†–µ—Ñ–µ—Ä–∞–ª—å–Ω—ã—Ö –Ω–∞—á–∏—Å–ª–µ–Ω–∏–π –Ω–µ—Ç –¥–ª—è –¥—É—ç–ª–∏ ${duel.sessionId} (—É –ø—Ä–æ–∏–≥—Ä–∞–≤—à–µ–≥–æ –Ω–µ—Ç —Ä–µ—Ñ–µ—Ä–µ—Ä–∞)`);
      }
    } catch (referralError) {
      console.error(`‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω—ã—Ö –Ω–∞—á–∏—Å–ª–µ–Ω–∏–π –¥–ª—è –¥—É—ç–ª–∏ ${duel.sessionId}:`, referralError);
      // –ù–µ –ø—Ä–µ—Ä—ã–≤–∞–µ–º –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ - –¥—É—ç–ª—å –¥–æ–ª–∂–Ω–∞ –∑–∞–≤–µ—Ä—à–∏—Ç—å—Å—è –¥–∞–∂–µ –µ—Å–ª–∏ —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω—ã–µ –Ω–µ –æ–±—Ä–∞–±–æ—Ç–∞–ª–∏—Å—å
    }
    
    // –û–±–Ω–æ–≤–ª—è–µ–º —Ñ–∏–Ω–∞–Ω—Å—ã –∫–∞–∑–∏–Ω–æ (–¥–æ–±–∞–≤–ª—è–µ–º –∫–æ–º–∏—Å—Å–∏—é –≤ –æ–ø–µ—Ä–∞—Ç–∏–≤–Ω—ã–π –±–∞–ª–∞–Ω—Å)
    await casinoFinanceService.updateAfterDuel({
      sessionId: duel.sessionId,
      commission: duel.commission,
      amount: duel.amount
    });
    
    console.log(`üí∞ –ö–æ–º–∏—Å—Å–∏—è ${duel.commission} USDT –¥–æ–±–∞–≤–ª–µ–Ω–∞ –≤ –æ–ø–µ—Ä–∞—Ç–∏–≤–Ω—ã–π –±–∞–ª–∞–Ω—Å –∫–∞–∑–∏–Ω–æ`);
  }
  
  // –ü–æ–ª—É—á–µ–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –¥—É—ç–ª–∏
  async getDuel(sessionId) {
    const duel = await Duel.findOne({ sessionId });
    
    if (!duel) {
      throw new Error('–î—É—ç–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω–∞');
    }
    
    return duel;
  }
  
  // –ü–æ–ª—É—á–µ–Ω–∏–µ –∞–∫—Ç–∏–≤–Ω—ã—Ö –¥—É—ç–ª–µ–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
  async getUserActiveDuels(userId) {
    const duels = await Duel.find({
      $or: [
        { challengerId: userId },
        { opponentId: userId }
      ],
      status: { $in: ['pending', 'accepted', 'active'] }
    })
      .sort({ createdAt: -1 });
    
    return duels;
  }
  
  // –ü–æ–ª—É—á–µ–Ω–∏–µ –∏—Å—Ç–æ—Ä–∏–∏ –¥—É—ç–ª–µ–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
  async getUserDuelHistory(userId, limit = 20, offset = 0) {
    const query = {
      $or: [
        { challengerId: userId },
        { opponentId: userId }
      ],
      status: 'completed'
    };
    
    const [duels, total] = await Promise.all([
      Duel.find(query)
        .sort({ completedAt: -1 })
        .limit(limit)
        .skip(offset),
      Duel.countDocuments(query)
    ]);
    
    return {
      rows: duels,
      count: total
    };
  }
  
  // –û—Ç–º–µ–Ω–∞ –¥—É—ç–ª–∏
  async cancelDuel(sessionId, userId, reason = 'user_cancel') {
    const session = await mongoose.startSession();
    session.startTransaction();
    
    try {
      const duel = await Duel.findOne({ sessionId }).session(session);
      
      if (!duel) {
        throw new Error('–î—É—ç–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω–∞');
      }
      
      // üîß –£–õ–£–ß–®–ï–ù–ù–ê–Ø –õ–û–ì–ò–ö–ê –û–¢–ú–ï–ù–´: –ø—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–∞–≤–∞ –±–æ–ª–µ–µ —Ç–æ—á–Ω–æ
      if (reason === 'user_cancel' && userId) {
        // –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º userId –≤ —Å—Ç—Ä–æ–∫—É –¥–ª—è —Å—Ä–∞–≤–Ω–µ–Ω–∏—è
        const userIdStr = userId.toString();
        const isChallenger = duel.challengerId === userIdStr || duel.challengerId === userId;
        const isOpponent = duel.opponentId === userIdStr || duel.opponentId === userId;
        
        console.log(`üö´ CANCEL LOGIC: –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø—Ä–∞–≤ –æ—Ç–º–µ–Ω—ã`);
        console.log(`üö´ CANCEL LOGIC: userId: ${userId} (${typeof userId})`);
        console.log(`üö´ CANCEL LOGIC: challengerId: ${duel.challengerId} (${typeof duel.challengerId})`);
        console.log(`üö´ CANCEL LOGIC: opponentId: ${duel.opponentId} (${typeof duel.opponentId})`);
        console.log(`üö´ CANCEL LOGIC: isChallenger: ${isChallenger}, isOpponent: ${isOpponent}`);
        console.log(`üö´ CANCEL LOGIC: duel status: ${duel.status}`);
        
        // –î–ª—è pending –¥—É—ç–ª–µ–π:
        if (duel.status === 'pending') {
          // –¢–æ–ª—å–∫–æ —Å–æ–∑–¥–∞—Ç–µ–ª—å –º–æ–∂–µ—Ç –æ—Ç–º–µ–Ω–∏—Ç—å pending –¥—É—ç–ª—å
          if (!isChallenger) {
            throw new Error('–¢–æ–ª—å–∫–æ —Å–æ–∑–¥–∞—Ç–µ–ª—å –º–æ–∂–µ—Ç –æ—Ç–º–µ–Ω–∏—Ç—å –Ω–µ–ø—Ä–∏–Ω—è—Ç—É—é –¥—É—ç–ª—å');
          }
        }
        
        // –î–ª—è –ø—Ä–∏–Ω—è—Ç—ã—Ö/–∞–∫—Ç–∏–≤–Ω—ã—Ö –¥—É—ç–ª–µ–π: —Ç–æ–ª—å–∫–æ —É—á–∞—Å—Ç–Ω–∏–∫–∏ –º–æ–≥—É—Ç –æ—Ç–º–µ–Ω–∏—Ç—å
        if ((duel.status === 'accepted' || duel.status === 'active')) {
          if (!isChallenger && !isOpponent) {
            throw new Error('–¢–æ–ª—å–∫–æ —É—á–∞—Å—Ç–Ω–∏–∫–∏ –¥—É—ç–ª–∏ –º–æ–≥—É—Ç –µ—ë –æ—Ç–º–µ–Ω–∏—Ç—å');
          }
        }
      }
      
      if (duel.status === 'completed' || duel.status === 'cancelled') {
        throw new Error('–î—É—ç–ª—å —É–∂–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∞');
      }
      
      // –†–∞–∑–±–ª–æ–∫–∏—Ä—É–µ–º —Å—Ä–µ–¥—Å—Ç–≤–∞
      console.log(`üí∞ CANCEL: –†–∞–∑–±–ª–æ–∫–∏—Ä—É–µ–º —Å—Ä–µ–¥—Å—Ç–≤–∞ –¥–ª—è –¥—É—ç–ª–∏ ${sessionId} (—Å—Ç–∞—Ç—É—Å: ${duel.status})`);
      
      // –í—Å–µ–≥–¥–∞ –≤–æ–∑–≤—Ä–∞—â–∞–µ–º —Å—Ä–µ–¥—Å—Ç–≤–∞ —Å–æ–∑–¥–∞—Ç–µ–ª—é
      console.log(`üí∞ CANCEL: –í–æ–∑–≤—Ä–∞—â–∞–µ–º ${duel.amount} USDT —Å–æ–∑–¥–∞—Ç–µ–ª—é ${duel.challengerId}`);
      await this.unlockUserFunds(duel.challengerId, duel.amount, session);
      
      // –í–æ–∑–≤—Ä–∞—â–∞–µ–º —Å—Ä–µ–¥—Å—Ç–≤–∞ –æ–ø–ø–æ–Ω–µ–Ω—Ç—É —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –¥—É—ç–ª—å –±—ã–ª–∞ –ø—Ä–∏–Ω—è—Ç–∞ (–µ—Å—Ç—å opponentId)
      if (duel.opponentId && (duel.status === 'accepted' || duel.status === 'active')) {
        console.log(`üí∞ CANCEL: –í–æ–∑–≤—Ä–∞—â–∞–µ–º ${duel.amount} USDT –æ–ø–ø–æ–Ω–µ–Ω—Ç—É ${duel.opponentId}`);
        await this.unlockUserFunds(duel.opponentId, duel.amount, session);
      } else if (duel.status === 'pending') {
        console.log(`üí∞ CANCEL: –î—É—ç–ª—å –±—ã–ª–∞ –≤ –æ–∂–∏–¥–∞–Ω–∏–∏, –≤–æ–∑–≤—Ä–∞—â–∞–µ–º —Å—Ä–µ–¥—Å—Ç–≤–∞ —Ç–æ–ª—å–∫–æ —Å–æ–∑–¥–∞—Ç–µ–ª—é`);
      }
      
      // –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å
      duel.status = 'cancelled';
      duel.metadata = { ...duel.metadata, cancelReason: reason, cancelledBy: userId };
      await duel.save({ session });
      
      await session.commitTransaction();
      
      return duel;
      
    } catch (error) {
      await session.abortTransaction();
      throw error;
    } finally {
      session.endSession();
    }
  }
  
  // === –í–°–ü–û–ú–û–ì–ê–¢–ï–õ–¨–ù–´–ï –ú–ï–¢–û–î–´ ===
  
  async validateDuelParameters(userId, amount, gameType = null, format = null, opponentId = null, clientIp = null) {
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    const user = await User.findOne({ telegramId: parseInt(userId) });
    if (!user) {
      throw new Error('–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω');
    }
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –º–∏–Ω–∏–º–∞–ª—å–Ω—É—é —Å—Ç–∞–≤–∫—É
    if (amount < 1) {
      throw new Error('–ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è —Å—Ç–∞–≤–∫–∞: 1 USDT');
    }
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –º–∞–∫—Å–∏–º–∞–ª—å–Ω—É—é —Å—Ç–∞–≤–∫—É
    if (amount > 1000) {
      throw new Error('–ú–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è —Å—Ç–∞–≤–∫–∞: 1000 USDT');
    }
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –±–∞–ª–∞–Ω—Å
    if (user.balance < amount) {
      throw new Error('–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å—Ä–µ–¥—Å—Ç–≤ –Ω–∞ –±–∞–ª–∞–Ω—Å–µ');
    }
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–∏–ø –∏–≥—Ä—ã
    if (gameType && !['üé≤', 'üéØ', '‚öΩ', '‚öΩÔ∏è', 'üèÄ', 'üé≥', 'üé∞'].includes(gameType)) {
      throw new Error('–ù–µ–ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–π —Ç–∏–ø –∏–≥—Ä—ã');
    }
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ñ–æ—Ä–º–∞—Ç
    if (format && !['bo1', 'bo3', 'bo5', 'bo7'].includes(format)) {
      throw new Error('–ù–µ–ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–π —Ñ–æ—Ä–º–∞—Ç –¥—É—ç–ª–∏');
    }
    
    // IP-–∞–Ω–∞–ª–∏–∑ –¥–ª—è –ø—Ä–µ–¥–æ—Ç–≤—Ä–∞—â–µ–Ω–∏—è —Å–≥–æ–≤–æ—Ä–∞
    if (opponentId && clientIp) {
      await this.checkForCollusion(userId, opponentId, clientIp);
    }
    
    return true;
  }
  
  // –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ —Å–≥–æ–≤–æ—Ä –º–µ–∂–¥—É –∏–≥—Ä–æ–∫–∞–º–∏
  async checkForCollusion(challengerId, opponentId, clientIp) {
    // 1. –ü—Ä–æ–≤–µ—Ä—è–µ–º IP –∞–¥—Ä–µ—Å–∞ (–¥–ª—è WebApp)
    if (clientIp) {
      const sameIpUsers = await User.find({
        lastIp: clientIp,
        telegramId: { $in: [parseInt(challengerId), parseInt(opponentId)] }
      });
      
      if (sameIpUsers.length > 1) {
        throw new Error('–î—É—ç–ª–∏ —Å –æ–¥–Ω–æ–≥–æ IP-–∞–¥—Ä–µ—Å–∞ –∑–∞–ø—Ä–µ—â–µ–Ω—ã');
      }
    }
    
    // 2. –ü—Ä–æ–≤–µ—Ä—è–µ–º —á–∞—Å—Ç–æ—Ç—É –¥—É—ç–ª–µ–π –º–µ–∂–¥—É –æ–¥–Ω–∏–º–∏ –∏–≥—Ä–æ–∫–∞–º–∏
    const recentDuels = await Duel.countDocuments({
      $or: [
        {
          challengerId: challengerId,
          opponentId: opponentId
        },
        {
          challengerId: opponentId,
          opponentId: challengerId
        }
      ],
      createdAt: {
        $gte: new Date(Date.now() - 24 * 60 * 60 * 1000) // –ó–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–µ 24 —á–∞—Å–∞
      }
    });
    
    if (recentDuels >= 10) {
      throw new Error('–ü—Ä–µ–≤—ã—à–µ–Ω –ª–∏–º–∏—Ç –¥—É—ç–ª–µ–π —Å –æ–¥–Ω–∏–º –ø—Ä–æ—Ç–∏–≤–Ω–∏–∫–æ–º (10 –≤ –¥–µ–Ω—å)');
    }
    
    // 3. –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–¥–æ–∑—Ä–∏—Ç–µ–ª—å–Ω—ã–µ –ø–∞—Ç—Ç–µ—Ä–Ω—ã –≤—ã–∏–≥—Ä—ã—à–µ–π
    const duelsHistory = await Duel.find({
      $or: [
        {
          challengerId: challengerId,
          opponentId: opponentId
        },
        {
          challengerId: opponentId,
          opponentId: challengerId
        }
      ],
      status: 'completed',
      createdAt: {
        $gte: new Date(Date.now() - 7 * 24 * 60 * 60 * 1000) // –ó–∞ –ø–æ—Å–ª–µ–¥–Ω—é—é –Ω–µ–¥–µ–ª—é
      }
    })
      .sort({ createdAt: -1 })
      .limit(20);
    
    if (duelsHistory.length >= 10) {
      // –°—á–∏—Ç–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø–æ–±–µ–¥
      let challengerWins = 0;
      let opponentWins = 0;
      
      duelsHistory.forEach(duel => {
        if (duel.winnerId === challengerId) challengerWins++;
        if (duel.winnerId === opponentId) opponentWins++;
      });
      
      const totalGames = challengerWins + opponentWins;
      const winRate = Math.max(challengerWins, opponentWins) / totalGames;
      
      // –ï—Å–ª–∏ –æ–¥–∏–Ω –∏–∑ –∏–≥—Ä–æ–∫–æ–≤ –≤—ã–∏–≥—Ä—ã–≤–∞–µ—Ç –±–æ–ª–µ–µ 80% –¥—É—ç–ª–µ–π - –ø–æ–¥–æ–∑—Ä–∏—Ç–µ–ª—å–Ω–æ
      if (winRate > 0.8) {
        throw new Error('–û–±–Ω–∞—Ä—É–∂–µ–Ω –ø–æ–¥–æ–∑—Ä–∏—Ç–µ–ª—å–Ω—ã–π –ø–∞—Ç—Ç–µ—Ä–Ω –∏–≥—Ä—ã. –û–±—Ä–∞—Ç–∏—Ç–µ—Å—å –≤ –ø–æ–¥–¥–µ—Ä–∂–∫—É.');
      }
    }
    
    return true;
  }
  
  async checkUserLimits(userId) {
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∞–∫—Ç–∏–≤–Ω—ã—Ö –¥—É—ç–ª–µ–π
    const activeDuels = await this.getUserActiveDuels(userId);
    if (activeDuels.length >= 3) {
      throw new Error('–ú–∞–∫—Å–∏–º—É–º 3 –∞–∫—Ç–∏–≤–Ω—ã–µ –¥—É—ç–ª–∏ –æ–¥–Ω–æ–≤—Ä–µ–º–µ–Ω–Ω–æ');
    }
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º cooldown (30 —Å–µ–∫—É–Ω–¥ –º–µ–∂–¥—É –¥—É—ç–ª—è–º–∏)
    const recentDuel = await Duel.findOne({
      challengerId: userId,
      createdAt: {
        $gte: new Date(Date.now() - 30000)
      }
    })
      .sort({ createdAt: -1 });
    
    if (recentDuel) {
      const timeDiff = 30 - Math.floor((Date.now() - recentDuel.createdAt) / 1000);
      throw new Error(`–ü–æ–¥–æ–∂–¥–∏—Ç–µ ${timeDiff} —Å–µ–∫—É–Ω–¥ –ø–µ—Ä–µ–¥ —Å–æ–∑–¥–∞–Ω–∏–µ–º –Ω–æ–≤–æ–π –¥—É—ç–ª–∏`);
    }
    
    return true;
  }
  
  async lockUserFunds(userId, amount, session) {
    // –ê—Ç–æ–º–∞—Ä–Ω–∞—è –æ–ø–µ—Ä–∞—Ü–∏—è –±–ª–æ–∫–∏—Ä–æ–≤–∫–∏ —Å—Ä–µ–¥—Å—Ç–≤
    const result = await User.findOneAndUpdate(
      { 
        telegramId: parseInt(userId),
        balance: { $gte: amount }  // –ê—Ç–æ–º–∞—Ä–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ—Å—Ç–∏ —Å—Ä–µ–¥—Å—Ç–≤
      },
      { 
        $inc: { balance: -amount },
        $push: { 
          lockedFunds: { 
            amount, 
            reason: 'duel', 
            lockedAt: new Date(),
            expiresAt: new Date(Date.now() + 30 * 60 * 1000) // 30 –º–∏–Ω—É—Ç
          }
        }
      },
      { session, new: true }
    );
    
    if (!result) {
      throw new Error('–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å—Ä–µ–¥—Å—Ç–≤ –¥–ª—è –±–ª–æ–∫–∏—Ä–æ–≤–∫–∏');
    }
    
    return true;
  }
  
  async unlockUserFunds(userId, amount, session) {
    console.log(`üîì UNLOCK: –ù–∞—á–∏–Ω–∞–µ–º —Ä–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∫—É ${amount} USDT –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ${userId}`);
    
    // –°–Ω–∞—á–∞–ª–∞ –Ω–∞–π–¥–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏ –ø—Ä–æ–≤–µ—Ä–∏–º –µ–≥–æ —Ç–µ–∫—É—â–µ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ
    const userBefore = await User.findOne({ telegramId: parseInt(userId) }).session(session);
    if (!userBefore) {
      console.error(`‚ùå UNLOCK: –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å ${userId} –Ω–µ –Ω–∞–π–¥–µ–Ω!`);
      throw new Error('–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω');
    }
    
    console.log(`üîì UNLOCK: –ë–∞–ª–∞–Ω—Å –¥–æ: ${userBefore.balance}, –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ —Å—Ä–µ–¥—Å—Ç–≤–∞:`, userBefore.lockedFunds);
    
    // –ê—Ç–æ–º–∞—Ä–Ω–∞—è –æ–ø–µ—Ä–∞—Ü–∏—è —Ä–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∫–∏ —Å—Ä–µ–¥—Å—Ç–≤
    const result = await User.findOneAndUpdate(
      { telegramId: parseInt(userId) },
      { 
        $inc: { balance: amount },
        $pull: { 
          lockedFunds: { 
            amount, 
            reason: 'duel' 
          }
        }
      },
      { session, new: true }
    );
    
    if (!result) {
      console.error(`‚ùå UNLOCK: –ù–µ —É–¥–∞–ª–æ—Å—å –æ–±–Ω–æ–≤–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ${userId}`);
      throw new Error('–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω');
    }
    
    console.log(`‚úÖ UNLOCK: –ë–∞–ª–∞–Ω—Å –ø–æ—Å–ª–µ: ${result.balance}, –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ —Å—Ä–µ–¥—Å—Ç–≤–∞:`, result.lockedFunds);
    console.log(`‚úÖ UNLOCK: –£—Å–ø–µ—à–Ω–æ —Ä–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω–æ ${amount} USDT –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ${userId}`);
    
    return true;
  }
  
  // –ù–æ–≤—ã–π –º–µ—Ç–æ–¥ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö —Å—Ä–µ–¥—Å—Ç–≤ –ë–ï–ó –≤–æ–∑–≤—Ä–∞—Ç–∞ –Ω–∞ –±–∞–ª–∞–Ω—Å
  async removeLockedFunds(userId, amount, session) {
    console.log(`üîí REMOVE LOCKED: –£–¥–∞–ª—è–µ–º –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ ${amount} USDT –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ${userId} –ë–ï–ó –≤–æ–∑–≤—Ä–∞—Ç–∞`);
    
    // –ê—Ç–æ–º–∞—Ä–Ω–∞—è –æ–ø–µ—Ä–∞—Ü–∏—è —É–¥–∞–ª–µ–Ω–∏—è –∏–∑ lockedFunds –ë–ï–ó –∏–∑–º–µ–Ω–µ–Ω–∏—è –±–∞–ª–∞–Ω—Å–∞
    const result = await User.findOneAndUpdate(
      { telegramId: parseInt(userId) },
      { 
        $pull: { 
          lockedFunds: { 
            amount, 
            reason: 'duel' 
          }
        }
      },
      { session, new: true }
    );
    
    if (!result) {
      console.error(`‚ùå REMOVE LOCKED: –ù–µ —É–¥–∞–ª–æ—Å—å –æ–±–Ω–æ–≤–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ${userId}`);
      throw new Error('–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω');
    }
    
    console.log(`‚úÖ REMOVE LOCKED: –ó–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ —Å—Ä–µ–¥—Å—Ç–≤–∞ —É–¥–∞–ª–µ–Ω—ã –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ${userId}`);
    
    return true;
  }
  
  async creditUserFunds(userId, amount, type, reference, session) {
    const user = await User.findOne({ telegramId: parseInt(userId) }).session(session);
    if (!user) {
      throw new Error('–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω');
    }
    
    user.balance += amount;
    await user.save({ session });
    
    return true;
  }
  
  // –û—á–∏—Å—Ç–∫–∞ –∏—Å—Ç–µ–∫—à–∏—Ö –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏–π
  async cleanupExpiredData() {
    const expiredInvitations = await DuelInvitation.cleanupExpired();
    
    // –û—Ç–º–µ–Ω—è–µ–º –∏—Å—Ç–µ–∫—à–∏–µ –¥—É—ç–ª–∏
    const expiredDuels = await Duel.find({
      status: 'pending',
      expiresAt: {
        $lt: new Date()
      }
    });
    
    for (const duel of expiredDuels) {
      await this.cancelDuel(duel.sessionId, null, 'timeout');
    }
    
    return {
      expiredInvitations,
      expiredDuels: expiredDuels.length
    };
  }
  
  // –ü–æ–ª—É—á–∏—Ç—å –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ç—Ä–µ–±—É–µ–º—ã—Ö –ø–æ–±–µ–¥ –¥–ª—è —Ñ–æ—Ä–º–∞—Ç–∞
  getWinsRequired(format) {
    const formatMap = {
      'bo1': 1,
      'bo3': 2,
      'bo5': 3,
      'bo7': 4
    };
    return formatMap[format] || 1;
  }
  
  // –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –ø–æ–±–µ–¥–∏—Ç–µ–ª—è —Ä–∞—É–Ω–¥–∞
  determineWinner(gameType, challengerResult, opponentResult) {
    if (challengerResult === null || opponentResult === null) {
      return null; // –†–∞—É–Ω–¥ –Ω–µ –∑–∞–≤–µ—Ä—à–µ–Ω
    }
    
    // –î–ª—è –≤—Å–µ—Ö –∏–≥—Ä: –±–æ–ª—å—à–µ = –ª—É—á—à–µ
    if (challengerResult > opponentResult) {
      return 'challenger';
    } else if (opponentResult > challengerResult) {
      return 'opponent';
    } else {
      return 'draw'; // –ù–∏—á—å—è
    }
  }
}

module.exports = new DuelService();