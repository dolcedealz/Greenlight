// admin/src/commands/giveaways.command.js
const { Markup } = require('telegraf');
const axios = require('axios');

// API –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
const apiUrl = process.env.API_URL || 'https://api.greenlight-casino.eu/api';
const adminToken = process.env.ADMIN_API_TOKEN;

// –°–æ–∑–¥–∞–µ–º axios instance —Å –ø—Ä–µ–¥—É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–Ω—ã–º–∏ –∑–∞–≥–æ–ª–æ–≤–∫–∞–º–∏
const apiClient = axios.create({
  baseURL: apiUrl,
  headers: {
    'Authorization': `Bearer ${adminToken}`,
    'Content-Type': 'application/json'
  },
  timeout: 30000
});

/**
 * –ü–æ–∫–∞–∑–∞—Ç—å –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é —Ä–æ–∑—ã–≥—Ä—ã—à–µ–π
 */
async function showGiveawaysMenu(ctx) {
  try {
    await ctx.reply(
      'üéÅ *–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Ä–æ–∑—ã–≥—Ä—ã—à–∞–º–∏*\n\n' +
      '–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:',
      {
        parse_mode: 'Markdown',
        reply_markup: {
          inline_keyboard: [
            [
              { text: 'üìä –¢–µ–∫—É—â–∏–µ —Ä–æ–∑—ã–≥—Ä—ã—à–∏', callback_data: 'giveaways_current' },
              { text: 'üèÜ –ò—Å—Ç–æ—Ä–∏—è —Ä–æ–∑—ã–≥—Ä—ã—à–µ–π', callback_data: 'giveaways_history' }
            ],
            [
              { text: 'üéØ –°–æ–∑–¥–∞—Ç—å —Ä–æ–∑—ã–≥—Ä—ã—à', callback_data: 'giveaways_create' },
              { text: 'üéÅ –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø—Ä–∏–∑–∞–º–∏', callback_data: 'giveaways_prizes' }
            ],
            [
              { text: 'üìà –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞', callback_data: 'giveaways_stats' },
              { text: '‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏', callback_data: 'giveaways_settings' }
            ],
            [
              { text: 'üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é', callback_data: 'main_menu' }
            ]
          ]
        }
      }
    );
  } catch (error) {
    console.error('ADMIN: –û—à–∏–±–∫–∞ –ø–æ–∫–∞–∑–∞ –º–µ–Ω—é —Ä–æ–∑—ã–≥—Ä—ã—à–µ–π:', error);
    await ctx.reply('‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –º–µ–Ω—é —Ä–æ–∑—ã–≥—Ä—ã—à–µ–π');
  }
}

/**
 * –ü–æ–∫–∞–∑–∞—Ç—å —Ç–µ–∫—É—â–∏–µ —Ä–æ–∑—ã–≥—Ä—ã—à–∏
 */
async function showCurrentGiveaways(ctx) {
  try {
    // Get all giveaways and filter for current ones (active + pending)
    const response = await apiClient.get('/admin/giveaways');
    
    if (response.data.success) {
      const allGiveaways = response.data.data.giveaways;
      const giveaways = allGiveaways.filter(g => g.status === 'active' || g.status === 'pending');
      
      if (giveaways.length === 0) {
        await ctx.reply(
          'üì≠ *–¢–µ–∫—É—â–∏–µ —Ä–æ–∑—ã–≥—Ä—ã—à–∏*\n\n' +
          '–ù–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö —Ä–æ–∑—ã–≥—Ä—ã—à–µ–π',
          {
            parse_mode: 'Markdown',
            reply_markup: {
              inline_keyboard: [
                [
                  { text: 'üéØ –°–æ–∑–¥–∞—Ç—å —Ä–æ–∑—ã–≥—Ä—ã—à', callback_data: 'giveaways_create' }
                ],
                [
                  { text: 'üîô –ù–∞–∑–∞–¥', callback_data: 'giveaways_menu' }
                ]
              ]
            }
          }
        );
        return;
      }

      let message = 'üìä *–¢–µ–∫—É—â–∏–µ —Ä–æ–∑—ã–≥—Ä—ã—à–∏*\n\n';
      
      for (const giveaway of giveaways) {
        const statusEmoji = giveaway.status === 'active' ? 'üü¢' : giveaway.status === 'pending' ? 'üü°' : 'üî¥';
        const typeText = giveaway.type === 'daily' ? '–ï–∂–µ–¥–Ω–µ–≤–Ω—ã–π' : '–ù–µ–¥–µ–ª—å–Ω—ã–π';
        
        message += `${statusEmoji} *${giveaway.title}*\n`;
        message += `‚î£ üéÅ –ü—Ä–∏–∑: ${giveaway.prize?.name || '–ù–µ —É–∫–∞–∑–∞–Ω'}\n`;
        message += `‚î£ üìÖ –¢–∏–ø: ${typeText}\n`;
        message += `‚î£ üèÜ –ü–æ–±–µ–¥–∏—Ç–µ–ª–µ–π: ${giveaway.winnersCount}\n`;
        message += `‚î£ üë• –£—á–∞—Å—Ç–Ω–∏–∫–æ–≤: ${giveaway.participationCount}\n`;
        message += `‚î£ ‚è∞ –†–æ–∑—ã–≥—Ä—ã—à: ${new Date(giveaway.drawDate).toLocaleString('ru-RU')}\n`;
        message += `‚îó üìä –°—Ç–∞—Ç—É—Å: ${giveaway.status === 'active' ? '–ê–∫—Ç–∏–≤–Ω—ã–π' : giveaway.status === 'pending' ? '–û–∂–∏–¥–∞–µ—Ç' : '–ó–∞–≤–µ—Ä—à–µ–Ω'}\n\n`;
      }

      await ctx.reply(message, {
        parse_mode: 'Markdown',
        reply_markup: {
          inline_keyboard: [
            [
              { text: 'üîÑ –û–±–Ω–æ–≤–∏—Ç—å', callback_data: 'giveaways_current' },
              { text: 'üéØ –°–æ–∑–¥–∞—Ç—å –Ω–æ–≤—ã–π', callback_data: 'giveaways_create' }
            ],
            [
              { text: 'üîô –ù–∞–∑–∞–¥', callback_data: 'giveaways_menu' }
            ]
          ]
        }
      });

    } else {
      throw new Error(response.data.message || '–û—à–∏–±–∫–∞ API');
    }
  } catch (error) {
    console.error('ADMIN: –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Ç–µ–∫—É—â–∏—Ö —Ä–æ–∑—ã–≥—Ä—ã—à–µ–π:', error);
    await ctx.reply(
      '‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Ä–æ–∑—ã–≥—Ä—ã—à–µ–π',
      {
        reply_markup: {
          inline_keyboard: [
            [{ text: 'üîô –ù–∞–∑–∞–¥', callback_data: 'giveaways_menu' }]
          ]
        }
      }
    );
  }
}

/**
 * –ü–æ–∫–∞–∑–∞—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É —Ä–æ–∑—ã–≥—Ä—ã—à–µ–π
 */
async function showGiveawaysStats(ctx) {
  try {
    const response = await apiClient.get('/admin/giveaways/stats');
    
    if (response.data.success) {
      const stats = response.data.data;
      
      let message = 'üìà *–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Ä–æ–∑—ã–≥—Ä—ã—à–µ–π*\n\n';
      
      message += `üìä *–û–±—â–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:*\n`;
      message += `‚î£ üéÅ –í—Å–µ–≥–æ —Ä–æ–∑—ã–≥—Ä—ã—à–µ–π: ${stats.overview.totalGiveaways}\n`;
      message += `‚î£ üü¢ –ê–∫—Ç–∏–≤–Ω—ã—Ö: ${stats.overview.activeGiveaways}\n`;
      message += `‚î£ ‚úÖ –ó–∞–≤–µ—Ä—à–µ–Ω–Ω—ã—Ö: ${stats.overview.completedGiveaways}\n`;
      message += `‚î£ üë• –í—Å–µ–≥–æ —É—á–∞—Å—Ç–∏–π: ${stats.overview.totalParticipations}\n`;
      message += `‚îó üèÜ –ü—Ä–∏–∑–æ–≤: ${stats.overview.totalPrizes}\n\n`;
      
      if (stats.giveawaysByType && stats.giveawaysByType.length > 0) {
        message += `üìÖ *–ü–æ —Ç–∏–ø–∞–º:*\n`;
        for (const type of stats.giveawaysByType) {
          const typeName = type._id === 'daily' ? '–ï–∂–µ–¥–Ω–µ–≤–Ω—ã–µ' : '–ù–µ–¥–µ–ª—å–Ω—ã–µ';
          message += `‚î£ ${typeName}: ${type.count}\n`;
        }
        message += '\n';
      }
      
      if (stats.recentWinners && stats.recentWinners.length > 0) {
        message += `üèÜ *–ü–æ—Å–ª–µ–¥–Ω–∏–µ –ø–æ–±–µ–¥–∏—Ç–µ–ª–∏:*\n`;
        for (const winner of stats.recentWinners.slice(0, 5)) {
          message += `‚î£ ${winner.user.firstName} - ${winner.giveaway.title}\n`;
        }
      }

      await ctx.reply(message, {
        parse_mode: 'Markdown',
        reply_markup: {
          inline_keyboard: [
            [
              { text: 'üîÑ –û–±–Ω–æ–≤–∏—Ç—å', callback_data: 'giveaways_stats' }
            ],
            [
              { text: 'üîô –ù–∞–∑–∞–¥', callback_data: 'giveaways_menu' }
            ]
          ]
        }
      });

    } else {
      throw new Error(response.data.message || '–û—à–∏–±–∫–∞ API');
    }
  } catch (error) {
    console.error('ADMIN: –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ —Ä–æ–∑—ã–≥—Ä—ã—à–µ–π:', error);
    await ctx.reply(
      '‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏',
      {
        reply_markup: {
          inline_keyboard: [
            [{ text: 'üîô –ù–∞–∑–∞–¥', callback_data: 'giveaways_menu' }]
          ]
        }
      }
    );
  }
}

/**
 * –ü–æ–∫–∞–∑–∞—Ç—å —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø—Ä–∏–∑–∞–º–∏
 */
async function showPrizesManagement(ctx) {
  try {
    const response = await apiClient.get('/admin/giveaways/prizes');
    
    if (response.data.success) {
      const prizes = response.data.data.prizes;
      
      let message = 'üéÅ *–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø—Ä–∏–∑–∞–º–∏*\n\n';
      
      if (prizes.length === 0) {
        message += '–ü—Ä–∏–∑—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã\n\n';
      } else {
        for (const prize of prizes) {
          const typeEmoji = prize.type === 'telegram_gift' ? 'üéÅ' : prize.type === 'promo_code' ? 'üé´' : 'üí∞';
          message += `${typeEmoji} *${prize.name}*\n`;
          message += `‚î£ üíé –°—Ç–æ–∏–º–æ—Å—Ç—å: ${prize.value} USDT\n`;
          message += `‚î£ üìù –û–ø–∏—Å–∞–Ω–∏–µ: ${prize.description}\n`;
          message += `‚îó üîß –¢–∏–ø: ${prize.type === 'telegram_gift' ? 'Telegram Gift' : prize.type === 'promo_code' ? '–ü—Ä–æ–º–æ–∫–æ–¥' : '–ë–æ–Ω—É—Å'}\n\n`;
        }
      }

      await ctx.reply(message, {
        parse_mode: 'Markdown',
        reply_markup: {
          inline_keyboard: [
            [
              { text: '‚ûï –î–æ–±–∞–≤–∏—Ç—å –ø—Ä–∏–∑', callback_data: 'giveaways_add_prize' }
            ],
            [
              { text: 'üîÑ –û–±–Ω–æ–≤–∏—Ç—å', callback_data: 'giveaways_prizes' }
            ],
            [
              { text: 'üîô –ù–∞–∑–∞–¥', callback_data: 'giveaways_menu' }
            ]
          ]
        }
      });

    } else {
      throw new Error(response.data.message || '–û—à–∏–±–∫–∞ API');
    }
  } catch (error) {
    console.error('ADMIN: –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –ø—Ä–∏–∑–æ–≤:', error);
    await ctx.reply(
      '‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –ø—Ä–∏–∑–æ–≤',
      {
        reply_markup: {
          inline_keyboard: [
            [{ text: 'üîô –ù–∞–∑–∞–¥', callback_data: 'giveaways_menu' }]
          ]
        }
      }
    );
  }
}

/**
 * –ù–∞—á–∞—Ç—å —Å–æ–∑–¥–∞–Ω–∏–µ –ø—Ä–∏–∑–∞
 */
async function startPrizeCreation(ctx) {
  try {
    // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å–µ—Å—Å–∏—é —Å–æ–∑–¥–∞–Ω–∏—è –ø—Ä–∏–∑–∞
    if (!ctx.session) ctx.session = {};
    ctx.session.creatingPrize = {
      step: 'name'
    };

    await ctx.reply(
      'üéÅ *–°–æ–∑–¥–∞–Ω–∏–µ –Ω–æ–≤–æ–≥–æ –ø—Ä–∏–∑–∞*\n\n' +
      '–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –ø—Ä–∏–∑–∞:',
      { parse_mode: 'Markdown' }
    );
  } catch (error) {
    console.error('ADMIN: –û—à–∏–±–∫–∞ –Ω–∞—á–∞–ª–∞ —Å–æ–∑–¥–∞–Ω–∏—è –ø—Ä–∏–∑–∞:', error);
    await ctx.reply('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –ø—Ä–∏–∑–∞');
  }
}

/**
 * –û–±—Ä–∞–±–æ—Ç–∞—Ç—å —Å–æ–∑–¥–∞–Ω–∏–µ –ø—Ä–∏–∑–∞
 */
async function handlePrizeCreation(ctx) {
  const text = ctx.message.text.trim();
  const session = ctx.session.creatingPrize;

  try {
    if (session.step === 'name') {
      session.name = text;
      session.step = 'description';
      
      await ctx.reply(
        `üéÅ *–°–æ–∑–¥–∞–Ω–∏–µ –ø—Ä–∏–∑–∞: ${text}*\n\n` +
        '–í–≤–µ–¥–∏—Ç–µ –æ–ø–∏—Å–∞–Ω–∏–µ –ø—Ä–∏–∑–∞:',
        { parse_mode: 'Markdown' }
      );
      
    } else if (session.step === 'description') {
      session.description = text;
      session.step = 'value';
      
      await ctx.reply(
        `üéÅ *–°–æ–∑–¥–∞–Ω–∏–µ –ø—Ä–∏–∑–∞: ${session.name}*\n\n` +
        '–í–≤–µ–¥–∏—Ç–µ —Å—Ç–æ–∏–º–æ—Å—Ç—å –ø—Ä–∏–∑–∞ –≤ USDT:',
        { parse_mode: 'Markdown' }
      );
      
    } else if (session.step === 'value') {
      const value = parseFloat(text);
      
      if (isNaN(value) || value <= 0) {
        await ctx.reply('‚ùå –í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—É—é —Å—Ç–æ–∏–º–æ—Å—Ç—å (—á–∏—Å–ª–æ –±–æ–ª—å—à–µ 0)');
        return;
      }
      
      session.value = value;
      session.step = 'type';
      
      await ctx.reply(
        `üéÅ *–°–æ–∑–¥–∞–Ω–∏–µ –ø—Ä–∏–∑–∞: ${session.name}*\n\n` +
        '–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø –ø—Ä–∏–∑–∞:',
        {
          parse_mode: 'Markdown',
          reply_markup: {
            inline_keyboard: [
              [{ text: 'üéÅ Telegram Gift', callback_data: 'prize_type_telegram_gift' }],
              [{ text: 'üé´ –ü—Ä–æ–º–æ–∫–æ–¥', callback_data: 'prize_type_promo_code' }],
              [{ text: 'üí∞ –ë–æ–Ω—É—Å', callback_data: 'prize_type_bonus' }],
              [{ text: '‚ùå –û—Ç–º–µ–Ω–∞', callback_data: 'giveaways_prizes' }]
            ]
          }
        }
      );
    }
  } catch (error) {
    console.error('ADMIN: –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Å–æ–∑–¥–∞–Ω–∏—è –ø—Ä–∏–∑–∞:', error);
    await ctx.reply('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –ø—Ä–∏–∑–∞');
    delete ctx.session.creatingPrize;
  }
}

/**
 * –ó–∞–≤–µ—Ä—à–∏—Ç—å —Å–æ–∑–¥–∞–Ω–∏–µ –ø—Ä–∏–∑–∞
 */
async function finalizePrizeCreation(ctx, type) {
  const session = ctx.session.creatingPrize;
  
  try {
    const prizeData = {
      name: session.name,
      description: session.description,
      value: session.value,
      type: type
    };

    const response = await apiClient.post('/admin/giveaways/prizes', prizeData);
    
    if (response.data.success) {
      await ctx.reply(
        `‚úÖ *–ü—Ä–∏–∑ —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω!*\n\n` +
        `üéÅ –ù–∞–∑–≤–∞–Ω–∏–µ: ${session.name}\n` +
        `üìù –û–ø–∏—Å–∞–Ω–∏–µ: ${session.description}\n` +
        `üíé –°—Ç–æ–∏–º–æ—Å—Ç—å: ${session.value} USDT\n` +
        `üîß –¢–∏–ø: ${type === 'telegram_gift' ? 'Telegram Gift' : type === 'promo_code' ? '–ü—Ä–æ–º–æ–∫–æ–¥' : '–ë–æ–Ω—É—Å'}`,
        {
          parse_mode: 'Markdown',
          reply_markup: {
            inline_keyboard: [
              [{ text: 'üéÅ –ö –ø—Ä–∏–∑–∞–º', callback_data: 'giveaways_prizes' }],
              [{ text: 'üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é', callback_data: 'main_menu' }]
            ]
          }
        }
      );
    } else {
      throw new Error(response.data.message || '–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –ø—Ä–∏–∑–∞');
    }

    delete ctx.session.creatingPrize;
  } catch (error) {
    console.error('ADMIN: –û—à–∏–±–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è —Å–æ–∑–¥–∞–Ω–∏—è –ø—Ä–∏–∑–∞:', error);
    await ctx.reply(
      `‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –ø—Ä–∏–∑–∞: ${error.message}`,
      {
        reply_markup: {
          inline_keyboard: [
            [{ text: 'üîô –ù–∞–∑–∞–¥', callback_data: 'giveaways_prizes' }]
          ]
        }
      }
    );
    delete ctx.session.creatingPrize;
  }
}

/**
 * –ù–∞—á–∞—Ç—å —Å–æ–∑–¥–∞–Ω–∏–µ —Ä–æ–∑—ã–≥—Ä—ã—à–∞
 */
async function startGiveawayCreation(ctx) {
  try {
    // –ü–æ–ª—É—á–∞–µ–º –¥–æ—Å—Ç—É–ø–Ω—ã–µ –ø—Ä–∏–∑—ã
    const response = await apiClient.get('/admin/giveaways/prizes');
    
    if (!response.data.success || response.data.data.prizes.length === 0) {
      await ctx.reply(
        '‚ùå *–ù–µ–≤–æ–∑–º–æ–∂–Ω–æ —Å–æ–∑–¥–∞—Ç—å —Ä–æ–∑—ã–≥—Ä—ã—à*\n\n' +
        '–°–Ω–∞—á–∞–ª–∞ —Å–æ–∑–¥–∞–π—Ç–µ —Ö–æ—Ç—è –±—ã –æ–¥–∏–Ω –ø—Ä–∏–∑',
        {
          parse_mode: 'Markdown',
          reply_markup: {
            inline_keyboard: [
              [{ text: 'üéÅ –°–æ–∑–¥–∞—Ç—å –ø—Ä–∏–∑', callback_data: 'giveaways_add_prize' }],
              [{ text: 'üîô –ù–∞–∑–∞–¥', callback_data: 'giveaways_menu' }]
            ]
          }
        }
      );
      return;
    }

    // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å–µ—Å—Å–∏—é —Å–æ–∑–¥–∞–Ω–∏—è —Ä–æ–∑—ã–≥—Ä—ã—à–∞
    if (!ctx.session) ctx.session = {};
    ctx.session.creatingGiveaway = {
      step: 'title',
      availablePrizes: response.data.data.prizes
    };

    await ctx.reply(
      'üéØ *–°–æ–∑–¥–∞–Ω–∏–µ –Ω–æ–≤–æ–≥–æ —Ä–æ–∑—ã–≥—Ä—ã—à–∞*\n\n' +
      '–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ —Ä–æ–∑—ã–≥—Ä—ã—à–∞:',
      { parse_mode: 'Markdown' }
    );
  } catch (error) {
    console.error('ADMIN: –û—à–∏–±–∫–∞ –Ω–∞—á–∞–ª–∞ —Å–æ–∑–¥–∞–Ω–∏—è —Ä–æ–∑—ã–≥—Ä—ã—à–∞:', error);
    await ctx.reply('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ —Ä–æ–∑—ã–≥—Ä—ã—à–∞');
  }
}

/**
 * –û–±—Ä–∞–±–æ—Ç–∞—Ç—å —Å–æ–∑–¥–∞–Ω–∏–µ —Ä–æ–∑—ã–≥—Ä—ã—à–∞
 */
async function handleGiveawayCreation(ctx) {
  const text = ctx.message.text.trim();
  const session = ctx.session.creatingGiveaway;

  try {
    if (session.step === 'title') {
      session.title = text;
      session.step = 'type';
      
      await ctx.reply(
        `üéØ *–°–æ–∑–¥–∞–Ω–∏–µ —Ä–æ–∑—ã–≥—Ä—ã—à–∞: ${text}*\n\n` +
        '–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø —Ä–æ–∑—ã–≥—Ä—ã—à–∞:',
        {
          parse_mode: 'Markdown',
          reply_markup: {
            inline_keyboard: [
              [{ text: 'üìÖ –ï–∂–µ–¥–Ω–µ–≤–Ω—ã–π', callback_data: 'giveaway_type_daily' }],
              [{ text: 'üìÜ –ù–µ–¥–µ–ª—å–Ω—ã–π', callback_data: 'giveaway_type_weekly' }],
              [{ text: '‚ùå –û—Ç–º–µ–Ω–∞', callback_data: 'giveaways_menu' }]
            ]
          }
        }
      );
      
    } else if (session.step === 'winnersCount') {
      const winnersCount = parseInt(text);
      
      if (isNaN(winnersCount) || winnersCount <= 0 || winnersCount > 10) {
        await ctx.reply('‚ùå –í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–±–µ–¥–∏—Ç–µ–ª–µ–π (–æ—Ç 1 –¥–æ 10)');
        return;
      }
      
      session.winnersCount = winnersCount;
      
      // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –¥–æ—Å—Ç—É–ø–Ω—ã–µ –ø—Ä–∏–∑—ã –¥–ª—è –≤—ã–±–æ—Ä–∞
      let message = `üéØ *–°–æ–∑–¥–∞–Ω–∏–µ —Ä–æ–∑—ã–≥—Ä—ã—à–∞: ${session.title}*\n\n` +
                   '–í—ã–±–µ—Ä–∏—Ç–µ –ø—Ä–∏–∑ –¥–ª—è —Ä–æ–∑—ã–≥—Ä—ã—à–∞:\n\n';
      
      const keyboard = [];
      for (let i = 0; i < session.availablePrizes.length; i++) {
        const prize = session.availablePrizes[i];
        message += `${i + 1}. ${prize.name} (${prize.value} USDT)\n`;
        keyboard.push([{ 
          text: `${i + 1}. ${prize.name}`, 
          callback_data: `select_prize_${prize._id}` 
        }]);
      }
      
      keyboard.push([{ text: '‚ùå –û—Ç–º–µ–Ω–∞', callback_data: 'giveaways_menu' }]);
      
      await ctx.reply(message, {
        parse_mode: 'Markdown',
        reply_markup: { inline_keyboard: keyboard }
      });
    }
  } catch (error) {
    console.error('ADMIN: –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Å–æ–∑–¥–∞–Ω–∏—è —Ä–æ–∑—ã–≥—Ä—ã—à–∞:', error);
    await ctx.reply('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ —Ä–æ–∑—ã–≥—Ä—ã—à–∞');
    delete ctx.session.creatingGiveaway;
  }
}

module.exports = {
  showGiveawaysMenu,
  showCurrentGiveaways,
  showGiveawaysStats,
  showPrizesManagement,
  startPrizeCreation,
  handlePrizeCreation,
  finalizePrizeCreation,
  startGiveawayCreation,
  handleGiveawayCreation
};