// backend/src/services/telegram.service.js
const axios = require('axios');

class TelegramService {
  constructor() {
    this.botToken = process.env.BOT_TOKEN || process.env.TELEGRAM_BOT_TOKEN;
    this.channelId = process.env.TELEGRAM_CHANNEL_ID;
    this.baseUrl = `https://api.telegram.org/bot${this.botToken}`;
    
    if (!this.botToken) {
      console.warn('TELEGRAM_SERVICE: –¢–æ–∫–µ–Ω –±–æ—Ç–∞ –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω');
    }
    
    if (!this.channelId) {
      console.warn('TELEGRAM_SERVICE: ID –∫–∞–Ω–∞–ª–∞ –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω');
    }
  }

  /**
   * –ë—Ä–æ—Å–æ–∫ –∫—É–±–∏–∫–∞ –≤ Telegram –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Å–ª—É—á–∞–π–Ω–æ–≥–æ —á–∏—Å–ª–∞
   */
  async rollDice() {
    try {
      const response = await axios.post(`${this.baseUrl}/sendDice`, {
        chat_id: this.channelId,
        emoji: 'üé≤'
      });

      if (response.data.ok) {
        const diceMessage = response.data.result;
        return {
          value: diceMessage.dice.value,
          messageId: diceMessage.message_id,
          timestamp: new Date()
        };
      } else {
        throw new Error('–ù–µ —É–¥–∞–ª–æ—Å—å –±—Ä–æ—Å–∏—Ç—å –∫—É–±–∏–∫');
      }
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –±—Ä–æ—Å–∫–µ –∫—É–±–∏–∫–∞:', error);
      // Fallback: –≥–µ–Ω–µ—Ä–∏—Ä—É–µ–º —Å–ª—É—á–∞–π–Ω–æ–µ —á–∏—Å–ª–æ –ª–æ–∫–∞–ª—å–Ω–æ
      return {
        value: Math.floor(Math.random() * 6) + 1,
        messageId: null,
        timestamp: new Date(),
        fallback: true
      };
    }
  }

  /**
   * –û—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è –≤ –∫–∞–Ω–∞–ª
   */
  async sendToChannel(message, options = {}) {
    try {
      if (!this.channelId) {
        console.log('TELEGRAM_SERVICE: –°–æ–æ–±—â–µ–Ω–∏–µ –Ω–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ (–∫–∞–Ω–∞–ª –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω):', message);
        return null;
      }

      const response = await axios.post(`${this.baseUrl}/sendMessage`, {
        chat_id: this.channelId,
        text: message,
        parse_mode: 'HTML',
        disable_web_page_preview: true,
        ...options
      });

      if (response.data.ok) {
        return response.data.result.message_id;
      } else {
        throw new Error(`Telegram API error: ${response.data.description}`);
      }
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è –≤ –∫–∞–Ω–∞–ª:', error);
      throw error;
    }
  }

  /**
   * –û—Ç–ø—Ä–∞–≤–∫–∞ –ª–∏—á–Ω–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
   */
  async sendPrivateMessage(userId, message, options = {}) {
    try {
      const response = await axios.post(`${this.baseUrl}/sendMessage`, {
        chat_id: userId,
        text: message,
        parse_mode: 'HTML',
        disable_web_page_preview: true,
        ...options
      });

      if (response.data.ok) {
        return response.data.result.message_id;
      } else {
        throw new Error(`Telegram API error: ${response.data.description}`);
      }
    } catch (error) {
      console.error(`–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –ª–∏—á–Ω–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é ${userId}:`, error);
      throw error;
    }
  }

  /**
   * –û—Ç–ø—Ä–∞–≤–∫–∞ —Ñ–æ—Ç–æ –≤ –∫–∞–Ω–∞–ª
   */
  async sendPhotoToChannel(photoUrl, caption = '', options = {}) {
    try {
      if (!this.channelId) {
        console.log('TELEGRAM_SERVICE: –§–æ—Ç–æ –Ω–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ (–∫–∞–Ω–∞–ª –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω)');
        return null;
      }

      const response = await axios.post(`${this.baseUrl}/sendPhoto`, {
        chat_id: this.channelId,
        photo: photoUrl,
        caption: caption,
        parse_mode: 'HTML',
        ...options
      });

      if (response.data.ok) {
        return response.data.result.message_id;
      } else {
        throw new Error(`Telegram API error: ${response.data.description}`);
      }
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Ñ–æ—Ç–æ –≤ –∫–∞–Ω–∞–ª:', error);
      throw error;
    }
  }

  /**
   * –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è
   */
  async editMessage(messageId, newText, options = {}) {
    try {
      const response = await axios.post(`${this.baseUrl}/editMessageText`, {
        chat_id: this.channelId,
        message_id: messageId,
        text: newText,
        parse_mode: 'HTML',
        disable_web_page_preview: true,
        ...options
      });

      return response.data.ok;
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏—è:', error);
      throw error;
    }
  }

  /**
   * –£–¥–∞–ª–µ–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è
   */
  async deleteMessage(messageId) {
    try {
      const response = await axios.post(`${this.baseUrl}/deleteMessage`, {
        chat_id: this.channelId,
        message_id: messageId
      });

      return response.data.ok;
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏—è:', error);
      throw error;
    }
  }

  /**
   * –ü–æ–ª—É—á–µ–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –∫–∞–Ω–∞–ª–µ
   */
  async getChannelInfo() {
    try {
      if (!this.channelId) {
        return null;
      }

      const response = await axios.post(`${this.baseUrl}/getChat`, {
        chat_id: this.channelId
      });

      if (response.data.ok) {
        return response.data.result;
      } else {
        throw new Error(`Telegram API error: ${response.data.description}`);
      }
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –∫–∞–Ω–∞–ª–µ:', error);
      throw error;
    }
  }

  /**
   * –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏ –±–æ—Ç–∞
   */
  async checkBotStatus() {
    try {
      const response = await axios.post(`${this.baseUrl}/getMe`);
      
      if (response.data.ok) {
        return {
          status: 'ok',
          botInfo: response.data.result
        };
      } else {
        return {
          status: 'error',
          error: response.data.description
        };
      }
    } catch (error) {
      return {
        status: 'error',
        error: error.message
      };
    }
  }

  /**
   * –û—Ç–ø—Ä–∞–≤–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ –Ω–∞—á–∞–ª–µ —Ä–æ–∑—ã–≥—Ä—ã—à–∞
   */
  async announceGiveawayStart(giveaway) {
    try {
      const prizeEmoji = giveaway.prize?.type === 'telegram_gift' ? 'üéÅ' : 'üèÜ';
      const typeText = giveaway.type === 'daily' ? '–ï–∂–µ–¥–Ω–µ–≤–Ω—ã–π' : giveaway.type === 'weekly' ? '–ù–µ–¥–µ–ª—å–Ω—ã–π' : '–ö–∞—Å—Ç–æ–º–Ω—ã–π';
      
      const message = `${prizeEmoji} <b>${typeText} —Ä–æ–∑—ã–≥—Ä—ã—à –Ω–∞—á–∞–ª—Å—è!</b>\n\n` +
                     `üéØ <b>–ü—Ä–∏–∑:</b> ${giveaway.prize?.name || '–ù–µ —É–∫–∞–∑–∞–Ω'}\n` +
                     `üèÜ <b>–ü–æ–±–µ–¥–∏—Ç–µ–ª–µ–π:</b> ${giveaway.winnersCount}\n` +
                     `‚è∞ <b>–û–∫–æ–Ω—á–∞–Ω–∏–µ:</b> ${new Date(giveaway.endDate).toLocaleString('ru-RU', { timeZone: 'Europe/Moscow' })} –ú–°–ö\n` +
                     `üé≤ <b>–†–æ–∑—ã–≥—Ä—ã—à:</b> ${new Date(giveaway.drawDate).toLocaleString('ru-RU', { timeZone: 'Europe/Moscow' })} –ú–°–ö\n\n` +
                     `üí∞ –î–ª—è —É—á–∞—Å—Ç–∏—è –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ —Å–¥–µ–ª–∞—Ç—å –¥–µ–ø–æ–∑–∏—Ç –∏ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å—Å—è –≤ –±–æ—Ç–µ!\n\n` +
                     `üçÄ –£–¥–∞—á–∏ –≤—Å–µ–º —É—á–∞—Å—Ç–Ω–∏–∫–∞–º!`;

      return await this.sendToChannel(message);
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ –æ–±—ä—è–≤–ª–µ–Ω–∏—è –æ –Ω–∞—á–∞–ª–µ —Ä–æ–∑—ã–≥—Ä—ã—à–∞:', error);
      throw error;
    }
  }

  /**
   * –û—Ç–ø—Ä–∞–≤–∫–∞ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è –æ —Å–∫–æ—Ä–æ–º –æ–∫–æ–Ω—á–∞–Ω–∏–∏ —Ä–æ–∑—ã–≥—Ä—ã—à–∞
   */
  async sendGiveawayReminder(giveaway, participantsCount) {
    try {
      const typeText = giveaway.type === 'daily' ? '–µ–∂–µ–¥–Ω–µ–≤–Ω–æ–≥–æ' : '–Ω–µ–¥–µ–ª—å–Ω–æ–≥–æ';
      const hoursLeft = Math.ceil((new Date(giveaway.endDate) - new Date()) / (1000 * 60 * 60));
      
      const message = `‚è∞ <b>–ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ!</b>\n\n` +
                     `–î–æ –æ–∫–æ–Ω—á–∞–Ω–∏—è ${typeText} —Ä–æ–∑—ã–≥—Ä—ã—à–∞ –æ—Å—Ç–∞–ª–æ—Å—å ${hoursLeft} —á–∞—Å(–æ–≤)!\n\n` +
                     `üéØ <b>–ü—Ä–∏–∑:</b> ${giveaway.prize?.name}\n` +
                     `üë• <b>–£—á–∞—Å—Ç–Ω–∏–∫–æ–≤ —Å–µ–π—á–∞—Å:</b> ${participantsCount}\n\n` +
                     `üí∞ –£—Å–ø–µ–π—Ç–µ —Å–¥–µ–ª–∞—Ç—å –¥–µ–ø–æ–∑–∏—Ç –∏ –ø—Ä–∏–Ω—è—Ç—å —É—á–∞—Å—Ç–∏–µ!`;

      return await this.sendToChannel(message);
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è:', error);
      throw error;
    }
  }
}

module.exports = TelegramService;