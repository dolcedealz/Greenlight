// admin/src/commands/users.command.js
const { Markup } = require('telegraf');
const axios = require('axios');

// –ü–æ–ª—É—á–∞–µ–º API URL –∏ —Ç–æ–∫–µ–Ω –∏–∑ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è
// –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π URL –¥–ª—è –ø—Ä–æ–¥–∞–∫—à–µ–Ω–∞
const apiUrl = 'https://greenlight-api-ghqh.onrender.com/api';
const adminToken = process.env.ADMIN_API_TOKEN;

// –õ–æ–≥–∏—Ä—É–µ–º URL –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏
console.log('USERS COMMAND: API URL:', apiUrl);

// –°–æ–∑–¥–∞–µ–º axios instance —Å –ø—Ä–µ–¥—É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–Ω—ã–º–∏ –∑–∞–≥–æ–ª–æ–≤–∫–∞–º–∏
const apiClient = axios.create({
  baseURL: apiUrl,
  headers: {
    'Authorization': `Bearer ${adminToken}`,
    'Content-Type': 'application/json'
  },
  timeout: 30000
});

/**
 * –≠–∫—Ä–∞–Ω–∏—Ä—É–µ—Ç —Å–ø–µ—Ü–∏–∞–ª—å–Ω—ã–µ —Å–∏–º–≤–æ–ª—ã –¥–ª—è Telegram Markdown
 */
function escapeMarkdown(text) {
  if (!text) return '';
  
  // –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –≤ —Å—Ç—Ä–æ–∫—É –∏ —É–¥–∞–ª—è–µ–º –ø—Ä–æ–±–ª–µ–º–Ω—ã–µ —Å–∏–º–≤–æ–ª—ã
  let cleaned = text.toString()
    // –£–¥–∞–ª—è–µ–º –≤—Å–µ –Ω–µ–≤–∏–¥–∏–º—ã–µ –∏ —É–ø—Ä–∞–≤–ª—è—é—â–∏–µ —Å–∏–º–≤–æ–ª—ã Unicode
    .replace(/[\u0000-\u001F\u007F-\u009F\u00AD\u034F\u061C\u180E\u200B-\u200F\u202A-\u202E\u2060-\u206F\u3000\uFE00-\uFE0F\uFEFF]/g, '')
    // –£–¥–∞–ª—è–µ–º –¥—Ä—É–≥–∏–µ –ø—Ä–æ–±–ª–µ–º–Ω—ã–µ Unicode —Å–∏–º–≤–æ–ª—ã
    .replace(/[\u2000-\u206F]/g, '')
    // –ó–∞–º–µ–Ω—è–µ–º –Ω–µ—Ä–∞–∑—Ä—ã–≤–Ω—ã–µ –ø—Ä–æ–±–µ–ª—ã –Ω–∞ –æ–±—ã—á–Ω—ã–µ
    .replace(/\u00A0/g, ' ')
    // –£–¥–∞–ª—è–µ–º –ª–∏—à–Ω–∏–µ –ø—Ä–æ–±–µ–ª—ã
    .replace(/\s+/g, ' ')
    .trim();
  
  // –ï—Å–ª–∏ –ø–æ—Å–ª–µ –æ—á–∏—Å—Ç–∫–∏ —Å—Ç—Ä–æ–∫–∞ –ø—É—Å—Ç–∞—è, –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –±–µ–∑–æ–ø–∞—Å–Ω—É—é –∑–∞–º–µ–Ω—É
  if (!cleaned) {
    return 'Unknown';
  }
  
  // –≠–∫—Ä–∞–Ω–∏—Ä—É–µ–º —Å–ø–µ—Ü–∏–∞–ª—å–Ω—ã–µ —Å–∏–º–≤–æ–ª—ã Markdown v2
  return cleaned.replace(/[_*\[\]()~`>#+=|{}.!\\-]/g, '\\$&');
}

/**
 * –ü–æ–∫–∞–∑–∞—Ç—å —Å–ø–∏—Å–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
 */
async function showUsersList(ctx, page = 1) {
  console.log('ADMIN: –ó–∞–ø—Ä–æ—Å —Å–ø–∏—Å–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π, —Å—Ç—Ä–∞–Ω–∏—Ü–∞:', page);
  
  try {
    const response = await apiClient.get('/admin/users', {
      params: { 
        page: page,
        limit: 10
      }
    });
    
    if (!response.data.success) {
      throw new Error(response.data.message || '–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π');
    }
    
    const data = response.data.data;
    const users = data.users;
    const pagination = data.pagination;
    
    if (users.length === 0) {
      const message = 'üë• *–°–ø–∏—Å–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π*\n\n–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã.';
      const keyboard = Markup.inlineKeyboard([[
        Markup.button.callback('‚óÄÔ∏è –ù–∞–∑–∞–¥', 'users_menu')
      ]]);
      
      if (ctx.callbackQuery) {
        await ctx.editMessageText(message, {
          parse_mode: 'Markdown',
          ...keyboard
        });
      } else {
        await ctx.reply(message, {
          parse_mode: 'Markdown',
          ...keyboard
        });
      }
      return;
    }
    
    let message = `üë• *–°–ø–∏—Å–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π* (—Å—Ç—Ä. ${pagination.current}/${pagination.pages})\n\n`;
    
    users.forEach((user, index) => {
      try {
        const userNum = (pagination.current - 1) * 10 + index + 1;
        const statusEmoji = user.isBlocked ? 'üö´' : '‚úÖ';
        
        // –ë–µ–∑–æ–ø–∞—Å–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ username
        let username = '–ù–µ—Ç username';
        if (user.username && typeof user.username === 'string') {
          const cleanUsername = escapeMarkdown(user.username);
          if (cleanUsername && cleanUsername !== 'Unknown') {
            username = `@${cleanUsername}`;
          }
        }
        
        // –ë–µ–∑–æ–ø–∞—Å–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ –∏–º–µ–Ω
        const firstName = escapeMarkdown(user.firstName || '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å');
        const lastName = escapeMarkdown(user.lastName || '');
        
        // –°–æ–∑–¥–∞–µ–º –ø–æ–ª–Ω–æ–µ –∏–º—è, —É–±–µ–∂–¥–∞–µ–º—Å—è —á—Ç–æ –æ–Ω–æ –Ω–µ –ø—É—Å—Ç–æ–µ
        let fullName = `${firstName} ${lastName}`.trim();
        if (!fullName || fullName === 'Unknown Unknown' || fullName === 'Unknown') {
          fullName = `–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å ${user.telegramId || userNum}`;
        }
        
        message += `${userNum}\\. ${statusEmoji} *${fullName}*\n`;
        message += `   ${username}\n`;
        message += `   üí∞ –ë–∞–ª–∞–Ω—Å: ${(user.balance || 0).toFixed(2)} USDT\n`;
        message += `   üìä –ü—Ä–∏–±—ã–ª—å: ${((user.totalWon || 0) - (user.totalWagered || 0)).toFixed(2)} USDT\n`;
        message += `   üéÆ –ò–≥—Ä: ${user.totalGames || 0}\n`;
        
        // –ü–∞—Ä—Ç–Ω–µ—Ä—Å–∫–∏–π —Å—Ç–∞—Ç—É—Å
        const partnerLevel = user.partnerLevel && user.partnerLevel !== 'none' ? user.partnerLevel : null;
        if (partnerLevel) {
          const partnerEmoji = {
            'partner_bronze': 'ü•â',
            'partner_silver': 'ü•à',
            'partner_gold': 'ü•á'
          }[partnerLevel] || 'üëî';
          message += `   ${partnerEmoji} –ü–∞—Ä—Ç–Ω–µ—Ä: ${partnerLevel}\n`;
        }
        
        // –ë–µ–∑–æ–ø–∞—Å–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ –¥–∞—Ç—ã
        try {
          const regDate = new Date(user.createdAt).toLocaleDateString('ru-RU');
          message += `   üìÖ –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è: ${regDate}\n\n`;
        } catch (dateError) {
          message += `   üìÖ –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è: –ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ\n\n`;
        }
      } catch (userError) {
        console.error('ADMIN: –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:', userError, user);
        message += `${(pagination.current - 1) * 10 + index + 1}\\. ‚ùå *–û—à–∏–±–∫–∞ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è*\n\n`;
      }
    });
    
    // –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –∫–Ω–æ–ø–∫–∞–º–∏ –Ω–∞–≤–∏–≥–∞—Ü–∏–∏ –∏ –¥–µ–π—Å—Ç–≤–∏—è–º–∏
    const buttons = [];
    
    // –ö–Ω–æ–ø–∫–∏ –Ω–∞–≤–∏–≥–∞—Ü–∏–∏
    if (pagination.current > 1 || pagination.current < pagination.pages) {
      const navButtons = [];
      if (pagination.current > 1) {
        navButtons.push(Markup.button.callback('‚¨Ö –ü—Ä–µ–¥.', `users_list_${pagination.current - 1}`));
      }
      if (pagination.current < pagination.pages) {
        navButtons.push(Markup.button.callback('–°–ª–µ–¥. ‚û°', `users_list_${pagination.current + 1}`));
      }
      buttons.push(navButtons);
    }
    
    // –û—Å–Ω–æ–≤–Ω—ã–µ –¥–µ–π—Å—Ç–≤–∏—è
    buttons.push([
      Markup.button.callback('üîç –ü–æ–∏—Å–∫', 'users_search'),
      Markup.button.callback('üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞', 'users_stats')
    ]);
    
    buttons.push([Markup.button.callback('üîÑ –û–±–Ω–æ–≤–∏—Ç—å', 'users_list')]);
    buttons.push([Markup.button.callback('‚óÄÔ∏è –ù–∞–∑–∞–¥', 'users_menu')]);
    
    const keyboard = Markup.inlineKeyboard(buttons);
    
    if (ctx.callbackQuery) {
      await ctx.editMessageText(message, {
        parse_mode: 'Markdown',
        ...keyboard
      });
    } else {
      await ctx.reply(message, {
        parse_mode: 'Markdown',
        ...keyboard
      });
    }
    
  } catch (error) {
    console.error('ADMIN: –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å–ø–∏—Å–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π:', error);
    const errorMessage = `‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: ${error.message}`;
    
    if (ctx.callbackQuery) {
      await ctx.answerCbQuery(errorMessage);
    } else {
      await ctx.reply(errorMessage);
    }
  }
}

/**
 * –ù–∞—á–∞—Ç—å –ø–æ–∏—Å–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
 */
async function startUserSearch(ctx) {
  console.log('ADMIN: –ù–∞—á–∞–ª–æ –ø–æ–∏—Å–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è');
  
  ctx.session = ctx.session || {};
  ctx.session.searchingUser = {
    step: 'query'
  };
  
  const message = 'üîç *–ü–æ–∏—Å–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è*\n\n–í–≤–µ–¥–∏—Ç–µ:\n‚Ä¢ Telegram ID\n‚Ä¢ Username (–±–µ–∑ @)\n‚Ä¢ –ò–º—è –∏–ª–∏ —Ñ–∞–º–∏–ª–∏—é\n‚Ä¢ Email';
  const keyboard = Markup.inlineKeyboard([[
    Markup.button.callback('‚ùå –û—Ç–º–µ–Ω–∞', 'users_search_cancel')
  ]]);
  
  if (ctx.callbackQuery) {
    await ctx.editMessageText(message, {
      parse_mode: 'Markdown',
      ...keyboard
    });
  } else {
    await ctx.reply(message, {
      parse_mode: 'Markdown',
      ...keyboard
    });
  }
}

/**
 * –û–±—Ä–∞–±–æ—Ç–∞—Ç—å –ø–æ–∏—Å–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
 */
async function handleUserSearch(ctx) {
  if (!ctx.session || !ctx.session.searchingUser) {
    return;
  }
  
  const query = ctx.message.text.trim();
  console.log('ADMIN: –ü–æ–∏—Å–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø–æ –∑–∞–ø—Ä–æ—Å—É:', query);
  
  try {
    const response = await apiClient.get('/admin/users', {
      params: { 
        search: query,
        limit: 20
      }
    });
    
    if (!response.data.success) {
      throw new Error(response.data.message || '–û—à–∏–±–∫–∞ –ø–æ–∏—Å–∫–∞');
    }
    
    const users = response.data.data.users;
    
    if (users.length === 0) {
      await ctx.reply(
        '‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã.\n\n–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –¥—Ä—É–≥–æ–π –∑–∞–ø—Ä–æ—Å:',
        Markup.inlineKeyboard([[
          Markup.button.callback('‚ùå –û—Ç–º–µ–Ω–∞', 'users_search_cancel')
        ]])
      );
      return;
    }
    
    let message = `üîç *–†–µ–∑—É–ª—å—Ç–∞—Ç—ã –ø–æ–∏—Å–∫–∞* (–Ω–∞–π–¥–µ–Ω–æ: ${users.length})\n\n`;
    
    const buttons = [];
    
    users.slice(0, 10).forEach((user, index) => {
      try {
        const statusEmoji = user.isBlocked ? 'üö´' : '‚úÖ';
        
        // –ë–µ–∑–æ–ø–∞—Å–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ username
        let username = '–ù–µ—Ç username';
        if (user.username && typeof user.username === 'string') {
          const cleanUsername = escapeMarkdown(user.username);
          if (cleanUsername && cleanUsername !== 'Unknown') {
            username = `@${cleanUsername}`;
          }
        }
        
        const firstName = escapeMarkdown(user.firstName || '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å');
        const lastName = escapeMarkdown(user.lastName || '');
        
        // –°–æ–∑–¥–∞–µ–º –±–µ–∑–æ–ø–∞—Å–Ω–æ–µ –∏–º—è –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è
        let fullName = `${firstName} ${lastName}`.trim();
        if (!fullName || fullName === 'Unknown Unknown' || fullName === 'Unknown') {
          fullName = `–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å ${user.telegramId || index + 1}`;
        }
        
        // –ë–µ–∑–æ–ø–∞—Å–Ω–æ–µ –∏–º—è –¥–ª—è –∫–Ω–æ–ø–∫–∏ (–±–µ–∑ —Å–ø–µ—Ü—Å–∏–º–≤–æ–ª–æ–≤)
        let buttonName = `${firstName} ${lastName}`.trim().replace(/[_*\[\]()~`>#+=|{}.!\\-]/g, '');
        if (!buttonName || buttonName.length < 2) {
          buttonName = `–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å ${index + 1}`;
        }
        
        message += `${index + 1}. ${statusEmoji} *${fullName}*\n`;
        message += `   ${username} | ID: \`${user.telegramId || 'unknown'}\`\n`;
        message += `   üí∞ ${(user.balance || 0).toFixed(2)} USDT | `;
        message += `üéÆ ${user.totalGames || 0} –∏–≥—Ä\n`;
        
        // –ü–∞—Ä—Ç–Ω–µ—Ä—Å–∫–∏–π —Å—Ç–∞—Ç—É—Å –≤ –ø–æ–∏—Å–∫–µ
        const partnerLevel = user.partnerLevel && user.partnerLevel !== 'none' ? user.partnerLevel : null;
        if (partnerLevel) {
          const partnerEmoji = {
            'partner_bronze': 'ü•â',
            'partner_silver': 'ü•à',
            'partner_gold': 'ü•á'
          }[partnerLevel] || 'üëî';
          message += `   ${partnerEmoji} ${partnerLevel}\n`;
        }
        message += `\n`;
        
        // –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –¥–µ—Ç–∞–ª–µ–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        buttons.push([Markup.button.callback(
          `üë§ ${buttonName}`, 
          `user_details_${user._id}`
        )]);
      } catch (userError) {
        console.error('ADMIN: –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –ø–æ–∏—Å–∫–µ:', userError, user);
        message += `${index + 1}. ‚ùå *–û—à–∏–±–∫–∞ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è*\n\n`;
      }
    });
    
    if (users.length > 10) {
      message += `\n... –∏ –µ—â–µ ${users.length - 10} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π`;
    }
    
    buttons.push([
      Markup.button.callback('üîç –ù–æ–≤—ã–π –ø–æ–∏—Å–∫', 'users_search'),
      Markup.button.callback('‚óÄÔ∏è –ù–∞–∑–∞–¥', 'users_menu')
    ]);
    
    await ctx.reply(message, {
      parse_mode: 'Markdown',
      ...Markup.inlineKeyboard(buttons)
    });
    
    // –û—á–∏—â–∞–µ–º —Å–µ—Å—Å–∏—é –ø–æ–∏—Å–∫–∞
    delete ctx.session.searchingUser;
    
  } catch (error) {
    console.error('ADMIN: –û—à–∏–±–∫–∞ –ø–æ–∏—Å–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:', error);
    await ctx.reply(`‚ùå –û—à–∏–±–∫–∞ –ø–æ–∏—Å–∫–∞: ${error.message}`);
  }
}

/**
 * –ü–æ–∫–∞–∑–∞—Ç—å –¥–µ—Ç–∞–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
 */
async function showUserDetails(ctx, userId) {
  console.log('ADMIN: –ó–∞–ø—Ä–æ—Å –¥–µ—Ç–∞–ª–µ–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:', userId);
  
  try {
    const response = await apiClient.get(`/admin/users/${userId}`);
    
    if (!response.data.success) {
      throw new Error(response.data.message || '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω');
    }
    
    const data = response.data.data;
    const user = data.user;
    const gameStats = data.gameStats || [];
    const recentTransactions = data.recentTransactions || [];
    
    const firstName = escapeMarkdown(user.firstName || '');
    const lastName = escapeMarkdown(user.lastName || '');
    
    let message = `üë§ *–ü—Ä–æ—Ñ–∏–ª—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è*\n\n`;
    message += `**–û—Å–Ω–æ–≤–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è:**\n`;
    message += `–§–ò–û: ${firstName} ${lastName}\n`;
    message += `Username: ${user.username ? `@${user.username}` : '–ù–µ —É–∫–∞–∑–∞–Ω'}\n`;
    message += `Telegram ID: \`${user.telegramId}\`\n`;
    message += `–†–æ–ª—å: ${user.role === 'admin' ? 'üëë –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä' : 'üë§ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å'}\n`;
    message += `–°—Ç–∞—Ç—É—Å: ${user.isBlocked ? 'üö´ –ó–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω' : '‚úÖ –ê–∫—Ç–∏–≤–µ–Ω'}\n\n`;
    
    message += `**–§–∏–Ω–∞–Ω—Å—ã:**\n`;
    message += `üí∞ –ë–∞–ª–∞–Ω—Å: ${user.balance.toFixed(2)} USDT\n`;
    message += `üìà –í—Å–µ–≥–æ –ø–æ—Å—Ç–∞–≤–ª–µ–Ω–æ: ${user.totalWagered.toFixed(2)} USDT\n`;
    message += `üìä –í—Å–µ–≥–æ –≤—ã–∏–≥—Ä–∞–Ω–æ: ${user.totalWon.toFixed(2)} USDT\n`;
    message += `üí∞ –ü—Ä–∏–±—ã–ª—å/—É–±—ã—Ç–æ–∫: ${(user.totalWon - user.totalWagered).toFixed(2)} USDT\n\n`;
    
    if (gameStats.length > 0) {
      message += `**–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ –∏–≥—Ä–∞–º:**\n`;
      gameStats.forEach(stat => {
        const gameEmoji = {
          'coin': 'ü™ô',
          'crash': 'üöÄ',
          'slots': 'üé∞',
          'mines': 'üí£'
        }[stat._id] || 'üéÆ';
        
        message += `${gameEmoji} ${stat._id}: ${stat.totalGames} –∏–≥—Ä, `;
        message += `${stat.totalBet.toFixed(2)} USDT —Å—Ç–∞–≤–æ–∫\n`;
      });
      message += '\n';
    }
    
    // –ü–∞—Ä—Ç–Ω–µ—Ä—Å–∫–∏–π —Å—Ç–∞—Ç—É—Å (–µ—Å–ª–∏ –µ—Å—Ç—å)
    if (user.partnerLevel && user.partnerLevel !== 'none') {
      message += `**–ü–∞—Ä—Ç–Ω–µ—Ä—Å–∫–∏–π —Å—Ç–∞—Ç—É—Å:**\n`;
      const partnerEmoji = {
        'partner_bronze': 'ü•â',
        'partner_silver': 'ü•à',
        'partner_gold': 'ü•á'
      }[user.partnerLevel] || 'üëî';
      
      const partnerCommission = {
        'partner_bronze': '20%',
        'partner_silver': '30%',
        'partner_gold': '40%'
      }[user.partnerLevel] || '–Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–æ';
      
      message += `${partnerEmoji} –£—Ä–æ–≤–µ–Ω—å: ${user.partnerLevel}\n`;
      message += `üí∞ –ö–æ–º–∏—Å—Å–∏—è: ${partnerCommission}\n`;
      
      if (user.partnerMeta?.assignedAt) {
        const assignedDate = new Date(user.partnerMeta.assignedAt).toLocaleDateString('ru-RU');
        message += `üìÖ –ù–∞–∑–Ω–∞—á–µ–Ω: ${assignedDate}\n`;
      }
      message += '\n';
    }
    
    message += `**–†–µ—Ñ–µ—Ä–∞–ª—å–Ω–∞—è –ø—Ä–æ–≥—Ä–∞–º–º–∞:**\n`;
    if (user.referralStats) {
      message += `üéØ –£—Ä–æ–≤–µ–Ω—å: ${user.referralStats.level}\n`;
      message += `üë• –†–µ—Ñ–µ—Ä–∞–ª–æ–≤: ${user.referralStats.totalReferrals}\n`;
      message += `üí∞ –ó–∞—Ä–∞–±–æ—Ç–∞–Ω–æ: ${user.referralStats.totalEarned.toFixed(2)} USDT\n`;
      message += `üéØ –ë–∞–ª–∞–Ω—Å —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω—ã—Ö: ${user.referralStats.referralBalance.toFixed(2)} USDT\n\n`;
    }
    
    message += `**–î–∞—Ç—ã:**\n`;
    message += `üìÖ –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è: ${new Date(user.createdAt).toLocaleString('ru-RU')}\n`;
    message += `üïí –ü–æ—Å–ª–µ–¥–Ω—è—è –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å: ${new Date(user.lastActivity).toLocaleString('ru-RU')}`;
    
    const buttons = [
      [
        Markup.button.callback(
          user.isBlocked ? '‚úÖ –†–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∞—Ç—å' : 'üö´ –ó–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞—Ç—å', 
          `user_toggle_block_${user._id}`
        ),
        Markup.button.callback('üí∞ –ò–∑–º–µ–Ω–∏—Ç—å –±–∞–ª–∞–Ω—Å', `user_balance_${user._id}`)
      ],
      [
        Markup.button.callback('üéØ –ú–æ–¥–∏—Ñ–∏–∫–∞—Ç–æ—Ä—ã', `user_modifiers_${user._id}`),
        Markup.button.callback('üí≥ –¢—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏', `user_transactions_${user._id}`)
      ],
      [Markup.button.callback('üîÑ –û–±–Ω–æ–≤–∏—Ç—å', `user_details_${user._id}`)],
      [Markup.button.callback('üîç –ö –ø–æ–∏—Å–∫—É', 'users_search')]
    ];
    
    if (ctx.callbackQuery) {
      await ctx.editMessageText(message, {
        parse_mode: 'Markdown',
        ...Markup.inlineKeyboard(buttons)
      });
    } else {
      await ctx.reply(message, {
        parse_mode: 'Markdown',
        ...Markup.inlineKeyboard(buttons)
      });
    }
    
  } catch (error) {
    console.error('ADMIN: –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –¥–µ—Ç–∞–ª–µ–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:', error);
    const errorMessage = `‚ùå –û—à–∏–±–∫–∞: ${error.message}`;
    
    if (ctx.callbackQuery) {
      await ctx.answerCbQuery(errorMessage);
    } else {
      await ctx.reply(errorMessage);
    }
  }
}

/**
 * –ü–æ–∫–∞–∑–∞—Ç—å –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
 */
async function showBlockedUsers(ctx, page = 1) {
  console.log('ADMIN: –ó–∞–ø—Ä–æ—Å –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π, —Å—Ç—Ä–∞–Ω–∏—Ü–∞:', page);
  
  try {
    const response = await apiClient.get('/admin/users/blocked', {
      params: { 
        page: page,
        limit: 10
      }
    });
    
    if (!response.data.success) {
      throw new Error(response.data.message || '–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π');
    }
    
    const data = response.data.data;
    const users = data.users;
    const pagination = data.pagination;
    
    if (users.length === 0) {
      const message = 'üö´ *–ó–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏*\\n\\n–ó–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –Ω–µ—Ç.';
      const keyboard = Markup.inlineKeyboard([[\n        Markup.button.callback('‚óÄÔ∏è –ù–∞–∑–∞–¥', 'users_menu')\n      ]]);
      
      if (ctx.callbackQuery) {
        await ctx.editMessageText(message, {
          parse_mode: 'Markdown',
          ...keyboard
        });
      } else {
        await ctx.reply(message, {
          parse_mode: 'Markdown',
          ...keyboard
        });
      }
      return;
    }
    
    let message = `üö´ *–ó–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏* (—Å—Ç—Ä. ${pagination.current}/${pagination.pages})\\n\\n`;
    
    users.forEach((user, index) => {
      try {
        const userNum = (pagination.current - 1) * 10 + index + 1;
        
        // –ë–µ–∑–æ–ø–∞—Å–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ username
        let username = '–ù–µ—Ç username';
        if (user.username && typeof user.username === 'string') {
          const cleanUsername = escapeMarkdown(user.username);
          if (cleanUsername && cleanUsername !== 'Unknown') {
            username = `@${cleanUsername}`;
          }
        }
        
        // –ë–µ–∑–æ–ø–∞—Å–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ –∏–º–µ–Ω
        const firstName = escapeMarkdown(user.firstName || '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å');
        const lastName = escapeMarkdown(user.lastName || '');
        
        // –°–æ–∑–¥–∞–µ–º –ø–æ–ª–Ω–æ–µ –∏–º—è
        let fullName = `${firstName} ${lastName}`.trim();
        if (!fullName || fullName === 'Unknown Unknown' || fullName === 'Unknown') {
          fullName = `–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å ${user.telegramId || userNum}`;
        }
        
        message += `${userNum}\\\\. üö´ *${fullName}*\\n`;
        message += `   ${username}\\n`;
        message += `   üí∞ –ë–∞–ª–∞–Ω—Å: ${(user.balance || 0).toFixed(2)} USDT\\n`;
        message += `   üéÆ –ò–≥—Ä: ${user.totalGames || 0}\\n`;
        
        // –ü–∞—Ä—Ç–Ω–µ—Ä—Å–∫–∏–π —Å—Ç–∞—Ç—É—Å
        const partnerLevel = user.partnerLevel && user.partnerLevel !== 'none' ? user.partnerLevel : null;
        if (partnerLevel) {
          const partnerEmoji = {
            'partner_bronze': 'ü•â',
            'partner_silver': 'ü•à',
            'partner_gold': 'ü•á'
          }[partnerLevel] || 'üëî';
          message += `   ${partnerEmoji} –ü–∞—Ä—Ç–Ω–µ—Ä: ${partnerLevel}\\n`;
        }
        
        // –ë–µ–∑–æ–ø–∞—Å–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ –¥–∞—Ç—ã
        try {
          const regDate = new Date(user.createdAt).toLocaleDateString('ru-RU');
          message += `   üìÖ –ó–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω: ${regDate}\\n\\n`;
        } catch (dateError) {
          message += `   üìÖ –ó–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω: –ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ\\n\\n`;
        }
      } catch (userError) {
        console.error('ADMIN: –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:', userError, user);
        message += `${(pagination.current - 1) * 10 + index + 1}\\\\. ‚ùå *–û—à–∏–±–∫–∞ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è*\\n\\n`;
      }
    });
    
    // –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –∫–Ω–æ–ø–∫–∞–º–∏ –Ω–∞–≤–∏–≥–∞—Ü–∏–∏
    const buttons = [];
    
    // –ö–Ω–æ–ø–∫–∏ –Ω–∞–≤–∏–≥–∞—Ü–∏–∏
    if (pagination.current > 1 || pagination.current < pagination.pages) {
      const navButtons = [];
      if (pagination.current > 1) {
        navButtons.push(Markup.button.callback('‚¨Ö –ü—Ä–µ–¥.', `users_blocked_${pagination.current - 1}`));
      }
      if (pagination.current < pagination.pages) {
        navButtons.push(Markup.button.callback('–°–ª–µ–¥. ‚û°', `users_blocked_${pagination.current + 1}`));
      }
      buttons.push(navButtons);
    }
    
    buttons.push([Markup.button.callback('üîÑ –û–±–Ω–æ–≤–∏—Ç—å', 'users_blocked')]);
    buttons.push([Markup.button.callback('‚óÄÔ∏è –ù–∞–∑–∞–¥', 'users_menu')]);
    
    const keyboard = Markup.inlineKeyboard(buttons);
    
    if (ctx.callbackQuery) {
      await ctx.editMessageText(message, {
        parse_mode: 'Markdown',
        ...keyboard
      });
    } else {
      await ctx.reply(message, {
        parse_mode: 'Markdown',
        ...keyboard
      });
    }
    
  } catch (error) {
    console.error('ADMIN: –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π:', error);
    const errorMessage = `‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: ${error.message}`;
    
    if (ctx.callbackQuery) {
      await ctx.answerCbQuery(errorMessage);
    } else {
      await ctx.reply(errorMessage);
    }
  }
}

/**
 * –ü–æ–∫–∞–∑–∞—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
 */
async function showUsersStats(ctx) {
  console.log('ADMIN: –ó–∞–ø—Ä–æ—Å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π');
  
  try {
    // –ü–æ–ª—É—á–∞–µ–º –æ–±—â—É—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
    const response = await apiClient.get('/admin/stats/users');
    
    if (!response.data.success) {
      throw new Error(response.data.message || '–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏');
    }
    
    const stats = response.data.data;
    
    let message = 'üë• *–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π*\n\n';
    
    message += `**–û–±—â–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è:**\n`;
    message += `üë• –í—Å–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: ${stats.totalUsers || 0}\n`;
    message += `‚úÖ –ê–∫—Ç–∏–≤–Ω—ã—Ö: ${stats.activeToday || 0}\n`;
    message += `üö´ –ó–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö: ${stats.blocked || 0}\n`;
    message += `üëë –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤: ${stats.adminUsers || 0}\n\n`;
    
    message += `**–ê–∫—Ç–∏–≤–Ω–æ—Å—Ç—å:**\n`;
    message += `üÜï –ù–æ–≤—ã—Ö –∑–∞ —Å—É—Ç–∫–∏: ${stats.newUsersToday || 0}\n`;
    message += `üìÖ –ù–æ–≤—ã—Ö –∑–∞ –Ω–µ–¥–µ–ª—é: ${stats.newUsersWeek || 0}\n`;
    message += `üéÆ –ò–≥—Ä–∞–ª–∏ —Å–µ–≥–æ–¥–Ω—è: ${stats.playedToday || 0}\n`;
    message += `üí∞ –°–¥–µ–ª–∞–ª–∏ –¥–µ–ø–æ–∑–∏—Ç: ${stats.usersWithDeposits || 0}\n\n`;
    
    message += `**–§–∏–Ω–∞–Ω—Å—ã:**\n`;
    message += `üí∞ –û–±—â–∏–π –±–∞–ª–∞–Ω—Å –≤—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: ${(stats.totalUserBalances || 0).toFixed(2)} USDT\n`;
    message += `üìä –°—Ä–µ–¥–Ω–∏–π –±–∞–ª–∞–Ω—Å: ${((stats.totalUserBalances || 0) / (stats.totalUsers || 1)).toFixed(2)} USDT\n`;
    message += `üé∞ –û–±—â–∏–π –æ–±—ä–µ–º —Å—Ç–∞–≤–æ–∫: ${(stats.totalWagered || 0).toFixed(2)} USDT\n`;
    message += `üéØ –û–±—â–∏–µ –≤—ã–∏–≥—Ä—ã—à–∏: ${(stats.totalWon || 0).toFixed(2)} USDT`;
    
    const keyboard = Markup.inlineKeyboard([
      [Markup.button.callback('üîÑ –û–±–Ω–æ–≤–∏—Ç—å', 'users_stats')],
      [Markup.button.callback('‚óÄÔ∏è –ù–∞–∑–∞–¥', 'users_menu')]
    ]);
    
    if (ctx.callbackQuery) {
      await ctx.editMessageText(message, {
        parse_mode: 'Markdown',
        ...keyboard
      });
    } else {
      await ctx.reply(message, {
        parse_mode: 'Markdown',
        ...keyboard
      });
    }
    
  } catch (error) {
    console.error('ADMIN: –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π:', error);
    const errorMessage = `‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏: ${error.message}`;
    
    if (ctx.callbackQuery) {
      await ctx.answerCbQuery(errorMessage);
    } else {
      await ctx.reply(errorMessage);
    }
  }
}

/**
 * –ü–µ—Ä–µ–∫–ª—é—á–∏—Ç—å –±–ª–æ–∫–∏—Ä–æ–≤–∫—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
 */
async function toggleUserBlock(ctx, userId) {
  console.log('ADMIN: –ü–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–µ –±–ª–æ–∫–∏—Ä–æ–≤–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:', userId);
  
  try {
    const response = await apiClient.post(`/admin/users/${userId}/block`);
    
    if (!response.data.success) {
      throw new Error(response.data.message || '–û—à–∏–±–∫–∞ –∏–∑–º–µ–Ω–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞');
    }
    
    const result = response.data.data;
    const status = result.isBlocked ? '–∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω' : '—Ä–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω';
    
    await ctx.answerCbQuery(`‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å ${status}`);
    
    // –û–±–Ω–æ–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ
    await showUserDetails(ctx, userId);
    
  } catch (error) {
    console.error('ADMIN: –û—à–∏–±–∫–∞ –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏—è –±–ª–æ–∫–∏—Ä–æ–≤–∫–∏:', error);
    await ctx.answerCbQuery(`‚ùå –û—à–∏–±–∫–∞: ${error.message}`);
  }
}

/**
 * –ù–∞—á–∞—Ç—å –∏–∑–º–µ–Ω–µ–Ω–∏–µ –±–∞–ª–∞–Ω—Å–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
 */
async function startBalanceAdjustment(ctx, userId) {
  console.log('ADMIN: –ù–∞—á–∞–ª–æ –∏–∑–º–µ–Ω–µ–Ω–∏—è –±–∞–ª–∞–Ω—Å–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:', userId);
  
  ctx.session = ctx.session || {};
  ctx.session.adjustingBalance = {
    userId: userId,
    step: 'amount'
  };
  
  const message = 'üí∞ *–ò–∑–º–µ–Ω–µ–Ω–∏–µ –±–∞–ª–∞–Ω—Å–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è*\n\n–í–≤–µ–¥–∏—Ç–µ —Å—É–º–º—É –∏–∑–º–µ–Ω–µ–Ω–∏—è:\n\n‚Ä¢ –ü–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω–æ–µ —á–∏—Å–ª–æ –¥–ª—è –Ω–∞—á–∏—Å–ª–µ–Ω–∏—è\n‚Ä¢ –û—Ç—Ä–∏—Ü–∞—Ç–µ–ª—å–Ω–æ–µ —á–∏—Å–ª–æ –¥–ª—è —Å–ø–∏—Å–∞–Ω–∏—è\n\n–ü—Ä–∏–º–µ—Ä: +100 –∏–ª–∏ -50';
  const keyboard = Markup.inlineKeyboard([[
    Markup.button.callback('‚ùå –û—Ç–º–µ–Ω–∞', `user_details_${userId}`)
  ]]);
  
  await ctx.reply(message, {
    parse_mode: 'Markdown',
    ...keyboard
  });
}

/**
 * –û–±—Ä–∞–±–æ—Ç–∞—Ç—å –∏–∑–º–µ–Ω–µ–Ω–∏–µ –±–∞–ª–∞–Ω—Å–∞
 */
async function handleBalanceAdjustment(ctx) {
  if (!ctx.session || !ctx.session.adjustingBalance) {
    return;
  }
  
  const session = ctx.session.adjustingBalance;
  const text = ctx.message.text.trim();
  
  if (session.step === 'amount') {
    const amount = parseFloat(text);
    
    if (isNaN(amount) || amount === 0) {
      await ctx.reply('‚ùå –í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—É—é —Å—É–º–º—É (—á–∏—Å–ª–æ, –Ω–µ —Ä–∞–≤–Ω–æ–µ –Ω—É–ª—é):');
      return;
    }
    
    session.amount = amount;
    session.step = 'reason';
    
    await ctx.reply(
      `üí∞ –°—É–º–º–∞: ${amount > 0 ? '+' : ''}${amount.toFixed(2)} USDT\n\n–¢–µ–ø–µ—Ä—å –≤–≤–µ–¥–∏—Ç–µ –ø—Ä–∏—á–∏–Ω—É –∏–∑–º–µ–Ω–µ–Ω–∏—è:`,
      Markup.inlineKeyboard([[
        Markup.button.callback('‚ùå –û—Ç–º–µ–Ω–∞', `user_details_${session.userId}`)
      ]])
    );
    
  } else if (session.step === 'reason') {
    const reason = text;
    
    if (reason.length < 5) {
      await ctx.reply('‚ùå –ü—Ä–∏—á–∏–Ω–∞ –¥–æ–ª–∂–Ω–∞ —Å–æ–¥–µ—Ä–∂–∞—Ç—å –º–∏–Ω–∏–º—É–º 5 —Å–∏–º–≤–æ–ª–æ–≤:');
      return;
    }
    
    try {
      const response = await apiClient.post(`/admin/users/${session.userId}/balance`, {
        amount: session.amount,
        reason: reason
      });
      
      if (!response.data.success) {
        throw new Error(response.data.message || '–û—à–∏–±–∫–∞ –∏–∑–º–µ–Ω–µ–Ω–∏—è –±–∞–ª–∞–Ω—Å–∞');
      }
      
      const result = response.data.data;
      
      await ctx.reply(
        `‚úÖ *–ë–∞–ª–∞–Ω—Å –∏–∑–º–µ–Ω–µ–Ω —É—Å–ø–µ—à–Ω–æ!*\n\n` +
        `üìä –ë—ã–ª–æ: ${result.oldBalance.toFixed(2)} USDT\n` +
        `üìä –°—Ç–∞–ª–æ: ${result.newBalance.toFixed(2)} USDT\n` +
        `üí∞ –ò–∑–º–µ–Ω–µ–Ω–∏–µ: ${result.adjustment > 0 ? '+' : ''}${result.adjustment.toFixed(2)} USDT\n` +
        `üìù –ü—Ä–∏—á–∏–Ω–∞: ${reason}`,
        {
          parse_mode: 'Markdown',
          ...Markup.inlineKeyboard([[
            Markup.button.callback('üë§ –ö –ø—Ä–æ—Ñ–∏–ª—é', `user_details_${session.userId}`)
          ]])
        }
      );
      
      delete ctx.session.adjustingBalance;
      
    } catch (error) {
      console.error('ADMIN: –û—à–∏–±–∫–∞ –∏–∑–º–µ–Ω–µ–Ω–∏—è –±–∞–ª–∞–Ω—Å–∞:', error);
      await ctx.reply(`‚ùå –û—à–∏–±–∫–∞ –∏–∑–º–µ–Ω–µ–Ω–∏—è –±–∞–ª–∞–Ω—Å–∞: ${error.message}`);
    }
  }
}

/**
 * –ü–æ–∫–∞–∑–∞—Ç—å –º–µ–Ω—é –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
 */
async function showUsersMenu(ctx) {
  console.log('ADMIN: –ü–æ–∫–∞–∑ –º–µ–Ω—é –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π');
  
  const message = 'üë• *–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º–∏*\n\n–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:';
  const keyboard = Markup.inlineKeyboard([
    [
      Markup.button.callback('üìã –°–ø–∏—Å–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π', 'users_list'),
      Markup.button.callback('üîç –ü–æ–∏—Å–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è', 'users_search')
    ],
    [
      Markup.button.callback('üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞', 'users_stats'),
      Markup.button.callback('üö´ –ó–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ', 'users_blocked')
    ],
    [
      Markup.button.callback('üëë –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø–∞—Ä—Ç–Ω–µ—Ä–∞–º–∏', 'partners_menu')
    ],
    [
      Markup.button.callback('üîô –ù–∞–∑–∞–¥', 'main_menu')
    ]
  ]);
  
  try {
    if (ctx.callbackQuery) {
      await ctx.editMessageText(message, {
        parse_mode: 'Markdown',
        ...keyboard
      });
    } else {
      await ctx.reply(message, {
        parse_mode: 'Markdown',
        ...keyboard
      });
    }
  } catch (error) {
    console.error('ADMIN: –û—à–∏–±–∫–∞ –ø–æ–∫–∞–∑–∞ –º–µ–Ω—é –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π:', error);
    await ctx.reply(message, {
      parse_mode: 'Markdown',
      ...keyboard
    });
  }
}

/**
 * –ü–æ–∫–∞–∑–∞—Ç—å –º–µ–Ω—é —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –ø–∞—Ä—Ç–Ω–µ—Ä–∞–º–∏
 */
async function showPartnersMenu(ctx) {
  console.log('ADMIN: –ü–æ–∫–∞–∑ –º–µ–Ω—é –ø–∞—Ä—Ç–Ω–µ—Ä–æ–≤');
  
  const message = 'üëî *–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø–∞—Ä—Ç–Ω–µ—Ä–∞–º–∏*\n\n–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:';
  const keyboard = Markup.inlineKeyboard([
    [
      Markup.button.callback('üìã –°–ø–∏—Å–æ–∫ –ø–∞—Ä—Ç–Ω–µ—Ä–æ–≤', 'partners_list'),
      Markup.button.callback('‚ûï –ù–∞–∑–Ω–∞—á–∏—Ç—å —Å—Ç–∞—Ç—É—Å', 'partners_assign')
    ],
    [
      Markup.button.callback('üîç –ü–æ–∏—Å–∫ –ø–∞—Ä—Ç–Ω–µ—Ä–∞', 'partners_search'),
      Markup.button.callback('üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞', 'partners_stats')
    ],
    [
      Markup.button.callback('üìú –ò—Å—Ç–æ—Ä–∏—è –∏–∑–º–µ–Ω–µ–Ω–∏–π', 'partners_logs'),
      Markup.button.callback('üéØ –£—Ä–æ–≤–Ω–∏ –ø–∞—Ä—Ç–Ω–µ—Ä–æ–≤', 'partners_levels')
    ],
    [
      Markup.button.callback('üîô –ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º', 'users_menu')
    ]
  ]);
  
  try {
    if (ctx.callbackQuery) {
      await ctx.editMessageText(message, {
        parse_mode: 'Markdown',
        ...keyboard
      });
    } else {
      await ctx.reply(message, {
        parse_mode: 'Markdown',
        ...keyboard
      });
    }
  } catch (error) {
    console.error('ADMIN: –û—à–∏–±–∫–∞ –ø–æ–∫–∞–∑–∞ –º–µ–Ω—é –ø–∞—Ä—Ç–Ω–µ—Ä–æ–≤:', error);
    await ctx.reply(message, {
      parse_mode: 'Markdown',
      ...keyboard
    });
  }
}

/**
 * –ü–æ–∫–∞–∑–∞—Ç—å —Å–ø–∏—Å–æ–∫ –ø–∞—Ä—Ç–Ω–µ—Ä–æ–≤
 */
async function showPartnersList(ctx, page = 1) {
  console.log('ADMIN: –ó–∞–ø—Ä–æ—Å —Å–ø–∏—Å–∫–∞ –ø–∞—Ä—Ç–Ω–µ—Ä–æ–≤, —Å—Ç—Ä–∞–Ω–∏—Ü–∞:', page);
  
  try {
    // –ò—Å–ø–æ–ª—å–∑—É–µ–º –Ω–æ–≤—É—é —Ñ—É–Ω–∫—Ü–∏—é –∏–∑ referral service
    const response = await apiClient.get('/admin/referral/partners', {
      params: { 
        page: page,
        limit: 10
      }
    });
    
    if (!response.data.success) {
      throw new Error(response.data.message || '–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –ø–∞—Ä—Ç–Ω–µ—Ä–æ–≤');
    }
    
    const data = response.data.data;
    const partners = data.partners;
    const summary = data.summary;
    const pagination = data.pagination;
    
    if (partners.length === 0) {
      const message = 'üëî *–°–ø–∏—Å–æ–∫ –ø–∞—Ä—Ç–Ω–µ—Ä–æ–≤*\n\n–ü–∞—Ä—Ç–Ω–µ—Ä—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã.';
      const keyboard = Markup.inlineKeyboard([[
        Markup.button.callback('‚óÄÔ∏è –ù–∞–∑–∞–¥', 'partners_menu')
      ]]);
      
      if (ctx.callbackQuery) {
        await ctx.editMessageText(message, {
          parse_mode: 'Markdown',
          ...keyboard
        });
      } else {
        await ctx.reply(message, {
          parse_mode: 'Markdown',
          ...keyboard
        });
      }
      return;
    }
    
    let message = `üëî *–°–ø–∏—Å–æ–∫ –ø–∞—Ä—Ç–Ω–µ—Ä–æ–≤* (—Å—Ç—Ä. ${Math.floor(pagination.offset / pagination.limit) + 1})`;
    
    // –î–æ–±–∞–≤–ª—è–µ–º —Å–≤–æ–¥–∫—É –ø–æ —É—Ä–æ–≤–Ω—è–º
    if (summary && summary.length > 0) {
      message += '\n\nüìä *–°–≤–æ–¥–∫–∞ –ø–æ —É—Ä–æ–≤–Ω—è–º:*\n';
      summary.forEach(level => {
        const levelEmoji = {
          'partner_bronze': 'ü•â',
          'partner_silver': 'ü•à', 
          'partner_gold': 'ü•á'
        }[level._id] || '‚ùì';
        
        message += `${levelEmoji} ${level._id}: ${level.count} —á–µ–ª.\n`;
      });
    }
    
    message += '\n\nüëî *–ü–∞—Ä—Ç–Ω–µ—Ä—ã:*\n\n';
    
    partners.forEach((partner, index) => {
      const partnerNum = pagination.offset + index + 1;
      const levelEmoji = {
        'partner_bronze': 'ü•â',
        'partner_silver': 'ü•à',
        'partner_gold': 'ü•á'
      }[partner.partnerLevel] || '‚ùì';
      
      const username = partner.username ? `@${partner.username}` : '–ù–µ—Ç username';
      
      message += `${partnerNum}. ${levelEmoji} *${partner.username || partner.telegramId}*\n`;
      message += `   –£—Ä–æ–≤–µ–Ω—å: ${partner.partnerLevel}\n`;
      message += `   üë• –†–µ—Ñ–µ—Ä–∞–ª–æ–≤: ${partner.referralStats?.totalReferrals || 0}\n`;
      message += `   üí∞ –ó–∞—Ä–∞–±–æ—Ç–∞–Ω–æ: ${(partner.referralStats?.totalEarned || 0).toFixed(2)} USDT\n`;
      
      if (partner.partnerMeta?.assignedAt) {
        const assignedDate = new Date(partner.partnerMeta.assignedAt).toLocaleDateString('ru-RU');
        message += `   üìÖ –ù–∞–∑–Ω–∞—á–µ–Ω: ${assignedDate}\n`;
      }
      
      message += '\n';
    });
    
    // –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –∫–Ω–æ–ø–∫–∞–º–∏ –Ω–∞–≤–∏–≥–∞—Ü–∏–∏
    const buttons = [];
    
    // –ö–Ω–æ–ø–∫–∏ –Ω–∞–≤–∏–≥–∞—Ü–∏–∏
    if (pagination.offset > 0 || pagination.hasMore) {
      const navButtons = [];
      if (pagination.offset > 0) {
        const prevPage = Math.floor((pagination.offset - pagination.limit) / pagination.limit) + 1;
        navButtons.push(Markup.button.callback('‚¨Ö –ü—Ä–µ–¥.', `partners_list_${prevPage}`));
      }
      if (pagination.hasMore) {
        const nextPage = Math.floor(pagination.offset / pagination.limit) + 2;
        navButtons.push(Markup.button.callback('–°–ª–µ–¥. ‚û°', `partners_list_${nextPage}`));
      }
      buttons.push(navButtons);
    }
    
    // –û—Å–Ω–æ–≤–Ω—ã–µ –¥–µ–π—Å—Ç–≤–∏—è
    buttons.push([
      Markup.button.callback('‚ûï –ù–∞–∑–Ω–∞—á–∏—Ç—å —Å—Ç–∞—Ç—É—Å', 'partners_assign'),
      Markup.button.callback('üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞', 'partners_stats')
    ]);
    
    buttons.push([Markup.button.callback('üîÑ –û–±–Ω–æ–≤–∏—Ç—å', 'partners_list')]);
    buttons.push([Markup.button.callback('‚óÄÔ∏è –ù–∞–∑–∞–¥', 'partners_menu')]);
    
    const keyboard = Markup.inlineKeyboard(buttons);
    
    if (ctx.callbackQuery) {
      await ctx.editMessageText(message, {
        parse_mode: 'Markdown',
        ...keyboard
      });
    } else {
      await ctx.reply(message, {
        parse_mode: 'Markdown',
        ...keyboard
      });
    }
    
  } catch (error) {
    console.error('ADMIN: –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å–ø–∏—Å–∫–∞ –ø–∞—Ä—Ç–Ω–µ—Ä–æ–≤:', error);
    const errorMessage = `‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –ø–∞—Ä—Ç–Ω–µ—Ä–æ–≤: ${error.message}`;
    
    if (ctx.callbackQuery) {
      await ctx.answerCbQuery(errorMessage);
    } else {
      await ctx.reply(errorMessage);
    }
  }
}

/**
 * –ù–∞—á–∞—Ç—å –Ω–∞–∑–Ω–∞—á–µ–Ω–∏–µ –ø–∞—Ä—Ç–Ω–µ—Ä—Å–∫–æ–≥–æ —Å—Ç–∞—Ç—É—Å–∞
 */
async function startPartnerAssignment(ctx) {
  console.log('ADMIN: –ù–∞—á–∞–ª–æ –Ω–∞–∑–Ω–∞—á–µ–Ω–∏—è –ø–∞—Ä—Ç–Ω–µ—Ä—Å–∫–æ–≥–æ —Å—Ç–∞—Ç—É—Å–∞');
  
  ctx.session = ctx.session || {};
  ctx.session.assigningPartner = {
    step: 'userId'
  };
  
  const message = '‚ûï *–ù–∞–∑–Ω–∞—á–µ–Ω–∏–µ –ø–∞—Ä—Ç–Ω–µ—Ä—Å–∫–æ–≥–æ —Å—Ç–∞—Ç—É—Å–∞*\n\n–í–≤–µ–¥–∏—Ç–µ Telegram ID –∏–ª–∏ username –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:';
  const keyboard = Markup.inlineKeyboard([[
    Markup.button.callback('‚ùå –û—Ç–º–µ–Ω–∞', 'partners_menu')
  ]]);
  
  if (ctx.callbackQuery) {
    await ctx.editMessageText(message, {
      parse_mode: 'Markdown',
      ...keyboard
    });
  } else {
    await ctx.reply(message, {
      parse_mode: 'Markdown',
      ...keyboard
    });
  }
}

/**
 * –û–±—Ä–∞–±–æ—Ç–∞—Ç—å –Ω–∞–∑–Ω–∞—á–µ–Ω–∏–µ –ø–∞—Ä—Ç–Ω–µ—Ä—Å–∫–æ–≥–æ —Å—Ç–∞—Ç—É—Å–∞
 */
async function handlePartnerAssignment(ctx) {
  if (!ctx.session || !ctx.session.assigningPartner) {
    return;
  }
  
  const session = ctx.session.assigningPartner;
  const text = ctx.message.text.trim();
  
  if (session.step === 'userId') {
    try {
      // –ü–æ–∏—Å–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
      const response = await apiClient.get('/admin/users', {
        params: { search: text, limit: 1 }
      });
      
      if (!response.data.success || response.data.data.users.length === 0) {
        await ctx.reply('‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑:');
        return;
      }
      
      const user = response.data.data.users[0];
      session.user = user;
      session.step = 'level';
      
      const currentLevel = user.partnerLevel === 'none' ? '–û–±—ã—á–Ω—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å' : user.partnerLevel;
      
      const message = `üë§ *–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–∞–π–¥–µ–Ω:*\n\n` +
        `–ò–º—è: ${user.firstName} ${user.lastName || ''}\n` +
        `Username: ${user.username ? `@${user.username}` : '–ù–µ —É–∫–∞–∑–∞–Ω'}\n` +
        `Telegram ID: \`${user.telegramId}\`\n` +
        `–¢–µ–∫—É—â–∏–π —Å—Ç–∞—Ç—É—Å: ${currentLevel}\n\n` +
        `–í—ã–±–µ—Ä–∏—Ç–µ –Ω–æ–≤—ã–π –ø–∞—Ä—Ç–Ω–µ—Ä—Å–∫–∏–π —É—Ä–æ–≤–µ–Ω—å:`;
      
      const keyboard = Markup.inlineKeyboard([
        [
          Markup.button.callback('ü•â –ü–∞—Ä—Ç–Ω–µ—Ä –ë—Ä–æ–Ω–∑–∞ (20%)', 'assign_partner_bronze'),
          Markup.button.callback('ü•à –ü–∞—Ä—Ç–Ω–µ—Ä –°–µ—Ä–µ–±—Ä–æ (30%)', 'assign_partner_silver')
        ],
        [
          Markup.button.callback('ü•á –ü–∞—Ä—Ç–Ω–µ—Ä –ó–æ–ª–æ—Ç–æ (40%)', 'assign_partner_gold'),
          Markup.button.callback('‚ùå –£–±—Ä–∞—Ç—å —Å—Ç–∞—Ç—É—Å', 'assign_none')
        ],
        [
          Markup.button.callback('üîô –û—Ç–º–µ–Ω–∞', 'partners_menu')
        ]
      ]);
      
      await ctx.reply(message, {
        parse_mode: 'Markdown',
        ...keyboard
      });
      
    } catch (error) {
      console.error('ADMIN: –û—à–∏–±–∫–∞ –ø–æ–∏—Å–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:', error);
      await ctx.reply('‚ùå –û—à–∏–±–∫–∞ –ø–æ–∏—Å–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑:');
    }
    
  } else if (session.step === 'reason') {
    const reason = text;
    
    if (reason.length < 3) {
      await ctx.reply('‚ùå –ü—Ä–∏—á–∏–Ω–∞ –¥–æ–ª–∂–Ω–∞ —Å–æ–¥–µ—Ä–∂–∞—Ç—å –º–∏–Ω–∏–º—É–º 3 —Å–∏–º–≤–æ–ª–∞:');
      return;
    }
    
    try {
      // –ù–∞–∑–Ω–∞—á–∞–µ–º –ø–∞—Ä—Ç–Ω–µ—Ä—Å–∫–∏–π —Å—Ç–∞—Ç—É—Å
      const response = await apiClient.post('/admin/referral/assign-partner', {
        userId: session.user._id,
        newLevel: session.selectedLevel,
        reason: reason,
        metadata: {
          ipAddress: ctx.from?.id || 'unknown',
          userAgent: 'Telegram Admin Bot'
        }
      });
      
      if (!response.data.success) {
        throw new Error(response.data.message || '–û—à–∏–±–∫–∞ –Ω–∞–∑–Ω–∞—á–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞');
      }
      
      const result = response.data.data;
      
      const actionText = {
        'assign': '–Ω–∞–∑–Ω–∞—á–µ–Ω',
        'change': '–∏–∑–º–µ–Ω–µ–Ω',
        'remove': '—É–±—Ä–∞–Ω'
      }[result.action] || '–æ–±–Ω–æ–≤–ª–µ–Ω';
      
      await ctx.reply(
        `‚úÖ *–ü–∞—Ä—Ç–Ω–µ—Ä—Å–∫–∏–π —Å—Ç–∞—Ç—É—Å ${actionText}!*\n\n` +
        `üë§ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: ${result.user.username}\n` +
        `üìä –ë—ã–ª–æ: ${result.user.previousLevel}\n` +
        `üìä –°—Ç–∞–ª–æ: ${result.user.newLevel}\n` +
        `üí∞ –ö–æ–º–∏—Å—Å–∏—è: ${result.user.commissionPercent}%\n` +
        `üëë –ê–¥–º–∏–Ω: ${result.admin.username}\n` +
        `üìù –ü—Ä–∏—á–∏–Ω–∞: ${reason}`,
        {
          parse_mode: 'Markdown',
          ...Markup.inlineKeyboard([[
            Markup.button.callback('üìã –ö —Å–ø–∏—Å–∫—É –ø–∞—Ä—Ç–Ω–µ—Ä–æ–≤', 'partners_list')
          ]])
        }
      );
      
      delete ctx.session.assigningPartner;
      
    } catch (error) {
      console.error('ADMIN: –û—à–∏–±–∫–∞ –Ω–∞–∑–Ω–∞—á–µ–Ω–∏—è –ø–∞—Ä—Ç–Ω–µ—Ä—Å–∫–æ–≥–æ —Å—Ç–∞—Ç—É—Å–∞:', error);
      await ctx.reply(`‚ùå –û—à–∏–±–∫–∞ –Ω–∞–∑–Ω–∞—á–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞: ${error.message}`);
    }
  }
}

/**
 * –û–±—Ä–∞–±–æ—Ç–∞—Ç—å –≤—ã–±–æ—Ä –ø–∞—Ä—Ç–Ω–µ—Ä—Å–∫–æ–≥–æ —É—Ä–æ–≤–Ω—è
 */
async function handlePartnerLevelSelection(ctx, level) {
  console.log(`ADMIN: –í—ã–±–æ—Ä –ø–∞—Ä—Ç–Ω–µ—Ä—Å–∫–æ–≥–æ —É—Ä–æ–≤–Ω—è: ${level}`);
  
  if (!ctx.session || !ctx.session.assigningPartner) {
    return ctx.answerCbQuery('‚ùå –°–µ—Å—Å–∏—è –Ω–∞–∑–Ω–∞—á–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞ –∏—Å—Ç–µ–∫–ª–∞');
  }
  
  ctx.session.assigningPartner.selectedLevel = level;
  ctx.session.assigningPartner.step = 'reason';
  
  const levelNames = {
    'partner_bronze': 'ü•â –ü–∞—Ä—Ç–Ω–µ—Ä –ë—Ä–æ–Ω–∑–∞ (20%)',
    'partner_silver': 'ü•à –ü–∞—Ä—Ç–Ω–µ—Ä –°–µ—Ä–µ–±—Ä–æ (30%)',
    'partner_gold': 'ü•á –ü–∞—Ä—Ç–Ω–µ—Ä –ó–æ–ª–æ—Ç–æ (40%)',
    'none': '‚ùå –£–±—Ä–∞—Ç—å –ø–∞—Ä—Ç–Ω–µ—Ä—Å–∫–∏–π —Å—Ç–∞—Ç—É—Å'
  };
  
  const selectedLevelName = levelNames[level] || level;
  
  await ctx.editMessageText(
    `üìù *–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –Ω–∞–∑–Ω–∞—á–µ–Ω–∏—è*\n\n` +
    `üë§ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: ${ctx.session.assigningPartner.user.firstName} ${ctx.session.assigningPartner.user.lastName || ''}\n` +
    `üìä –ù–æ–≤—ã–π —Å—Ç–∞—Ç—É—Å: ${selectedLevelName}\n\n` +
    `–í–≤–µ–¥–∏—Ç–µ –ø—Ä–∏—á–∏–Ω—É –Ω–∞–∑–Ω–∞—á–µ–Ω–∏—è:`,
    {
      parse_mode: 'Markdown',
      ...Markup.inlineKeyboard([[
        Markup.button.callback('üîô –û—Ç–º–µ–Ω–∞', 'partners_menu')
      ]])
    }
  );
  
  await ctx.answerCbQuery();
}

/**
 * –ü–æ–∫–∞–∑–∞—Ç—å –∏—Å—Ç–æ—Ä–∏—é –∏–∑–º–µ–Ω–µ–Ω–∏–π –ø–∞—Ä—Ç–Ω–µ—Ä—Å–∫–∏—Ö —Å—Ç–∞—Ç—É—Å–æ–≤
 */
async function showPartnersLogs(ctx, page = 1) {
  console.log('ADMIN: –ó–∞–ø—Ä–æ—Å –∏—Å—Ç–æ—Ä–∏–∏ –ø–∞—Ä—Ç–Ω–µ—Ä–æ–≤, —Å—Ç—Ä–∞–Ω–∏—Ü–∞:', page);
  
  try {
    const response = await apiClient.get('/admin/referral/partner-logs', {
      params: { 
        page: page,
        limit: 10
      }
    });
    
    if (!response.data.success) {
      throw new Error(response.data.message || '–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∏—Å—Ç–æ—Ä–∏–∏');
    }
    
    const data = response.data.data;
    const logs = data.logs;
    const pagination = data.pagination;
    
    if (logs.length === 0) {
      const message = 'üìú *–ò—Å—Ç–æ—Ä–∏—è –∏–∑–º–µ–Ω–µ–Ω–∏–π*\n\n–ò—Å—Ç–æ—Ä–∏—è –ø—É—Å—Ç–∞.';
      const keyboard = Markup.inlineKeyboard([[
        Markup.button.callback('‚óÄÔ∏è –ù–∞–∑–∞–¥', 'partners_menu')
      ]]);
      
      if (ctx.callbackQuery) {
        await ctx.editMessageText(message, {
          parse_mode: 'Markdown',
          ...keyboard
        });
      } else {
        await ctx.reply(message, {
          parse_mode: 'Markdown',
          ...keyboard
        });
      }
      return;
    }
    
    let message = `üìú *–ò—Å—Ç–æ—Ä–∏—è –∏–∑–º–µ–Ω–µ–Ω–∏–π* (—Å—Ç—Ä. ${Math.floor(pagination.offset / pagination.limit) + 1})\n\n`;
    
    logs.forEach((log, index) => {
      const logNum = pagination.offset + index + 1;
      const actionEmoji = {
        'assign': '‚ûï',
        'change': 'üîÑ',
        'remove': '‚ùå'
      }[log.action] || '‚ùì';
      
      const userName = log.user?.username || log.user?.telegramId || '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ';
      const adminName = log.admin?.username || log.admin?.telegramId || '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ';
      
      message += `${logNum}. ${actionEmoji} *${log.action}*\n`;
      message += `   üë§ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: ${userName}\n`;
      message += `   üìä ${log.previousLevel} ‚Üí ${log.newLevel}\n`;
      message += `   üëë –ê–¥–º–∏–Ω: ${adminName}\n`;
      
      if (log.reason) {
        message += `   üìù –ü—Ä–∏—á–∏–Ω–∞: ${log.reason}\n`;
      }
      
      const date = new Date(log.createdAt).toLocaleString('ru-RU');
      message += `   üìÖ ${date}\n\n`;
    });
    
    // –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –∫–Ω–æ–ø–∫–∞–º–∏ –Ω–∞–≤–∏–≥–∞—Ü–∏–∏
    const buttons = [];
    
    // –ö–Ω–æ–ø–∫–∏ –Ω–∞–≤–∏–≥–∞—Ü–∏–∏
    if (pagination.offset > 0 || pagination.hasMore) {
      const navButtons = [];
      if (pagination.offset > 0) {
        const prevPage = Math.floor((pagination.offset - pagination.limit) / pagination.limit) + 1;
        navButtons.push(Markup.button.callback('‚¨Ö –ü—Ä–µ–¥.', `partners_logs_${prevPage}`));
      }
      if (pagination.hasMore) {
        const nextPage = Math.floor(pagination.offset / pagination.limit) + 2;
        navButtons.push(Markup.button.callback('–°–ª–µ–¥. ‚û°', `partners_logs_${nextPage}`));
      }
      buttons.push(navButtons);
    }
    
    buttons.push([Markup.button.callback('üîÑ –û–±–Ω–æ–≤–∏—Ç—å', 'partners_logs')]);
    buttons.push([Markup.button.callback('‚óÄÔ∏è –ù–∞–∑–∞–¥', 'partners_menu')]);
    
    const keyboard = Markup.inlineKeyboard(buttons);
    
    if (ctx.callbackQuery) {
      await ctx.editMessageText(message, {
        parse_mode: 'Markdown',
        ...keyboard
      });
    } else {
      await ctx.reply(message, {
        parse_mode: 'Markdown',
        ...keyboard
      });
    }
    
  } catch (error) {
    console.error('ADMIN: –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∏—Å—Ç–æ—Ä–∏–∏ –ø–∞—Ä—Ç–Ω–µ—Ä–æ–≤:', error);
    const errorMessage = `‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∏—Å—Ç–æ—Ä–∏–∏: ${error.message}`;
    
    if (ctx.callbackQuery) {
      await ctx.answerCbQuery(errorMessage);
    } else {
      await ctx.reply(errorMessage);
    }
  }
}

/**
 * –ü–æ–∫–∞–∑–∞—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø–∞—Ä—Ç–Ω–µ—Ä—Å–∫–æ–π –ø—Ä–æ–≥—Ä–∞–º–º—ã
 */
async function showPartnersStats(ctx) {
  console.log('ADMIN: –ó–∞–ø—Ä–æ—Å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –ø–∞—Ä—Ç–Ω–µ—Ä–æ–≤');
  
  try {
    const response = await apiClient.get('/admin/referral/stats');
    
    if (!response.data.success) {
      throw new Error(response.data.message || '–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏');
    }
    
    const stats = response.data.data;
    
    let message = 'üìä *–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–∞—Ä—Ç–Ω–µ—Ä—Å–∫–æ–π –ø—Ä–æ–≥—Ä–∞–º–º—ã*\n\n';
    
    // –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ –ø–∞—Ä—Ç–Ω–µ—Ä–∞–º
    if (stats.partners) {
      message += 'üëî *–ü–∞—Ä—Ç–Ω–µ—Ä—ã:*\n';
      message += `   –í—Å–µ–≥–æ –ø–∞—Ä—Ç–Ω–µ—Ä–æ–≤: ${stats.partners.total}\n`;
      message += `   –ê–∫—Ç–∏–≤–Ω—ã–π –±–∞–ª–∞–Ω—Å: ${stats.partners.totalBalance.toFixed(2)} USDT\n\n`;
      
      if (stats.partners.byLevel && stats.partners.byLevel.length > 0) {
        message += '   –ü–æ —É—Ä–æ–≤–Ω—è–º:\n';
        stats.partners.byLevel.forEach(level => {
          const levelEmoji = {
            'partner_bronze': 'ü•â',
            'partner_silver': 'ü•à',
            'partner_gold': 'ü•á'
          }[level._id] || '‚ùì';
          
          message += `   ${levelEmoji} ${level._id}: ${level.count} (${level.totalEarned.toFixed(2)} USDT)\n`;
        });
      }
      message += '\n';
    }
    
    // –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ —Ä–µ—Ñ–µ—Ä–∞–ª–∞–º
    if (stats.referrals) {
      message += 'üë• *–†–µ—Ñ–µ—Ä–∞–ª—ã:*\n';
      message += `   –í—Å–µ–≥–æ —Ä–µ—Ñ–µ—Ä–∞–ª–æ–≤: ${stats.referrals.total}\n`;
      message += `   –ê–∫—Ç–∏–≤–Ω—ã—Ö: ${stats.referrals.active}\n`;
      message += `   –° –¥–µ–ø–æ–∑–∏—Ç–∞–º–∏: ${stats.referrals.withDeposits}\n`;
      message += `   –ö–æ–Ω–≤–µ—Ä—Å–∏—è: ${stats.referrals.conversionRate}%\n\n`;
    }
    
    // –§–∏–Ω–∞–Ω—Å–æ–≤–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
    if (stats.finance) {
      message += 'üí∞ *–§–∏–Ω–∞–Ω—Å—ã:*\n';
      message += `   –û–±—â–∏–µ –≤—ã–ø–ª–∞—Ç—ã: ${stats.finance.totalReferralPayments.toFixed(2)} USDT\n`;
      message += `   –ö –≤—ã–ø–ª–∞—Ç–µ: ${stats.finance.pendingPayouts.toFixed(2)} USDT\n`;
    }
    
    const keyboard = Markup.inlineKeyboard([
      [Markup.button.callback('üîÑ –û–±–Ω–æ–≤–∏—Ç—å', 'partners_stats')],
      [Markup.button.callback('‚óÄÔ∏è –ù–∞–∑–∞–¥', 'partners_menu')]
    ]);
    
    if (ctx.callbackQuery) {
      await ctx.editMessageText(message, {
        parse_mode: 'Markdown',
        ...keyboard
      });
    } else {
      await ctx.reply(message, {
        parse_mode: 'Markdown',
        ...keyboard
      });
    }
    
  } catch (error) {
    console.error('ADMIN: –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –ø–∞—Ä—Ç–Ω–µ—Ä–æ–≤:', error);
    const errorMessage = `‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏: ${error.message}`;
    
    if (ctx.callbackQuery) {
      await ctx.answerCbQuery(errorMessage);
    } else {
      await ctx.reply(errorMessage);
    }
  }
}

/**
 * –ü–æ–∫–∞–∑–∞—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ–± —É—Ä–æ–≤–Ω—è—Ö –ø–∞—Ä—Ç–Ω–µ—Ä–æ–≤
 */
async function showPartnerLevels(ctx) {
  console.log('ADMIN: –ü–æ–∫–∞–∑ —É—Ä–æ–≤–Ω–µ–π –ø–∞—Ä—Ç–Ω–µ—Ä–æ–≤');
  
  const message = `üéØ *–£—Ä–æ–≤–Ω–∏ –ø–∞—Ä—Ç–Ω–µ—Ä–æ–≤*\n\n` +
    `**–ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–µ —É—Ä–æ–≤–Ω–∏ (–ø–æ —Ä–µ—Ñ–µ—Ä–∞–ª–∞–º):**\n` +
    `ü•â –ë—Ä–æ–Ω–∑–∞: 0+ –∞–∫—Ç–∏–≤–Ω—ã—Ö —Ä–µ—Ñ–µ—Ä–∞–ª–æ–≤ (5%)\n` +
    `ü•à –°–µ—Ä–µ–±—Ä–æ: 6+ –∞–∫—Ç–∏–≤–Ω—ã—Ö —Ä–µ—Ñ–µ—Ä–∞–ª–æ–≤ (7%)\n` +
    `ü•á –ó–æ–ª–æ—Ç–æ: 21+ –∞–∫—Ç–∏–≤–Ω—ã—Ö —Ä–µ—Ñ–µ—Ä–∞–ª–æ–≤ (10%)\n` +
    `üíé –ü–ª–∞—Ç–∏–Ω–∞: 51+ –∞–∫—Ç–∏–≤–Ω—ã—Ö —Ä–µ—Ñ–µ—Ä–∞–ª–æ–≤ (12%)\n` +
    `üåü VIP: 101+ –∞–∫—Ç–∏–≤–Ω—ã—Ö —Ä–µ—Ñ–µ—Ä–∞–ª–æ–≤ (15%)\n\n` +
    `**–ü–∞—Ä—Ç–Ω–µ—Ä—Å–∫–∏–µ —É—Ä–æ–≤–Ω–∏ (–Ω–∞–∑–Ω–∞—á–∞—é—Ç—Å—è –∞–¥–º–∏–Ω–æ–º):**\n` +
    `ü•â –ü–∞—Ä—Ç–Ω–µ—Ä –ë—Ä–æ–Ω–∑–∞: –∫–æ–º–∏—Å—Å–∏—è 20%\n` +
    `ü•à –ü–∞—Ä—Ç–Ω–µ—Ä –°–µ—Ä–µ–±—Ä–æ: –∫–æ–º–∏—Å—Å–∏—è 30%\n` +
    `ü•á –ü–∞—Ä—Ç–Ω–µ—Ä –ó–æ–ª–æ—Ç–æ: –∫–æ–º–∏—Å—Å–∏—è 40%\n\n` +
    `*–ü–∞—Ä—Ç–Ω–µ—Ä—Å–∫–∏–µ —É—Ä–æ–≤–Ω–∏ –∏–º–µ—é—Ç –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç –Ω–∞–¥ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–º–∏*`;
  
  const keyboard = Markup.inlineKeyboard([
    [Markup.button.callback('‚óÄÔ∏è –ù–∞–∑–∞–¥', 'partners_menu')]
  ]);
  
  if (ctx.callbackQuery) {
    await ctx.editMessageText(message, {
      parse_mode: 'Markdown',
      ...keyboard
    });
  } else {
    await ctx.reply(message, {
      parse_mode: 'Markdown',
      ...keyboard
    });
  }
}

module.exports = {
  showUsersMenu,
  showUsersList,
  showBlockedUsers,
  startUserSearch,
  handleUserSearch,
  showUserDetails,
  showUsersStats,
  toggleUserBlock,
  startBalanceAdjustment,
  handleBalanceAdjustment,
  // –ù–æ–≤—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏ –¥–ª—è –ø–∞—Ä—Ç–Ω–µ—Ä–æ–≤
  showPartnersMenu,
  showPartnersList,
  startPartnerAssignment,
  handlePartnerAssignment,
  handlePartnerLevelSelection,
  showPartnersLogs,
  showPartnersStats,
  showPartnerLevels
};