// backend/src/routes/reconciliation.routes.js
const express = require('express');
const router = express.Router();
const balanceReconciliationService = require('../services/balance-reconciliation.service');

/**
 * @route GET /api/reconciliation/status
 * @desc –ü–æ–ª—É—á–∏—Ç—å —Ç–µ–∫—É—â–∏–π —Å—Ç–∞—Ç—É—Å —Å–≤–µ—Ä–∫–∏ –±–∞–ª–∞–Ω—Å–æ–≤
 * @access Admin
 */
router.get('/status', async (req, res) => {
  try {
    // –ü–æ–ª—É—á–∞–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–π –æ—Ç—á–µ—Ç
    const history = balanceReconciliationService.getReconciliationHistory(1);
    const lastReport = history[0];

    if (!lastReport) {
      return res.status(200).json({
        success: true,
        message: '–°–≤–µ—Ä–∫–∞ –µ—â–µ –Ω–µ –ø—Ä–æ–≤–æ–¥–∏–ª–∞—Å—å',
        data: {
          status: 'never_run',
          lastReconciliation: null,
          recommendations: ['–ó–∞–ø—É—Å—Ç–∏—Ç–µ –ø–µ—Ä–≤—É—é —Å–≤–µ—Ä–∫—É –±–∞–ª–∞–Ω—Å–æ–≤']
        }
      });
    }

    // –û–ø—Ä–µ–¥–µ–ª—è–µ–º –∞–∫—Ç—É–∞–ª—å–Ω–æ—Å—Ç—å –ø–æ—Å–ª–µ–¥–Ω–µ–π —Å–≤–µ—Ä–∫–∏
    const hoursSinceLastCheck = (Date.now() - new Date(lastReport.timestamp).getTime()) / (1000 * 60 * 60);
    const isStale = hoursSinceLastCheck > 2; // –°—á–∏—Ç–∞–µ–º —É—Å—Ç–∞—Ä–µ–≤—à–µ–π —á–µ—Ä–µ–∑ 2 —á–∞—Å–∞

    res.status(200).json({
      success: true,
      data: {
        status: lastReport.status,
        lastReconciliation: lastReport.timestamp,
        hoursSinceLastCheck: Math.round(hoursSinceLastCheck * 100) / 100,
        isStale,
        severity: lastReport.discrepancies?.severity || 'unknown',
        discrepancy: lastReport.discrepancies?.discrepancy || 0,
        cryptoBotBalance: lastReport.cryptoBot?.total || 0,
        expectedBalance: lastReport.expected?.expectedBalance || 0,
        recommendations: lastReport.recommendations || []
      }
    });

  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞ —Å–≤–µ—Ä–∫–∏:', error);
    res.status(500).json({
      success: false,
      message: '–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞ —Å–≤–µ—Ä–∫–∏',
      error: error.message
    });
  }
});

/**
 * @route POST /api/reconciliation/run
 * @desc –ó–∞–ø—É—Å—Ç–∏—Ç—å —Å–≤–µ—Ä–∫—É –±–∞–ª–∞–Ω—Å–æ–≤ –≤—Ä—É—á–Ω—É—é
 * @access Admin
 */
router.post('/run', async (req, res) => {
  try {
    console.log('üöÄ –ó–∞–ø—É—Å–∫ —Ä—É—á–Ω–æ–π —Å–≤–µ—Ä–∫–∏ –±–∞–ª–∞–Ω—Å–æ–≤...');
    
    const report = await balanceReconciliationService.performReconciliation();

    res.status(200).json({
      success: true,
      message: '–°–≤–µ—Ä–∫–∞ –±–∞–ª–∞–Ω—Å–æ–≤ –∑–∞–≤–µ—Ä—à–µ–Ω–∞',
      data: {
        id: report.id,
        timestamp: report.timestamp,
        duration: report.duration,
        status: report.status,
        discrepancy: report.discrepancies?.discrepancy || 0,
        severity: report.discrepancies?.severity || 'ok',
        cryptoBotBalance: report.cryptoBot?.total || 0,
        expectedBalance: report.expected?.expectedBalance || 0,
        recommendations: report.recommendations || []
      }
    });

  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ —Ä—É—á–Ω–æ–π —Å–≤–µ—Ä–∫–µ:', error);
    res.status(500).json({
      success: false,
      message: '–û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–∏ —Å–≤–µ—Ä–∫–∏',
      error: error.message
    });
  }
});

/**
 * @route GET /api/reconciliation/history
 * @desc –ü–æ–ª—É—á–∏—Ç—å –∏—Å—Ç–æ—Ä–∏—é —Å–≤–µ—Ä–æ–∫
 * @access Admin
 */
router.get('/history', async (req, res) => {
  try {
    const { limit = 10 } = req.query;
    const history = balanceReconciliationService.getReconciliationHistory(parseInt(limit));

    res.status(200).json({
      success: true,
      data: {
        history: history.map(report => ({
          id: report.id,
          timestamp: report.timestamp,
          duration: report.duration,
          status: report.status,
          discrepancy: report.discrepancies?.discrepancy || 0,
          severity: report.discrepancies?.severity || 'unknown',
          cryptoBotBalance: report.cryptoBot?.total || 0,
          expectedBalance: report.expected?.expectedBalance || 0,
          hasError: !!report.error
        })),
        total: history.length
      }
    });

  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∏—Å—Ç–æ—Ä–∏–∏ —Å–≤–µ—Ä–æ–∫:', error);
    res.status(500).json({
      success: false,
      message: '–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∏—Å—Ç–æ—Ä–∏–∏ —Å–≤–µ—Ä–æ–∫',
      error: error.message
    });
  }
});

/**
 * @route GET /api/reconciliation/report/:id
 * @desc –ü–æ–ª—É—á–∏—Ç—å –¥–µ—Ç–∞–ª—å–Ω—ã–π –æ—Ç—á–µ—Ç –ø–æ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–π —Å–≤–µ—Ä–∫–µ
 * @access Admin
 */
router.get('/report/:id', async (req, res) => {
  try {
    const { id } = req.params;
    const report = balanceReconciliationService.exportReport(id);

    if (!report) {
      return res.status(404).json({
        success: false,
        message: '–û—Ç—á–µ—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω'
      });
    }

    res.status(200).json({
      success: true,
      data: report
    });

  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –æ—Ç—á–µ—Ç–∞:', error);
    res.status(500).json({
      success: false,
      message: '–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –æ—Ç—á–µ—Ç–∞',
      error: error.message
    });
  }
});

/**
 * @route GET /api/reconciliation/dashboard
 * @desc –ü–æ–ª—É—á–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –¥–ª—è –¥–∞—à–±–æ—Ä–¥–∞ —Å–≤–µ—Ä–∫–∏
 * @access Admin
 */
router.get('/dashboard', async (req, res) => {
  try {
    const history = balanceReconciliationService.getReconciliationHistory(24); // –ü–æ—Å–ª–µ–¥–Ω–∏–µ 24 —Å–≤–µ—Ä–∫–∏
    const lastReport = history[0];

    // –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ —Å—Ç–∞—Ç—É—Å–∞–º
    const statusStats = history.reduce((acc, report) => {
      const status = report.status || 'unknown';
      acc[status] = (acc[status] || 0) + 1;
      return acc;
    }, {});

    // –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ —Å–µ—Ä—å–µ–∑–Ω–æ—Å—Ç–∏ —Ä–∞—Å—Ö–æ–∂–¥–µ–Ω–∏–π
    const severityStats = history.reduce((acc, report) => {
      const severity = report.discrepancies?.severity || 'unknown';
      acc[severity] = (acc[severity] || 0) + 1;
      return acc;
    }, {});

    // –¢—Ä–µ–Ω–¥—ã —Ä–∞—Å—Ö–æ–∂–¥–µ–Ω–∏–π
    const trends = history.map(report => ({
      timestamp: report.timestamp,
      discrepancy: report.discrepancies?.discrepancy || 0,
      severity: report.discrepancies?.severity || 'unknown'
    })).reverse(); // –û—Ç —Å—Ç–∞—Ä—ã—Ö –∫ –Ω–æ–≤—ã–º

    // –°—Ä–µ–¥–Ω–∏–µ –∑–Ω–∞—á–µ–Ω–∏—è
    const avgDiscrepancy = history.length > 0 
      ? history.reduce((sum, report) => sum + Math.abs(report.discrepancies?.discrepancy || 0), 0) / history.length
      : 0;

    res.status(200).json({
      success: true,
      data: {
        summary: {
          lastCheck: lastReport?.timestamp || null,
          currentStatus: lastReport?.status || 'never_run',
          currentSeverity: lastReport?.discrepancies?.severity || 'unknown',
          currentDiscrepancy: lastReport?.discrepancies?.discrepancy || 0,
          avgDiscrepancy: Math.round(avgDiscrepancy * 100) / 100,
          totalChecks: history.length
        },
        stats: {
          byStatus: statusStats,
          bySeverity: severityStats
        },
        trends,
        recommendations: lastReport?.recommendations || [],
        alerts: this.generateAlerts(lastReport, history)
      }
    });

  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö –¥–∞—à–±–æ—Ä–¥–∞:', error);
    res.status(500).json({
      success: false,
      message: '–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö –¥–∞—à–±–æ—Ä–¥–∞',
      error: error.message
    });
  }
});

/**
 * –ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –∞–ª–µ—Ä—Ç—ã –Ω–∞ –æ—Å–Ω–æ–≤–µ –∞–Ω–∞–ª–∏–∑–∞ —Å–≤–µ—Ä–æ–∫
 */
function generateAlerts(lastReport, history) {
  const alerts = [];

  if (!lastReport) {
    alerts.push({
      type: 'warning',
      message: '–°–≤–µ—Ä–∫–∞ –±–∞–ª–∞–Ω—Å–æ–≤ –µ—â–µ –Ω–µ –ø—Ä–æ–≤–æ–¥–∏–ª–∞—Å—å',
      action: '–ó–∞–ø—É—Å—Ç–∏—Ç–µ –ø–µ—Ä–≤—É—é —Å–≤–µ—Ä–∫—É'
    });
    return alerts;
  }

  // –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤—Ä–µ–º—è –ø–æ—Å–ª–µ–¥–Ω–µ–π —Å–≤–µ—Ä–∫–∏
  const hoursSinceLastCheck = (Date.now() - new Date(lastReport.timestamp).getTime()) / (1000 * 60 * 60);
  if (hoursSinceLastCheck > 2) {
    alerts.push({
      type: 'warning',
      message: `–ü–æ—Å–ª–µ–¥–Ω—è—è —Å–≤–µ—Ä–∫–∞ –±—ã–ª–∞ ${Math.round(hoursSinceLastCheck)} —á–∞—Å–æ–≤ –Ω–∞–∑–∞–¥`,
      action: '–ó–∞–ø—É—Å—Ç–∏—Ç–µ –Ω–æ–≤—É—é —Å–≤–µ—Ä–∫—É'
    });
  }

  // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏–µ —Ä–∞—Å—Ö–æ–∂–¥–µ–Ω–∏—è
  if (lastReport.discrepancies?.severity === 'critical') {
    alerts.push({
      type: 'error',
      message: `–ö—Ä–∏—Ç–∏—á–µ—Å–∫–æ–µ —Ä–∞—Å—Ö–æ–∂–¥–µ–Ω–∏–µ: ${lastReport.discrepancies.discrepancy.toFixed(2)} USDT`,
      action: '–ù–µ–º–µ–¥–ª–µ–Ω–Ω–æ –ø—Ä–æ–≤–µ—Ä—å—Ç–µ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏'
    });
  }

  // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç—Ä–µ–Ω–¥—ã
  const recentReports = history.slice(0, 5);
  const hasConsistentIssues = recentReports.length >= 3 && 
    recentReports.every(r => r.discrepancies?.severity !== 'ok');

  if (hasConsistentIssues) {
    alerts.push({
      type: 'warning',
      message: '–ü–æ—Å—Ç–æ—è–Ω–Ω—ã–µ —Ä–∞—Å—Ö–æ–∂–¥–µ–Ω–∏—è –≤ –ø–æ—Å–ª–µ–¥–Ω–∏—Ö —Å–≤–µ—Ä–∫–∞—Ö',
      action: '–ü—Ä–æ–≤–µ–¥–∏—Ç–µ –¥–µ—Ç–∞–ª—å–Ω—ã–π –∞–Ω–∞–ª–∏–∑ —Å–∏—Å—Ç–µ–º—ã'
    });
  }

  // –ü—Ä–æ–≤–µ—Ä—è–µ–º –æ—à–∏–±–∫–∏
  if (lastReport.status === 'error') {
    alerts.push({
      type: 'error',
      message: '–ü–æ—Å–ª–µ–¥–Ω—è—è —Å–≤–µ—Ä–∫–∞ –∑–∞–≤–µ—Ä—à–∏–ª–∞—Å—å —Å –æ—à–∏–±–∫–æ–π',
      action: '–ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ª–æ–≥–∏ –∏ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ —Å CryptoBot'
    });
  }

  return alerts;
}

module.exports = router;