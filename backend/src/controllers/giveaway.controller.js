// backend/src/controllers/giveaway.controller.js
const { 
  Giveaway, 
  GiveawayPrize, 
  GiveawayParticipation, 
  User, 
  Deposit 
} = require('../models');

class GiveawayController {
  /**
   * –ü–æ–ª—É—á–∏—Ç—å –∞–∫—Ç–∏–≤–Ω—ã–µ —Ä–æ–∑—ã–≥—Ä—ã—à–∏
   */
  async getActiveGiveaways(req, res) {
    try {
      const now = new Date();
      
      const activeGiveaways = await Giveaway.find({
        status: 'active',
        startDate: { $lte: now },
        endDate: { $gte: now }
      })
      .populate('prize')
      .sort({ drawDate: 1 });

      const giveawaysWithStats = await Promise.all(
        activeGiveaways.map(async (giveaway) => {
          const participationCount = await GiveawayParticipation.countDocuments({
            giveaway: giveaway._id
          });

          return {
            ...giveaway.toObject(),
            participationCount
          };
        })
      );

      res.json({
        success: true,
        data: giveawaysWithStats
      });
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∞–∫—Ç–∏–≤–Ω—ã—Ö —Ä–æ–∑—ã–≥—Ä—ã—à–µ–π:', error);
      res.status(500).json({
        success: false,
        message: '–û—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞'
      });
    }
  }

  /**
   * –£—á–∞—Å—Ç–∏–µ –≤ —Ä–æ–∑—ã–≥—Ä—ã—à–µ
   */
  async participateInGiveaway(req, res) {
    try {
      const { giveawayId } = req.params;
      const userId = req.user.id;

      // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ —Ä–æ–∑—ã–≥—Ä—ã—à–∞
      const giveaway = await Giveaway.findById(giveawayId);
      if (!giveaway) {
        return res.status(404).json({
          success: false,
          message: '–†–æ–∑—ã–≥—Ä—ã—à –Ω–µ –Ω–∞–π–¥–µ–Ω'
        });
      }

      // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç–∞—Ç—É—Å —Ä–æ–∑—ã–≥—Ä—ã—à–∞
      if (giveaway.status !== 'active') {
        return res.status(400).json({
          success: false,
          message: '–†–æ–∑—ã–≥—Ä—ã—à –Ω–µ–∞–∫—Ç–∏–≤–µ–Ω'
        });
      }

      // –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤—Ä–µ–º—è —É—á–∞—Å—Ç–∏—è
      const now = new Date();
      if (now < giveaway.startDate || now > giveaway.endDate) {
        return res.status(400).json({
          success: false,
          message: '–í—Ä–µ–º—è —É—á–∞—Å—Ç–∏—è –≤ —Ä–æ–∑—ã–≥—Ä—ã—à–µ –∏—Å—Ç–µ–∫–ª–æ'
        });
      }

      // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ —É—á–∞—Å—Ç–≤—É–µ—Ç –ª–∏ —É–∂–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å
      const existingParticipation = await GiveawayParticipation.findOne({
        giveaway: giveawayId,
        user: userId
      });

      if (existingParticipation) {
        return res.status(400).json({
          success: false,
          message: '–í—ã —É–∂–µ —É—á–∞—Å—Ç–≤—É–µ—Ç–µ –≤ —ç—Ç–æ–º —Ä–æ–∑—ã–≥—Ä—ã—à–µ'
        });
      }

      // –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–µ–ø–æ–∑–∏—Ç –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Ç–∏–ø–∞ —Ä–æ–∑—ã–≥—Ä—ã—à–∞
      let validDeposit;
      const today = new Date();
      today.setHours(0, 0, 0, 0);
      const tomorrow = new Date(today);
      tomorrow.setDate(tomorrow.getDate() + 1);

      if (giveaway.type === 'daily') {
        // –î–ª—è –µ–∂–µ–¥–Ω–µ–≤–Ω–æ–≥–æ —Ä–æ–∑—ã–≥—Ä—ã—à–∞ –Ω—É–∂–µ–Ω –¥–µ–ø–æ–∑–∏—Ç —Å–µ–≥–æ–¥–Ω—è
        validDeposit = await Deposit.findOne({
          user: userId,
          status: 'paid',
          amount: { $gte: giveaway.minDepositAmount || 1 },
          createdAt: {
            $gte: today,
            $lt: tomorrow
          }
        }).sort({ createdAt: -1 });
      } else if (giveaway.type === 'weekly') {
        // –î–ª—è –Ω–µ–¥–µ–ª—å–Ω–æ–≥–æ —Ä–æ–∑—ã–≥—Ä—ã—à–∞ –Ω—É–∂–µ–Ω –¥–µ–ø–æ–∑–∏—Ç –∑–∞ —Ç–µ–∫—É—â—É—é –Ω–µ–¥–µ–ª—é
        const startOfWeek = new Date(today);
        startOfWeek.setDate(today.getDate() - today.getDay());
        
        validDeposit = await Deposit.findOne({
          user: userId,
          status: 'paid',
          amount: { $gte: giveaway.minDepositAmount || 1 },
          createdAt: {
            $gte: startOfWeek
          }
        }).sort({ createdAt: -1 });
      }

      if (!validDeposit) {
        const minAmount = giveaway.minDepositAmount || 1;
        return res.status(400).json({
          success: false,
          message: giveaway.type === 'daily' 
            ? `–î–ª—è —É—á–∞—Å—Ç–∏—è –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ —Å–¥–µ–ª–∞—Ç—å –¥–µ–ø–æ–∑–∏—Ç –æ—Ç ${minAmount} USDT —Å–µ–≥–æ–¥–Ω—è`
            : `–î–ª—è —É—á–∞—Å—Ç–∏—è –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ —Å–¥–µ–ª–∞—Ç—å –¥–µ–ø–æ–∑–∏—Ç –æ—Ç ${minAmount} USDT –Ω–∞ —ç—Ç–æ–π –Ω–µ–¥–µ–ª–µ`
        });
      }

      // –ü–æ–ª—É—á–∞–µ–º —Å–ª–µ–¥—É—é—â–∏–π –Ω–æ–º–µ—Ä —É—á–∞—Å—Ç–Ω–∏–∫–∞
      const participationNumber = await GiveawayParticipation.countDocuments({
        giveaway: giveawayId
      }) + 1;

      // –°–æ–∑–¥–∞–µ–º —É—á–∞—Å—Ç–∏–µ
      const participation = new GiveawayParticipation({
        giveaway: giveawayId,
        user: userId,
        deposit: validDeposit._id,
        depositAmount: validDeposit.amount,
        depositDate: validDeposit.createdAt,
        participationNumber
      });

      await participation.save();

      // –û–±–Ω–æ–≤–ª—è–µ–º —Å—á–µ—Ç—á–∏–∫ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ –≤ —Ä–æ–∑—ã–≥—Ä—ã—à–µ
      const giveawayBeforeUpdate = await Giveaway.findById(giveawayId);
      console.log(`üîç –û–¢–õ–ê–î–ö–ê participateInGiveaway: –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å ${userId} —É—á–∞—Å—Ç–≤—É–µ—Ç –≤ —Ä–æ–∑—ã–≥—Ä—ã—à–µ ${giveawayId}`);
      console.log(`üîç –û–¢–õ–ê–î–ö–ê participateInGiveaway: participationCount –¥–æ –∏–Ω–∫—Ä–µ–º–µ–Ω—Ç–∞: ${giveawayBeforeUpdate.participationCount}`);
      console.log(`üîç –û–¢–õ–ê–î–ö–ê participateInGiveaway: participationNumber –ø—Ä–∏—Å–≤–æ–µ–Ω: ${participationNumber}`);
      
      await Giveaway.findByIdAndUpdate(giveawayId, {
        $inc: { participationCount: 1 }
      });
      
      const giveawayAfterUpdate = await Giveaway.findById(giveawayId);
      console.log(`üîç –û–¢–õ–ê–î–ö–ê participateInGiveaway: participationCount –ø–æ—Å–ª–µ –∏–Ω–∫—Ä–µ–º–µ–Ω—Ç–∞: ${giveawayAfterUpdate.participationCount}`);
      
      // –ü—Ä–æ–≤–µ—Ä–∏–º –∞–∫—Ç—É–∞–ª—å–Ω—ã–π –ø–æ–¥—Å—á–µ—Ç –∑–∞–ø–∏—Å–µ–π —É—á–∞—Å—Ç–∏—è
      const actualParticipationCount = await GiveawayParticipation.countDocuments({
        giveaway: giveawayId
      });
      console.log(`üîç –û–¢–õ–ê–î–ö–ê participateInGiveaway: –§–∞–∫—Ç–∏—á–µ—Å–∫–∏–π –ø–æ–¥—Å—á–µ—Ç –∑–∞–ø–∏—Å–µ–π —É—á–∞—Å—Ç–∏—è: ${actualParticipationCount}`);

      res.json({
        success: true,
        message: '–í—ã —É—Å–ø–µ—à–Ω–æ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã –≤ —Ä–æ–∑—ã–≥—Ä—ã—à–µ!',
        data: {
          participationNumber,
          depositAmount: validDeposit.amount
        }
      });

    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ —É—á–∞—Å—Ç–∏—è –≤ —Ä–æ–∑—ã–≥—Ä—ã—à–µ:', error);
      res.status(500).json({
        success: false,
        message: '–û—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞'
      });
    }
  }

  /**
   * –ü–æ–ª—É—á–∏—Ç—å –∏—Å—Ç–æ—Ä–∏—é —É—á–∞—Å—Ç–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
   */
  async getUserParticipationHistory(req, res) {
    try {
      const userId = req.user.id;
      const { page = 1, limit = 10 } = req.query;

      const skip = (page - 1) * limit;

      const participations = await GiveawayParticipation.find({
        user: userId
      })
      .populate({
        path: 'giveaway',
        populate: {
          path: 'prize'
        }
      })
      .sort({ createdAt: -1 })
      .skip(skip)
      .limit(parseInt(limit));

      const total = await GiveawayParticipation.countDocuments({
        user: userId
      });

      res.json({
        success: true,
        data: {
          participations,
          pagination: {
            page: parseInt(page),
            limit: parseInt(limit),
            total,
            pages: Math.ceil(total / limit)
          }
        }
      });

    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∏—Å—Ç–æ—Ä–∏–∏ —É—á–∞—Å—Ç–∏—è:', error);
      res.status(500).json({
        success: false,
        message: '–û—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞'
      });
    }
  }

  /**
   * –ü—Ä–æ–≤–µ—Ä–∏—Ç—å —Å—Ç–∞—Ç—É—Å —É—á–∞—Å—Ç–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ —Ä–æ–∑—ã–≥—Ä—ã—à–µ
   */
  async checkUserParticipation(req, res) {
    try {
      const { giveawayId } = req.params;
      const userId = req.user.id;

      const giveaway = await Giveaway.findById(giveawayId);
      if (!giveaway) {
        return res.status(404).json({
          success: false,
          message: '–†–æ–∑—ã–≥—Ä—ã—à –Ω–µ –Ω–∞–π–¥–µ–Ω'
        });
      }

      const participation = await GiveawayParticipation.findOne({
        giveaway: giveawayId,
        user: userId
      });

      // –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–µ–ø–æ–∑–∏—Ç –¥–ª—è –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏ —É—á–∞—Å—Ç–∏—è –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Ç–∏–ø–∞ —Ä–æ–∑—ã–≥—Ä—ã—à–∞
      let validDeposit;
      const today = new Date();
      today.setHours(0, 0, 0, 0);
      const tomorrow = new Date(today);
      tomorrow.setDate(tomorrow.getDate() + 1);

      if (giveaway.type === 'daily') {
        // –î–ª—è –µ–∂–µ–¥–Ω–µ–≤–Ω–æ–≥–æ —Ä–æ–∑—ã–≥—Ä—ã—à–∞ –Ω—É–∂–µ–Ω –¥–µ–ø–æ–∑–∏—Ç —Å–µ–≥–æ–¥–Ω—è
        validDeposit = await Deposit.findOne({
          user: userId,
          status: 'paid',
          amount: { $gte: giveaway.minDepositAmount || 1 },
          createdAt: {
            $gte: today,
            $lt: tomorrow
          }
        });
      } else if (giveaway.type === 'weekly') {
        // –î–ª—è –Ω–µ–¥–µ–ª—å–Ω–æ–≥–æ —Ä–æ–∑—ã–≥—Ä—ã—à–∞ –Ω—É–∂–µ–Ω –¥–µ–ø–æ–∑–∏—Ç –∑–∞ —Ç–µ–∫—É—â—É—é –Ω–µ–¥–µ–ª—é
        const startOfWeek = new Date(today);
        startOfWeek.setDate(today.getDate() - today.getDay());
        
        validDeposit = await Deposit.findOne({
          user: userId,
          status: 'paid',
          amount: { $gte: giveaway.minDepositAmount || 1 },
          createdAt: {
            $gte: startOfWeek
          }
        });
      } else {
        // –î–ª—è –∫–∞—Å—Ç–æ–º–Ω—ã—Ö —Ä–æ–∑—ã–≥—Ä—ã—à–µ–π –ø—Ä–æ–≤–µ—Ä—è–µ–º –¥–µ–ø–æ–∑–∏—Ç—ã —Å –∫–∞–ª–µ–Ω–¥–∞—Ä–Ω–æ–≥–æ –¥–Ω—è –Ω–∞—á–∞–ª–∞ –¥–æ –∫–∞–ª–µ–Ω–¥–∞—Ä–Ω–æ–≥–æ –¥–Ω—è –∫–æ–Ω—Ü–∞
        const startDay = new Date(giveaway.startDate);
        startDay.setHours(0, 0, 0, 0);
        
        const endDay = new Date(giveaway.endDate);
        endDay.setHours(23, 59, 59, 999);
        
        // –í—Ä–µ–º–µ–Ω–Ω–æ–µ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–ª—è –¥–µ–±–∞–≥–∞
        console.log('üéØ DEBUG Custom giveaway deposit check:');
        console.log('- Giveaway:', giveaway.title, giveaway.type);
        console.log('- User ID:', userId);
        console.log('- Min deposit amount:', giveaway.minDepositAmount || 1);
        console.log('- Start day:', startDay);
        console.log('- End day:', endDay);
        
        validDeposit = await Deposit.findOne({
          user: userId,
          status: 'paid',
          amount: { $gte: giveaway.minDepositAmount || 1 },
          createdAt: {
            $gte: startDay,
            $lte: endDay
          }
        });
        
        console.log('- Found valid deposit:', validDeposit ? 'YES' : 'NO');
        if (validDeposit) {
          console.log('- Deposit amount:', validDeposit.amount);
          console.log('- Deposit date:', validDeposit.createdAt);
        }
        
        // –ü–æ–∫–∞–∑–∞—Ç—å –≤—Å–µ –¥–µ–ø–æ–∑–∏—Ç—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–ª—è —Å—Ä–∞–≤–Ω–µ–Ω–∏—è
        const allUserDeposits = await Deposit.find({
          user: userId,
          status: 'paid'
        }).sort({ createdAt: -1 }).limit(5);
        
        console.log('- Recent user deposits:');
        allUserDeposits.forEach(dep => {
          console.log(`  Amount: ${dep.amount}, Date: ${dep.createdAt}, Status: ${dep.status}`);
        });
      }

      res.json({
        success: true,
        data: {
          isParticipating: !!participation,
          hasTodayDeposit: !!validDeposit, // –ü–µ—Ä–µ–∏–º–µ–Ω—É–µ–º –¥–ª—è –æ–±—Ä–∞—Ç–Ω–æ–π —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏
          hasValidDeposit: !!validDeposit,
          participation: participation || null
        }
      });

    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ —É—á–∞—Å—Ç–∏—è:', error);
      res.status(500).json({
        success: false,
        message: '–û—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞'
      });
    }
  }
}

module.exports = new GiveawayController();