// bot/src/handlers/duel/group-duel.handler.js

const { Markup } = require('telegraf');
const { validateDuelParams, getGameConfig, getFormatConfig, formatDuelMessage, formatRoundResults } = require('./duel-utils');
const duelGameHandler = require('./duel-game.handler');
const apiService = require('../../services/api.service');

/**
 * –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≥—Ä—É–ø–ø–æ–≤—ã—Ö –¥—É—ç–ª–µ–π
 */
class GroupDuelHandler {
  
  /**
   * –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥ –¥—É—ç–ª–µ–π –≤ –≥—Ä—É–ø–ø–∞—Ö
   */
  handleDuelCommands(bot) {
    console.log('üîß –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –∫–æ–º–∞–Ω–¥—ã /duel –≤ –≥—Ä—É–ø–ø–∞—Ö...');
    
    // –£–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω–æ–µ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –≤—Å–µ—Ö –∫–æ–º–∞–Ω–¥ –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏
    bot.on('text', async (ctx, next) => {
      if (ctx.message.text && ctx.message.text.startsWith('/duel')) {
        console.log(`üîç –ö–æ–º–∞–Ω–¥–∞ /duel –ø–æ–ª—É—á–µ–Ω–∞: "${ctx.message.text}"`);
        console.log(`üë§ –û—Ç: ${ctx.from.username} (${ctx.from.id})`);
        console.log(`üí¨ –í —á–∞—Ç–µ: ${ctx.chat.id} (${ctx.chat.title || 'private'})`);
        console.log(`üìã –¢–∏–ø —á–∞—Ç–∞: ${ctx.chat.type}`);
      }
      await next();
    });
    
    // –ö–æ–º–∞–Ω–¥–∞ /duel
    bot.command('duel', async (ctx) => {
      console.log('üéØ –ù–û–í–´–ô –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ /duel —Å—Ä–∞–±–æ—Ç–∞–ª!');
      try {
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ —ç—Ç–æ –≥—Ä—É–ø–ø–æ–≤–æ–π —á–∞—Ç
        if (ctx.chat.type === 'private') {
          await ctx.reply(
            'ü§ñ –í –ª–∏—á–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏—è—Ö –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ inline —Ä–µ–∂–∏–º:\n\n' +
            '`@greenlight_bot duel @username —Å—É–º–º–∞ –∏–≥—Ä–∞ —Ñ–æ—Ä–º–∞—Ç`\n\n' +
            '–ü—Ä–∏–º–µ—Ä: `@greenlight_bot duel @player 100 üé≤ bo3`',
            { parse_mode: 'Markdown' }
          );
          return;
        }
        
        const args = ctx.message.text.split(' ').slice(1);
        const userId = ctx.from.id.toString();
        const username = ctx.from.username;
        const chatId = ctx.chat.id.toString();
        const messageId = ctx.message.message_id;
        
        console.log(`üìù –ö–æ–º–∞–Ω–¥–∞ –¥—É—ç–ª–∏ –≤ –≥—Ä—É–ø–ø–µ: {
  args: [${args.join(', ')}],
  userId: '${userId}',
  username: '${username}',
  chatId: '${chatId}'
}`);
        
        if (args.length === 0) {
          await this.showDuelHelp(ctx);
          return;
        }
        
        // –ü–∞—Ä—Å–∏–º –∫–æ–º–∞–Ω–¥—É
        const duelParams = this.parseDuelCommand(args);
        
        if (!duelParams.isValid) {
          await ctx.reply(
            `‚ùå **–û—à–∏–±–∫–∞ –∫–æ–º–∞–Ω–¥—ã:**\n${duelParams.errors.join('\n')}\n\n` +
            this.getDuelHelpText(),
            { parse_mode: 'Markdown' }
          );
          return;
        }
        
        const { targetUsername, amount, gameType, format, isOpen } = duelParams;
        
        // –°–æ–∑–¥–∞–µ–º –¥—É—ç–ª—å —á–µ—Ä–µ–∑ API
        const createDuelData = {
          challengerId: userId,
          challengerUsername: username,
          opponentUsername: targetUsername,
          gameType,
          format,
          amount,
          chatId,
          chatType: 'group',
          messageId
        };
        
        console.log(`API: –°–æ–∑–¥–∞–µ–º –¥—É—ç–ª—å:`, createDuelData);
        
        const result = await apiService.createDuel(createDuelData);
        
        if (result.success) {
          const duel = result.data.duel;
          const sessionId = result.data.sessionId;
          
          // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏–µ–º
          await this.sendDuelInvitation(ctx, duel, sessionId, isOpen);
          
        } else {
          await ctx.reply(
            `‚ùå **–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –¥—É—ç–ª–∏:**\n${result.error}`,
            { parse_mode: 'Markdown' }
          );
        }
        
      } catch (error) {
        console.error('–û—à–∏–±–∫–∞ –∫–æ–º–∞–Ω–¥—ã –¥—É—ç–ª–∏:', error);
        await ctx.reply('‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∫–æ–º–∞–Ω–¥—ã –¥—É—ç–ª–∏');
      }
    });
  }
  
  /**
   * –ü–∞—Ä—Å–∏–Ω–≥ –∫–æ–º–∞–Ω–¥—ã –¥—É—ç–ª–∏
   */
  parseDuelCommand(args) {
    const errors = [];
    let targetUsername = null;
    let amount, gameType, format;
    let isOpen = false;
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ñ–æ—Ä–º–∞—Ç –∫–æ–º–∞–Ω–¥—ã
    if (args.length < 3) {
      errors.push('–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤');
      return { isValid: false, errors };
    }
    
    // –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ç–∏–ø –¥—É—ç–ª–∏ (–æ—Ç–∫—Ä—ã—Ç–∞—è –∏–ª–∏ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–Ω–∞—è)
    if (args[0].startsWith('@')) {
      // –ù–∞–ø—Ä–∞–≤–ª–µ–Ω–Ω–∞—è –¥—É—ç–ª—å: /duel @username amount game format
      if (args.length !== 4) {
        errors.push('–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ: /duel @username —Å—É–º–º–∞ –∏–≥—Ä–∞ —Ñ–æ—Ä–º–∞—Ç');
        return { isValid: false, errors };
      }
      
      targetUsername = args[0].replace('@', '');
      amount = args[1];
      gameType = args[2];
      format = args[3];
      isOpen = false;
    } else {
      // –û—Ç–∫—Ä—ã—Ç–∞—è –¥—É—ç–ª—å: /duel amount game format
      if (args.length !== 3) {
        errors.push('–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ: /duel —Å—É–º–º–∞ –∏–≥—Ä–∞ —Ñ–æ—Ä–º–∞—Ç');
        return { isValid: false, errors };
      }
      
      amount = args[0];
      gameType = args[1];
      format = args[2];
      isOpen = true;
    }
    
    // –í–∞–ª–∏–¥–∏—Ä—É–µ–º –ø–∞—Ä–∞–º–µ—Ç—Ä—ã
    const validation = validateDuelParams(targetUsername || 'dummy', amount, gameType, format);
    
    if (!validation.isValid) {
      return { isValid: false, errors: validation.errors };
    }
    
    return {
      isValid: true,
      targetUsername: isOpen ? null : validation.params.targetUsername,
      amount: validation.params.amount,
      gameType: validation.params.gameType,
      format: validation.params.format,
      isOpen
    };
  }
  
  /**
   * –û—Ç–ø—Ä–∞–≤–∫–∞ –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏—è –Ω–∞ –¥—É—ç–ª—å
   */
  async sendDuelInvitation(ctx, duel, sessionId, isOpen) {
    try {
      const gameConfig = getGameConfig(duel.gameType);
      const formatConfig = getFormatConfig(duel.format);
      
      const messageText = `${gameConfig.emoji} **–í–´–ó–û–í –ù–ê –î–£–≠–õ–¨** ${gameConfig.emoji}\n\n` +
                         `üë§ –í—ã–∑—ã–≤–∞–µ—Ç: @${duel.challengerUsername}\n` +
                         `${isOpen ? 'üåç –û—Ç–∫—Ä—ã—Ç—ã–π –≤—ã–∑–æ–≤' : `üéØ –ü—Ä–æ—Ç–∏–≤: @${duel.opponentUsername}`}\n\n` +
                         `üéÆ –ò–≥—Ä–∞: ${gameConfig.name}\n` +
                         `üí∞ –°—Ç–∞–≤–∫–∞: ${duel.amount} USDT –∫–∞–∂–¥—ã–π\n` +
                         `üèÜ –§–æ—Ä–º–∞—Ç: ${formatConfig.name} (${formatConfig.description})\n` +
                         `üíé –û–±—â–∏–π –±–∞–Ω–∫: ${duel.totalAmount} USDT\n` +
                         `üéØ –í—ã–∏–≥—Ä—ã—à: ${duel.winAmount} USDT\n\n` +
                         `‚è± –í—Ä–µ–º—è –Ω–∞ –æ—Ç–≤–µ—Ç: 5 –º–∏–Ω—É—Ç`;
      
      const keyboard = Markup.inlineKeyboard([
        [Markup.button.callback('‚úÖ –ü—Ä–∏–Ω—è—Ç—å –≤—ã–∑–æ–≤', `accept_group_duel_${sessionId}`)],
        [
          Markup.button.callback('üìã –ü—Ä–∞–≤–∏–ª–∞ –∏–≥—Ä—ã', `group_rules_${duel.gameType}`),
          Markup.button.callback('‚ùå –û—Ç–º–µ–Ω–∏—Ç—å', `cancel_duel_${sessionId}`)
        ]
      ]);
      
      console.log(`üì§ –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏–µ –Ω–∞ –¥—É—ç–ª—å –≤ –≥—Ä—É–ø–ø—É...`);
      
      const sentMessage = await ctx.reply(messageText, {
        parse_mode: 'Markdown',
        ...keyboard
      });
      
      console.log(`‚úÖ –ü—Ä–∏–≥–ª–∞—à–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ: {
  messageId: ${sentMessage.message_id},
  sessionId: '${sessionId}',
  isOpen: ${isOpen}
}`);
      
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏—è:', error);
    }
  }
  
  /**
   * –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–Ω–æ–ø–æ–∫ –≥—Ä—É–ø–ø–æ–≤—ã—Ö –¥—É—ç–ª–µ–π
   */
  handleGroupCallbacks(bot) {
    // –ü—Ä–∏–Ω—è—Ç–∏–µ –≥—Ä—É–ø–ø–æ–≤–æ–≥–æ –≤—ã–∑–æ–≤–∞
    bot.action(/^accept_group_duel_(.+)$/, async (ctx) => {
      try {
        const sessionId = ctx.match[1];
        const userId = ctx.from.id.toString();
        const username = ctx.from.username;
        
        console.log(`üéØ –ü—Ä–∏–Ω—è—Ç–∏–µ –≥—Ä—É–ø–ø–æ–≤–æ–≥–æ –≤—ã–∑–æ–≤–∞: {
  sessionId: '${sessionId}',
  userId: '${userId}',
  username: '${username}'
}`);
        
        const result = await apiService.acceptDuel(sessionId, userId, ctx.from);
        
        if (result.success) {
          const duel = result.data.duel;
          
          await ctx.answerCbQuery('‚úÖ –î—É—ç–ª—å –ø—Ä–∏–Ω—è—Ç–∞! –ù–∞—á–∏–Ω–∞–µ–º –∏–≥—Ä—É...');
          
          // –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –Ω–∞ –∏–≥—Ä–æ–≤–æ–µ
          await this.updateToGameMessage(ctx, duel, sessionId);
          
        } else {
          await ctx.answerCbQuery(`‚ùå ${result.error}`);
        }
        
      } catch (error) {
        console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏–Ω—è—Ç–∏—è –≥—Ä—É–ø–ø–æ–≤–æ–≥–æ –≤—ã–∑–æ–≤–∞:', error);
        await ctx.answerCbQuery('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏–Ω—è—Ç–∏—è –≤—ã–∑–æ–≤–∞');
      }
    });
    
    // –û—Ç–º–µ–Ω–∞ –¥—É—ç–ª–∏
    bot.action(/^cancel_duel_(.+)$/, async (ctx) => {
      try {
        const sessionId = ctx.match[1];
        const userId = ctx.from.id.toString();
        
        // TODO: –†–µ–∞–ª–∏–∑–æ–≤–∞—Ç—å –æ—Ç–º–µ–Ω—É –¥—É—ç–ª–∏ –≤ API
        
        await ctx.answerCbQuery('‚ùå –î—É—ç–ª—å –æ—Ç–º–µ–Ω–µ–Ω–∞');
        
        await ctx.editMessageText(
          '‚ùå **–î—É—ç–ª—å –æ—Ç–º–µ–Ω–µ–Ω–∞**\n\n–ò–Ω–∏—Ü–∏–∞—Ç–æ—Ä –æ—Ç–º–µ–Ω–∏–ª –≤—ã–∑–æ–≤',
          { parse_mode: 'Markdown' }
        );
        
      } catch (error) {
        console.error('–û—à–∏–±–∫–∞ –æ—Ç–º–µ–Ω—ã –¥—É—ç–ª–∏:', error);
        await ctx.answerCbQuery('‚ùå –û—à–∏–±–∫–∞ –æ—Ç–º–µ–Ω—ã');
      }
    });
    
    // –ü—Ä–∞–≤–∏–ª–∞ –∏–≥—Ä—ã
    bot.action(/^group_rules_(.+)$/, async (ctx) => {
      try {
        const gameType = ctx.match[1];
        const gameConfig = getGameConfig(gameType);
        
        await ctx.answerCbQuery(
          `${gameConfig.emoji} ${gameConfig.name}: ${gameConfig.rules}`,
          { show_alert: true }
        );
      } catch (error) {
        console.error('–û—à–∏–±–∫–∞ –ø–æ–∫–∞–∑–∞ –ø—Ä–∞–≤–∏–ª:', error);
        await ctx.answerCbQuery('‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –ø—Ä–∞–≤–∏–ª');
      }
    });
  }
  
  /**
   * –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è –Ω–∞ –∏–≥—Ä–æ–≤–æ–µ (–ø–æ—Å–ª–µ –ø—Ä–∏–Ω—è—Ç–∏—è –≤—ã–∑–æ–≤–∞)
   */
  async updateToGameMessage(ctx, duel, sessionId) {
    try {
      const gameConfig = getGameConfig(duel.gameType);
      const formatConfig = getFormatConfig(duel.format);
      
      // –û–ø—Ä–µ–¥–µ–ª—è–µ–º –∫—Ç–æ –¥–æ–ª–∂–µ–Ω —Ö–æ–¥–∏—Ç—å –ø–µ—Ä–≤—ã–º
      const currentPlayer = duelGameHandler.getCurrentPlayer(duel);
      
      const messageText = `${gameConfig.emoji} **–î–£–≠–õ–¨ –ù–ê–ß–ò–ù–ê–ï–¢–°–Ø** ${gameConfig.emoji}\n\n` +
                         `‚öîÔ∏è @${duel.challengerUsername} VS @${duel.opponentUsername}\n\n` +
                         `üéÆ –ò–≥—Ä–∞: ${gameConfig.name}\n` +
                         `üèÜ –§–æ—Ä–º–∞—Ç: ${formatConfig.name} (${formatConfig.description})\n` +
                         `üí∞ –ë–∞–Ω–∫: ${duel.totalAmount} USDT\n` +
                         `üìä –°—á—ë—Ç: ${duel.challengerScore}:${duel.opponentScore}\n\n` +
                         `üéØ **–•–æ–¥: @${currentPlayer.currentPlayerUsername}**\n\n` +
                         `ü§ñ @Greenlightgames_bot`;
      
      const keyboard = Markup.inlineKeyboard([
        [Markup.button.callback(`${gameConfig.emoji} –•–æ–¥ @${currentPlayer.currentPlayerUsername}`, `group_move_${sessionId}`)],
        [Markup.button.callback('üìä –°—Ç–∞—Ç—É—Å –¥—É—ç–ª–∏', `group_status_${sessionId}`)]
      ]);
      
      await ctx.editMessageText(messageText, {
        parse_mode: 'Markdown',
        ...keyboard
      });
      
      console.log(`‚úÖ –°–æ–æ–±—â–µ–Ω–∏–µ –æ–±–Ω–æ–≤–ª–µ–Ω–æ –Ω–∞ –∏–≥—Ä–æ–≤–æ–µ –¥–ª—è –¥—É—ç–ª–∏ ${sessionId}`);
      
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –Ω–∞ –∏–≥—Ä–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ:', error);
    }
  }
  
  /**
   * –û–±—Ä–∞–±–æ—Ç–∫–∞ –∏–≥—Ä–æ–≤—ã—Ö –¥–µ–π—Å—Ç–≤–∏–π –≤ –≥—Ä—É–ø–ø–∞—Ö
   */
  handleGroupGameActions(bot) {
    // –í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ —Ö–æ–¥–∞ –≤ –≥—Ä—É–ø–ø–µ
    bot.action(/^group_move_(.+)$/, async (ctx) => {
      try {
        const sessionId = ctx.match[1];
        const userId = ctx.from.id.toString();
        const username = ctx.from.username;
        
        // –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –¥—É—ç–ª–∏ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –æ—á–µ—Ä–µ–¥–Ω–æ—Å—Ç–∏
        const duelData = await apiService.getDuelData(sessionId, userId, ctx.from);
        
        if (!duelData.success) {
          await ctx.answerCbQuery('‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö –¥—É—ç–ª–∏');
          return;
        }
        
        const duel = duelData.data;
        
        // DEBUG: –õ–æ–≥–∏—Ä—É–µ–º –ø–æ–ª—É—á–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –¥—É—ç–ª–∏ –≤ –≥—Ä—É–ø–ø–µ
        console.log('üîç DEBUG GROUP: –ü–æ–ª—É—á–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –¥—É—ç–ª–∏ –≤ –≥—Ä—É–ø–ø–µ:', {
          sessionId: duel.sessionId,
          gameType: duel.gameType,
          format: duel.format,
          status: duel.status,
          challengerId: duel.challengerId,
          opponentId: duel.opponentId,
          duelKeys: Object.keys(duel)
        });
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç–∞—Ç—É—Å –¥—É—ç–ª–∏ - –∑–∞–≤–µ—Ä—à–µ–Ω–Ω—ã–µ –¥—É—ç–ª–∏ –Ω–µ–ª—å–∑—è –ø—Ä–æ–¥–æ–ª–∂–∞—Ç—å
        if (duel.status === 'completed') {
          await ctx.answerCbQuery('üèÜ –î—É—ç–ª—å —É–∂–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∞!');
          return;
        }
        
        // –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ - —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É—á–∞—Å—Ç–Ω–∏–∫–æ–º –¥—É—ç–ª–∏
        if (duel.challengerId !== userId && duel.opponentId !== userId) {
          await ctx.answerCbQuery('‚ùå –í—ã –Ω–µ —É—á–∞—Å—Ç–≤—É–µ—Ç–µ –≤ —ç—Ç–æ–π –¥—É—ç–ª–∏!');
          return;
        }
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º –º–æ–∂–µ—Ç –ª–∏ –∏–≥—Ä–æ–∫ —Å–¥–µ–ª–∞—Ç—å —Ö–æ–¥
        if (!duelGameHandler.canPlayerMove(duel, userId)) {
          await ctx.answerCbQuery('‚ùå –°–µ–π—á–∞—Å –Ω–µ –≤–∞—à —Ö–æ–¥!');
          return;
        }
        
        // –í—ã–ø–æ–ª–Ω—è–µ–º —Ö–æ–¥
        const moveResult = await duelGameHandler.makeMove(ctx, sessionId, userId, username);
        
        if (!moveResult) return;
        
        const { duel: updatedDuel, gameResult, gameConfig } = moveResult;
        
        // –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ –≥—Ä—É–ø–ø–µ
        await this.updateGroupGameMessage(ctx, updatedDuel, sessionId, gameResult, username);
        
      } catch (error) {
        console.error('–û—à–∏–±–∫–∞ –≥—Ä—É–ø–ø–æ–≤–æ–≥–æ —Ö–æ–¥–∞:', error);
        await ctx.answerCbQuery('‚ùå –û—à–∏–±–∫–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —Ö–æ–¥–∞');
      }
    });
    
    // –°—Ç–∞—Ç—É—Å –¥—É—ç–ª–∏ –≤ –≥—Ä—É–ø–ø–µ
    bot.action(/^group_status_(.+)$/, async (ctx) => {
      try {
        const sessionId = ctx.match[1];
        const userId = ctx.from.id.toString();
        
        const duelData = await apiService.getDuelData(sessionId, userId, ctx.from);
        
        if (duelData.success) {
          const duel = duelData.data;
          const gameConfig = getGameConfig(duel.gameType);
          const roundsText = formatRoundResults(duel.rounds, duel.challengerUsername, duel.opponentUsername, duel);
          
          const statusMessage = `üìä **–°—Ç–∞—Ç—É—Å –¥—É—ç–ª–∏ ${duel.sessionId}**\n\n` +
                               formatDuelMessage(duel) + '\n\n' +
                               `üìä **–¢–µ–∫—É—â–∏–π —Å—á—ë—Ç:** ${duel.challengerScore}:${duel.opponentScore}\n` +
                               `üéØ **–°—Ç–∞—Ç—É—Å:** ${this.getStatusText(duel.status)}\n\n` +
                               roundsText;
          
          await ctx.answerCbQuery();
          await ctx.reply(statusMessage, { parse_mode: 'Markdown' });
        } else {
          await ctx.answerCbQuery('‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞');
        }
        
      } catch (error) {
        console.error('–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞:', error);
        await ctx.answerCbQuery('‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞');
      }
    });
  }
  
  /**
   * –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∏–≥—Ä–æ–≤–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è –≤ –≥—Ä—É–ø–ø–µ
   */
  async updateGroupGameMessage(ctx, duel, sessionId, lastResult, lastPlayerUsername) {
    try {
      const gameConfig = getGameConfig(duel.gameType);
      const formatConfig = getFormatConfig(duel.format);
      
      if (duel.status === 'completed') {
        // –î—É—ç–ª—å –∑–∞–≤–µ—Ä—à–µ–Ω–∞
        const winnerUsername = duel.winnerId === duel.challengerId ? duel.challengerUsername : duel.opponentUsername;
        const roundsText = formatRoundResults(duel.rounds, duel.challengerUsername, duel.opponentUsername, duel);
        
        const messageText = `üèÜ **–î–£–≠–õ–¨ –ó–ê–í–ï–†–®–ï–ù–ê** üèÜ\n\n` +
                           `‚öîÔ∏è @${duel.challengerUsername} VS @${duel.opponentUsername}\n\n` +
                           `${gameConfig.emoji} –ò–≥—Ä–∞: ${gameConfig.name}\n` +
                           `üìä –§–∏–Ω–∞–ª—å–Ω—ã–π —Å—á—ë—Ç: ${duel.challengerScore}:${duel.opponentScore}\n` +
                           `üëë –ü–æ–±–µ–¥–∏—Ç–µ–ª—å: @${winnerUsername}\n` +
                           `üí∞ –í—ã–∏–≥—Ä—ã—à: ${duel.winAmount} USDT\n\n` +
                           `üéØ –ü–æ—Å–ª–µ–¥–Ω–∏–π —Ö–æ–¥: @${lastPlayerUsername} [${lastResult}]\n\n` +
                           roundsText + '\n' +
                           `üìã ID –¥—É—ç–ª–∏: \`${duel.sessionId}\``;
        
        await ctx.editMessageText(messageText, { parse_mode: 'Markdown' });
        
      } else {
        // –î—É—ç–ª—å –ø—Ä–æ–¥–æ–ª–∂–∞–µ—Ç—Å—è
        const currentPlayer = duelGameHandler.getCurrentPlayer(duel);
        const roundsText = formatRoundResults(duel.rounds, duel.challengerUsername, duel.opponentUsername, duel);
        
        const messageText = `${gameConfig.emoji} **–î–£–≠–õ–¨ –í –ü–†–û–¶–ï–°–°–ï** ${gameConfig.emoji}\n\n` +
                           `‚öîÔ∏è @${duel.challengerUsername} VS @${duel.opponentUsername}\n\n` +
                           `üéÆ –ò–≥—Ä–∞: ${gameConfig.name}\n` +
                           `üèÜ –§–æ—Ä–º–∞—Ç: ${formatConfig.name} (${formatConfig.description})\n` +
                           `üìä –°—á—ë—Ç: ${duel.challengerScore}:${duel.opponentScore}\n` +
                           `üéØ –ü–æ—Å–ª–µ–¥–Ω–∏–π —Ö–æ–¥: @${lastPlayerUsername} [${lastResult}]\n\n` +
                           (roundsText ? roundsText + '\n' : '') +
                           `üéØ **–•–æ–¥: @${currentPlayer.currentPlayerUsername}**\n\n` +
                           `ü§ñ @Greenlightgames_bot`;
        
        const keyboard = Markup.inlineKeyboard([
          [Markup.button.callback(`${gameConfig.emoji} –•–æ–¥ @${currentPlayer.currentPlayerUsername}`, `group_move_${sessionId}`)],
          [Markup.button.callback('üìä –°—Ç–∞—Ç—É—Å –¥—É—ç–ª–∏', `group_status_${sessionId}`)]
        ]);
        
        await ctx.editMessageText(messageText, {
          parse_mode: 'Markdown',
          ...keyboard
        });
      }
      
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –∏–≥—Ä–æ–≤–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è:', error);
    }
  }
  
  /**
   * –ü–æ–∫–∞–∑ —Å–ø—Ä–∞–≤–∫–∏ –ø–æ –¥—É—ç–ª—è–º
   */
  async showDuelHelp(ctx) {
    const helpText = this.getDuelHelpText();
    await ctx.reply(helpText, { parse_mode: 'Markdown' });
  }
  
  /**
   * –ü–æ–ª—É—á–µ–Ω–∏–µ —Ç–µ–∫—Å—Ç–∞ —Å–ø—Ä–∞–≤–∫–∏
   */
  getDuelHelpText() {
    return `üéÆ **–°–ü–†–ê–í–ö–ê –ü–û –î–£–≠–õ–Ø–ú**\n\n` +
           `**–û—Ç–∫—Ä—ã—Ç—ã–µ –¥—É—ç–ª–∏:**\n` +
           `\`/duel —Å—É–º–º–∞ –∏–≥—Ä–∞ —Ñ–æ—Ä–º–∞—Ç\`\n` +
           `–ü—Ä–∏–º–µ—Ä: \`/duel 50 üé≤ bo3\`\n\n` +
           `**–ù–∞–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã–µ –¥—É—ç–ª–∏:**\n` +
           `\`/duel @username —Å—É–º–º–∞ –∏–≥—Ä–∞ —Ñ–æ—Ä–º–∞—Ç\`\n` +
           `–ü—Ä–∏–º–µ—Ä: \`/duel @player 100 üéØ bo1\`\n\n` +
           `**–î–æ—Å—Ç—É–ø–Ω—ã–µ –∏–≥—Ä—ã:**\n` +
           `üé≤ –ö–æ—Å—Ç–∏ ‚Ä¢ üéØ –î–∞—Ä—Ç—Å ‚Ä¢ ‚öΩ –§—É—Ç–±–æ–ª\n` +
           `üèÄ –ë–∞—Å–∫–µ—Ç–±–æ–ª ‚Ä¢ üé≥ –ë–æ—É–ª–∏–Ω–≥ ‚Ä¢ üé∞ –°–ª–æ—Ç—ã\n\n` +
           `**–§–æ—Ä–º–∞—Ç—ã:**\n` +
           `bo1 - –¥–æ 1 –ø–æ–±–µ–¥—ã\n` +
           `bo3 - –¥–æ 2 –ø–æ–±–µ–¥\n` +
           `bo5 - –¥–æ 3 –ø–æ–±–µ–¥\n` +
           `bo7 - –¥–æ 4 –ø–æ–±–µ–¥\n\n` +
           `**–°—Ç–∞–≤–∫–∏:** –æ—Ç 1 –¥–æ 1000 USDT`;
  }
  
  /**
   * –ü–æ–ª—É—á–µ–Ω–∏–µ —Ç–µ–∫—Å—Ç–∞ —Å—Ç–∞—Ç—É—Å–∞
   */
  getStatusText(status) {
    const statuses = {
      'pending': '‚è≥ –û–∂–∏–¥–∞–Ω–∏–µ –ø—Ä–∏–Ω—è—Ç–∏—è',
      'accepted': '‚úÖ –ü—Ä–∏–Ω—è—Ç–∞',
      'active': 'üéÆ –ò–¥–µ—Ç –∏–≥—Ä–∞',
      'completed': 'üèÜ –ó–∞–≤–µ—Ä—à–µ–Ω–∞',
      'cancelled': '‚ùå –û—Ç–º–µ–Ω–µ–Ω–∞'
    };
    
    return statuses[status] || status;
  }
}

module.exports = new GroupDuelHandler();