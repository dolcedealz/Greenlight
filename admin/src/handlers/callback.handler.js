// admin/src/handlers/callback.handler.js
const { Markup } = require('telegraf');

// Import command modules
const statsCommands = require('../commands/stats.command');
const usersCommands = require('../commands/users.command');
const eventsCommands = require('../commands/events.command');
const transactionsCommands = require('../commands/transactions.command');
const promoCommands = require('../commands/promo.command');

/**
 * –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ—Ç –≤—Å–µ callback handlers –¥–ª—è –∞–¥–º–∏–Ω-–±–æ—Ç–∞
 * @param {Object} bot - –≠–∫–∑–µ–º–ø–ª—è—Ä Telegraf
 */
function registerCallbackHandlers(bot) {
  console.log('üîÑ –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è callback handlers...');

  // === –ì–õ–ê–í–ù–û–ï –ú–ï–ù–Æ ===

  // –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
  bot.action('main_menu', async (ctx) => {
    console.log('ADMIN: Callback main_menu');
    await ctx.answerCbQuery();
    
    // –û—á–∏—â–∞–µ–º –ª—é–±—ã–µ –∞–∫—Ç–∏–≤–Ω—ã–µ —Å–µ—Å—Å–∏–∏
    if (ctx.session) {
      delete ctx.session.creatingEvent;
      delete ctx.session.finishingEvent;
      delete ctx.session.searchingUser;
      delete ctx.session.settingCoefficient;
      delete ctx.session.searchingUserCoeff;
      delete ctx.session.adjustingBalance;
      delete ctx.session.rejectingWithdrawal;
      delete ctx.session.creatingPromo;
      delete ctx.session.creatingNotification;
      delete ctx.session.assigningPartner;
    }
    
    const message = 'üè† *–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞*\n\n–í—ã–±–µ—Ä–∏—Ç–µ —Ä–∞–∑–¥–µ–ª –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è:';
    
    try {
      await ctx.editMessageText(message, {
        parse_mode: 'Markdown',
        ...Markup.inlineKeyboard([
          [
            Markup.button.callback('üí∞ –§–∏–Ω–∞–Ω—Å—ã', 'finances_menu'),
            Markup.button.callback('üë• –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏', 'users_menu')
          ],
          [
            Markup.button.callback('üí≥ –¢—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏', 'transactions_menu'),
            Markup.button.callback('üéØ –°–æ–±—ã—Ç–∏—è', 'events_menu')
          ],
          [
            Markup.button.callback('üéÅ –ü—Ä–æ–º–æ–∫–æ–¥—ã', 'promo_menu'),
            Markup.button.callback('üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞', 'stats_menu')
          ]
        ])
      });
    } catch (error) {
      console.error('ADMIN: –û—à–∏–±–∫–∞ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –≥–ª–∞–≤–Ω–æ–≥–æ –º–µ–Ω—é:', error);
      await ctx.reply(message, {
        parse_mode: 'Markdown',
        ...Markup.inlineKeyboard([
          [
            Markup.button.callback('üí∞ –§–∏–Ω–∞–Ω—Å—ã', 'finances_menu'),
            Markup.button.callback('üë• –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏', 'users_menu')
          ],
          [
            Markup.button.callback('üí≥ –¢—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏', 'transactions_menu'),
            Markup.button.callback('üéØ –°–æ–±—ã—Ç–∏—è', 'events_menu')
          ],
          [
            Markup.button.callback('üéÅ –ü—Ä–æ–º–æ–∫–æ–¥—ã', 'promo_menu'),
            Markup.button.callback('üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞', 'stats_menu')
          ]
        ])
      });
    }
  });

  // === –°–¢–ê–¢–ò–°–¢–ò–ö–ê ===

  bot.action('finances_stats', async (ctx) => {
    console.log('ADMIN: Callback finances_stats');
    await ctx.answerCbQuery();
    await statsCommands.showFinanceStats(ctx);
  });

  bot.action('users_stats', async (ctx) => {
    console.log('ADMIN: Callback users_stats');
    await ctx.answerCbQuery();
    await usersCommands.showUsersStats(ctx);
  });

  bot.action('finances_games', async (ctx) => {
    console.log('ADMIN: Callback finances_games');
    await ctx.answerCbQuery();
    await statsCommands.showGameStats(ctx);
  });

  bot.action('stats_commission', async (ctx) => {
    console.log('ADMIN: Callback stats_commission');
    await ctx.answerCbQuery();
    await statsCommands.showCommissionStats(ctx);
  });

  // === –ü–û–õ–¨–ó–û–í–ê–¢–ï–õ–ò ===

  bot.action('users_menu', async (ctx) => {
    console.log('ADMIN: Callback users_menu');
    await ctx.answerCbQuery();
    await usersCommands.showUsersMenu(ctx);
  });

  bot.action('users_list', async (ctx) => {
    console.log('ADMIN: Callback users_list');
    await ctx.answerCbQuery();
    await usersCommands.showUsersList(ctx, 1);
  });

  // –ü–∞–≥–∏–Ω–∞—Ü–∏—è —Å–ø–∏—Å–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
  bot.action(/users_list_(\d+)/, async (ctx) => {
    const page = parseInt(ctx.match[1]);
    console.log(`ADMIN: Callback users_list_${page}`);
    await ctx.answerCbQuery();
    await usersCommands.showUsersList(ctx, page);
  });

  bot.action('users_search', async (ctx) => {
    console.log('ADMIN: Callback users_search');
    await ctx.answerCbQuery();
    await usersCommands.startUserSearch(ctx);
  });

  bot.action('users_search_cancel', async (ctx) => {
    console.log('ADMIN: Callback users_search_cancel');
    await ctx.answerCbQuery();
    if (ctx.session) {
      delete ctx.session.searchingUser;
    }
    
    await ctx.editMessageText(
      '‚ùå –ü–æ–∏—Å–∫ –æ—Ç–º–µ–Ω–µ–Ω',
      {
        ...Markup.inlineKeyboard([
          [Markup.button.callback('üë• –ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º', 'users_menu')]
        ])
      }
    );
  });

  // –î–µ—Ç–∞–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
  bot.action(/user_details_(.+)/, async (ctx) => {
    const userId = ctx.match[1];
    console.log(`ADMIN: Callback user_details_${userId}`);
    await ctx.answerCbQuery();
    await usersCommands.showUserDetails(ctx, userId);
  });

  // –ë–ª–æ–∫–∏—Ä–æ–≤–∫–∞/—Ä–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
  bot.action(/user_toggle_block_(.+)/, async (ctx) => {
    const userId = ctx.match[1];
    console.log(`ADMIN: Callback user_toggle_block_${userId}`);
    await usersCommands.toggleUserBlock(ctx, userId);
  });

  // –ò–∑–º–µ–Ω–µ–Ω–∏–µ –±–∞–ª–∞–Ω—Å–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
  bot.action(/user_balance_(.+)/, async (ctx) => {
    const userId = ctx.match[1];
    console.log(`ADMIN: Callback user_balance_${userId}`);
    await ctx.answerCbQuery();
    await usersCommands.startBalanceAdjustment(ctx, userId);
  });

  // === –ü–ê–†–¢–ù–ï–†–´ ===

  bot.action('partners_menu', async (ctx) => {
    console.log('ADMIN: Callback partners_menu');
    await ctx.answerCbQuery();
    
    // –û—á–∏—â–∞–µ–º —Å–µ—Å—Å–∏—é –Ω–∞–∑–Ω–∞—á–µ–Ω–∏—è –ø–∞—Ä—Ç–Ω–µ—Ä–æ–≤
    if (ctx.session) {
      delete ctx.session.assigningPartner;
    }
    
    await usersCommands.showPartnersMenu(ctx);
  });

  bot.action('partners_list', async (ctx) => {
    console.log('ADMIN: Callback partners_list');
    await ctx.answerCbQuery();
    await usersCommands.showPartnersList(ctx, 1);
  });

  // –ü–∞–≥–∏–Ω–∞—Ü–∏—è —Å–ø–∏—Å–∫–∞ –ø–∞—Ä—Ç–Ω–µ—Ä–æ–≤
  bot.action(/partners_list_(\d+)/, async (ctx) => {
    const page = parseInt(ctx.match[1]);
    console.log(`ADMIN: Callback partners_list_${page}`);
    await ctx.answerCbQuery();
    await usersCommands.showPartnersList(ctx, page);
  });

  bot.action('partners_assign', async (ctx) => {
    console.log('ADMIN: Callback partners_assign');
    await ctx.answerCbQuery();
    await usersCommands.startPartnerAssignment(ctx);
  });

  bot.action('partners_stats', async (ctx) => {
    console.log('ADMIN: Callback partners_stats');
    await ctx.answerCbQuery();
    await usersCommands.showPartnersStats(ctx);
  });

  bot.action('partners_logs', async (ctx) => {
    console.log('ADMIN: Callback partners_logs');
    await ctx.answerCbQuery();
    await usersCommands.showPartnersLogs(ctx, 1);
  });

  // –ü–∞–≥–∏–Ω–∞—Ü–∏—è –ª–æ–≥–æ–≤ –ø–∞—Ä—Ç–Ω–µ—Ä–æ–≤
  bot.action(/partners_logs_(\d+)/, async (ctx) => {
    const page = parseInt(ctx.match[1]);
    console.log(`ADMIN: Callback partners_logs_${page}`);
    await ctx.answerCbQuery();
    await usersCommands.showPartnersLogs(ctx, page);
  });

  bot.action('partners_levels', async (ctx) => {
    console.log('ADMIN: Callback partners_levels');
    await ctx.answerCbQuery();
    await usersCommands.showPartnerLevels(ctx);
  });

  // –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ –ø–∞—Ä—Ç–Ω–µ—Ä—Å–∫–æ–≥–æ —É—Ä–æ–≤–Ω—è
  bot.action(/assign_(partner_bronze|partner_silver|partner_gold|none)/, async (ctx) => {
    const level = ctx.match[1];
    console.log(`ADMIN: Callback assign_${level}`);
    await usersCommands.handlePartnerLevelSelection(ctx, level);
  });

  // === –°–û–ë–´–¢–ò–Ø ===

  bot.action('events_menu', async (ctx) => {
    console.log('ADMIN: Callback events_menu');
    await ctx.answerCbQuery();
    await eventsCommands.showEventsMenu(ctx);
  });

  bot.action('events_list', async (ctx) => {
    console.log('ADMIN: Callback events_list');
    await ctx.answerCbQuery();
    await eventsCommands.showEventsList(ctx);
  });

  bot.action('events_create', async (ctx) => {
    console.log('ADMIN: Callback events_create');
    await ctx.answerCbQuery();
    await eventsCommands.startEventCreation(ctx);
  });

  bot.action('events_finish', async (ctx) => {
    console.log('ADMIN: Callback events_finish');
    await ctx.answerCbQuery();
    await eventsCommands.finishEvent(ctx);
  });

  bot.action('events_stats', async (ctx) => {
    console.log('ADMIN: Callback events_stats');
    await ctx.answerCbQuery();
    await eventsCommands.showEventsStats(ctx);
  });

  // –í—ã–±–æ—Ä –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ —Å–æ–±—ã—Ç–∏—è
  bot.action(/event_category_(.+)/, async (ctx) => {
    const category = ctx.match[1];
    console.log(`ADMIN: Callback event_category_${category}`);
    await eventsCommands.handleCategorySelection(ctx, category);
  });

  // –ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ —Å–æ–±—ã—Ç–∏—è —Å –≤—ã–±–æ—Ä–æ–º –∏—Å—Ö–æ–¥–∞
  bot.action(/finish_outcome_(.+)/, async (ctx) => {
    const outcomeId = ctx.match[1];
    console.log(`ADMIN: Callback finish_outcome_${outcomeId}`);
    await eventsCommands.completeEventFinishing(ctx, outcomeId);
  });

  // === –¢–†–ê–ù–ó–ê–ö–¶–ò–ò ===

  bot.action('transactions_menu', async (ctx) => {
    console.log('ADMIN: Callback transactions_menu');
    await ctx.answerCbQuery();
    
    const message = 'üí≥ *–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—è–º–∏*\n\n–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:';
    
    await ctx.editMessageText(message, {
      parse_mode: 'Markdown',
      ...Markup.inlineKeyboard([
        [
          Markup.button.callback('‚è≥ –û–∂–∏–¥–∞—é—â–∏–µ –æ–¥–æ–±—Ä–µ–Ω–∏—è', 'transactions_pending'),
          Markup.button.callback('üìã –ò—Å—Ç–æ—Ä–∏—è —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π', 'transactions_history')
        ],
        [
          Markup.button.callback('üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π', 'transactions_stats'),
          Markup.button.callback('üè¶ –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –¥–µ–ø–æ–∑–∏—Ç–∞—Ö', 'transactions_deposits')
        ],
        [
          Markup.button.callback('‚óÄÔ∏è –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é', 'main_menu')
        ]
      ])
    });
  });

  bot.action('transactions_pending', async (ctx) => {
    console.log('ADMIN: Callback transactions_pending');
    await ctx.answerCbQuery();
    await transactionsCommands.showPendingWithdrawals(ctx);
  });

  bot.action('transactions_history', async (ctx) => {
    console.log('ADMIN: Callback transactions_history');
    await ctx.answerCbQuery();
    await transactionsCommands.showTransactionsHistory(ctx, 1);
  });

  // –ü–∞–≥–∏–Ω–∞—Ü–∏—è –∏—Å—Ç–æ—Ä–∏–∏ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π
  bot.action(/transactions_history_(\d+)/, async (ctx) => {
    const page = parseInt(ctx.match[1]);
    console.log(`ADMIN: Callback transactions_history_${page}`);
    await ctx.answerCbQuery();
    await transactionsCommands.showTransactionsHistory(ctx, page);
  });

  bot.action('transactions_stats', async (ctx) => {
    console.log('ADMIN: Callback transactions_stats');
    await ctx.answerCbQuery();
    await transactionsCommands.showTransactionsStats(ctx);
  });

  bot.action('transactions_deposits', async (ctx) => {
    console.log('ADMIN: Callback transactions_deposits');
    await ctx.answerCbQuery();
    await transactionsCommands.showDepositsInfo(ctx);
  });

  // –û–¥–æ–±—Ä–µ–Ω–∏–µ –≤—ã–≤–æ–¥–∞
  bot.action(/approve_withdrawal_(.+)/, async (ctx) => {
    const withdrawalId = ctx.match[1];
    console.log(`ADMIN: Callback approve_withdrawal_${withdrawalId}`);
    await transactionsCommands.approveWithdrawal(ctx, withdrawalId);
  });

  // –û—Ç–∫–ª–æ–Ω–µ–Ω–∏–µ –≤—ã–≤–æ–¥–∞
  bot.action(/reject_withdrawal_(.+)/, async (ctx) => {
    const withdrawalId = ctx.match[1];
    console.log(`ADMIN: Callback reject_withdrawal_${withdrawalId}`);
    await ctx.answerCbQuery();
    await transactionsCommands.rejectWithdrawal(ctx, withdrawalId);
  });

  // === –ü–†–û–ú–û–ö–û–î–´ ===

  bot.action('promo_menu', async (ctx) => {
    console.log('ADMIN: Callback promo_menu');
    await ctx.answerCbQuery();
    await promoCommands.showPromoMenu(ctx);
  });

  bot.action('promo_create', async (ctx) => {
    console.log('ADMIN: Callback promo_create');
    await ctx.answerCbQuery();
    await promoCommands.startPromoCreation(ctx);
  });

  bot.action('promo_list', async (ctx) => {
    console.log('ADMIN: Callback promo_list');
    await ctx.answerCbQuery();
    await promoCommands.showPromoList(ctx, 1);
  });

  // –ü–∞–≥–∏–Ω–∞—Ü–∏—è —Å–ø–∏—Å–∫–∞ –ø—Ä–æ–º–æ–∫–æ–¥–æ–≤
  bot.action(/promo_list_(\d+)/, async (ctx) => {
    const page = parseInt(ctx.match[1]);
    console.log(`ADMIN: Callback promo_list_${page}`);
    await ctx.answerCbQuery();
    await promoCommands.showPromoList(ctx, page);
  });

  bot.action('promo_stats', async (ctx) => {
    console.log('ADMIN: Callback promo_stats');
    await ctx.answerCbQuery();
    await promoCommands.showPromoStats(ctx);
  });

  // –í—ã–±–æ—Ä —Ç–∏–ø–∞ –ø—Ä–æ–º–æ–∫–æ–¥–∞
  bot.action(/promo_type_(.+)/, async (ctx) => {
    const type = ctx.match[1];
    console.log(`ADMIN: Callback promo_type_${type}`);
    await promoCommands.handlePromoTypeSelection(ctx, type);
  });

  bot.action('promo_cancel', async (ctx) => {
    console.log('ADMIN: Callback promo_cancel');
    await ctx.answerCbQuery();
    
    if (ctx.session) {
      delete ctx.session.creatingPromo;
    }
    
    await ctx.editMessageText(
      '‚ùå –°–æ–∑–¥–∞–Ω–∏–µ –ø—Ä–æ–º–æ–∫–æ–¥–∞ –æ—Ç–º–µ–Ω–µ–Ω–æ',
      {
        ...Markup.inlineKeyboard([
          [Markup.button.callback('üéÅ –ö –ø—Ä–æ–º–æ–∫–æ–¥–∞–º', 'promo_menu')]
        ])
      }
    );
  });

  // ========== –§–ò–ù–ê–ù–°–û–í–´–ï –û–ë–†–ê–ë–û–¢–ß–ò–ö–ò ==========

  // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –∫–Ω–æ–ø–∫–∏ "–§–∏–Ω–∞–Ω—Å—ã"
  bot.action('finances_menu', async (ctx) => {
    try {
      await ctx.editMessageText(
        'üí∞ *–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Ñ–∏–Ω–∞–Ω—Å–∞–º–∏*',
        {
          parse_mode: 'Markdown',
          reply_markup: {
            inline_keyboard: [
              [
                { text: 'üìä –¢–µ–∫—É—â–µ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ', callback_data: 'finance_current_state' },
                { text: 'üìà –§–∏–Ω–∞–Ω—Å–æ–≤—ã–π –æ—Ç—á–µ—Ç', callback_data: 'finance_report' }
              ],
              [
                { text: 'üîÑ –ü–µ—Ä–µ—Å—á–∏—Ç–∞—Ç—å —Ñ–∏–Ω–∞–Ω—Å—ã', callback_data: 'finance_recalculate' },
                { text: '‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–∏—Ç—å —Ä–µ–∑–µ—Ä–≤', callback_data: 'finance_set_reserve' }
              ],
              [
                { text: 'üí∏ –í—ã–≤–æ–¥ –ø—Ä–∏–±—ã–ª–∏', callback_data: 'finance_withdraw_profit' },
                { text: 'üìù –ò—Å—Ç–æ—Ä–∏—è –±–∞–ª–∞–Ω—Å–æ–≤', callback_data: 'finance_balance_history' }
              ],
              [
                { text: 'üéÆ –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∏–≥—Ä', callback_data: 'finance_game_stats' }
              ],
              [
                { text: 'üîô –ù–∞–∑–∞–¥', callback_data: 'main_menu' }
              ]
            ]
          }
        }
      );
    } catch (error) {
      console.error('ADMIN: –û—à–∏–±–∫–∞ –≤ finances_menu:', error);
      await ctx.reply('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –º–µ–Ω—é —Ñ–∏–Ω–∞–Ω—Å–æ–≤');
    }
  });

  // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –≤—ã–≤–æ–¥–∞ –ø—Ä–∏–±—ã–ª–∏ –≤–ª–∞–¥–µ–ª—å—Ü–∞
  bot.action('finance_withdraw_profit', async (ctx) => {
    try {
      await ctx.answerCbQuery();
      
      // –°–Ω–∞—á–∞–ª–∞ –ø–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–µ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ —Ñ–∏–Ω–∞–Ω—Å–æ–≤
      const response = await apiService.get('/admin/finance/current-state');
      
      if (!response.success) {
        await ctx.reply('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –¥–∞–Ω–Ω—ã—Ö –æ —Ñ–∏–Ω–∞–Ω—Å–∞—Ö');
        return;
      }
      
      const finance = response.data;
      const available = finance.balances.availableForWithdrawal;
      
      if (available <= 0) {
        await ctx.editMessageText(
          'üí∏ *–í—ã–≤–æ–¥ –ø—Ä–∏–±—ã–ª–∏ –≤–ª–∞–¥–µ–ª—å—Ü–∞*\n\n' +
          '‚ùå –ù–µ—Ç –¥–æ—Å—Ç—É–ø–Ω–æ–π –ø—Ä–∏–±—ã–ª–∏ –¥–ª—è –≤—ã–≤–æ–¥–∞.\n\n' +
          `üí∞ –î–æ—Å—Ç—É–ø–Ω–æ: *${available.toFixed(2)} USDT*`,
          {
            parse_mode: 'Markdown',
            reply_markup: {
              inline_keyboard: [
                [{ text: 'üîô –ù–∞–∑–∞–¥ –∫ —Ñ–∏–Ω–∞–Ω—Å–∞–º', callback_data: 'finances_menu' }]
              ]
            }
          }
        );
        return;
      }
      
      await ctx.editMessageText(
        'üí∏ *–í—ã–≤–æ–¥ –ø—Ä–∏–±—ã–ª–∏ –≤–ª–∞–¥–µ–ª—å—Ü–∞*\n\n' +
        `üí∞ –î–æ—Å—Ç—É–ø–Ω–æ –¥–ª—è –≤—ã–≤–æ–¥–∞: *${available.toFixed(2)} USDT*\n\n` +
        'üìù –í–≤–µ–¥–∏—Ç–µ —Å—É–º–º—É –¥–ª—è –≤—ã–≤–æ–¥–∞:',
        {
          parse_mode: 'Markdown',
          reply_markup: {
            inline_keyboard: [
              [
                { text: `üíØ –í—ã–≤–µ—Å—Ç–∏ –≤—Å—ë (${available.toFixed(2)})`, callback_data: `withdraw_profit_amount_${available}` }
              ],
              [
                { text: 'üîô –û—Ç–º–µ–Ω–∞', callback_data: 'finances_menu' }
              ]
            ]
          }
        }
      );
      
      // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ —Å–µ—Å—Å–∏–∏
      ctx.session.withdrawingProfit = {
        step: 'amount',
        availableAmount: available
      };
      
    } catch (error) {
      console.error('ADMIN: –û—à–∏–±–∫–∞ –≤ finance_withdraw_profit:', error);
      await ctx.reply('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –¥–∞–Ω–Ω—ã—Ö –æ –≤—ã–≤–æ–¥–µ –ø—Ä–∏–±—ã–ª–∏');
    }
  });

  // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –±—ã—Å—Ç—Ä–æ–≥–æ –≤—ã–≤–æ–¥–∞ –≤—Å–µ–π —Å—É–º–º—ã
  bot.action(/^withdraw_profit_amount_(.+)$/, async (ctx) => {
    try {
      await ctx.answerCbQuery();
      
      const amount = parseFloat(ctx.match[1]);
      
      if (!ctx.session.withdrawingProfit) {
        ctx.session.withdrawingProfit = {};
      }
      
      ctx.session.withdrawingProfit.amount = amount;
      ctx.session.withdrawingProfit.step = 'recipient';
      
      await ctx.editMessageText(
        'üí∏ *–í—ã–≤–æ–¥ –ø—Ä–∏–±—ã–ª–∏ –≤–ª–∞–¥–µ–ª—å—Ü–∞*\n\n' +
        `üí∞ –°—É–º–º–∞: *${amount.toFixed(2)} USDT*\n\n` +
        'üìß –í–≤–µ–¥–∏—Ç–µ –∞–¥—Ä–µ—Å –ø–æ–ª—É—á–∞—Ç–µ–ª—è (–∫–æ—à–µ–ª–µ–∫):',
        {
          parse_mode: 'Markdown',
          reply_markup: {
            inline_keyboard: [
              [{ text: 'üîô –û—Ç–º–µ–Ω–∞', callback_data: 'finances_menu' }]
            ]
          }
        }
      );
      
    } catch (error) {
      console.error('ADMIN: –û—à–∏–±–∫–∞ –≤ withdraw_profit_amount:', error);
      await ctx.reply('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —Å—É–º–º—ã');
    }
  });

  console.log('‚úÖ Callback handlers –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã');
}

module.exports = registerCallbackHandlers;