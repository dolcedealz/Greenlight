// backend/src/services/crash.service.js
const { CrashRound, User, Game, Transaction } = require('../models');
const randomService = require('./random.service');
const mongoose = require('mongoose');
const EventEmitter = require('events');

class CrashService extends EventEmitter {
  constructor() {
    super();
    this.gameTimer = null;
    this.isRunning = false;
    
    // –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –∏–≥—Ä—ã
    this.WAITING_TIME = 7000; // 7 —Å–µ–∫—É–Ω–¥ –æ–∂–∏–¥–∞–Ω–∏—è
    this.CRASH_DELAY = 3000; // 3 —Å–µ–∫—É–Ω–¥—ã –ø–æ—Å–ª–µ –∫—Ä–∞—à–∞
    this.MULTIPLIER_UPDATE_INTERVAL = 80; // –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∫–∞–∂–¥—ã–µ 80–º—Å
    
    this.init();
  }
  
  async init() {
    console.log('üöÄ CRASH SERVICE: –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Å–µ—Ä–≤–∏—Å–∞ –∫—Ä–∞—à –∏–≥—Ä—ã');
    
    // –í–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∞–∫—Ç–∏–≤–Ω—ã–π —Ä–∞—É–Ω–¥ –∏–∑ –ë–î
    const activeRound = await CrashRound.findOne({ 
      status: { $in: ['waiting', 'flying'] } 
    }).sort({ createdAt: -1 });
    
    if (activeRound) {
      console.log(`üîÑ CRASH SERVICE: –í–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ —Ä–∞—É–Ω–¥–∞ #${activeRound.roundId}`);
      await this.resumeRound(activeRound);
    } else {
      // –ó–∞–ø—É—Å–∫–∞–µ–º –Ω–æ–≤—ã–π —Ä–∞—É–Ω–¥
      this.startGameCycle();
    }
  }
  
  async resumeRound(round) {
    // –í–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –∏–∑ –ë–î
    if (round.status === 'waiting') {
      // –í—ã—á–∏—Å–ª—è–µ–º –æ—Å—Ç–∞–≤—à–µ–µ—Å—è –≤—Ä–µ–º—è –æ–∂–∏–¥–∞–Ω–∏—è
      const elapsed = Date.now() - round.createdAt.getTime();
      const remaining = Math.max(0, this.WAITING_TIME - elapsed);
      
      if (remaining > 0) {
        console.log(`‚è≥ CRASH SERVICE: –ü—Ä–æ–¥–æ–ª–∂–∞–µ–º –æ–∂–∏–¥–∞–Ω–∏–µ ${remaining}ms`);
        setTimeout(() => this.startFlying(round._id), remaining);
      } else {
        await this.startFlying(round._id);
      }
    } else if (round.status === 'flying') {
      // –í–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –ø–æ–ª–µ—Ç
      const elapsed = Date.now() - round.startedAt.getTime();
      const currentMultiplier = this.calculateMultiplier(elapsed / 1000);
      
      if (currentMultiplier >= round.crashPoint) {
        await this.crashTheGame(round._id);
      } else {
        await this.resumeFlying(round._id, currentMultiplier, elapsed);
      }
    }
  }
  
  async resumeFlying(roundId, currentMultiplier, elapsed) {
    console.log(`üîÑ CRASH SERVICE: –í–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ –ø–æ–ª–µ—Ç–∞ –Ω–∞ ${currentMultiplier.toFixed(2)}x`);
    
    // –í–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∏–≥—Ä–æ–≤–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ
    this.currentRound = await CrashRound.findById(roundId);
    this.currentMultiplier = currentMultiplier;
    this.gameStartTime = Date.now() - elapsed;
    
    // –≠–º–∏—Ç–∏–º —Ç–µ–∫—É—â–µ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ
    this.emit('gameStarted', {
      roundId: this.currentRound.roundId,
      status: 'flying',
      multiplier: currentMultiplier
    });
    
    // –ü—Ä–æ–¥–æ–ª–∂–∞–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –º–Ω–æ–∂–∏—Ç–µ–ª—è
    this.updateMultiplier(roundId);
  }
  
  async crashTheGame(roundId) {
    const round = await CrashRound.findById(roundId);
    if (!round || round.status !== 'flying') return;
    
    clearInterval(this.gameTimer);
    
    // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ç–æ—á–Ω—ã–π crash point
    const crashPoint = round.crashPoint;
    
    console.log(`üí• CRASH SERVICE: –ö—Ä–∞—à –Ω–∞ ${crashPoint.toFixed(2)}x`);
    
    // –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∫—Ä–∞—à
    round.crash(crashPoint);
    await round.save();
    
    // –≠–º–∏—Ç–∏–º –∫—Ä–∞—à
    this.emit('gameCrashed', {
      roundId: round.roundId,
      status: 'crashed',
      crashPoint: crashPoint,
      finalMultiplier: crashPoint
    });
    
    // –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Ñ–∏–Ω–∞–ª—å–Ω—ã–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
    await this.processFinalResults();
    
    // –ó–∞–≤–µ—Ä—à–∞–µ–º —Ä–∞—É–Ω–¥
    setTimeout(async () => {
      round.complete();
      await round.save();
      
      this.emit('roundCompleted', {
        roundId: round.roundId,
        crashPoint: round.crashPoint,
        totalBets: round.bets.length,
        totalAmount: round.totalBetAmount
      });
      
      // –ó–∞–ø—É—Å–∫–∞–µ–º –Ω–æ–≤—ã–π —Ä–∞—É–Ω–¥
      this.startGameCycle();
    }, this.CRASH_DELAY);
  }
  
  async getCurrentRound() {
    return await CrashRound.findOne({ 
      status: { $in: ['waiting', 'flying'] } 
    }).populate('bets.user', 'username telegramId');
  }
  
  async createNewRound() {
    const roundId = await CrashRound.getNextRoundId();
    
    // –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –∫—Ä–∏–ø—Ç–æ–≥—Ä–∞—Ñ–∏—á–µ—Å–∫–∏ –±–µ–∑–æ–ø–∞—Å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
    const serverSeed = randomService.generateServerSeed();
    const serverSeedHashed = randomService.hashServerSeed(serverSeed);
    const nonce = randomService.generateNonce();
    
    // –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º crash point
    const crashPoint = this.generateCrashPoint(serverSeed, nonce);
    
    const round = new CrashRound({
      roundId,
      status: 'waiting',
      crashPoint,
      serverSeed,
      serverSeedHashed,
      nonce
    });
    
    await round.save();
    
    console.log(`üÜï CRASH SERVICE: –°–æ–∑–¥–∞–Ω —Ä–∞—É–Ω–¥ #${roundId}, crash point: ${crashPoint.toFixed(2)}x`);
    
    // –≠–º–∏—Ç–∏–º —Å–æ–±—ã—Ç–∏–µ –¥–ª—è WebSocket
    this.emit('roundCreated', {
      roundId,
      serverSeedHashed,
      timeToStart: this.WAITING_TIME / 1000
    });
    
    return round;
  }
  
  async startFlying(roundId) {
    const round = await CrashRound.findById(roundId);
    if (!round || round.status !== 'waiting') return;
    
    round.startFlying();
    await round.save();
    
    console.log('üöÄ CRASH SERVICE: –ü–æ–ª–µ—Ç –Ω–∞—á–∞–ª—Å—è!');
    
    this.emit('gameStarted', {
      roundId: round.roundId,
      status: 'flying',
      multiplier: 1.00
    });
    
    // –ó–∞–ø—É—Å–∫–∞–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –º–Ω–æ–∂–∏—Ç–µ–ª—è
    this.updateMultiplier(round._id);
  }
  
  calculateMultiplier(elapsedSeconds) {
    // –ó–∞–º–µ–¥–ª–µ–Ω–Ω–∞—è —Ñ–æ—Ä–º—É–ª–∞ —Ä–æ—Å—Ç–∞
    const baseSpeed = 0.06;
    const acceleration = 0.03;
    return 1.00 + (baseSpeed * elapsedSeconds) + (acceleration * elapsedSeconds * elapsedSeconds / 2);
  }
  
  async updateMultiplier(roundId) {
    const round = await CrashRound.findById(roundId);
    if (!round || round.status !== 'flying') return;
    
    const startTime = round.startedAt.getTime();
    
    this.gameTimer = setInterval(async () => {
      const currentRound = await CrashRound.findById(roundId);
      if (!currentRound || currentRound.status !== 'flying') {
        clearInterval(this.gameTimer);
        return;
      }
      
      const elapsed = (Date.now() - startTime) / 1000;
      const currentMultiplier = this.calculateMultiplier(elapsed);
      
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫—Ä–∞—à
      if (currentMultiplier >= currentRound.crashPoint) {
        await this.crashTheGame(roundId);
        return;
      }
      
      // –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∞–≤—Ç–æ–≤—ã–≤–æ–¥—ã
      await this.processAutoCashOuts(roundId, currentMultiplier);
      
      // –≠–º–∏—Ç–∏–º –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ
      this.emit('multiplierUpdate', {
        roundId: currentRound.roundId,
        multiplier: parseFloat(currentMultiplier.toFixed(2)),
        timestamp: Date.now()
      });
      
    }, this.MULTIPLIER_UPDATE_INTERVAL);
  }
  
  getCurrentGameState() {
    // –ê—Å–∏–Ω—Ö—Ä–æ–Ω–Ω—ã–π –º–µ—Ç–æ–¥ —Ç–µ–ø–µ—Ä—å –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç Promise
    return this.getCurrentRound().then(round => {
      if (!round) {
        return {
          status: 'no_game',
          message: '–ò–≥—Ä–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ—Ç—Å—è'
        };
      }
      
      const elapsed = round.status === 'flying' 
        ? (Date.now() - round.startedAt.getTime()) / 1000 
        : 0;
      
      const currentMultiplier = round.status === 'flying'
        ? this.calculateMultiplier(elapsed)
        : 1.00;
      
      return {
        roundId: round.roundId,
        status: round.status,
        currentMultiplier: parseFloat(currentMultiplier.toFixed(2)),
        serverSeedHashed: round.serverSeedHashed,
        bets: round.bets.map(bet => ({
          userId: bet.user._id,
          username: bet.user.username || '–ò–≥—Ä–æ–∫',
          amount: bet.amount,
          autoCashOut: bet.autoCashOut,
          cashedOut: bet.cashedOut,
          cashOutMultiplier: bet.cashOutMultiplier
        })),
        timeToStart: round.status === 'waiting' 
          ? Math.max(0, 7 - Math.floor((Date.now() - round.createdAt.getTime()) / 1000))
          : 0
      };
    });
  }
  
  async startGameCycle() {
    if (this.isRunning) return;
    
    this.isRunning = true;
    console.log('üéÆ CRASH SERVICE: –ó–∞–ø—É—Å–∫ –∏–≥—Ä–æ–≤–æ–≥–æ —Ü–∏–∫–ª–∞');
    
    while (this.isRunning) {
      try {
        await this.runSingleRound();
      } catch (error) {
        console.error('‚ùå CRASH SERVICE: –û—à–∏–±–∫–∞ –≤ –∏–≥—Ä–æ–≤–æ–º —Ü–∏–∫–ª–µ:', error);
        await new Promise(resolve => setTimeout(resolve, 5000)); // –ü–∞—É–∑–∞ –ø—Ä–∏ –æ—à–∏–±–∫–µ
      }
    }
  }
  
  async runSingleRound() {
    // 1. –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—ã–π —Ä–∞—É–Ω–¥
    await this.createNewRound();
    
    // 2. –ü–µ—Ä–∏–æ–¥ –æ–∂–∏–¥–∞–Ω–∏—è —Å—Ç–∞–≤–æ–∫ (7 —Å–µ–∫—É–Ω–¥)
    await this.waitingPeriod();
    
    // 3. –ü–µ—Ä–∏–æ–¥ –ø–æ–ª–µ—Ç–∞ —Å —Ä–∞—Å—Ç—É—â–∏–º –º–Ω–æ–∂–∏—Ç–µ–ª–µ–º
    await this.flyingPeriod();
    
    // 4. –ü–∞—É–∑–∞ –ø–æ—Å–ª–µ –∫—Ä–∞—à–∞ (3 —Å–µ–∫—É–Ω–¥—ã)
    await this.crashPeriod();
    
    // 5. –ó–∞–≤–µ—Ä—à–∞–µ–º —Ä–∞—É–Ω–¥
    await this.completeRound();
  }
  
  
  async waitingPeriod() {
    console.log('‚è≥ CRASH SERVICE: –ü–µ—Ä–∏–æ–¥ –æ–∂–∏–¥–∞–Ω–∏—è —Å—Ç–∞–≤–æ–∫');
    
    let timeLeft = this.WAITING_TIME / 1000; // 7 —Å–µ–∫—É–Ω–¥
    
    const countdown = setInterval(() => {
      timeLeft--;
      
      // –≠–º–∏—Ç–∏–º –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Ç–∞–π–º–µ—Ä–∞
      this.emit('countdownUpdate', {
        roundId: this.currentRound.roundId,
        timeToStart: timeLeft
      });
      
      if (timeLeft <= 0) {
        clearInterval(countdown);
      }
    }, 1000);
    
    // –ñ–¥–µ–º 7 —Å–µ–∫—É–Ω–¥
    await new Promise(resolve => setTimeout(resolve, this.WAITING_TIME));
  }
  
  async flyingPeriod() {
    console.log('üöÄ CRASH SERVICE: –ù–∞—á–∞–ª–æ –ø–æ–ª–µ—Ç–∞');
    
    // –ó–∞–ø—É—Å–∫–∞–µ–º –ø–æ–ª–µ—Ç
    this.currentRound.startFlying();
    await this.currentRound.save();
    
    this.currentMultiplier = 1.00;
    this.gameStartTime = Date.now();
    
    // –≠–º–∏—Ç–∏–º –Ω–∞—á–∞–ª–æ –ø–æ–ª–µ—Ç–∞
    this.emit('gameStarted', {
      roundId: this.currentRound.roundId,
      status: 'flying',
      multiplier: this.currentMultiplier
    });
    
    // –ó–∞–ø—É—Å–∫–∞–µ–º —Ü–∏–∫–ª –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –º–Ω–æ–∂–∏—Ç–µ–ª—è
    return new Promise((resolve) => {
      const multiplierInterval = setInterval(async () => {
        const now = Date.now();
        const elapsedSeconds = (now - this.gameStartTime) / 1000;
        
        // –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º –º–Ω–æ–∂–∏—Ç–µ–ª—å (–∑–∞–º–µ–¥–ª–µ–Ω–Ω–∞—è —Ñ–æ—Ä–º—É–ª–∞ –∫–∞–∫ –Ω–∞ —Ñ—Ä–æ–Ω—Ç–µ–Ω–¥–µ)
        const baseSpeed = 0.06;
        const acceleration = 0.03;
        const speed = baseSpeed + (acceleration * elapsedSeconds);
        const deltaTime = this.MULTIPLIER_UPDATE_INTERVAL / 1000;
        
        this.currentMultiplier += speed * deltaTime;
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –¥–æ—Å—Ç–∏–≥–ª–∏ –ª–∏ crash point
        if (this.currentMultiplier >= this.currentRound.crashPoint) {
          clearInterval(multiplierInterval);
          
          // –ö—Ä–∞—à–∏–º —Ç–æ—á–Ω–æ –Ω–∞ –∑–∞–¥–∞–Ω–Ω–æ–º crash point
          this.currentMultiplier = this.currentRound.crashPoint;
          
          console.log(`üí• CRASH SERVICE: –ö—Ä–∞—à –Ω–∞ ${this.currentRound.crashPoint.toFixed(2)}x`);
          
          // –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∫—Ä–∞—à
          this.currentRound.crash(this.currentRound.crashPoint);
          await this.currentRound.save();
          
          // –≠–º–∏—Ç–∏–º –∫—Ä–∞—à
          this.emit('gameCrashed', {
            roundId: this.currentRound.roundId,
            status: 'crashed',
            crashPoint: this.currentRound.crashPoint,
            finalMultiplier: this.currentMultiplier
          });
          
          resolve();
        } else {
          // –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∞–≤—Ç–æ–≤—ã–≤–æ–¥—ã
          await this.processAutoCashOutsLegacy();
          
          // –≠–º–∏—Ç–∏–º –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –º–Ω–æ–∂–∏—Ç–µ–ª—è
          this.emit('multiplierUpdate', {
            roundId: this.currentRound.roundId,
            multiplier: this.currentMultiplier,
            timestamp: now
          });
        }
      }, this.MULTIPLIER_UPDATE_INTERVAL);
    });
  }
  
  async processAutoCashOuts(roundId, currentMultiplier) {
    if (!roundId) {
      // Fallback –¥–ª—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏ —Å–æ —Å—Ç–∞—Ä—ã–º –∫–æ–¥–æ–º
      return this.processAutoCashOutsLegacy();
    }
    
    const round = await CrashRound.findById(roundId);
    if (!round || round.status !== 'flying') return;
    
    const session = await mongoose.startSession();
    session.startTransaction();
    
    try {
      // –ù–∞—Ö–æ–¥–∏–º —Å—Ç–∞–≤–∫–∏ —Å –∞–≤—Ç–æ–≤—ã–≤–æ–¥–æ–º –Ω–∞ —Ç–µ–∫—É—â–µ–º –º–Ω–æ–∂–∏—Ç–µ–ª–µ
      const betsToProcess = round.bets.filter(bet => 
        !bet.cashedOut && 
        bet.autoCashOut > 0 && 
        bet.autoCashOut <= currentMultiplier
      );
      
      for (const bet of betsToProcess) {
        // –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞–≤–∫—É
        const processedBet = round.cashOut(bet.user, bet.autoCashOut);
        
        // –û–±–Ω–æ–≤–ª—è–µ–º –±–∞–ª–∞–Ω—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        await User.findByIdAndUpdate(
          bet.user,
          { 
            $inc: { 
              balance: bet.amount * bet.autoCashOut,
              totalWon: bet.amount * bet.autoCashOut
            }
          }
        ).session(session);
        
        // –°–æ–∑–¥–∞–µ–º —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—é –≤—ã–∏–≥—Ä—ã—à–∞
        const winTransaction = new Transaction({
          user: bet.user,
          type: 'win',
          amount: bet.amount * bet.autoCashOut,
          description: `–ê–≤—Ç–æ–≤—ã–≤–æ–¥ –≤ –∫—Ä–∞—à –∏–≥—Ä–µ –ø—Ä–∏ ${bet.autoCashOut.toFixed(2)}x`,
          status: 'completed'
        });
        
        await winTransaction.save({ session });
        
        // –≠–º–∏—Ç–∏–º —Å–æ–±—ã—Ç–∏–µ –∞–≤—Ç–æ–≤—ã–≤–æ–¥–∞
        this.emit('autoCashOut', {
          roundId: round.roundId,
          userId: bet.user,
          amount: bet.amount,
          multiplier: bet.autoCashOut,
          profit: processedBet.profit
        });
      }
      
      if (betsToProcess.length > 0) {
        await round.save({ session });
      }
      
      await session.commitTransaction();
    } catch (error) {
      await session.abortTransaction();
      console.error('‚ùå CRASH SERVICE: –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∞–≤—Ç–æ–≤—ã–≤–æ–¥–æ–≤:', error);
    } finally {
      session.endSession();
    }
  }
  
  async processAutoCashOutsLegacy() {
    const session = await mongoose.startSession();
    session.startTransaction();
    
    try {
      // –ù–∞—Ö–æ–¥–∏–º —Å—Ç–∞–≤–∫–∏ —Å –∞–≤—Ç–æ–≤—ã–≤–æ–¥–æ–º –Ω–∞ —Ç–µ–∫—É—â–µ–º –º–Ω–æ–∂–∏—Ç–µ–ª–µ
      const betsToProcess = this.currentRound.bets.filter(bet => 
        !bet.cashedOut && 
        bet.autoCashOut > 0 && 
        bet.autoCashOut <= this.currentMultiplier
      );
      
      for (const bet of betsToProcess) {
        // –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞–≤–∫—É
        const processedBet = this.currentRound.cashOut(bet.user, bet.autoCashOut);
        
        // –û–±–Ω–æ–≤–ª—è–µ–º –±–∞–ª–∞–Ω—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        await User.findByIdAndUpdate(
          bet.user,
          { 
            $inc: { 
              balance: bet.amount * bet.autoCashOut,
              totalWon: bet.amount * bet.autoCashOut
            }
          }
        ).session(session);
        
        // –°–æ–∑–¥–∞–µ–º —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—é –≤—ã–∏–≥—Ä—ã—à–∞
        const winTransaction = new Transaction({
          user: bet.user,
          type: 'win',
          amount: bet.amount * bet.autoCashOut,
          description: `–ê–≤—Ç–æ–≤—ã–≤–æ–¥ –≤ –∫—Ä–∞—à –∏–≥—Ä–µ –ø—Ä–∏ ${bet.autoCashOut.toFixed(2)}x`,
          status: 'completed'
        });
        
        await winTransaction.save({ session });
        
        // –≠–º–∏—Ç–∏–º —Å–æ–±—ã—Ç–∏–µ –∞–≤—Ç–æ–≤—ã–≤–æ–¥–∞
        this.emit('autoCashOut', {
          roundId: this.currentRound.roundId,
          userId: bet.user,
          amount: bet.amount,
          multiplier: bet.autoCashOut,
          profit: processedBet.profit
        });
      }
      
      if (betsToProcess.length > 0) {
        await this.currentRound.save({ session });
      }
      
      await session.commitTransaction();
    } catch (error) {
      await session.abortTransaction();
      console.error('‚ùå CRASH SERVICE: –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∞–≤—Ç–æ–≤—ã–≤–æ–¥–æ–≤:', error);
    } finally {
      session.endSession();
    }
  }
  
  async crashPeriod() {
    console.log('üí• CRASH SERVICE: –ü–µ—Ä–∏–æ–¥ –ø–æ—Å–ª–µ –∫—Ä–∞—à–∞');
    
    // –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –≤—Å–µ —Å—Ç–∞–≤–∫–∏ –∏ —Å–æ–∑–¥–∞–µ–º –∏–≥—Ä–æ–≤—ã–µ –∑–∞–ø–∏—Å–∏
    await this.processFinalResults();
    
    // –ñ–¥–µ–º 3 —Å–µ–∫—É–Ω–¥—ã
    await new Promise(resolve => setTimeout(resolve, this.CRASH_DELAY));
  }
  
  async processFinalResults() {
    const session = await mongoose.startSession();
    session.startTransaction();
    
    try {
      for (const bet of this.currentRound.bets) {
        const user = await User.findById(bet.user).session(session);
        if (!user) continue;
        
        const win = bet.cashedOut;
        const profit = win ? bet.profit : -bet.amount;
        
        // –°–æ–∑–¥–∞–µ–º –∑–∞–ø–∏—Å—å –æ–± –∏–≥—Ä–µ
        const game = new Game({
          user: bet.user,
          gameType: 'crash',
          bet: bet.amount,
          multiplier: win ? bet.cashOutMultiplier : this.currentRound.crashPoint,
          result: {
            roundId: this.currentRound.roundId,
            autoCashOut: bet.autoCashOut,
            cashedOut: bet.cashedOut,
            cashOutMultiplier: bet.cashOutMultiplier,
            crashPoint: this.currentRound.crashPoint,
            win
          },
          win,
          profit,
          balanceBefore: user.balance - (win ? 0 : bet.amount),
          balanceAfter: user.balance,
          serverSeed: this.currentRound.serverSeed,
          serverSeedHashed: this.currentRound.serverSeedHashed,
          nonce: this.currentRound.nonce,
          status: 'completed'
        });
        
        await game.save({ session });
        
        // –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (—Å—Ç–∞–≤–∫–∞ —É–∂–µ —Å–ø–∏—Å–∞–Ω–∞ –ø—Ä–∏ —Ä–∞–∑–º–µ—â–µ–Ω–∏–∏)
        if (!win) {
          user.totalWagered += bet.amount;
        }
        
        await user.save({ session });
      }
      
      await session.commitTransaction();
    } catch (error) {
      await session.abortTransaction();
      console.error('‚ùå CRASH SERVICE: –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Ñ–∏–Ω–∞–ª—å–Ω—ã—Ö —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤:', error);
    } finally {
      session.endSession();
    }
  }
  
  async completeRound() {
    this.currentRound.complete();
    await this.currentRound.save();
    
    console.log(`‚úÖ CRASH SERVICE: –†–∞—É–Ω–¥ #${this.currentRound.roundId} –∑–∞–≤–µ—Ä—à–µ–Ω`);
    
    // –≠–º–∏—Ç–∏–º –∑–∞–≤–µ—Ä—à–µ–Ω–∏–µ —Ä–∞—É–Ω–¥–∞
    this.emit('roundCompleted', {
      roundId: this.currentRound.roundId,
      crashPoint: this.currentRound.crashPoint,
      totalBets: this.currentRound.bets.length,
      totalAmount: this.currentRound.totalBetAmount
    });
    
    this.currentRound = null;
  }
  
  generateCrashPoint(serverSeed, nonce) {
    // –ò—Å–ø–æ–ª—å–∑—É–µ–º –ø—Ä–æ–≤ably fair –∞–ª–≥–æ—Ä–∏—Ç–º –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ crash point
    const randomValue = randomService.generateRandomNumber(serverSeed, 'crash-client', nonce);
    
    // –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º –≤ crash point —Å –ª–æ–≥–∞—Ä–∏—Ñ–º–∏—á–µ—Å–∫–∏–º —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ–º
    // –ë–æ–ª—å—à–∏–Ω—Å—Ç–≤–æ –∫—Ä–∞—à–µ–π –ø—Ä–æ–∏—Å—Ö–æ–¥–∏—Ç –Ω–∞ –Ω–∏–∑–∫–∏—Ö –º–Ω–æ–∂–∏—Ç–µ–ª—è—Ö
    if (randomValue < 0.4) {
      return 1.0 + randomValue * 0.8; // 1.0-1.8x (40%)
    } else if (randomValue < 0.7) {
      return 1.8 + (randomValue - 0.4) * 4.0; // 1.8-3.0x (30%)
    } else if (randomValue < 0.9) {
      return 3.0 + (randomValue - 0.7) * 20.0; // 3.0-7.0x (20%)
    } else {
      return 7.0 + (randomValue - 0.9) * 130.0; // 7.0-20.0x (10%)
    }
  }
  
  // –ü—É–±–ª–∏—á–Ω—ã–µ –º–µ—Ç–æ–¥—ã –¥–ª—è API
  async placeBet(userId, betAmount, autoCashOut = 0) {
    const session = await mongoose.startSession();
    session.startTransaction();
    
    try {
      const user = await User.findById(userId).session(session);
      if (!user) {
        throw new Error('–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω');
      }
      
      if (user.balance < betAmount) {
        throw new Error('–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å—Ä–µ–¥—Å—Ç–≤');
      }
      
      if (!this.currentRound || this.currentRound.status !== 'waiting') {
        throw new Error('–°—Ç–∞–≤–∫–∏ –Ω–µ –ø—Ä–∏–Ω–∏–º–∞—é—Ç—Å—è –≤ –¥–∞–Ω–Ω—ã–π –º–æ–º–µ–Ω—Ç');
      }
      
      // –î–æ–±–∞–≤–ª—è–µ–º —Å—Ç–∞–≤–∫—É –≤ —Ä–∞—É–Ω–¥
      const bet = this.currentRound.addBet(userId, betAmount, autoCashOut);
      
      // –°–ø–∏—Å—ã–≤–∞–µ–º —Å—Ä–µ–¥—Å—Ç–≤–∞ —Å –±–∞–ª–∞–Ω—Å–∞
      user.balance -= betAmount;
      await user.save({ session });
      
      // –°–æ–∑–¥–∞–µ–º —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—é —Å—Ç–∞–≤–∫–∏
      const betTransaction = new Transaction({
        user: userId,
        type: 'bet',
        amount: -betAmount,
        description: `–°—Ç–∞–≤–∫–∞ –≤ –∫—Ä–∞—à –∏–≥—Ä–µ #${this.currentRound.roundId}`,
        status: 'completed'
      });
      
      await betTransaction.save({ session });
      await this.currentRound.save({ session });
      
      await session.commitTransaction();
      
      // –≠–º–∏—Ç–∏–º —Å–æ–±—ã—Ç–∏–µ –Ω–æ–≤–æ–π —Å—Ç–∞–≤–∫–∏
      this.emit('betPlaced', {
        roundId: this.currentRound.roundId,
        userId,
        amount: betAmount,
        autoCashOut,
        totalBets: this.currentRound.bets.length,
        totalAmount: this.currentRound.totalBetAmount
      });
      
      return {
        success: true,
        roundId: this.currentRound.roundId,
        betAmount,
        autoCashOut,
        newBalance: user.balance
      };
      
    } catch (error) {
      await session.abortTransaction();
      throw error;
    } finally {
      session.endSession();
    }
  }
  
  async manualCashOut(userId) {
    const session = await mongoose.startSession();
    session.startTransaction();
    
    try {
      if (!this.currentRound || this.currentRound.status !== 'flying') {
        throw new Error('–í—ã–≤–æ–¥ –Ω–µ–≤–æ–∑–º–æ–∂–µ–Ω –≤ –¥–∞–Ω–Ω—ã–π –º–æ–º–µ–Ω—Ç');
      }
      
      // –í—ã–≤–æ–¥–∏–º —Å—Ç–∞–≤–∫—É
      const bet = this.currentRound.cashOut(userId, this.currentMultiplier);
      const winAmount = bet.amount * this.currentMultiplier;
      
      // –û–±–Ω–æ–≤–ª—è–µ–º –±–∞–ª–∞–Ω—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
      await User.findByIdAndUpdate(
        userId,
        { 
          $inc: { 
            balance: winAmount,
            totalWon: winAmount
          }
        }
      ).session(session);
      
      // –°–æ–∑–¥–∞–µ–º —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—é –≤—ã–∏–≥—Ä—ã—à–∞
      const winTransaction = new Transaction({
        user: userId,
        type: 'win',
        amount: winAmount,
        description: `–í—ã–≤–æ–¥ –≤ –∫—Ä–∞—à –∏–≥—Ä–µ –ø—Ä–∏ ${this.currentMultiplier.toFixed(2)}x`,
        status: 'completed'
      });
      
      await winTransaction.save({ session });
      await this.currentRound.save({ session });
      
      await session.commitTransaction();
      
      // –≠–º–∏—Ç–∏–º —Å–æ–±—ã—Ç–∏–µ —Ä—É—á–Ω–æ–≥–æ –≤—ã–≤–æ–¥–∞
      this.emit('manualCashOut', {
        roundId: this.currentRound.roundId,
        userId,
        amount: bet.amount,
        multiplier: this.currentMultiplier,
        profit: bet.profit
      });
      
      return {
        success: true,
        multiplier: this.currentMultiplier,
        winAmount,
        profit: bet.profit
      };
      
    } catch (error) {
      await session.abortTransaction();
      throw error;
    } finally {
      session.endSession();
    }
  }
  
  getCurrentGameState() {
    if (!this.currentRound) {
      return {
        status: 'no_game',
        message: '–ò–≥—Ä–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ—Ç—Å—è'
      };
    }
    
    return {
      roundId: this.currentRound.roundId,
      status: this.currentRound.status,
      currentMultiplier: this.currentMultiplier,
      serverSeedHashed: this.currentRound.serverSeedHashed,
      bets: this.currentRound.bets.map(bet => ({
        userId: bet.user,
        amount: bet.amount,
        autoCashOut: bet.autoCashOut,
        cashedOut: bet.cashedOut,
        cashOutMultiplier: bet.cashOutMultiplier
      }))
    };
  }
  
  async getGameHistory(limit = 50) {
    const rounds = await CrashRound.getLastRounds(limit);
    
    return rounds.map(round => ({
      roundId: round.roundId,
      crashPoint: round.crashPoint,
      timestamp: round.createdAt,
      totalBets: round.bets.length,
      totalAmount: round.totalBetAmount
    }));
  }
  
  async getCurrentGameStateAsync() {
    // –ê—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–∞—è –≤–µ—Ä—Å–∏—è –¥–ª—è –Ω–æ–≤–æ–π –∞—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä—ã
    const round = await this.getCurrentRound();
    if (!round) {
      return {
        status: 'no_game',
        message: '–ò–≥—Ä–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ—Ç—Å—è'
      };
    }
    
    const elapsed = round.status === 'flying' 
      ? (Date.now() - round.startedAt.getTime()) / 1000 
      : 0;
    
    const currentMultiplier = round.status === 'flying'
      ? this.calculateMultiplier(elapsed)
      : 1.00;
    
    return {
      roundId: round.roundId,
      status: round.status,
      currentMultiplier: parseFloat(currentMultiplier.toFixed(2)),
      serverSeedHashed: round.serverSeedHashed,
      bets: round.bets.map(bet => ({
        userId: bet.user._id,
        username: bet.user.username || '–ò–≥—Ä–æ–∫',
        amount: bet.amount,
        autoCashOut: bet.autoCashOut,
        cashedOut: bet.cashedOut,
        cashOutMultiplier: bet.cashOutMultiplier
      })),
      timeToStart: round.status === 'waiting' 
        ? Math.max(0, 7 - Math.floor((Date.now() - round.createdAt.getTime()) / 1000))
        : 0
    };
  }
  
  stop() {
    this.isRunning = false;
    if (this.gameTimer) {
      clearInterval(this.gameTimer);
    }
    console.log('üõë CRASH SERVICE: –°–µ—Ä–≤–∏—Å –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω');
  }
}

module.exports = new CrashService();
