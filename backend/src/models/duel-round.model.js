const { DataTypes } = require('sequelize');
const { sequelize } = require('../config/database');

const DuelRound = sequelize.define('DuelRound', {
  id: {
    type: DataTypes.INTEGER,
    primaryKey: true,
    autoIncrement: true
  },
  
  // –°–≤—è–∑—å —Å –¥—É—ç–ª—å—é
  duelId: {
    type: DataTypes.INTEGER,
    allowNull: false,
    references: {
      model: 'duels',
      key: 'id'
    },
    comment: 'ID –¥—É—ç–ª–∏'
  },
  sessionId: {
    type: DataTypes.STRING,
    allowNull: false,
    comment: 'Session ID –¥—É—ç–ª–∏ –¥–ª—è –±—ã—Å—Ç—Ä–æ–≥–æ –ø–æ–∏—Å–∫–∞'
  },
  
  // –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Ä–∞—É–Ω–¥–µ
  roundNumber: {
    type: DataTypes.INTEGER,
    allowNull: false,
    comment: '–ù–æ–º–µ—Ä —Ä–∞—É–Ω–¥–∞ –≤ –¥—É—ç–ª–∏'
  },
  
  // –†–µ–∑—É–ª—å—Ç–∞—Ç—ã –±—Ä–æ—Å–∫–æ–≤
  challengerResult: {
    type: DataTypes.INTEGER,
    allowNull: true,
    comment: '–†–µ–∑—É–ª—å—Ç–∞—Ç –±—Ä–æ—Å–∫–∞ –∏–Ω–∏—Ü–∏–∞—Ç–æ—Ä–∞ (1-6 –¥–ª—è –∫–æ—Å—Ç–∏, –∏ —Ç.–¥.)'
  },
  challengerTimestamp: {
    type: DataTypes.DATE,
    allowNull: true,
    comment: '–í—Ä–µ–º—è –±—Ä–æ—Å–∫–∞ –∏–Ω–∏—Ü–∏–∞—Ç–æ—Ä–∞'
  },
  
  opponentResult: {
    type: DataTypes.INTEGER,
    allowNull: true,
    comment: '–†–µ–∑—É–ª—å—Ç–∞—Ç –±—Ä–æ—Å–∫–∞ –ø—Ä–æ—Ç–∏–≤–Ω–∏–∫–∞'
  },
  opponentTimestamp: {
    type: DataTypes.DATE,
    allowNull: true,
    comment: '–í—Ä–µ–º—è –±—Ä–æ—Å–∫–∞ –ø—Ä–æ—Ç–∏–≤–Ω–∏–∫–∞'
  },
  
  // –†–µ–∑—É–ª—å—Ç–∞—Ç —Ä–∞—É–Ω–¥–∞
  winnerId: {
    type: DataTypes.STRING,
    allowNull: true,
    comment: 'ID –ø–æ–±–µ–¥–∏—Ç–µ–ª—è —Ä–∞—É–Ω–¥–∞ (null –¥–ª—è –Ω–∏—á—å–∏)'
  },
  winnerUsername: {
    type: DataTypes.STRING,
    allowNull: true,
    comment: 'Username –ø–æ–±–µ–¥–∏—Ç–µ–ª—è —Ä–∞—É–Ω–¥–∞'
  },
  isDraw: {
    type: DataTypes.BOOLEAN,
    defaultValue: false,
    comment: '–Ø–≤–ª—è–µ—Ç—Å—è –ª–∏ —Ä–∞—É–Ω–¥ –Ω–∏—á—å–µ–π'
  },
  
  // –°—Ç–∞—Ç—É—Å —Ä–∞—É–Ω–¥–∞
  status: {
    type: DataTypes.ENUM('waiting_challenger', 'waiting_opponent', 'completed', 'cancelled'),
    allowNull: false,
    defaultValue: 'waiting_challenger',
    comment: '–°—Ç–∞—Ç—É—Å —Ä–∞—É–Ω–¥–∞'
  },
  
  // Telegram –¥–∞–Ω–Ω—ã–µ
  challengerMessageId: {
    type: DataTypes.INTEGER,
    allowNull: true,
    comment: 'ID —Å–æ–æ–±—â–µ–Ω–∏—è —Å –±—Ä–æ—Å–∫–æ–º –∏–Ω–∏—Ü–∏–∞—Ç–æ—Ä–∞'
  },
  opponentMessageId: {
    type: DataTypes.INTEGER,
    allowNull: true,
    comment: 'ID —Å–æ–æ–±—â–µ–Ω–∏—è —Å –±—Ä–æ—Å–∫–æ–º –ø—Ä–æ—Ç–∏–≤–Ω–∏–∫–∞'
  },
  
  // –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
  gameType: {
    type: DataTypes.ENUM('üé≤', 'üéØ', '‚öΩ', 'üèÄ', 'üé≥', 'üé∞'),
    allowNull: false,
    comment: '–¢–∏–ø –∏–≥—Ä—ã (–∫–æ–ø–∏—Ä—É–µ—Ç—Å—è –∏–∑ –¥—É—ç–ª–∏)'
  },
  
  metadata: {
    type: DataTypes.JSON,
    allowNull: true,
    comment: '–î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ —Ä–∞—É–Ω–¥–∞'
  }
}, {
  tableName: 'duel_rounds',
  timestamps: true,
  indexes: [
    { fields: ['duelId'] },
    { fields: ['sessionId'] },
    { fields: ['roundNumber'] },
    { fields: ['status'] },
    { fields: ['winnerId'] },
    { fields: ['createdAt'] },
    {
      fields: ['duelId', 'roundNumber'],
      unique: true
    }
  ]
});

// –ú–µ—Ç–æ–¥—ã –º–æ–¥–µ–ª–∏
DuelRound.prototype.determineWinner = function(gameType, challengerResult, opponentResult) {
  let result = null;
  
  switch (gameType) {
    case 'üé≤': // –ö–æ—Å—Ç–∏ - –±–æ–ª—å—à–µ –∑–Ω–∞—á–µ–Ω–∏–µ –ø–æ–±–µ–∂–¥–∞–µ—Ç
    case 'üé≥': // –ë–æ—É–ª–∏–Ω–≥ - –±–æ–ª—å—à–µ –∫–µ–≥–ª–µ–π –ø–æ–±–µ–∂–¥–∞–µ—Ç
      if (challengerResult > opponentResult) result = 'challenger';
      else if (opponentResult > challengerResult) result = 'opponent';
      break;
      
    case 'üéØ': // –î–∞—Ä—Ç—Å - –ø–æ–ø–∞–¥–∞–Ω–∏–µ –≤ —Ü–µ–Ω—Ç—Ä (6) –ø–æ–±–µ–∂–¥–∞–µ—Ç, –∏–Ω–∞—á–µ –±–æ–ª—å—à–µ –æ—á–∫–æ–≤
      if (challengerResult === 6 && opponentResult !== 6) result = 'challenger';
      else if (opponentResult === 6 && challengerResult !== 6) result = 'opponent';
      else if (challengerResult > opponentResult) result = 'challenger';
      else if (opponentResult > challengerResult) result = 'opponent';
      break;
      
    case '‚öΩ': // –§—É—Ç–±–æ–ª - –≥–æ–ª (4,5) –ø–æ–±–µ–∂–¥–∞–µ—Ç
    case 'üèÄ': // –ë–∞—Å–∫–µ—Ç–±–æ–ª - –ø–æ–ø–∞–¥–∞–Ω–∏–µ (4,5) –ø–æ–±–µ–∂–¥–∞–µ—Ç
      const challengerScore = challengerResult >= 4;
      const opponentScore = opponentResult >= 4;
      if (challengerScore && !opponentScore) result = 'challenger';
      else if (opponentScore && !challengerScore) result = 'opponent';
      // –ï—Å–ª–∏ –æ–±–∞ –∑–∞–±–∏–ª–∏ –∏–ª–∏ –æ–±–∞ –ø—Ä–æ–º–∞–∑–∞–ª–∏ - –Ω–∏—á—å—è
      break;
      
    case 'üé∞': // –°–ª–æ—Ç—ã - –ª—É—á—à–∞—è –∫–æ–º–±–∏–Ω–∞—Ü–∏—è
      // –ü—Ä–µ–¥–ø–æ–ª–∞–≥–∞–µ–º —á—Ç–æ 1-32 —ç—Ç–æ –≤—ã–∏–≥—Ä—ã—à–Ω—ã–µ –∫–æ–º–±–∏–Ω–∞—Ü–∏–∏ —Ä–∞–∑–Ω–æ–≥–æ —É—Ä–æ–≤–Ω—è
      const challengerWin = challengerResult >= 1 && challengerResult <= 64;
      const opponentWin = opponentResult >= 1 && opponentResult <= 64;
      if (challengerWin && !opponentWin) result = 'challenger';
      else if (opponentWin && !challengerWin) result = 'opponent';
      else if (challengerWin && opponentWin) {
        // –û–±–∞ –≤—ã–∏–≥—Ä–∞–ª–∏ - –≤—ã—à–µ –∑–Ω–∞—á–µ–Ω–∏–µ –ª—É—á—à–µ
        if (challengerResult > opponentResult) result = 'challenger';
        else if (opponentResult > challengerResult) result = 'opponent';
      }
      break;
  }
  
  return result; // 'challenger', 'opponent' –∏–ª–∏ null –¥–ª—è –Ω–∏—á—å–∏
};

DuelRound.prototype.getResultText = function() {
  const gameType = this.gameType;
  const c = this.challengerResult;
  const o = this.opponentResult;
  
  switch (gameType) {
    case 'üé≤':
      return `(${c} vs ${o})`;
      
    case 'üéØ':
      const dartC = c === 6 ? '–¶–µ–Ω—Ç—Ä!' : `${c} –æ—á–∫–æ–≤`;
      const dartO = o === 6 ? '–¶–µ–Ω—Ç—Ä!' : `${o} –æ—á–∫–æ–≤`;
      return `(${dartC} vs ${dartO})`;
      
    case '‚öΩ':
      const goalC = c >= 4 ? '–ì–û–õ!' : '–ú–∏–º–æ';
      const goalO = o >= 4 ? '–ì–û–õ!' : '–ú–∏–º–æ';
      return `(${goalC} vs ${goalO})`;
      
    case 'üèÄ':
      const basketC = c >= 4 ? '–ü–æ–ø–∞–ª!' : '–ú–∏–º–æ';
      const basketO = o >= 4 ? '–ü–æ–ø–∞–ª!' : '–ú–∏–º–æ';
      return `(${basketC} vs ${basketO})`;
      
    case 'üé∞':
      const slotC = c >= 1 && c <= 64 ? '–í—ã–∏–≥—Ä—ã—à!' : '–ü—Ä–æ–∏–≥—Ä—ã—à';
      const slotO = o >= 1 && o <= 64 ? '–í—ã–∏–≥—Ä—ã—à!' : '–ü—Ä–æ–∏–≥—Ä—ã—à';
      return `(${slotC} vs ${slotO})`;
      
    case 'üé≥':
      return `(${c} –∫–µ–≥–ª–µ–π vs ${o} –∫–µ–≥–ª–µ–π)`;
      
    default:
      return `(${c} vs ${o})`;
  }
};

DuelRound.prototype.isComplete = function() {
  return this.challengerResult !== null && this.opponentResult !== null;
};

DuelRound.prototype.needsChallengerMove = function() {
  return this.challengerResult === null;
};

DuelRound.prototype.needsOpponentMove = function() {
  return this.opponentResult === null;
};

// –•—É–∫–∏ –º–æ–¥–µ–ª–∏
DuelRound.addHook('beforeUpdate', async (round) => {
  // –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –æ–ø—Ä–µ–¥–µ–ª—è–µ–º –ø–æ–±–µ–¥–∏—Ç–µ–ª—è –∫–æ–≥–¥–∞ –æ–±–∞ –±—Ä–æ—Å–∫–∞ —Å–¥–µ–ª–∞–Ω—ã
  if (round.changed('opponentResult') && round.challengerResult !== null && round.opponentResult !== null) {
    const winner = round.determineWinner(round.gameType, round.challengerResult, round.opponentResult);
    
    if (winner) {
      // –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –¥—É—ç–ª–∏ –¥–ª—è usernames
      const Duel = require('./duel.model');
      const duel = await Duel.findOne({ where: { id: round.duelId } });
      
      if (duel) {
        round.winnerId = winner === 'challenger' ? duel.challengerId : duel.opponentId;
        round.winnerUsername = winner === 'challenger' ? duel.challengerUsername : duel.opponentUsername;
        round.isDraw = false;
      }
    } else {
      round.isDraw = true;
    }
    
    round.status = 'completed';
  }
});

// –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å–≤—è–∑–∏ —Å –¥—Ä—É–≥–∏–º–∏ –º–æ–¥–µ–ª—è–º–∏
DuelRound.associate = function(models) {
  // –†–∞—É–Ω–¥ –ø—Ä–∏–Ω–∞–¥–ª–µ–∂–∏—Ç –¥—É—ç–ª–∏
  DuelRound.belongsTo(models.Duel, {
    foreignKey: 'duelId',
    as: 'duel'
  });
};

module.exports = DuelRound;