// frontend/src/components/pvp/PvPGame.js
import React, { useState, useEffect } from 'react';
import PvPLobby from './PvPLobby';
import PvPResult from './PvPResult';
import { useWebApp } from '../../hooks';
import api from '../../services/api';
import '../../styles/PvPGame.css';

const PvPGame = ({ sessionId, userData, onClose }) => {
  const [gamePhase, setGamePhase] = useState('lobby'); // lobby, playing, result, error
  const [sessionData, setSessionData] = useState(null);
  const [gameResult, setGameResult] = useState(null);
  const [error, setError] = useState(null);
  const [loading, setLoading] = useState(false);
  const webApp = useWebApp();

  // –û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–∞—á–∞–ª–∞ –∏–≥—Ä—ã
  const handleGameStart = (result) => {
    console.log('PvP: –ò–≥—Ä–∞ –Ω–∞—á–∞—Ç–∞, —Ä–µ–∑—É–ª—å—Ç–∞—Ç:', result);
    setGameResult(result);
    setGamePhase('result');
    
    // –¢–∞–∫—Ç–∏–ª—å–Ω–∞—è –æ–±—Ä–∞—Ç–Ω–∞—è —Å–≤—è–∑—å
    if (webApp?.HapticFeedback) {
      webApp.HapticFeedback.impactOccurred('heavy');
    }
  };

  // –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—à–∏–±–æ–∫
  const handleError = (errorMessage) => {
    console.error('PvP: –û—à–∏–±–∫–∞ –∏–≥—Ä—ã:', errorMessage);
    setError(errorMessage);
    setGamePhase('error');
    
    if (webApp?.showAlert) {
      webApp.showAlert(`–û—à–∏–±–∫–∞: ${errorMessage}`);
    }
  };

  // –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ä–µ–≤–∞–Ω—à–∞
  const handleRematch = async () => {
    try {
      setLoading(true);
      console.log('PvP: –°–æ–∑–¥–∞–Ω–∏–µ —Ä–µ–≤–∞–Ω—à–∞ –¥–ª—è —Å–µ—Å—Å–∏–∏:', sessionId);
      
      // –°–æ–∑–¥–∞–µ–º —Ä–µ–≤–∞–Ω—à —á–µ—Ä–µ–∑ API
      const response = await api.post(`/pvp/rematch/${sessionData?.duelId || sessionId}`);
      
      if (response.data.success) {
        console.log('PvP: –†–µ–≤–∞–Ω—à —Å–æ–∑–¥–∞–Ω:', response.data.data);
        
        // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ
        if (webApp?.showAlert) {
          webApp.showAlert('–†–µ–≤–∞–Ω—à —Å–æ–∑–¥–∞–Ω! –û–∂–∏–¥–∞–µ–º –ø—Ä–∏–Ω—è—Ç–∏—è —Å–æ–ø–µ—Ä–Ω–∏–∫–æ–º...');
        }
        
        // –ú–æ–∂–Ω–æ –ø–µ—Ä–µ–Ω–∞–ø—Ä–∞–≤–∏—Ç—å –Ω–∞ –Ω–æ–≤—É—é —Å–µ—Å—Å–∏—é –∏–ª–∏ –ø–æ–∫–∞–∑–∞—Ç—å —Å—Ç–∞—Ç—É—Å
        // –ü–æ–∫–∞ –ø—Ä–æ—Å—Ç–æ –∑–∞–∫—Ä—ã–≤–∞–µ–º
        handleClose();
      }
    } catch (error) {
      console.error('PvP: –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è —Ä–µ–≤–∞–Ω—à–∞:', error);
      handleError(error.response?.data?.message || '–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è —Ä–µ–≤–∞–Ω—à–∞');
    } finally {
      setLoading(false);
    }
  };

  // –ó–∞–∫—Ä—ã—Ç–∏–µ –∏–≥—Ä—ã
  const handleClose = () => {
    if (webApp?.close) {
      webApp.close();
    } else if (onClose) {
      onClose();
    } else {
      // Fallback - –ø–æ–ø—ã—Ç–∫–∞ –∑–∞–∫—Ä—ã—Ç—å —á–µ—Ä–µ–∑ window
      window.close();
    }
  };

  // –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö —Å–µ—Å—Å–∏–∏
  const updateSessionData = (newData) => {
    setSessionData(prev => ({ ...prev, ...newData }));
  };

  // –≠—Ñ—Ñ–µ–∫—Ç –¥–ª—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ WebApp
  useEffect(() => {
    if (webApp) {
      // –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º –æ—Å–Ω–æ–≤–Ω—É—é –∫–Ω–æ–ø–∫—É
      webApp.MainButton.hide();
      
      // –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º –∫–Ω–æ–ø–∫—É –Ω–∞–∑–∞–¥
      webApp.BackButton.show();
      webApp.BackButton.onClick(handleClose);
      
      // –†–∞—Å—à–∏—Ä—è–µ–º –Ω–∞ –≤–µ—Å—å —ç–∫—Ä–∞–Ω
      webApp.expand();
      
      // –í–∫–ª—é—á–∞–µ–º –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –∑–∞–∫—Ä—ã—Ç–∏—è
      webApp.enableClosingConfirmation();
    }

    return () => {
      if (webApp) {
        webApp.BackButton.hide();
        webApp.MainButton.hide();
        webApp.disableClosingConfirmation();
      }
    };
  }, [webApp]);

  // –†–µ–Ω–¥–µ—Ä –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Ñ–∞–∑—ã –∏–≥—Ä—ã
  const renderContent = () => {
    switch (gamePhase) {
      case 'lobby':
        return (
          <PvPLobby
            sessionId={sessionId}
            userData={userData}
            onGameStart={handleGameStart}
            onError={handleError}
            onSessionUpdate={updateSessionData}
          />
        );

      case 'result':
        return (
          <PvPResult
            gameResult={gameResult}
            sessionData={sessionData}
            onRematch={handleRematch}
            onClose={handleClose}
          />
        );

      case 'error':
        return (
          <div className="pvp-error">
            <div className="error-content">
              <h2>‚ùå –û—à–∏–±–∫–∞</h2>
              <p>{error}</p>
              <div className="error-actions">
                <button 
                  className="retry-button"
                  onClick={() => {
                    setError(null);
                    setGamePhase('lobby');
                  }}
                >
                  üîÑ –ü–æ–ø—Ä–æ–±–æ–≤–∞—Ç—å —Å–Ω–æ–≤–∞
                </button>
                <button 
                  className="close-button"
                  onClick={handleClose}
                >
                  ‚ùå –ó–∞–∫—Ä—ã—Ç—å
                </button>
              </div>
            </div>
          </div>
        );

      default:
        return (
          <div className="pvp-loading">
            <div className="loading-spinner">
              <div className="spinner"></div>
              <p>–ó–∞–≥—Ä—É–∑–∫–∞ PvP –∏–≥—Ä—ã...</p>
            </div>
          </div>
        );
    }
  };

  return (
    <div className="pvp-game">
      {loading && (
        <div className="loading-overlay">
          <div className="loading-spinner">
            <div className="spinner"></div>
            <p>–û–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–ø—Ä–æ—Å–∞...</p>
          </div>
        </div>
      )}
      
      {renderContent()}
    </div>
  );
};

export default PvPGame;