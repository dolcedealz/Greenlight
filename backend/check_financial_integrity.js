// check_financial_integrity.js - –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ñ–∏–Ω–∞–Ω—Å–æ–≤–æ–π —Ü–µ–ª–æ—Å—Ç–Ω–æ—Å—Ç–∏ —Å–∏—Å—Ç–µ–º—ã
require('dotenv').config();
const mongoose = require('mongoose');
const { User, Transaction, Game, CasinoFinance } = require('./src/models');

// –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
const connectDB = async () => {
  try {
    await mongoose.connect(process.env.MONGODB_URI);
    console.log('‚úÖ –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ MongoDB —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ');
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ MongoDB:', error);
    process.exit(1);
  }
};

async function checkFinancialIntegrity() {
  await connectDB();
  
  try {
    console.log('\nüîç –ü–†–û–í–ï–†–ö–ê –§–ò–ù–ê–ù–°–û–í–û–ô –¶–ï–õ–û–°–¢–ù–û–°–¢–ò –°–ò–°–¢–ï–ú–´\n');
    
    // 1. –ü—Ä–æ–≤–µ—Ä—è–µ–º –æ–±—â—É—é —Å—É–º–º—É –±–∞–ª–∞–Ω—Å–æ–≤ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
    const users = await User.find({ isBlocked: false });
    const totalUserBalance = users.reduce((sum, user) => sum + (user.balance || 0), 0);
    console.log(`üí∞ –û–±—â–∏–π –±–∞–ª–∞–Ω—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: ${totalUserBalance.toFixed(2)} USDT`);
    
    // 2. –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏
    const deposits = await Transaction.aggregate([
      { $match: { type: 'deposit', status: 'completed' } },
      { $group: { _id: null, total: { $sum: '$amount' } } }
    ]);
    const totalDeposits = deposits[0]?.total || 0;
    console.log(`üì• –í—Å–µ–≥–æ –¥–µ–ø–æ–∑–∏—Ç–æ–≤: ${totalDeposits.toFixed(2)} USDT`);
    
    const withdrawals = await Transaction.aggregate([
      { $match: { type: 'withdrawal', status: 'completed' } },
      { $group: { _id: null, total: { $sum: { $abs: '$amount' } } } }
    ]);
    const totalWithdrawals = withdrawals[0]?.total || 0;
    console.log(`üì§ –í—Å–µ–≥–æ –≤—ã–≤–æ–¥–æ–≤: ${totalWithdrawals.toFixed(2)} USDT`);
    
    // 3. –ü—Ä–æ–≤–µ—Ä—è–µ–º –∏–≥—Ä—ã
    const bets = await Transaction.aggregate([
      { $match: { type: 'bet', status: 'completed' } },
      { $group: { _id: null, total: { $sum: { $abs: '$amount' } } } }
    ]);
    const totalBets = bets[0]?.total || 0;
    console.log(`üéÆ –í—Å–µ–≥–æ —Å—Ç–∞–≤–æ–∫: ${totalBets.toFixed(2)} USDT`);
    
    const wins = await Transaction.aggregate([
      { $match: { type: 'win', status: 'completed' } },
      { $group: { _id: null, total: { $sum: '$amount' } } }
    ]);
    const totalWins = wins[0]?.total || 0;
    console.log(`üèÜ –í—Å–µ–≥–æ –≤—ã–∏–≥—Ä—ã—à–µ–π: ${totalWins.toFixed(2)} USDT`);
    
    // 4. –ü—Ä–æ–≤–µ—Ä—è–µ–º –∏–≥—Ä–æ–≤—É—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
    const games = await Game.find({});
    let gameProfit = 0;
    let gameBets = 0;
    let gameWins = 0;
    
    games.forEach(game => {
      gameBets += game.bet || 0;
      if (game.win) {
        gameWins += (game.bet + game.profit);
      }
      gameProfit += game.profit || 0;
    });
    
    console.log(`\nüìä –°–¢–ê–¢–ò–°–¢–ò–ö–ê –ò–ì–†:`);
    console.log(`- –í—Å–µ–≥–æ –∏–≥—Ä: ${games.length}`);
    console.log(`- –°—É–º–º–∞ —Å—Ç–∞–≤–æ–∫ (–∏–∑ Game): ${gameBets.toFixed(2)} USDT`);
    console.log(`- –°—É–º–º–∞ –≤—ã–∏–≥—Ä—ã—à–µ–π (–∏–∑ Game): ${gameWins.toFixed(2)} USDT`);
    console.log(`- –ü—Ä–∏–±—ã–ª—å –∫–∞–∑–∏–Ω–æ (–∏–∑ Game): ${(gameBets - gameWins).toFixed(2)} USDT`);
    
    // 5. –°—Ä–∞–≤–Ω–∏–≤–∞–µ–º —Å —Ñ–∏–Ω–∞–Ω—Å–∞–º–∏ –∫–∞–∑–∏–Ω–æ
    const casinoFinance = await CasinoFinance.getInstance();
    console.log(`\nüíé –§–ò–ù–ê–ù–°–´ –ö–ê–ó–ò–ù–û:`);
    console.log(`- –ë–∞–ª–∞–Ω—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π (CasinoFinance): ${casinoFinance.totalUserBalance.toFixed(2)} USDT`);
    console.log(`- –û–ø–µ—Ä–∞—Ç–∏–≤–Ω—ã–π –±–∞–ª–∞–Ω—Å: ${casinoFinance.operationalBalance.toFixed(2)} USDT`);
    console.log(`- –í—Å–µ–≥–æ —Å—Ç–∞–≤–æ–∫ (CasinoFinance): ${casinoFinance.totalBets.toFixed(2)} USDT`);
    console.log(`- –í—Å–µ–≥–æ –≤—ã–∏–≥—Ä—ã—à–µ–π (CasinoFinance): ${casinoFinance.totalWins.toFixed(2)} USDT`);
    
    // 6. –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–∞—Å—Ö–æ–∂–¥–µ–Ω–∏—è
    console.log(`\n‚ö†Ô∏è  –ü–†–û–í–ï–†–ö–ê –†–ê–°–•–û–ñ–î–ï–ù–ò–ô:`);
    const balanceDiff = Math.abs(totalUserBalance - casinoFinance.totalUserBalance);
    if (balanceDiff > 0.01) {
      console.log(`‚ùå –†–∞—Å—Ö–æ–∂–¥–µ–Ω–∏–µ –≤ –±–∞–ª–∞–Ω—Å–∞—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: ${balanceDiff.toFixed(2)} USDT`);
    } else {
      console.log(`‚úÖ –ë–∞–ª–∞–Ω—Å—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π —Å–æ–≤–ø–∞–¥–∞—é—Ç`);
    }
    
    const betsDiff = Math.abs(totalBets - casinoFinance.totalBets);
    if (betsDiff > 0.01) {
      console.log(`‚ùå –†–∞—Å—Ö–æ–∂–¥–µ–Ω–∏–µ –≤ —Å—Ç–∞–≤–∫–∞—Ö: ${betsDiff.toFixed(2)} USDT`);
      console.log(`   Transaction: ${totalBets.toFixed(2)} vs CasinoFinance: ${casinoFinance.totalBets.toFixed(2)}`);
    } else {
      console.log(`‚úÖ –°—É–º–º—ã —Å—Ç–∞–≤–æ–∫ —Å–æ–≤–ø–∞–¥–∞—é—Ç`);
    }
    
    const winsDiff = Math.abs(totalWins - casinoFinance.totalWins);
    if (winsDiff > 0.01) {
      console.log(`‚ùå –†–∞—Å—Ö–æ–∂–¥–µ–Ω–∏–µ –≤ –≤—ã–∏–≥—Ä—ã—à–∞—Ö: ${winsDiff.toFixed(2)} USDT`);
      console.log(`   Transaction: ${totalWins.toFixed(2)} vs CasinoFinance: ${casinoFinance.totalWins.toFixed(2)}`);
    } else {
      console.log(`‚úÖ –°—É–º–º—ã –≤—ã–∏–≥—Ä—ã—à–µ–π —Å–æ–≤–ø–∞–¥–∞—é—Ç`);
    }
    
    // 7. –†–∞—Å—á–µ—Ç –æ–∂–∏–¥–∞–µ–º–æ–≥–æ –±–∞–ª–∞–Ω—Å–∞
    const expectedBalance = totalDeposits - totalWithdrawals + (totalBets - totalWins);
    console.log(`\nüí° –û–ñ–ò–î–ê–ï–ú–´–ô –ë–ê–õ–ê–ù–°:`);
    console.log(`–î–µ–ø–æ–∑–∏—Ç—ã (${totalDeposits.toFixed(2)}) - –í—ã–≤–æ–¥—ã (${totalWithdrawals.toFixed(2)}) + –ü—Ä–∏–±—ã–ª—å –∫–∞–∑–∏–Ω–æ (${(totalBets - totalWins).toFixed(2)}) = ${expectedBalance.toFixed(2)} USDT`);
    console.log(`–§–∞–∫—Ç–∏—á–µ—Å–∫–∏–π –±–∞–ª–∞–Ω—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: ${totalUserBalance.toFixed(2)} USDT`);
    console.log(`–†–∞–∑–Ω–∏—Ü–∞: ${(totalUserBalance - expectedBalance).toFixed(2)} USDT`);
    
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞:', error);
  } finally {
    await mongoose.connection.close();
    console.log('\n‚úÖ –ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞');
  }
}

// –ó–∞–ø—É—Å–∫ –ø—Ä–æ–≤–µ—Ä–∫–∏
checkFinancialIntegrity();