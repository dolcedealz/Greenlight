// backend/src/services/balance-reconciliation.service.js
const axios = require('axios');
const { CasinoFinance, User, Deposit, Withdrawal } = require('../models');
const mongoose = require('mongoose');

class BalanceReconciliationService {
  constructor() {
    this.cryptoBotApiUrl = process.env.CRYPTO_PAY_API_URL || 'https://pay.crypt.bot/api';
    this.cryptoBotToken = process.env.CRYPTO_PAY_API_TOKEN;
    
    // –°–æ–∑–¥–∞–µ–º axios instance –¥–ª—è CryptoBot API
    this.api = axios.create({
      baseURL: this.cryptoBotApiUrl,
      headers: {
        'Crypto-Pay-API-Token': this.cryptoBotToken,
        'Content-Type': 'application/json'
      },
      timeout: 30000
    });

    // –ü–æ—Ä–æ–≥–∏ –¥–ª—è –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–π (–≤ USDT)
    this.thresholds = {
      minor: 1,      // –ú–µ–ª–∫–∏–µ —Ä–∞—Å—Ö–æ–∂–¥–µ–Ω–∏—è –¥–æ 1 USDT
      moderate: 10,  // –£–º–µ—Ä–µ–Ω–Ω—ã–µ —Ä–∞—Å—Ö–æ–∂–¥–µ–Ω–∏—è –¥–æ 10 USDT
      critical: 100  // –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∏–µ —Ä–∞—Å—Ö–æ–∂–¥–µ–Ω–∏—è —Å–≤—ã—à–µ 100 USDT
    };

    // –ò—Å—Ç–æ—Ä–∏—è —Å–≤–µ—Ä–æ–∫
    this.reconciliationHistory = [];
  }

  /**
   * –ü–æ–ª—É—á–∞–µ—Ç –±–∞–ª–∞–Ω—Å USDT —Å CryptoBot
   */
  async getCryptoBotBalance() {
    try {
      console.log('üîç RECONCILIATION: –ü–æ–ª—É—á–µ–Ω–∏–µ –±–∞–ª–∞–Ω—Å–∞ —Å CryptoBot...');
      
      const response = await this.api.get('/getBalance');
      
      if (!response.data.ok) {
        throw new Error(`CryptoBot API Error: ${response.data.error?.name || 'Unknown error'}`);
      }

      const balances = response.data.result;
      const usdtBalance = balances.find(b => b.currency_code === 'USDT');
      
      if (!usdtBalance) {
        console.warn('‚ö†Ô∏è RECONCILIATION: USDT –±–∞–ª–∞–Ω—Å –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ CryptoBot');
        return {
          available: 0,
          onhold: 0,
          total: 0
        };
      }

      const result = {
        available: parseFloat(usdtBalance.available),
        onhold: parseFloat(usdtBalance.onhold),
        total: parseFloat(usdtBalance.available) + parseFloat(usdtBalance.onhold)
      };

      console.log(`üí∞ RECONCILIATION: CryptoBot –±–∞–ª–∞–Ω—Å - –¥–æ—Å—Ç—É–ø–Ω–æ: ${result.available} USDT, –∑–∞–º–æ—Ä–æ–∂–µ–Ω–æ: ${result.onhold} USDT, –≤—Å–µ–≥–æ: ${result.total} USDT`);
      
      return result;

    } catch (error) {
      console.error('‚ùå RECONCILIATION: –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –±–∞–ª–∞–Ω—Å–∞ CryptoBot:', error);
      throw new Error(`–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –±–∞–ª–∞–Ω—Å CryptoBot: ${error.message}`);
    }
  }

  /**
   * –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ—Ç –æ–∂–∏–¥–∞–µ–º—ã–π –±–∞–ª–∞–Ω—Å –Ω–∞ –æ—Å–Ω–æ–≤–µ –Ω–∞—à–∏—Ö –¥–∞–Ω–Ω—ã—Ö
   */
  async calculateExpectedBalance() {
    try {
      console.log('üìä RECONCILIATION: –†–∞—Å—á–µ—Ç –æ–∂–∏–¥–∞–µ–º–æ–≥–æ –±–∞–ª–∞–Ω—Å–∞...');

      // –ü–æ–ª—É—á–∞–µ–º —Ñ–∏–Ω–∞–Ω—Å–æ–≤—É—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
      const finance = await CasinoFinance.getInstance();

      // –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º –æ–±—â–∏–π –±–∞–ª–∞–Ω—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π (–æ—Å–Ω–æ–≤–Ω–æ–π + —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω—ã–π)
      const userBalanceResult = await User.aggregate([
        { $match: { isBlocked: false } },
        { 
          $group: { 
            _id: null, 
            regularBalance: { $sum: '$balance' },
            referralBalance: { $sum: '$referralStats.referralBalance' }
          } 
        }
      ]);

      const regularBalance = userBalanceResult[0]?.regularBalance || 0;
      const referralBalance = userBalanceResult[0]?.referralBalance || 0;
      const totalUserBalance = regularBalance + referralBalance;

      // –°—É–º–º–∏—Ä—É–µ–º –≤—Å–µ —É—Å–ø–µ—à–Ω—ã–µ –¥–µ–ø–æ–∑–∏—Ç—ã
      const totalDepositsResult = await Deposit.aggregate([
        { $match: { status: 'paid' } },
        { $group: { _id: null, total: { $sum: '$amount' } } }
      ]);
      const totalDeposits = totalDepositsResult[0]?.total || 0;

      // –°—É–º–º–∏—Ä—É–µ–º –≤—Å–µ —É—Å–ø–µ—à–Ω—ã–µ –≤—ã–≤–æ–¥—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
      const totalWithdrawalsResult = await Withdrawal.aggregate([
        { $match: { status: 'completed' } },
        { $group: { _id: null, total: { $sum: '$amount' } } }
      ]);
      const totalWithdrawals = totalWithdrawalsResult[0]?.total || 0;

      // –û–∂–∏–¥–∞–µ–º—ã–π –±–∞–ª–∞–Ω—Å = –î–µ–ø–æ–∑–∏—Ç—ã - –í—ã–≤–æ–¥—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π - –í—ã–≤–æ–¥—ã –≤–ª–∞–¥–µ–ª—å—Ü–∞
      const expectedBalance = totalDeposits - totalWithdrawals - (finance.totalOwnerWithdrawals || 0);

      console.log('üìà RECONCILIATION: –†–∞—Å—á–µ—Ç –±–∞–ª–∞–Ω—Å–∞:');
      console.log(`  ‚Ä¢ –ë–∞–ª–∞–Ω—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π (–æ—Å–Ω–æ–≤–Ω–æ–π): ${regularBalance.toFixed(2)} USDT`);
      console.log(`  ‚Ä¢ –ë–∞–ª–∞–Ω—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π (—Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω—ã–π): ${referralBalance.toFixed(2)} USDT`);
      console.log(`  ‚Ä¢ –û–±—â–∏–π –±–∞–ª–∞–Ω—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: ${totalUserBalance.toFixed(2)} USDT`);
      console.log(`  ‚Ä¢ –û–ø–µ—Ä–∞—Ç–∏–≤–Ω—ã–π –±–∞–ª–∞–Ω—Å –∫–∞–∑–∏–Ω–æ: ${finance.operationalBalance.toFixed(2)} USDT`);
      console.log(`  ‚Ä¢ –í—Å–µ–≥–æ –¥–µ–ø–æ–∑–∏—Ç–æ–≤: ${totalDeposits.toFixed(2)} USDT`);
      console.log(`  ‚Ä¢ –í—ã–≤–æ–¥—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: ${totalWithdrawals.toFixed(2)} USDT`);
      console.log(`  ‚Ä¢ –í—ã–≤–æ–¥—ã –≤–ª–∞–¥–µ–ª—å—Ü–∞: ${(finance.totalOwnerWithdrawals || 0).toFixed(2)} USDT`);
      console.log(`  ‚Ä¢ –û–∂–∏–¥–∞–µ–º—ã–π –±–∞–ª–∞–Ω—Å CryptoBot: ${expectedBalance.toFixed(2)} USDT`);

      return {
        totalUserBalance,
        regularBalance,
        referralBalance,
        operationalBalance: finance.operationalBalance,
        totalDeposits,
        totalWithdrawals,
        totalOwnerWithdrawals: finance.totalOwnerWithdrawals || 0,
        expectedBalance
      };

    } catch (error) {
      console.error('‚ùå RECONCILIATION: –û—à–∏–±–∫–∞ —Ä–∞—Å—á–µ—Ç–∞ –æ–∂–∏–¥–∞–µ–º–æ–≥–æ –±–∞–ª–∞–Ω—Å–∞:', error);
      throw error;
    }
  }

  /**
   * –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ—Ç —Ä–∞—Å—Ö–æ–∂–¥–µ–Ω–∏—è –º–µ–∂–¥—É –±–∞–ª–∞–Ω—Å–∞–º–∏
   */
  analyzeDiscrepancies(cryptoBotBalance, expectedData) {
    const discrepancy = cryptoBotBalance.total - expectedData.expectedBalance;
    const discrepancyAbs = Math.abs(discrepancy);

    let severity = 'ok';
    let level = 'info';

    if (discrepancyAbs > this.thresholds.critical) {
      severity = 'critical';
      level = 'error';
    } else if (discrepancyAbs > this.thresholds.moderate) {
      severity = 'moderate';
      level = 'warn';
    } else if (discrepancyAbs > this.thresholds.minor) {
      severity = 'minor';
      level = 'warn';
    }

    // –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –≤–æ–∑–º–æ–∂–Ω—ã–µ –ø—Ä–∏—á–∏–Ω—ã —Ä–∞—Å—Ö–æ–∂–¥–µ–Ω–∏–π
    const analysis = [];

    if (discrepancy > 0) {
      analysis.push('–ù–∞ CryptoBot –±–æ–ª—å—à–µ —Å—Ä–µ–¥—Å—Ç–≤ —á–µ–º –æ–∂–∏–¥–∞–µ—Ç—Å—è');
      analysis.push('–í–æ–∑–º–æ–∂–Ω—ã–µ –ø—Ä–∏—á–∏–Ω—ã: –Ω–µ–∑–∞–≤–µ—Ä—à–µ–Ω–Ω—ã–µ –¥–µ–ø–æ–∑–∏—Ç—ã, –≤–æ–∑–≤—Ä–∞—Ç—ã, —Ä—É—á–Ω—ã–µ –ø–æ–ø–æ–ª–Ω–µ–Ω–∏—è');
    } else if (discrepancy < 0) {
      analysis.push('–ù–∞ CryptoBot –º–µ–Ω—å—à–µ —Å—Ä–µ–¥—Å—Ç–≤ —á–µ–º –æ–∂–∏–¥–∞–µ—Ç—Å—è');
      analysis.push('–í–æ–∑–º–æ–∂–Ω—ã–µ –ø—Ä–∏—á–∏–Ω—ã: –Ω–µ–∑–∞–≤–µ—Ä—à–µ–Ω–Ω—ã–µ –≤—ã–≤–æ–¥—ã, –∫–æ–º–∏—Å—Å–∏–∏ CryptoBot, —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–∏–µ –æ—à–∏–±–∫–∏');
    } else {
      analysis.push('–ë–∞–ª–∞–Ω—Å—ã –ø–æ–ª–Ω–æ—Å—Ç—å—é —Å–æ–≤–ø–∞–¥–∞—é—Ç');
    }

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –ª–æ–≥–∏–∫—É –±–∞–ª–∞–Ω—Å–æ–≤
    const logicIssues = [];
    
    if (expectedData.totalUserBalance > cryptoBotBalance.total) {
      logicIssues.push('–ö–†–ò–¢–ò–ß–ù–û: –ë–∞–ª–∞–Ω—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –ø—Ä–µ–≤—ã—à–∞–µ—Ç –æ–±—â–∏–π –±–∞–ª–∞–Ω—Å CryptoBot');
    }

    if (expectedData.operationalBalance < 0 && cryptoBotBalance.total > expectedData.totalUserBalance) {
      logicIssues.push('–û—Ç—Ä–∏—Ü–∞—Ç–µ–ª—å–Ω—ã–π –æ–ø–µ—Ä–∞—Ç–∏–≤–Ω—ã–π –±–∞–ª–∞–Ω—Å –ø—Ä–∏ –¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ—Å—Ç–∏ —Å—Ä–µ–¥—Å—Ç–≤');
    }

    return {
      discrepancy,
      discrepancyAbs,
      severity,
      level,
      analysis,
      logicIssues,
      percentage: expectedData.expectedBalance > 0 ? (discrepancyAbs / expectedData.expectedBalance * 100) : 0
    };
  }

  /**
   * –í—ã–ø–æ–ª–Ω—è–µ—Ç –ø–æ–ª–Ω—É—é —Å–≤–µ—Ä–∫—É –±–∞–ª–∞–Ω—Å–æ–≤
   */
  async performReconciliation() {
    const reconciliationId = `reconciliation_${Date.now()}`;
    const startTime = new Date();

    try {
      console.log(`üîç RECONCILIATION: –ù–∞—á–∞–ª–æ —Å–≤–µ—Ä–∫–∏ –±–∞–ª–∞–Ω—Å–æ–≤ [${reconciliationId}]`);

      // 1. –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ —Å CryptoBot
      const cryptoBotBalance = await this.getCryptoBotBalance();

      // 2. –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º –æ–∂–∏–¥–∞–µ–º—ã–π –±–∞–ª–∞–Ω—Å
      const expectedData = await this.calculateExpectedBalance();

      // 3. –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º —Ä–∞—Å—Ö–æ–∂–¥–µ–Ω–∏—è
      const discrepancies = this.analyzeDiscrepancies(cryptoBotBalance, expectedData);

      // 4. –§–æ—Ä–º–∏—Ä—É–µ–º –æ—Ç—á–µ—Ç
      const report = {
        id: reconciliationId,
        timestamp: startTime,
        duration: Date.now() - startTime.getTime(),
        cryptoBot: cryptoBotBalance,
        expected: expectedData,
        discrepancies,
        status: discrepancies.severity === 'ok' ? 'success' : 'warning',
        recommendations: this.generateRecommendations(discrepancies, expectedData, cryptoBotBalance)
      };

      // 5. –õ–æ–≥–∏—Ä—É–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
      this.logReconciliationResults(report);

      // 6. –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –∏—Å—Ç–æ—Ä–∏—é
      this.reconciliationHistory.unshift(report);
      if (this.reconciliationHistory.length > 100) {
        this.reconciliationHistory = this.reconciliationHistory.slice(0, 100);
      }

      // 7. –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –ø—Ä–∏ –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏—Ö —Ä–∞—Å—Ö–æ–∂–¥–µ–Ω–∏—è—Ö
      if (discrepancies.severity === 'critical') {
        await this.notifyAdmins(report);
      }

      console.log(`‚úÖ RECONCILIATION: –°–≤–µ—Ä–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞ [${reconciliationId}] - —Å—Ç–∞—Ç—É—Å: ${report.status}`);

      return report;

    } catch (error) {
      console.error(`‚ùå RECONCILIATION: –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–≤–µ—Ä–∫–µ [${reconciliationId}]:`, error);
      
      const errorReport = {
        id: reconciliationId,
        timestamp: startTime,
        duration: Date.now() - startTime.getTime(),
        status: 'error',
        error: error.message,
        stack: error.stack
      };

      this.reconciliationHistory.unshift(errorReport);
      throw error;
    }
  }

  /**
   * –ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –Ω–∞ –æ—Å–Ω–æ–≤–µ –∞–Ω–∞–ª–∏–∑–∞
   */
  generateRecommendations(discrepancies, expectedData, cryptoBotBalance) {
    const recommendations = [];

    if (discrepancies.severity === 'critical') {
      recommendations.push('üö® –ù–ï–ú–ï–î–õ–ï–ù–ù–û –ø—Ä–æ–≤–µ—Ä—å—Ç–µ –≤—Å–µ –Ω–µ–∑–∞–≤–µ—Ä—à–µ–Ω–Ω—ã–µ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏');
      recommendations.push('üîç –ü—Ä–æ–≤–µ–¥–∏—Ç–µ —Ä—É—á–Ω—É—é –ø—Ä–æ–≤–µ—Ä–∫—É –∏—Å—Ç–æ—Ä–∏–∏ –æ–ø–µ—Ä–∞—Ü–∏–π CryptoBot');
      recommendations.push('‚è∏Ô∏è –†–∞—Å—Å–º–æ—Ç—Ä–∏—Ç–µ –≤—Ä–µ–º–µ–Ω–Ω—É—é –ø—Ä–∏–æ—Å—Ç–∞–Ω–æ–≤–∫—É –≤—ã–≤–æ–¥–æ–≤ –¥–æ –≤—ã—è—Å–Ω–µ–Ω–∏—è –ø—Ä–∏—á–∏–Ω');
    }

    if (discrepancies.severity === 'moderate') {
      recommendations.push('‚ö†Ô∏è –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –Ω–µ–∑–∞–≤–µ—Ä—à–µ–Ω–Ω—ã–µ –¥–µ–ø–æ–∑–∏—Ç—ã –∏ –≤—ã–≤–æ–¥—ã –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–µ 24 —á–∞—Å–∞');
      recommendations.push('üìä –ó–∞–ø—É—Å—Ç–∏—Ç–µ –ø–µ—Ä–µ—Å—á–µ—Ç —Ñ–∏–Ω–∞–Ω—Å–æ–≤–æ–π —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏');
    }

    if (discrepancies.logicIssues.length > 0) {
      recommendations.push('üîß –û–±–Ω–∞—Ä—É–∂–µ–Ω—ã –ª–æ–≥–∏—á–µ—Å–∫–∏–µ –Ω–µ—Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏—è - —Ç—Ä–µ–±—É–µ—Ç—Å—è –∞–Ω–∞–ª–∏–∑');
      discrepancies.logicIssues.forEach(issue => {
        recommendations.push(`   ‚Ä¢ ${issue}`);
      });
    }

    if (cryptoBotBalance.onhold > 0) {
      recommendations.push(`üí∞ –ù–∞ CryptoBot –∑–∞–º–æ—Ä–æ–∂–µ–Ω–æ ${cryptoBotBalance.onhold} USDT - –ø—Ä–æ–≤–µ—Ä—å—Ç–µ –ø—Ä–∏—á–∏–Ω—ã`);
    }

    if (recommendations.length === 0) {
      recommendations.push('‚úÖ –ë–∞–ª–∞–Ω—Å—ã –≤ –Ω–æ—Ä–º–µ, —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–π –Ω–µ—Ç');
    }

    return recommendations;
  }

  /**
   * –õ–æ–≥–∏—Ä—É–µ—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã —Å–≤–µ—Ä–∫–∏
   */
  logReconciliationResults(report) {
    const { discrepancies, cryptoBot, expected } = report;

    console.log('\nüìã –û–¢–ß–ï–¢ –û –°–í–ï–†–ö–ï –ë–ê–õ–ê–ù–°–û–í:');
    console.log(`üïê –í—Ä–µ–º—è: ${report.timestamp.toISOString()}`);
    console.log(`‚è±Ô∏è –î–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å: ${report.duration}ms`);
    console.log('');
    console.log('üí∞ –ë–ê–õ–ê–ù–°–´:');
    console.log(`  CryptoBot (–≤—Å–µ–≥–æ): ${cryptoBot.total.toFixed(2)} USDT`);
    console.log(`  CryptoBot (–¥–æ—Å—Ç—É–ø–Ω–æ): ${cryptoBot.available.toFixed(2)} USDT`);
    console.log(`  CryptoBot (–∑–∞–º–æ—Ä–æ–∂–µ–Ω–æ): ${cryptoBot.onhold.toFixed(2)} USDT`);
    console.log(`  –û–∂–∏–¥–∞–µ–º—ã–π: ${expected.expectedBalance.toFixed(2)} USDT`);
    console.log('');
    console.log('üìä –†–ê–°–•–û–ñ–î–ï–ù–ò–Ø:');
    console.log(`  –†–∞–∑–Ω–∏—Ü–∞: ${discrepancies.discrepancy > 0 ? '+' : ''}${discrepancies.discrepancy.toFixed(2)} USDT`);
    console.log(`  –ü—Ä–æ—Ü–µ–Ω—Ç: ${discrepancies.percentage.toFixed(2)}%`);
    console.log(`  –°–µ—Ä—å–µ–∑–Ω–æ—Å—Ç—å: ${discrepancies.severity.toUpperCase()}`);
    console.log('');
    console.log('üîç –ê–ù–ê–õ–ò–ó:');
    discrepancies.analysis.forEach(item => console.log(`  ‚Ä¢ ${item}`));
    console.log('');
    console.log('üí° –†–ï–ö–û–ú–ï–ù–î–ê–¶–ò–ò:');
    report.recommendations.forEach(item => console.log(`  ${item}`));
    console.log('');
  }

  /**
   * –û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞–º –ø—Ä–∏ –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏—Ö —Ä–∞—Å—Ö–æ–∂–¥–µ–Ω–∏—è—Ö
   */
  async notifyAdmins(report) {
    try {
      // TODO: –ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è —Å Telegram Bot –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞–º
      console.log('üö® –ö–†–ò–¢–ò–ß–ï–°–ö–û–ï –†–ê–°–•–û–ñ–î–ï–ù–ò–ï - —Ç—Ä–µ–±—É–µ—Ç—Å—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –∞–¥–º–∏–Ω–æ–≤');
      
      const message = 
        `üö® –ö–†–ò–¢–ò–ß–ï–°–ö–û–ï –†–ê–°–•–û–ñ–î–ï–ù–ò–ï –ë–ê–õ–ê–ù–°–û–í\n\n` +
        `üí∞ CryptoBot: ${report.cryptoBot.total.toFixed(2)} USDT\n` +
        `üìä –û–∂–∏–¥–∞–µ–º—ã–π: ${report.expected.expectedBalance.toFixed(2)} USDT\n` +
        `üìâ –†–∞–∑–Ω–∏—Ü–∞: ${report.discrepancies.discrepancy.toFixed(2)} USDT\n\n` +
        `‚ö†Ô∏è –¢—Ä–µ–±—É–µ—Ç—Å—è –Ω–µ–º–µ–¥–ª–µ–Ω–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞!\n` +
        `üïê ${report.timestamp.toISOString()}`;

      console.log('üì± –°–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è –∞–¥–º–∏–Ω–æ–≤:', message);

      // –ó–¥–µ—Å—å –º–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –æ—Ç–ø—Ä–∞–≤–∫—É –≤ Telegram, Email –∏ —Ç.–¥.
      
    } catch (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –∞–¥–º–∏–Ω–∞–º:', error);
    }
  }

  /**
   * –ü–æ–ª—É—á–∞–µ—Ç –∏—Å—Ç–æ—Ä–∏—é —Å–≤–µ—Ä–æ–∫
   */
  getReconciliationHistory(limit = 10) {
    return this.reconciliationHistory.slice(0, limit);
  }

  /**
   * –ó–∞–ø—É—Å–∫–∞–µ—Ç –ø–µ—Ä–∏–æ–¥–∏—á–µ—Å–∫—É—é —Å–≤–µ—Ä–∫—É
   */
  startPeriodicReconciliation(intervalMinutes = 60) {
    console.log(`üîÑ RECONCILIATION: –ó–∞–ø—É—Å–∫ –ø–µ—Ä–∏–æ–¥–∏—á–µ—Å–∫–æ–π —Å–≤–µ—Ä–∫–∏ –∫–∞–∂–¥—ã–µ ${intervalMinutes} –º–∏–Ω—É—Ç`);
    
    // –í—ã–ø–æ–ª–Ω—è–µ–º –ø–µ—Ä–≤—É—é —Å–≤–µ—Ä–∫—É —Å—Ä–∞–∑—É
    this.performReconciliation().catch(error => {
      console.error('‚ùå –û—à–∏–±–∫–∞ –ø–µ—Ä–≤–æ–π —Å–≤–µ—Ä–∫–∏:', error);
    });

    // –ó–∞–ø—É—Å–∫–∞–µ–º –ø–µ—Ä–∏–æ–¥–∏—á–µ—Å–∫—É—é —Å–≤–µ—Ä–∫—É
    const interval = setInterval(() => {
      this.performReconciliation().catch(error => {
        console.error('‚ùå –û—à–∏–±–∫–∞ –ø–µ—Ä–∏–æ–¥–∏—á–µ—Å–∫–æ–π —Å–≤–µ—Ä–∫–∏:', error);
      });
    }, intervalMinutes * 60 * 1000);

    return interval;
  }

  /**
   * –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç –ø–µ—Ä–∏–æ–¥–∏—á–µ—Å–∫—É—é —Å–≤–µ—Ä–∫—É
   */
  stopPeriodicReconciliation(interval) {
    if (interval) {
      clearInterval(interval);
      console.log('‚èπÔ∏è RECONCILIATION: –ü–µ—Ä–∏–æ–¥–∏—á–µ—Å–∫–∞—è —Å–≤–µ—Ä–∫–∞ –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞');
    }
  }

  /**
   * –≠–∫—Å–ø–æ—Ä—Ç–∏—Ä—É–µ—Ç –æ—Ç—á–µ—Ç –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞
   */
  exportReport(reportId = null) {
    const report = reportId 
      ? this.reconciliationHistory.find(r => r.id === reportId)
      : this.reconciliationHistory[0];

    if (!report) {
      throw new Error('–û—Ç—á–µ—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω');
    }

    return {
      ...report,
      exportedAt: new Date(),
      version: '1.0'
    };
  }
}

module.exports = new BalanceReconciliationService();