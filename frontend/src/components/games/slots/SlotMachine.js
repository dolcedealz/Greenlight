// frontend/src/components/games/slots/SlotMachine.js
import React, { useState, useEffect, useCallback, useRef } from 'react';
import '../../../styles/SlotMachine.css';

// –°–∏–º–≤–æ–ª—ã —Å–ª–æ—Ç–æ–≤ —Ç–æ–ª—å–∫–æ —Å —ç–º–æ–¥–∑–∏ (—É–±–∏—Ä–∞–µ–º PNG)
const SLOT_SYMBOLS = [
  { symbol: 'cherry', name: 'cherry', weight: 25, payout: 4, emoji: 'üçí' },
  { symbol: 'lemon', name: 'lemon', weight: 20, payout: 6, emoji: 'üçã' },
  { symbol: 'persik', name: 'persik', weight: 15, payout: 8, emoji: 'üçë' },
  { symbol: 'grape', name: 'grape', weight: 12, payout: 12, emoji: 'üçá' },
  { symbol: 'bell', name: 'bell', weight: 8, payout: 18, emoji: 'üîî' },
  { symbol: 'diamond', name: 'diamond', weight: 5, payout: 30, emoji: 'üíé' },
  { symbol: 'star', name: 'star', weight: 3, payout: 50, emoji: '‚≠ê' },
  { symbol: 'jackpot', name: 'jackpot', weight: 2, payout: 100, emoji: 'üé∞' }
];

const SlotMachine = ({ 
  onSpin, 
  isSpinning, 
  balance, 
  betAmount,
  lastResult,
  autoplay,
  loading,
  gameStats 
}) => {
  // –ù–∞—á–∞–ª—å–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –±–∞—Ä–∞–±–∞–Ω–æ–≤
  const [reels, setReels] = useState(() => [
    ['cherry', 'lemon', 'persik', 'grape'],
    ['cherry', 'lemon', 'persik', 'grape'],
    ['cherry', 'lemon', 'persik', 'grape'],
    ['cherry', 'lemon', 'persik', 'grape']
  ]);
  
  // –°–æ—Å—Ç–æ—è–Ω–∏—è –∞–Ω–∏–º–∞—Ü–∏–∏
  const [isAnimating, setIsAnimating] = useState(false);
  const [animatingReels, setAnimatingReels] = useState([false, false, false, false]);
  const [winningLines, setWinningLines] = useState([]);
  const [showingResult, setShowingResult] = useState(false);
  const [spinPhase, setSpinPhase] = useState('idle'); // 'idle', 'spinning', 'stopping', 'stopped'
  
  // –†–µ—Ñ—ã
  const animationIntervals = useRef([]);
  const animationTimeouts = useRef([]);
  const lastResultRef = useRef(null);
  const spinStartTime = useRef(null);
  
  // –ü–æ–ª—É—á–∏—Ç—å –¥–∞–Ω–Ω—ã–µ —Å–∏–º–≤–æ–ª–∞
  const getSymbolData = useCallback((symbolName) => {
    return SLOT_SYMBOLS.find(s => s.symbol === symbolName) || SLOT_SYMBOLS[0];
  }, []);
  
  // –ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Å–ª—É—á–∞–π–Ω–æ–≥–æ —Å–∏–º–≤–æ–ª–∞ –¥–ª—è –∞–Ω–∏–º–∞—Ü–∏–∏
  const getRandomSymbol = useCallback(() => {
    const totalWeight = SLOT_SYMBOLS.reduce((sum, s) => sum + s.weight, 0);
    let random = Math.random() * totalWeight;
    
    for (const symbolData of SLOT_SYMBOLS) {
      random -= symbolData.weight;
      if (random <= 0) {
        return symbolData.symbol;
      }
    }
    
    return SLOT_SYMBOLS[0].symbol;
  }, []);
  
  // –û—á–∏—Å—Ç–∫–∞ —Ç–∞–π–º–∞—É—Ç–æ–≤ –∏ –∏–Ω—Ç–µ—Ä–≤–∞–ª–æ–≤
  const clearAnimations = useCallback(() => {
    animationIntervals.current.forEach(interval => {
      if (interval) clearInterval(interval);
    });
    animationIntervals.current = [];
    
    animationTimeouts.current.forEach(timeout => {
      if (timeout) clearTimeout(timeout);
    });
    animationTimeouts.current = [];
  }, []);
  
  // –ó–∞–ø—É—Å–∫ –∞–Ω–∏–º–∞—Ü–∏–∏ –ø—Ä–∏ –Ω–∞—á–∞–ª–µ —Å–ø–∏–Ω–∞
  useEffect(() => {
    if (isSpinning && !isAnimating) {
      console.log('–°–õ–û–¢–´: –ó–∞–ø—É—Å–∫ –∞–Ω–∏–º–∞—Ü–∏–∏');
      
      // –û—á–∏—â–∞–µ–º –ø—Ä–µ–¥—ã–¥—É—â–∏–µ –∞–Ω–∏–º–∞—Ü–∏–∏
      clearAnimations();
      
      // –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏—è
      setWinningLines([]);
      setShowingResult(false);
      setIsAnimating(true);
      setSpinPhase('spinning');
      setAnimatingReels([true, true, true, true]);
      spinStartTime.current = Date.now();
      
      // –ó–∞–ø—É—Å–∫–∞–µ–º –∞–Ω–∏–º–∞—Ü–∏—é –±—ã—Å—Ç—Ä–æ–π —Å–º–µ–Ω—ã —Å–∏–º–≤–æ–ª–æ–≤ —Å —É—Å–∫–æ—Ä–µ–Ω–∏–µ–º
      const intervals = [];
      
      for (let reelIndex = 0; reelIndex < 4; reelIndex++) {
        let spinSpeed = 60; // –ù–∞—á–∞–ª—å–Ω–∞—è —Å–∫–æ—Ä–æ—Å—Ç—å
        
        const interval = setInterval(() => {
          setReels(prevReels => {
            const newReels = [...prevReels];
            newReels[reelIndex] = Array(4).fill().map(() => getRandomSymbol());
            return newReels;
          });
          
          // –£—Å–∫–æ—Ä—è–µ–º –≤—Ä–∞—â–µ–Ω–∏–µ
          if (spinSpeed > 30) {
            spinSpeed -= 2;
          }
        }, spinSpeed);
        
        intervals.push(interval);
      }
      
      animationIntervals.current = intervals;
      
      // –§–∞–∑–∞ –∑–∞–º–µ–¥–ª–µ–Ω–∏—è
      const slowdownTimeout = setTimeout(() => {
        setSpinPhase('stopping');
        
        // –ó–∞–º–µ–¥–ª—è–µ–º –≤—Å–µ –±–∞—Ä–∞–±–∞–Ω—ã
        animationIntervals.current.forEach((interval, index) => {
          if (interval) {
            clearInterval(interval);
            
            // –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—ã–π –∏–Ω—Ç–µ—Ä–≤–∞–ª —Å –º–µ–¥–ª–µ–Ω–Ω–æ–π —Å–∫–æ—Ä–æ—Å—Ç—å—é
            const slowInterval = setInterval(() => {
              setReels(prevReels => {
                const newReels = [...prevReels];
                newReels[index] = Array(4).fill().map(() => getRandomSymbol());
                return newReels;
              });
            }, 150); // –ú–µ–¥–ª–µ–Ω–Ω–æ–µ –≤—Ä–∞—â–µ–Ω–∏–µ
            
            animationIntervals.current[index] = slowInterval;
          }
        });
      }, 1000);
      
      animationTimeouts.current.push(slowdownTimeout);
      
      // –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –±–∞—Ä–∞–±–∞–Ω—ã –ø–æ–æ—á–µ—Ä–µ–¥–Ω–æ —Å –∑–∞–¥–µ—Ä–∂–∫–æ–π
      const stopDelays = [1800, 2000, 2200, 2400]; // –£–≤–µ–ª–∏—á–µ–Ω–Ω—ã–µ –∑–∞–¥–µ—Ä–∂–∫–∏
      
      stopDelays.forEach((delay, index) => {
        const timeout = setTimeout(() => {
          // –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∏–Ω—Ç–µ—Ä–≤–∞–ª –¥–ª—è —ç—Ç–æ–≥–æ –±–∞—Ä–∞–±–∞–Ω–∞
          if (animationIntervals.current[index]) {
            clearInterval(animationIntervals.current[index]);
            animationIntervals.current[index] = null;
          }
          
          // –û—Ç–∫–ª—é—á–∞–µ–º –∞–Ω–∏–º–∞—Ü–∏—é –¥–ª—è –±–∞—Ä–∞–±–∞–Ω–∞ —Å —ç—Ñ—Ñ–µ–∫—Ç–æ–º "–ø–æ–¥–ø—Ä—ã–≥–∏–≤–∞–Ω–∏—è"
          setAnimatingReels(prev => {
            const newState = [...prev];
            newState[index] = false;
            return newState;
          });
          
          // –ï—Å–ª–∏ —ç—Ç–æ –ø–æ—Å–ª–µ–¥–Ω–∏–π –±–∞—Ä–∞–±–∞–Ω
          if (index === 3) {
            setIsAnimating(false);
            setSpinPhase('stopped');
          }
        }, delay);
        
        animationTimeouts.current.push(timeout);
      });
    }
  }, [isSpinning, isAnimating, getRandomSymbol, clearAnimations]);
  
  // –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞ —Å —Å–µ—Ä–≤–µ—Ä–∞
  useEffect(() => {
    if (lastResult && 
        lastResult !== lastResultRef.current && 
        lastResult.reels && 
        !isAnimating && 
        !isSpinning) {
      
      console.log('–°–õ–û–¢–´: –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç —Å —Å–µ—Ä–≤–µ—Ä–∞:', lastResult);
      
      lastResultRef.current = lastResult;
      
      // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –±–∞—Ä–∞–±–∞–Ω—ã –∏–∑ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞ —Å –∞–Ω–∏–º–∞—Ü–∏–µ–π
      setTimeout(() => {
        setReels([...lastResult.reels]);
        setShowingResult(true);
        
        // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –≤—ã–∏–≥—Ä—ã—à–Ω—ã–µ –ª–∏–Ω–∏–∏ —Å –∑–∞–¥–µ—Ä–∂–∫–æ–π
        if (lastResult.winningLines && lastResult.winningLines.length > 0) {
          setTimeout(() => {
            setWinningLines([...lastResult.winningLines]);
            
            // –£–±–∏—Ä–∞–µ–º –ø–æ–¥—Å–≤–µ—Ç–∫—É —á–µ—Ä–µ–∑ 4 —Å–µ–∫—É–Ω–¥—ã
            setTimeout(() => {
              setWinningLines([]);
            }, 4000);
          }, 300);
        }
      }, 200);
    }
  }, [lastResult, isAnimating, isSpinning]);
  
  // –û—á–∏—Å—Ç–∫–∞ –ø—Ä–∏ —Ä–∞–∑–º–æ–Ω—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏
  useEffect(() => {
    return () => {
      clearAnimations();
    };
  }, [clearAnimations]);
  
  // –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –∫–ª–∞—Å—Å–∞ —è—á–µ–π–∫–∏
  const getCellClass = useCallback((reelIndex, rowIndex) => {
    const baseClass = 'slot-cell';
    const position = `${reelIndex}-${rowIndex}`;
    
    if (winningLines.length > 0) {
      const isWinning = winningLines.some(line => line.includes(position));
      if (isWinning) {
        return `${baseClass} winning`;
      }
    }
    
    return baseClass;
  }, [winningLines]);
  
  // –ö–æ–º–ø–æ–Ω–µ–Ω—Ç —Å–∏–º–≤–æ–ª–∞ (—Ç–æ–ª—å–∫–æ —ç–º–æ–¥–∑–∏)
  const SymbolComponent = React.memo(({ symbolName }) => {
    const symbolData = getSymbolData(symbolName);
    return <span className="slot-symbol">{symbolData.emoji}</span>;
  });
  
  return (
    <div className="slot-machine">
      {/* –ò–≥—Ä–æ–≤–æ–µ –ø–æ–ª–µ 4x4 */}
      <div className="slot-display">
        <div className="slot-reels">
          {reels.map((reel, reelIndex) => (
            <div 
              key={reelIndex} 
              className={`slot-reel ${animatingReels[reelIndex] ? 'spinning' : ''} ${spinPhase}`}
            >
              {reel.map((symbolName, rowIndex) => (
                <div
                  key={`${reelIndex}-${rowIndex}`}
                  className={getCellClass(reelIndex, rowIndex)}
                  data-position={`${reelIndex}-${rowIndex}`}
                >
                  <SymbolComponent symbolName={symbolName} />
                </div>
              ))}
            </div>
          ))}
        </div>
        
        {/* –õ–∏–Ω–∏–∏ –≤—ã–ø–ª–∞—Ç */}
        <div className="paylines">
          {/* –ì–æ—Ä–∏–∑–æ–Ω—Ç–∞–ª—å–Ω—ã–µ –ª–∏–Ω–∏–∏ */}
          <div className={`payline horizontal line-1 ${winningLines.some(line => line.includes('0-0') && line.includes('1-0')) ? 'active' : ''}`}></div>
          <div className={`payline horizontal line-2 ${winningLines.some(line => line.includes('0-1') && line.includes('1-1')) ? 'active' : ''}`}></div>
          <div className={`payline horizontal line-3 ${winningLines.some(line => line.includes('0-2') && line.includes('1-2')) ? 'active' : ''}`}></div>
          <div className={`payline horizontal line-4 ${winningLines.some(line => line.includes('0-3') && line.includes('1-3')) ? 'active' : ''}`}></div>
          
          {/* –î–∏–∞–≥–æ–Ω–∞–ª—å–Ω—ã–µ –ª–∏–Ω–∏–∏ */}
          <div className={`payline diagonal line-main ${winningLines.some(line => line.includes('0-0') && line.includes('1-1') && line.includes('2-2')) ? 'active' : ''}`}></div>
          <div className={`payline diagonal line-anti ${winningLines.some(line => line.includes('0-3') && line.includes('1-2') && line.includes('2-1')) ? 'active' : ''}`}></div>
        </div>
      </div>
      
      {/* –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–µ */}
      {showingResult && lastResult && !isSpinning && !isAnimating && (
        <div className="last-spin-info">
          {lastResult.win ? (
            <div className="win-display">
              <span className="win-text">üí∞ –í–´–ò–ì–†–´–®! üí∞</span>
              <span className="win-amount">+{(Math.abs(lastResult.profit) || 0).toFixed(2)} USDT</span>
              {lastResult.winningSymbols && lastResult.winningSymbols.length > 0 && (
                <div className="winning-symbols">
                  {lastResult.winningSymbols.map((symbolName, index) => {
                    const symbolData = getSymbolData(symbolName);
                    return (
                      <span key={index} className="winning-symbol">
                        {symbolData.emoji}
                      </span>
                    );
                  })}
                </div>
              )}
              {lastResult.winningLines && lastResult.winningLines.length > 0 && (
                <div className="winning-lines-count">
                  üéØ –í—ã–∏–≥—Ä—ã—à–Ω—ã—Ö –ª–∏–Ω–∏–π: {lastResult.winningLines.length} | –ú–Ω–æ–∂–∏—Ç–µ–ª—å: √ó{(lastResult.multiplier || 0).toFixed(2)}
                </div>
              )}
            </div>
          ) : (
            <div className="lose-display">
              <span className="lose-text">üéØ –£–¥–∞—á–∞ –≤ —Å–ª–µ–¥—É—é—â–∏–π —Ä–∞–∑!</span>
            </div>
          )}
        </div>
      )}
    </div>
  );
};

export default SlotMachine;
