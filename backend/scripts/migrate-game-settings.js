// backend/scripts/migrate-game-settings.js
const mongoose = require('mongoose');
const { User } = require('../src/models');
const config = require('../src/config');

/**
 * –°–∫—Ä–∏–ø—Ç –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –Ω–∞—Å—Ç—Ä–æ–µ–∫ –∏–≥—Ä –≤—Å–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º
 */
async function migrateGameSettings() {
  try {
    // –ü–æ–¥–∫–ª—é—á–∞–µ–º—Å—è –∫ –ë–î
    await mongoose.connect(config.database.uri, config.database.options);
    console.log('‚úÖ –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ MongoDB —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ');

    // –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –±–µ–∑ –Ω–∞—Å—Ç—Ä–æ–µ–∫ –∏–≥—Ä
    const usersWithoutSettings = await User.find({
      $or: [
        { gameSettings: { $exists: false } },
        { 'gameSettings.slots': { $exists: false } },
        { 'gameSettings.mines': { $exists: false } },
        { 'gameSettings.crash': { $exists: false } }
      ]
    });

    console.log(`üìä –ù–∞–π–¥–µ–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –¥–ª—è –º–∏–≥—Ä–∞—Ü–∏–∏: ${usersWithoutSettings.length}`);

    // –û–±–Ω–æ–≤–ª—è–µ–º –∫–∞–∂–¥–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    let updated = 0;
    for (const user of usersWithoutSettings) {
      const updateData = {
        $set: {
          gameSettings: {
            coin: {
              winChanceModifier: user.gameSettings?.coin?.winChanceModifier || 0
            },
            slots: {
              rtpModifier: user.gameSettings?.slots?.rtpModifier || 0
            },
            mines: {
              mineChanceModifier: user.gameSettings?.mines?.mineChanceModifier || 0
            },
            crash: {
              crashModifier: user.gameSettings?.crash?.crashModifier || 0
            }
          }
        }
      };

      await User.updateOne({ _id: user._id }, updateData);
      updated++;
      
      if (updated % 100 === 0) {
        console.log(`‚úÖ –û–±–Ω–æ–≤–ª–µ–Ω–æ ${updated} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π...`);
      }
    }

    console.log(`\n‚úÖ –ú–∏–≥—Ä–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞! –û–±–Ω–æ–≤–ª–µ–Ω–æ ${updated} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π`);

    // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
    const totalUsers = await User.countDocuments();
    const usersWithModifiers = await User.countDocuments({
      $or: [
        { 'gameSettings.coin.winChanceModifier': { $ne: 0 } },
        { 'gameSettings.slots.rtpModifier': { $ne: 0 } },
        { 'gameSettings.mines.mineChanceModifier': { $ne: 0 } },
        { 'gameSettings.crash.crashModifier': { $ne: 0 } }
      ]
    });

    console.log('\nüìä –ò—Ç–æ–≥–æ–≤–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:');
    console.log(`   –í—Å–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: ${totalUsers}`);
    console.log(`   –° –º–æ–¥–∏—Ñ–∏–∫–∞—Ç–æ—Ä–∞–º–∏: ${usersWithModifiers}`);

  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –º–∏–≥—Ä–∞—Ü–∏–∏:', error);
  } finally {
    await mongoose.connection.close();
    console.log('\nüîå –°–æ–µ–¥–∏–Ω–µ–Ω–∏–µ —Å –ë–î –∑–∞–∫—Ä—ã—Ç–æ');
  }
}

// –ó–∞–ø—É—Å–∫–∞–µ–º –º–∏–≥—Ä–∞—Ü–∏—é
migrateGameSettings();