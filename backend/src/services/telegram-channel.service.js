// backend/src/services/telegram-channel.service.js
const axios = require('axios');

class TelegramChannelService {
  constructor() {
    this.botToken = process.env.BOT_TOKEN || process.env.TELEGRAM_BOT_TOKEN;
    this.channelId = process.env.TELEGRAM_CHANNEL_ID; // –Ω–∞–ø—Ä–∏–º–µ—Ä: @greenlight_casino –∏–ª–∏ -1001234567890
    this.baseUrl = `https://api.telegram.org/bot${this.botToken}`;
  }

  /**
   * –û—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ –∫–∞–Ω–∞–ª
   */
  async sendMessage(text, options = {}) {
    try {
      console.log('üì¢ –ö–ê–ù–ê–õ: –û—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è');
      console.log('üì¢ –ö–ê–ù–ê–õ: BOT_TOKEN:', this.botToken ? '–£—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω' : '–ù–ï –£–°–¢–ê–ù–û–í–õ–ï–ù');
      console.log('üì¢ –ö–ê–ù–ê–õ: CHANNEL_ID:', this.channelId || '–ù–ï –£–°–¢–ê–ù–û–í–õ–ï–ù');
      
      if (!this.channelId) {
        console.warn('TELEGRAM_CHANNEL_ID –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω');
        return null;
      }

      if (!this.botToken) {
        console.warn('BOT_TOKEN –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω');
        return null;
      }

      const payload = {
        chat_id: this.channelId,
        text: text,
        parse_mode: 'HTML',
        disable_web_page_preview: false,
        ...options
      };

      console.log('üì¢ –ö–ê–ù–ê–õ: URL:', `${this.baseUrl}/sendMessage`);
      console.log('üì¢ –ö–ê–ù–ê–õ: Payload (first 200 chars):', JSON.stringify(payload).substring(0, 200));

      const response = await axios.post(`${this.baseUrl}/sendMessage`, payload);
      console.log('üì¢ –ö–ê–ù–ê–õ: –°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ —É—Å–ø–µ—à–Ω–æ');
      return response.data;
    } catch (error) {
      console.error('‚ùå –ö–ê–ù–ê–õ: –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è:', error.response?.data || error.message);
      throw error;
    }
  }

  /**
   * –û—Ç–ø—Ä–∞–≤–∏—Ç—å —Ñ–æ—Ç–æ —Å –ø–æ–¥–ø–∏—Å—å—é –≤ –∫–∞–Ω–∞–ª
   */
  async sendPhoto(photo, caption, options = {}) {
    try {
      console.log('üì∏ –ö–ê–ù–ê–õ: –û—Ç–ø—Ä–∞–≤–∫–∞ —Ñ–æ—Ç–æ');
      console.log('üì∏ –ö–ê–ù–ê–õ: BOT_TOKEN:', this.botToken ? '–£—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω' : '–ù–ï –£–°–¢–ê–ù–û–í–õ–ï–ù');
      console.log('üì∏ –ö–ê–ù–ê–õ: CHANNEL_ID:', this.channelId || '–ù–ï –£–°–¢–ê–ù–û–í–õ–ï–ù');
      
      if (!this.channelId) {
        console.warn('TELEGRAM_CHANNEL_ID –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω');
        return null;
      }

      if (!this.botToken) {
        console.warn('BOT_TOKEN –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω');
        return null;
      }

      const payload = {
        chat_id: this.channelId,
        photo: photo,
        caption: caption,
        parse_mode: 'HTML',
        ...options
      };

      console.log('üì∏ –ö–ê–ù–ê–õ: URL:', `${this.baseUrl}/sendPhoto`);
      console.log('üì∏ –ö–ê–ù–ê–õ: Photo URL:', photo);

      const response = await axios.post(`${this.baseUrl}/sendPhoto`, payload);
      console.log('üì∏ –ö–ê–ù–ê–õ: –§–æ—Ç–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ —É—Å–ø–µ—à–Ω–æ');
      return response.data;
    } catch (error) {
      console.error('‚ùå –ö–ê–ù–ê–õ: –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Ñ–æ—Ç–æ:', error.response?.data || error.message);
      throw error;
    }
  }

  /**
   * –û–ø—É–±–ª–∏–∫–æ–≤–∞—Ç—å –∞–Ω–æ–Ω—Å —Ä–æ–∑—ã–≥—Ä—ã—à–∞
   */
  async postGiveawayAnnouncement(giveaway) {
    try {
      const emoji = giveaway.type === 'daily' ? 'üèÜ' : giveaway.type === 'weekly' ? 'üíé' : 'üéØ';
      const typeText = giveaway.type === 'daily' ? '–ï–ñ–ï–î–ù–ï–í–ù–´–ô' : giveaway.type === 'weekly' ? '–ù–ï–î–ï–õ–¨–ù–´–ô' : '–ö–ê–°–¢–û–ú–ù–´–ô';
      
      let message = `${emoji} <b>${typeText} –†–û–ó–´–ì–†–´–®</b>\n\n`;
      
      if (giveaway.prize) {
        message += `üéÅ <b>–ü—Ä–∏–∑:</b> ${giveaway.prize.name}\n`;
        if (giveaway.prize.description) {
          message += `üìù ${giveaway.prize.description}\n`;
        }
        if (giveaway.prize.value) {
          message += `üí∞ <b>–¶–µ–Ω–Ω–æ—Å—Ç—å:</b> ${giveaway.prize.value} USDT\n`;
        }
      }
      
      message += `\nüë• <b>–ü–æ–±–µ–¥–∏—Ç–µ–ª–µ–π:</b> ${giveaway.winnersCount}\n`;
      
      if (giveaway.minDepositAmount) {
        message += `üí≥ <b>–ú–∏–Ω–∏–º–∞–ª—å–Ω—ã–π –¥–µ–ø–æ–∑–∏—Ç:</b> ${giveaway.minDepositAmount} USDT\n`;
      }
      
      
      const drawTime = new Date(giveaway.drawDate).toLocaleString('ru-RU', {
        timeZone: 'Europe/Moscow',
        day: '2-digit',
        month: '2-digit',
        year: 'numeric',
        hour: '2-digit',
        minute: '2-digit'
      });
      
      message += `‚è∞ <b>–†–æ–∑—ã–≥—Ä—ã—à:</b> ${drawTime} –ú–°–ö\n\n`;
      message += `üéØ <b>–£—á–∞—Å—Ç–≤—É–π—Ç–µ –≤ –±–æ—Ç–µ:</b> @Greenlightgames_bot\n`;
      message += `üìã <i>–î–ª—è —É—á–∞—Å—Ç–∏—è —Å–¥–µ–ª–∞–π—Ç–µ –¥–µ–ø–æ–∑–∏—Ç ${giveaway.minDepositAmount || 1} USDT –∏ –Ω–∞–∂–º–∏—Ç–µ "–£—á–∞—Å—Ç–≤–æ–≤–∞—Ç—å" –≤ –ø—Ä–æ—Ñ–∏–ª–µ</i>`;

      // –ï—Å–ª–∏ –µ—Å—Ç—å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –ø—Ä–∏–∑–∞, –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å —Ñ–æ—Ç–æ
      if (giveaway.prize?.imageUrl) {
        return await this.sendPhoto(giveaway.prize.imageUrl, message);
      } else {
        return await this.sendMessage(message);
      }
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ –ø—É–±–ª–∏–∫–∞—Ü–∏–∏ –∞–Ω–æ–Ω—Å–∞ —Ä–æ–∑—ã–≥—Ä—ã—à–∞:', error);
      throw error;
    }
  }

  /**
   * –û–ø—É–±–ª–∏–∫–æ–≤–∞—Ç—å —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã —Ä–æ–∑—ã–≥—Ä—ã—à–∞
   */
  async postGiveawayResults(giveaway, winners) {
    try {
      const emoji = giveaway.type === 'daily' ? 'üèÜ' : giveaway.type === 'weekly' ? 'üíé' : 'üéØ';
      const typeText = giveaway.type === 'daily' ? '–ï–ñ–ï–î–ù–ï–í–ù–û–ì–û' : giveaway.type === 'weekly' ? '–ù–ï–î–ï–õ–¨–ù–û–ì–û' : '–ö–ê–°–¢–û–ú–ù–û–ì–û';
      
      let message = `${emoji} <b>–†–ï–ó–£–õ–¨–¢–ê–¢–´ ${typeText} –†–û–ó–´–ì–†–´–®–ê</b>\n\n`;
      
      if (giveaway.prize) {
        message += `üéÅ <b>–ü—Ä–∏–∑:</b> ${giveaway.prize.name}\n`;
        if (giveaway.prize.value) {
          message += `üí∞ <b>–¶–µ–Ω–Ω–æ—Å—Ç—å:</b> ${giveaway.prize.value} USDT\n`;
        }
      }
      
      message += `\nüë• <b>–£—á–∞—Å—Ç–Ω–∏–∫–æ–≤:</b> ${giveaway.participationCount || 0}\n`;
      
      if (winners && winners.length > 0) {
        message += `\nüèÜ <b>–ü–û–ë–ï–î–ò–¢–ï–õ–ò:</b>\n`;
        winners.forEach((winner, index) => {
          const place = index + 1;
          const userName = winner.user?.firstName || winner.user?.username || '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å';
          message += `${place}. ${userName}\n`;
        });
        
        message += `\nüéâ <b>–ü–æ–∑–¥—Ä–∞–≤–ª—è–µ–º –ø–æ–±–µ–¥–∏—Ç–µ–ª–µ–π!</b>\n`;
        message += `üíå –ü—Ä–∏–∑—ã –±—É–¥—É—Ç –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω—ã –≤ –ª–∏—á–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏—è—Ö –±–æ—Ç–∞\n\n`;
      } else {
        message += `\nüòî <b>–£—á–∞—Å—Ç–Ω–∏–∫–æ–≤ –Ω–µ –±—ã–ª–æ</b>\n`;
        message += `üîÑ –ü—Ä–∏–∑ –ø–µ—Ä–µ–Ω–æ—Å–∏—Ç—Å—è –Ω–∞ —Å–ª–µ–¥—É—é—â–∏–π —Ä–æ–∑—ã–≥—Ä—ã—à\n\n`;
      }
      
      message += `üéØ <b>–£—á–∞—Å—Ç–≤—É–π—Ç–µ –≤ –Ω–æ–≤—ã—Ö —Ä–æ–∑—ã–≥—Ä—ã—à–∞—Ö:</b> @Greenlightgames_bot`;

      // –ï—Å–ª–∏ –µ—Å—Ç—å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –ø—Ä–∏–∑–∞, –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å —Ñ–æ—Ç–æ
      if (giveaway.prize?.imageUrl) {
        return await this.sendPhoto(giveaway.prize.imageUrl, message);
      } else {
        return await this.sendMessage(message);
      }
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ –ø—É–±–ª–∏–∫–∞—Ü–∏–∏ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ —Ä–æ–∑—ã–≥—Ä—ã—à–∞:', error);
      throw error;
    }
  }

  /**
   * –û–ø—É–±–ª–∏–∫–æ–≤–∞—Ç—å –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ –æ —Ä–æ–∑—ã–≥—Ä—ã—à–µ
   */
  async postGiveawayReminder(giveaway, participantsCount) {
    try {
      const emoji = giveaway.type === 'daily' ? 'üèÜ' : giveaway.type === 'weekly' ? 'üíé' : 'üéØ';
      const typeText = giveaway.type === 'daily' ? '–ï–ñ–ï–î–ù–ï–í–ù–û–ì–û' : giveaway.type === 'weekly' ? '–ù–ï–î–ï–õ–¨–ù–û–ì–û' : '–ö–ê–°–¢–û–ú–ù–û–ì–û';
      
      let message = `‚è∞ <b>–ù–ê–ü–û–ú–ò–ù–ê–ù–ò–ï –û ${typeText} –†–û–ó–´–ì–†–´–®–ï</b>\n\n`;
      
      if (giveaway.prize) {
        message += `üéÅ <b>–ü—Ä–∏–∑:</b> ${giveaway.prize.name}\n`;
        if (giveaway.prize.description) {
          message += `üìù ${giveaway.prize.description}\n`;
        }
        if (giveaway.prize.value) {
          message += `üí∞ <b>–¶–µ–Ω–Ω–æ—Å—Ç—å:</b> ${giveaway.prize.value} USDT\n`;
        }
      }
      
      message += `\nüë• <b>–ü–æ–±–µ–¥–∏—Ç–µ–ª–µ–π:</b> ${giveaway.winnersCount}\n`;
      
      if (giveaway.minDepositAmount) {
        message += `üí≥ <b>–ú–∏–Ω–∏–º–∞–ª—å–Ω—ã–π –¥–µ–ø–æ–∑–∏—Ç:</b> ${giveaway.minDepositAmount} USDT\n`;
      }
      
      const now = new Date();
      const drawDate = new Date(giveaway.drawDate);
      const timeLeft = Math.max(0, Math.floor((drawDate - now) / (1000 * 60 * 60)));
      
      message += `‚è∞ <b>–î–æ —Ä–æ–∑—ã–≥—Ä—ã—à–∞:</b> ${timeLeft} —á–∞—Å–æ–≤\n`;
      message += `üë• <b>–£—á–∞—Å—Ç–Ω–∏–∫–æ–≤:</b> ${participantsCount}\n\n`;
      
      message += `üö® <b>–£–°–ü–ï–ô –ü–†–ò–ù–Ø–¢–¨ –£–ß–ê–°–¢–ò–ï!</b>\n`;
      message += `üéØ <b>–£—á–∞—Å—Ç–≤—É–π—Ç–µ –≤ –±–æ—Ç–µ:</b> @Greenlightgames_bot\n`;
      message += `üìã <i>–î–ª—è —É—á–∞—Å—Ç–∏—è —Å–¥–µ–ª–∞–π—Ç–µ –¥–µ–ø–æ–∑–∏—Ç ${giveaway.minDepositAmount || 1} USDT –∏ –Ω–∞–∂–º–∏—Ç–µ "–£—á–∞—Å—Ç–≤–æ–≤–∞—Ç—å" –≤ –ø—Ä–æ—Ñ–∏–ª–µ</i>`;

      // –ï—Å–ª–∏ –µ—Å—Ç—å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –ø—Ä–∏–∑–∞, –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å —Ñ–æ—Ç–æ
      if (giveaway.prize?.imageUrl) {
        return await this.sendPhoto(giveaway.prize.imageUrl, message);
      } else {
        return await this.sendMessage(message);
      }
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ –ø—É–±–ª–∏–∫–∞—Ü–∏–∏ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è –æ —Ä–æ–∑—ã–≥—Ä—ã—à–µ:', error);
      throw error;
    }
  }

  /**
   * –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –∫–∞–Ω–∞–ª—É
   */
  async checkChannelAccess() {
    try {
      if (!this.channelId) {
        return { success: false, error: 'TELEGRAM_CHANNEL_ID –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω' };
      }

      const response = await axios.post(`${this.baseUrl}/getChat`, {
        chat_id: this.channelId
      });

      return { 
        success: true, 
        channel: response.data.result 
      };
    } catch (error) {
      return { 
        success: false, 
        error: error.response?.data?.description || error.message 
      };
    }
  }
}

module.exports = new TelegramChannelService();