// frontend/src/components/games/slots/SlotGame.js
import React, { useState, useEffect, useCallback } from 'react';
import SlotMachine from './SlotMachine';
import SlotControls from './SlotControls';
import { gameApi } from '../../../services';
import '../../../styles/SlotGame.css';

const SlotGame = ({ 
  balance, 
  setBalance, 
  gameStats, 
  setGameResult, 
  setError 
}) => {
  // –ù–û–í–û–ï: –°–æ—Å—Ç–æ—è–Ω–∏–µ –∑–∞–≥—Ä—É–∑–∫–∏
  const [isInitializing, setIsInitializing] = useState(true);
  
  // –°–æ—Å—Ç–æ—è–Ω–∏–µ –∏–≥—Ä—ã
  const [isSpinning, setIsSpinning] = useState(false);
  const [betAmount, setBetAmount] = useState(1);
  const [loading, setLoading] = useState(false);
  const [lastResult, setLastResult] = useState(null);
  const [animationComplete, setAnimationComplete] = useState(true);
  
  // –°–æ—Å—Ç–æ—è–Ω–∏–µ –∞–≤—Ç–æ–∏–≥—Ä—ã
  const [autoplay, setAutoplay] = useState(false);
  const [autoplayCount, setAutoplayCount] = useState(10);
  const [autoplayRemaining, setAutoplayRemaining] = useState(0);
  const [autoplayTimeoutId, setAutoplayTimeoutId] = useState(null);
  
  // –ù–û–í–û–ï: –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Å –∑–∞–≥—Ä—É–∑–æ—á–Ω—ã–º —ç–∫—Ä–∞–Ω–æ–º
  useEffect(() => {
    const initializeGame = async () => {
      try {
        // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∑–∞–≥—Ä—É–∑–æ—á–Ω—ã–π —ç–∫—Ä–∞–Ω –º–∏–Ω–∏–º—É–º 2 —Å–µ–∫—É–Ω–¥—ã
        await new Promise(resolve => setTimeout(resolve, 2000));
        
        console.log('=== –ò–ù–ò–¶–ò–ê–õ–ò–ó–ê–¶–ò–Ø –°–õ–û–¢ –ò–ì–†–´ ===');
        setIsInitializing(false);
        
      } catch (err) {
        console.error('–û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ —Å–ª–æ—Ç–æ–≤:', err);
        setError('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∏–≥—Ä—ã');
        setIsInitializing(false);
      }
    };
    
    initializeGame();
  }, [setError]);
  
  // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –∞–Ω–∏–º–∞—Ü–∏–∏
  const handleAnimationComplete = useCallback(() => {
    console.log('–°–õ–û–¢–´: –ê–Ω–∏–º–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞ –≤ SlotGame');
    setAnimationComplete(true);
    setIsSpinning(false);
    setLoading(false);
  }, []);
  
  // –§—É–Ω–∫—Ü–∏—è –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —Å–ø–∏–Ω–∞
  const performSpin = useCallback(async () => {
    if (betAmount <= 0 || betAmount > balance || loading || isSpinning || !animationComplete) {
      console.log('–°–õ–û–¢–´: –°–ø–∏–Ω –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω:', { betAmount, balance, loading, isSpinning, animationComplete });
      return false;
    }
    
    try {
      console.log('–°–õ–û–¢–´: –ù–∞—á–∏–Ω–∞–µ–º —Å–ø–∏–Ω —Å —Å—Ç–∞–≤–∫–æ–π:', betAmount);
      setLoading(true);
      setIsSpinning(true);
      setAnimationComplete(false);
      setError(null);
      
      // –û—á–∏—â–∞–µ–º –ø—Ä–µ–¥—ã–¥—É—â–∏–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç
      setLastResult(null);
      
      // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∑–∞–ø—Ä–æ—Å –Ω–∞ —Å–µ—Ä–≤–µ—Ä
      const response = await gameApi.playSlots(betAmount);
      const data = response.data.data;
      
      console.log('–°–õ–û–¢–´: –ü–æ–ª—É—á–µ–Ω —Ä–µ–∑—É–ª—å—Ç–∞—Ç —Å —Å–µ—Ä–≤–µ—Ä–∞:', data);
      
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ—Å—Ç—å –¥–∞–Ω–Ω—ã—Ö
      if (!data.reels || !Array.isArray(data.reels)) {
        throw new Error('–°–µ—Ä–≤–µ—Ä –≤–µ—Ä–Ω—É–ª –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –±–∞—Ä–∞–±–∞–Ω–æ–≤');
      }
      
      // –ü–µ—Ä–µ–¥–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç –≤ SlotMachine –¥–ª—è –∑–∞–ø—É—Å–∫–∞ –∞–Ω–∏–º–∞—Ü–∏–∏
      setLastResult({
        reels: data.reels,
        winningLines: data.winningLines || [],
        win: data.win,
        profit: data.profit,
        multiplier: data.multiplier || 0,
        winningSymbols: data.winningSymbols || []
      });
      
      // –û–±–Ω–æ–≤–ª—è–µ–º –±–∞–ª–∞–Ω—Å –ø–æ—Å–ª–µ –ø–æ–ª—É—á–µ–Ω–∏—è –æ—Ç–≤–µ—Ç–∞
      if (data.balanceAfter !== undefined) {
        console.log('–°–õ–û–¢–´: –û–±–Ω–æ–≤–ª—è–µ–º –±–∞–ª–∞–Ω—Å:', data.balanceAfter);
        setBalance(data.balanceAfter);
      }
      
      // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç –≤ GameScreen
      setGameResult({
        win: data.win,
        amount: data.win ? Math.abs(data.profit) : betAmount,
        newBalance: data.balanceAfter
      });
      
      return data.win;
    } catch (err) {
      console.error('–°–õ–û–¢–´: –û—à–∏–±–∫–∞ —Å–ø–∏–Ω–∞:', err);
      setError(err.response?.data?.message || '–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∏–≥—Ä–µ');
      setIsSpinning(false);
      setLoading(false);
      setAnimationComplete(true);
      setLastResult(null);
      return false;
    }
  }, [betAmount, balance, loading, isSpinning, animationComplete, setBalance, setError, setGameResult]);
  
  // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ–±—ã—á–Ω–æ–≥–æ —Å–ø–∏–Ω–∞
  const handleSpin = useCallback(async () => {
    if (!autoplay && !isSpinning && !loading && animationComplete) {
      console.log('–°–õ–û–¢–´: –†—É—á–Ω–æ–π —Å–ø–∏–Ω');
      await performSpin();
    }
  }, [autoplay, isSpinning, loading, animationComplete, performSpin]);
  
  // –§—É–Ω–∫—Ü–∏—è –∞–≤—Ç–æ–∏–≥—Ä—ã
  const performAutoplay = useCallback(async () => {
    if (!autoplay || autoplayRemaining <= 0 || betAmount > balance || isSpinning || loading || !animationComplete) {
      setAutoplay(false);
      setAutoplayRemaining(0);
      return;
    }
    
    console.log('–°–õ–û–¢–´: –ê–≤—Ç–æ—Å–ø–∏–Ω, –æ—Å—Ç–∞–ª–æ—Å—å:', autoplayRemaining);
    const won = await performSpin();
    setAutoplayRemaining(prev => prev - 1);
    
    // –ï—Å–ª–∏ –≤—ã–∏–≥—Ä–∞–ª–∏ –±–æ–ª—å—à—É—é —Å—É–º–º—É (–±–æ–ª—å—à–µ 10x), –æ—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∞–≤—Ç–æ–∏–≥—Ä—É
    if (won && lastResult && Math.abs(lastResult.profit) > betAmount * 10) {
      console.log('–°–õ–û–¢–´: –ë–æ–ª—å—à–æ–π –≤—ã–∏–≥—Ä—ã—à, –æ—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∞–≤—Ç–æ–∏–≥—Ä—É');
      setAutoplay(false);
      setAutoplayRemaining(0);
      return;
    }
    
    // –ü–ª–∞–Ω–∏—Ä—É–µ–º —Å–ª–µ–¥—É—é—â–∏–π —Å–ø–∏–Ω —Ç–æ–ª—å–∫–æ –ø–æ—Å–ª–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –∞–Ω–∏–º–∞—Ü–∏–∏
    if (autoplayRemaining > 1 && betAmount <= balance) {
      const timeoutId = setTimeout(() => {
        if (animationComplete) {
          performAutoplay();
        }
      }, 1000);
      setAutoplayTimeoutId(timeoutId);
    } else {
      setAutoplay(false);
      setAutoplayRemaining(0);
    }
  }, [autoplay, autoplayRemaining, betAmount, balance, isSpinning, loading, animationComplete, performSpin, lastResult]);
  
  // –≠—Ñ—Ñ–µ–∫—Ç –¥–ª—è –∑–∞–ø—É—Å–∫–∞ –∞–≤—Ç–æ–∏–≥—Ä—ã
  useEffect(() => {
    if (autoplay && autoplayRemaining > 0 && !isSpinning && !loading && animationComplete) {
      const autoplayTimeout = setTimeout(() => {
        performAutoplay();
      }, 500);
      
      return () => clearTimeout(autoplayTimeout);
    }
    
    return () => {
      if (autoplayTimeoutId) {
        clearTimeout(autoplayTimeoutId);
      }
    };
  }, [autoplay, autoplayRemaining, isSpinning, loading, animationComplete, performAutoplay, autoplayTimeoutId]);
  
  // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤–∫–ª—é—á–µ–Ω–∏—è –∞–≤—Ç–æ–∏–≥—Ä—ã
  const handleAutoplayToggle = useCallback((enabled) => {
    console.log('–°–õ–û–¢–´: –ê–≤—Ç–æ–∏–≥—Ä–∞', enabled ? '–≤–∫–ª—é—á–µ–Ω–∞' : '–≤—ã–∫–ª—é—á–µ–Ω–∞');
    if (enabled) {
      setAutoplayRemaining(autoplayCount);
    } else {
      if (autoplayTimeoutId) {
        clearTimeout(autoplayTimeoutId);
        setAutoplayTimeoutId(null);
      }
      setAutoplayRemaining(0);
    }
    setAutoplay(enabled);
  }, [autoplayCount, autoplayTimeoutId]);
  
  // –û—á–∏—Å—Ç–∫–∞ —Ç–∞–π–º–∞—É—Ç–∞ –ø—Ä–∏ —Ä–∞–∑–º–æ–Ω—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏
  useEffect(() => {
    return () => {
      if (autoplayTimeoutId) {
        clearTimeout(autoplayTimeoutId);
      }
    };
  }, [autoplayTimeoutId]);
  
  // –ù–û–í–û–ï: –ó–∞–≥—Ä—É–∑–æ—á–Ω—ã–π —ç–∫—Ä–∞–Ω –¥–ª—è —Å–ª–æ—Ç–æ–≤
  if (isInitializing) {
    return (
      <div className="slots-loading-screen">
        <div className="slots-loading-content">
          <div className="greenlight-logo">
            <div className="logo-icon slots-icon">üé∞</div>
            <div className="logo-text">Greenlight</div>
            <div className="logo-subtitle">Slot Machine</div>
          </div>
          <div className="loading-spinner">
            <div className="spinner-ring"></div>
            <div className="spinner-ring"></div>
            <div className="spinner-ring"></div>
          </div>
          <div className="loading-text">–ó–∞–≥—Ä—É–∑–∫–∞ —Å–ª–æ—Ç–æ–≤...</div>
        </div>
      </div>
    );
  }
  
  return (
    <>
      <SlotMachine 
        onSpin={handleSpin}
        isSpinning={isSpinning}
        balance={balance}
        betAmount={betAmount}
        lastResult={lastResult}
        autoplay={autoplay}
        loading={loading}
        gameStats={gameStats}
        onAnimationComplete={handleAnimationComplete}
      />
      
      <SlotControls 
        balance={balance}
        onSpin={handleSpin}
        isSpinning={isSpinning}
        betAmount={betAmount}
        setBetAmount={setBetAmount}
        autoplay={autoplay}
        setAutoplay={handleAutoplayToggle}
        autoplayCount={autoplayCount}
        setAutoplayCount={setAutoplayCount}
        loading={loading}
        autoplayRemaining={autoplayRemaining}
        gameStats={gameStats}
      />
    </>
  );
};

export default SlotGame;
