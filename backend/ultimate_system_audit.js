// –ò–°–ß–ï–†–ü–´–í–ê–Æ–©–ò–ô –ê–£–î–ò–¢ –í–°–ï–ô –°–ò–°–¢–ï–ú–´ GREENLIGHT CASINO
const { 
  User, Game, Transaction, ReferralEarning, ReferralPayout, 
  EventBet, CrashRound, DuelRound, Duel, Event, Promocode,
  CasinoFinance, GameSettings, Deposit, Withdrawal 
} = require('./src/models');
const mongoose = require('mongoose');

async function ultimateSystemAudit() {
  try {
    await mongoose.connect(process.env.MONGODB_URI || 'mongodb://localhost:27017/greenlight');
    console.log('üîó –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ\n');
    
    console.log('üîç === –ò–°–ß–ï–†–ü–´–í–ê–Æ–©–ò–ô –ê–£–î–ò–¢ –°–ò–°–¢–ï–ú–´ GREENLIGHT === üîç\n');
    
    const auditResults = {
      criticalIssues: [],
      warnings: [],
      statistics: {},
      balanceDiscrepancies: [],
      orphanedRecords: [],
      dataInconsistencies: []
    };
    
    // ==========================================
    // 1. –ë–ê–ó–û–í–ê–Ø –°–¢–ê–¢–ò–°–¢–ò–ö–ê –°–ò–°–¢–ï–ú–´
    // ==========================================
    console.log('=== 1. –ë–ê–ó–û–í–ê–Ø –°–¢–ê–¢–ò–°–¢–ò–ö–ê ===');
    
    const stats = {
      users: await User.countDocuments(),
      games: await Game.countDocuments(),
      transactions: await Transaction.countDocuments(),
      referralEarnings: await ReferralEarning.countDocuments(),
      referralPayouts: await ReferralPayout.countDocuments(),
      eventBets: await EventBet.countDocuments(),
      events: await Event.countDocuments(),
      duels: await Duel.countDocuments(),
      crashRounds: await CrashRound.countDocuments(),
      deposits: await Deposit.countDocuments(),
      withdrawals: await Withdrawal.countDocuments()
    };
    
    auditResults.statistics = stats;
    
    console.log(`üë• –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: ${stats.users}`);
    console.log(`üéÆ –ò–≥—Ä: ${stats.games}`);
    console.log(`üí∞ –¢—Ä–∞–Ω–∑–∞–∫—Ü–∏–π: ${stats.transactions}`);
    console.log(`ü§ù –†–µ—Ñ–µ—Ä–∞–ª—å–Ω—ã—Ö –Ω–∞—á–∏—Å–ª–µ–Ω–∏–π: ${stats.referralEarnings}`);
    console.log(`üí∏ –†–µ—Ñ–µ—Ä–∞–ª—å–Ω—ã—Ö –≤—ã–ø–ª–∞—Ç: ${stats.referralPayouts}`);
    console.log(`üéØ –°—Ç–∞–≤–æ–∫ –Ω–∞ —Å–æ–±—ã—Ç–∏—è: ${stats.eventBets}`);
    console.log(`üìÖ –°–æ–±—ã—Ç–∏—è: ${stats.events}`);
    console.log(`‚öîÔ∏è  –î—É—ç–ª–∏: ${stats.duels}`);
    console.log(`üí• –ö—Ä–∞—à —Ä–∞—É–Ω–¥–æ–≤: ${stats.crashRounds}`);
    console.log(`üí≥ –î–µ–ø–æ–∑–∏—Ç–æ–≤: ${stats.deposits}`);
    console.log(`üè¶ –í—ã–≤–æ–¥–æ–≤: ${stats.withdrawals}`);
    
    // ==========================================
    // 2. –î–ï–¢–ê–õ–¨–ù–´–ô –ê–£–î–ò–¢ –ö–ê–ñ–î–û–ì–û –ü–û–õ–¨–ó–û–í–ê–¢–ï–õ–Ø
    // ==========================================
    console.log('\n\n=== 2. –î–ï–¢–ê–õ–¨–ù–´–ô –ê–£–î–ò–¢ –ü–û–õ–¨–ó–û–í–ê–¢–ï–õ–ï–ô ===');
    
    const allUsers = await User.find({}).sort({ createdAt: 1 });
    
    for (const user of allUsers) {
      console.log(`\nüë§ –ê–£–î–ò–¢: ${user.username || user.telegramId} (ID: ${user._id})`);
      
      const userAudit = {
        userId: user._id,
        username: user.username || user.telegramId,
        issues: [],
        calculations: {}
      };
      
      // === –¢–†–ê–ù–ó–ê–ö–¶–ò–ò ===
      const transactions = await Transaction.find({ user: user._id }).sort({ createdAt: 1 });
      const transactionBalance = transactions.reduce((sum, t) => sum + t.amount, 0);
      
      // === –ò–ì–†–´ ===
      const games = await Game.find({ user: user._id }).sort({ createdAt: 1 });
      const gameStats = games.reduce((acc, game) => {
        acc.totalGames += 1;
        acc.totalWagered += game.bet;
        if (game.win) {
          acc.totalWon += game.bet + game.profit; // –ü–æ–ª–Ω–∞—è —Å—É–º–º–∞ –≤–æ–∑–≤—Ä–∞—Ç–∞
          acc.wins += 1;
        }
        acc.totalProfit += game.profit;
        return acc;
      }, { totalGames: 0, totalWagered: 0, totalWon: 0, totalProfit: 0, wins: 0 });
      
      // === –î–ï–ü–û–ó–ò–¢–´ –ò –í–´–í–û–î–´ ===
      const deposits = await Deposit.find({ user: user._id });
      const withdrawals = await Withdrawal.find({ user: user._id });
      const totalDeposits = deposits.reduce((sum, d) => sum + d.amount, 0);
      const totalWithdrawals = withdrawals.reduce((sum, w) => sum + w.amount, 0);
      
      // === –†–ï–§–ï–†–ê–õ–¨–ù–ê–Ø –°–ò–°–¢–ï–ú–ê ===
      const referralEarnings = await ReferralEarning.find({ partner: user._id });
      const referralPayouts = await ReferralPayout.find({ partner: user._id });
      const totalReferralEarned = referralEarnings.reduce((sum, e) => sum + (e.calculation?.earnedAmount || 0), 0);
      const totalReferralPaid = referralPayouts.reduce((sum, p) => sum + p.amount, 0);
      
      // === –†–ê–°–ß–ï–¢ –û–ñ–ò–î–ê–ï–ú–û–ì–û –ë–ê–õ–ê–ù–°–ê ===
      // –ù–∞—á–∞–ª—å–Ω—ã–π –±–∞–ª–∞–Ω—Å –∏–∑ –ø–µ—Ä–≤–æ–π —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏ –∏–ª–∏ 0
      let initialBalance = 0;
      if (transactions.length > 0) {
        const firstTx = transactions[0];
        if (firstTx.balanceBefore > 0 && firstTx.type !== 'deposit') {
          initialBalance = firstTx.balanceBefore;
          if (firstTx.amount < 0) initialBalance += Math.abs(firstTx.amount);
        }
      }
      
      const expectedBalance = initialBalance + transactionBalance;
      const balanceDifference = user.balance - expectedBalance;
      
      userAudit.calculations = {
        currentBalance: user.balance,
        initialBalance,
        transactionBalance,
        expectedBalance,
        balanceDifference,
        totalDeposits,
        totalWithdrawals,
        gameStats,
        referralStats: {
          earned: totalReferralEarned,
          paid: totalReferralPaid,
          balance: user.referralStats?.referralBalance || 0
        }
      };
      
      // === –ü–†–û–í–ï–†–ö–ò –ò –í–´–Ø–í–õ–ï–ù–ò–ï –ü–†–û–ë–õ–ï–ú ===
      
      // 1. –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∏–µ –ø—Ä–æ–±–ª–µ–º—ã —Å –±–∞–ª–∞–Ω—Å–æ–º
      if (Math.abs(balanceDifference) > 0.01) {
        const issue = `–ë–∞–ª–∞–Ω—Å –Ω–µ —Å—Ö–æ–¥–∏—Ç—Å—è: ${user.balance} != ${expectedBalance.toFixed(2)} (—Ä–∞–∑–Ω–∏—Ü–∞: ${balanceDifference.toFixed(2)})`;
        userAudit.issues.push(issue);
        if (Math.abs(balanceDifference) > 50) {
          auditResults.criticalIssues.push(`${user.username || user.telegramId}: ${issue}`);
        } else {
          auditResults.warnings.push(`${user.username || user.telegramId}: ${issue}`);
        }
      }
      
      // 2. –ü–æ–¥–æ–∑—Ä–∏—Ç–µ–ª—å–Ω—ã–µ –±–∞–ª–∞–Ω—Å—ã –±–µ–∑ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏
      if (user.balance > 50 && gameStats.totalGames === 0 && totalDeposits === 0) {
        const issue = `–ü–æ–¥–æ–∑—Ä–∏—Ç–µ–ª—å–Ω—ã–π –±–∞–ª–∞–Ω—Å ${user.balance} USDT –±–µ–∑ –∏–≥—Ä –∏ –¥–µ–ø–æ–∑–∏—Ç–æ–≤`;
        userAudit.issues.push(issue);
        auditResults.criticalIssues.push(`${user.username || user.telegramId}: ${issue}`);
      }
      
      // 3. –ù–µ—Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –∏–≥—Ä
      if (user.totalGames !== gameStats.totalGames || 
          Math.abs(user.totalWagered - gameStats.totalWagered) > 0.01 ||
          Math.abs(user.totalWon - gameStats.totalWon) > 0.01) {
        const issue = `–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∏–≥—Ä –Ω–µ —Å—Ö–æ–¥–∏—Ç—Å—è: –º–æ–¥–µ–ª—å(${user.totalGames}/${user.totalWagered}/${user.totalWon}) != —Ñ–∞–∫—Ç(${gameStats.totalGames}/${gameStats.totalWagered}/${gameStats.totalWon})`;
        userAudit.issues.push(issue);
        auditResults.dataInconsistencies.push(`${user.username || user.telegramId}: ${issue}`);
      }
      
      // 4. –†–µ—Ñ–µ—Ä–∞–ª—å–Ω—ã–µ –ø—Ä–æ–±–ª–µ–º—ã
      if (Math.abs((user.referralStats?.totalEarned || 0) - totalReferralEarned) > 0.01) {
        const issue = `–†–µ—Ñ–µ—Ä–∞–ª—å–Ω—ã–µ –Ω–∞—á–∏—Å–ª–µ–Ω–∏—è –Ω–µ —Å—Ö–æ–¥—è—Ç—Å—è: –º–æ–¥–µ–ª—å(${user.referralStats?.totalEarned || 0}) != —Ñ–∞–∫—Ç(${totalReferralEarned.toFixed(2)})`;
        userAudit.issues.push(issue);
        auditResults.dataInconsistencies.push(`${user.username || user.telegramId}: ${issue}`);
      }
      
      // 5. –û—Ç—Ä–∏—Ü–∞—Ç–µ–ª—å–Ω—ã–µ –±–∞–ª–∞–Ω—Å—ã
      if (user.balance < 0) {
        const issue = `–û—Ç—Ä–∏—Ü–∞—Ç–µ–ª—å–Ω—ã–π –±–∞–ª–∞–Ω—Å: ${user.balance}`;
        userAudit.issues.push(issue);
        auditResults.criticalIssues.push(`${user.username || user.telegramId}: ${issue}`);
      }
      
      // === –î–ï–¢–ê–õ–¨–ù–´–ô –í–´–í–û–î –î–õ–Ø –ü–†–û–ë–õ–ï–ú–ù–´–• –ü–û–õ–¨–ó–û–í–ê–¢–ï–õ–ï–ô ===
      if (userAudit.issues.length > 0) {
        console.log(`   ‚ùå –ü–†–û–ë–õ–ï–ú–´ (${userAudit.issues.length}):`);
        userAudit.issues.forEach(issue => console.log(`      - ${issue}`));
        
        console.log(`   üìä –î–ï–¢–ê–õ–ò:`);
        console.log(`      –ë–∞–ª–∞–Ω—Å: ${user.balance} USDT`);
        console.log(`      –ù–∞—á–∞–ª—å–Ω—ã–π: ${initialBalance} USDT`);
        console.log(`      –¢—Ä–∞–Ω–∑–∞–∫—Ü–∏–π: ${transactions.length} (—Å—É–º–º–∞: ${transactionBalance.toFixed(2)})`);
        console.log(`      –ò–≥—Ä: ${gameStats.totalGames} (—Å—Ç–∞–≤–æ–∫: ${gameStats.totalWagered}, –≤—ã–∏–≥—Ä—ã—à–µ–π: ${gameStats.totalWon})`);
        console.log(`      –î–µ–ø–æ–∑–∏—Ç—ã: ${totalDeposits} USDT`);
        console.log(`      –í—ã–≤–æ–¥—ã: ${totalWithdrawals} USDT`);
        
        // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–µ—Ä–≤—ã–µ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏
        if (transactions.length > 0) {
          console.log(`      –ü–µ—Ä–≤—ã–µ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏:`);
          transactions.slice(0, 3).forEach((tx, i) => {
            console.log(`        ${i+1}. ${tx.type}: ${tx.amount} USDT (${tx.balanceBefore} ‚Üí ${tx.balanceAfter}) ${tx.createdAt.toISOString().split('T')[0]}`);
          });
        }
        
        auditResults.balanceDiscrepancies.push(userAudit);
      } else {
        console.log(`   ‚úÖ –í—Å–µ –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø—Ä–æ–π–¥–µ–Ω—ã`);
      }
    }
    
    // ==========================================
    // 3. –ê–£–î–ò–¢ –¶–ï–õ–û–°–¢–ù–û–°–¢–ò –î–ê–ù–ù–´–•
    // ==========================================
    console.log('\n\n=== 3. –ê–£–î–ò–¢ –¶–ï–õ–û–°–¢–ù–û–°–¢–ò –î–ê–ù–ù–´–• ===');
    
    // === –ò–ì–†–´ –ë–ï–ó –ü–û–õ–¨–ó–û–í–ê–¢–ï–õ–ï–ô ===
    const orphanGames = await Game.aggregate([
      {
        $lookup: {
          from: 'users',
          localField: 'user',
          foreignField: '_id',
          as: 'userDoc'
        }
      },
      { $match: { userDoc: { $size: 0 } } },
      { $count: 'count' }
    ]);
    
    if (orphanGames[0]?.count > 0) {
      auditResults.orphanedRecords.push(`–ò–≥—Ä –±–µ–∑ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: ${orphanGames[0].count}`);
      console.log(`‚ùå –ò–≥—Ä –±–µ–∑ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: ${orphanGames[0].count}`);
    }
    
    // === –¢–†–ê–ù–ó–ê–ö–¶–ò–ò –ë–ï–ó –ü–û–õ–¨–ó–û–í–ê–¢–ï–õ–ï–ô ===
    const orphanTransactions = await Transaction.aggregate([
      {
        $lookup: {
          from: 'users',
          localField: 'user',
          foreignField: '_id',
          as: 'userDoc'
        }
      },
      { $match: { userDoc: { $size: 0 } } },
      { $count: 'count' }
    ]);
    
    if (orphanTransactions[0]?.count > 0) {
      auditResults.orphanedRecords.push(`–¢—Ä–∞–Ω–∑–∞–∫—Ü–∏–π –±–µ–∑ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: ${orphanTransactions[0].count}`);
      console.log(`‚ùå –¢—Ä–∞–Ω–∑–∞–∫—Ü–∏–π –±–µ–∑ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: ${orphanTransactions[0].count}`);
    }
    
    // === –ò–ì–†–´ –ë–ï–ó –°–í–Ø–ó–ê–ù–ù–´–• –¢–†–ê–ù–ó–ê–ö–¶–ò–ô ===
    const gamesWithoutTransactions = await Game.aggregate([
      {
        $lookup: {
          from: 'transactions',
          localField: '_id',
          foreignField: 'game',
          as: 'transactions'
        }
      },
      { $match: { transactions: { $size: 0 } } },
      { $count: 'count' }
    ]);
    
    if (gamesWithoutTransactions[0]?.count > 0) {
      auditResults.orphanedRecords.push(`–ò–≥—Ä –±–µ–∑ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π: ${gamesWithoutTransactions[0].count}`);
      console.log(`‚ö†Ô∏è  –ò–≥—Ä –±–µ–∑ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π: ${gamesWithoutTransactions[0].count}`);
    }
    
    // === –í–´–ò–ì–†–´–®–ù–´–ï –ò–ì–†–´ –ë–ï–ó WIN –¢–†–ê–ù–ó–ê–ö–¶–ò–ô ===
    const winGamesWithoutWinTransactions = await Game.aggregate([
      { $match: { win: true } },
      {
        $lookup: {
          from: 'transactions',
          let: { gameId: '$_id' },
          pipeline: [
            { $match: { $expr: { $and: [
              { $eq: ['$game', '$$gameId'] },
              { $eq: ['$type', 'win'] }
            ]}}}
          ],
          as: 'winTransactions'
        }
      },
      { $match: { winTransactions: { $size: 0 } } },
      { $count: 'count' }
    ]);
    
    if (winGamesWithoutWinTransactions[0]?.count > 0) {
      auditResults.orphanedRecords.push(`–í—ã–∏–≥—Ä—ã—à–Ω—ã—Ö –∏–≥—Ä –±–µ–∑ win —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π: ${winGamesWithoutWinTransactions[0].count}`);
      console.log(`‚ùå –í—ã–∏–≥—Ä—ã—à–Ω—ã—Ö –∏–≥—Ä –±–µ–∑ win —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π: ${winGamesWithoutWinTransactions[0].count}`);
    }
    
    // ==========================================
    // 4. –ê–£–î–ò–¢ –ú–ê–¢–ï–ú–ê–¢–ò–ß–ï–°–ö–û–ô –¶–ï–õ–û–°–¢–ù–û–°–¢–ò
    // ==========================================
    console.log('\n\n=== 4. –ê–£–î–ò–¢ –ú–ê–¢–ï–ú–ê–¢–ò–ß–ï–°–ö–û–ô –¶–ï–õ–û–°–¢–ù–û–°–¢–ò ===');
    
    // === –ü–†–û–í–ï–†–ö–ê –ë–ê–õ–ê–ù–°–û–í –í –ò–ì–†–ê–• ===
    const gamesWithWrongBalance = await Game.aggregate([
      {
        $addFields: {
          expectedBalanceAfter: { $add: ['$balanceBefore', '$profit'] }
        }
      },
      {
        $match: {
          $expr: {
            $gt: [
              { $abs: { $subtract: ['$balanceAfter', '$expectedBalanceAfter'] } },
              0.01
            ]
          }
        }
      },
      { $count: 'count' }
    ]);
    
    if (gamesWithWrongBalance[0]?.count > 0) {
      auditResults.dataInconsistencies.push(`–ò–≥—Ä —Å –Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω–æ–π –º–∞—Ç–µ–º–∞—Ç–∏–∫–æ–π –±–∞–ª–∞–Ω—Å–∞: ${gamesWithWrongBalance[0].count}`);
      console.log(`‚ùå –ò–≥—Ä —Å –Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω–æ–π –º–∞—Ç–µ–º–∞—Ç–∏–∫–æ–π –±–∞–ª–∞–Ω—Å–∞: ${gamesWithWrongBalance[0].count}`);
    }
    
    // === –ü–†–û–í–ï–†–ö–ê –¢–†–ê–ù–ó–ê–ö–¶–ò–ô ===
    const transactionsWithWrongBalance = await Transaction.aggregate([
      {
        $match: {
          $expr: {
            $gt: [
              { $abs: { $subtract: ['$balanceAfter', { $add: ['$balanceBefore', '$amount'] }] } },
              0.01
            ]
          }
        }
      },
      { $count: 'count' }
    ]);
    
    if (transactionsWithWrongBalance[0]?.count > 0) {
      auditResults.dataInconsistencies.push(`–¢—Ä–∞–Ω–∑–∞–∫—Ü–∏–π —Å –Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω–æ–π –º–∞—Ç–µ–º–∞—Ç–∏–∫–æ–π: ${transactionsWithWrongBalance[0].count}`);
      console.log(`‚ùå –¢—Ä–∞–Ω–∑–∞–∫—Ü–∏–π —Å –Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω–æ–π –º–∞—Ç–µ–º–∞—Ç–∏–∫–æ–π: ${transactionsWithWrongBalance[0].count}`);
    }
    
    // ==========================================
    // 5. –û–ë–©–ò–ï –§–ò–ù–ê–ù–°–û–í–´–ï –ü–û–ö–ê–ó–ê–¢–ï–õ–ò
    // ==========================================
    console.log('\n\n=== 5. –û–ë–©–ò–ï –§–ò–ù–ê–ù–°–û–í–´–ï –ü–û–ö–ê–ó–ê–¢–ï–õ–ò ===');
    
    const financialStats = await User.aggregate([
      {
        $group: {
          _id: null,
          totalUserBalance: { $sum: '$balance' },
          totalReferralBalance: { $sum: '$referralStats.referralBalance' },
          totalEarned: { $sum: '$referralStats.totalEarned' },
          usersWithBalance: { $sum: { $cond: [{ $gt: ['$balance', 0] }, 1, 0] } },
          usersWithNegativeBalance: { $sum: { $cond: [{ $lt: ['$balance', 0] }, 1, 0] } }
        }
      }
    ]);
    
    const totalGameProfit = await Game.aggregate([
      { $group: { _id: null, totalProfit: { $sum: '$profit' } } }
    ]);
    
    const fs = financialStats[0] || {};
    const gameProfit = totalGameProfit[0]?.totalProfit || 0;
    
    console.log(`üí∞ –û–±—â–∏–π –±–∞–ª–∞–Ω—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: ${(fs.totalUserBalance || 0).toFixed(2)} USDT`);
    console.log(`ü§ù –û–±—â–∏–π —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω—ã–π –±–∞–ª–∞–Ω—Å: ${(fs.totalReferralBalance || 0).toFixed(2)} USDT`);
    console.log(`üìà –û–±—â–∞—è –ø—Ä–∏–±—ã–ª—å/—É–±—ã—Ç–æ–∫ –æ—Ç –∏–≥—Ä: ${gameProfit.toFixed(2)} USDT`);
    console.log(`üë• –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π —Å –±–∞–ª–∞–Ω—Å–æ–º: ${fs.usersWithBalance || 0}`);
    console.log(`‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π —Å –æ—Ç—Ä–∏—Ü–∞—Ç–µ–ª—å–Ω—ã–º –±–∞–ª–∞–Ω—Å–æ–º: ${fs.usersWithNegativeBalance || 0}`);
    
    // ==========================================
    // 6. –ò–¢–û–ì–û–í–´–ô –û–¢–ß–ï–¢
    // ==========================================
    console.log('\n\nüéØ === –ò–¢–û–ì–û–í–´–ô –û–¢–ß–ï–¢ –ê–£–î–ò–¢–ê ===');
    
    console.log(`\nüî¥ –ö–†–ò–¢–ò–ß–ï–°–ö–ò–ï –ü–†–û–ë–õ–ï–ú–´ (${auditResults.criticalIssues.length}):`);
    auditResults.criticalIssues.forEach(issue => console.log(`   ‚ùå ${issue}`));
    
    console.log(`\nüü° –ü–†–ï–î–£–ü–†–ï–ñ–î–ï–ù–ò–Ø (${auditResults.warnings.length}):`);
    auditResults.warnings.forEach(warning => console.log(`   ‚ö†Ô∏è  ${warning}`));
    
    console.log(`\nüîµ –ü–†–û–ë–õ–ï–ú–´ –¶–ï–õ–û–°–¢–ù–û–°–¢–ò –î–ê–ù–ù–´–• (${auditResults.dataInconsistencies.length}):`);
    auditResults.dataInconsistencies.forEach(issue => console.log(`   üìä ${issue}`));
    
    console.log(`\nüóëÔ∏è  –°–ò–†–û–¢–°–ö–ò–ï –ó–ê–ü–ò–°–ò (${auditResults.orphanedRecords.length}):`);
    auditResults.orphanedRecords.forEach(issue => console.log(`   üóÉÔ∏è  ${issue}`));
    
    console.log(`\nüìà –û–ë–©–ï–ï –°–û–°–¢–û–Ø–ù–ò–ï –°–ò–°–¢–ï–ú–´:`);
    const totalIssues = auditResults.criticalIssues.length + auditResults.warnings.length + 
                       auditResults.dataInconsistencies.length + auditResults.orphanedRecords.length;
    
    if (totalIssues === 0) {
      console.log(`   ‚úÖ –°–∏—Å—Ç–µ–º–∞ –≤ –æ—Ç–ª–∏—á–Ω–æ–º —Å–æ—Å—Ç–æ—è–Ω–∏–∏! –ü—Ä–æ–±–ª–µ–º –Ω–µ –æ–±–Ω–∞—Ä—É–∂–µ–Ω–æ.`);
    } else if (auditResults.criticalIssues.length === 0) {
      console.log(`   üü° –°–∏—Å—Ç–µ–º–∞ –≤ —Ö–æ—Ä–æ—à–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–∏. –ï—Å—Ç—å ${totalIssues} –Ω–µ–∑–Ω–∞—á–∏—Ç–µ–ª—å–Ω—ã—Ö –ø—Ä–æ–±–ª–µ–º.`);
    } else {
      console.log(`   üî¥ –°–∏—Å—Ç–µ–º–∞ —Ç—Ä–µ–±—É–µ—Ç –≤–Ω–∏–º–∞–Ω–∏—è! –û–±–Ω–∞—Ä—É–∂–µ–Ω–æ ${auditResults.criticalIssues.length} –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏—Ö –ø—Ä–æ–±–ª–µ–º.`);
    }
    
    console.log('\n‚úÖ –ò—Å—á–µ—Ä–ø—ã–≤–∞—é—â–∏–π –∞—É–¥–∏—Ç –∑–∞–≤–µ—Ä—à–µ–Ω');
    
    return auditResults;
    
  } catch (error) {
    console.error('‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∞—É–¥–∏—Ç–µ:', error);
    throw error;
  } finally {
    mongoose.disconnect();
  }
}

ultimateSystemAudit().catch(console.error);