// play.command.js
const { Markup } = require('telegraf');
const config = require('../config');
const { checkChatType } = require('../utils/chat-utils');
const { createWebAppKeyboard } = require('../utils/webapp-utils');

/**
 * –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /play
 * @param {Object} ctx - –ö–æ–Ω—Ç–µ–∫—Å—Ç Telegraf
 */
async function playCommand(ctx) {
  try {
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–∏–ø —á–∞—Ç–∞ - –∫–æ–º–∞–Ω–¥–∞ —Ä–∞–±–æ—Ç–∞–µ—Ç —Ç–æ–ª—å–∫–æ –≤ –ª–∏—á–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏—è—Ö
    const chatCheck = checkChatType(ctx, ['private']);
    if (!chatCheck.isAllowed) {
      await ctx.reply(chatCheck.message, { parse_mode: 'Markdown' });
      return;
    }
    
    // –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –∏–≥—Ä–∞–º–∏
    const keyboardData = createWebAppKeyboard([
      [
        { text: 'üé∞ –°–ª–æ—Ç—ã', query: '?game=slots' },
        { text: 'üí£ –ú–∏–Ω—ã', query: '?game=mines' }
      ],
      [
        { text: 'üìà –ö—Ä–∞—à', query: '?game=crash' },
        { text: 'ü™ô –ú–æ–Ω–µ—Ç–∫–∞', query: '?game=coin' }
      ],
      [
        { text: 'üîÆ –°–æ–±—ã—Ç–∏—è', query: '?screen=events' }
      ]
    ]);
    
    if (keyboardData.isValid) {
      await ctx.reply('üéÆ –í—ã–±–µ—Ä–∏—Ç–µ –∏–≥—Ä—É:', keyboardData.keyboard);
    } else {
      await ctx.reply(keyboardData.error);
    }
  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∫–æ–º–∞–Ω–¥—ã /play:', error);
    await ctx.reply('–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.');
  }
}

module.exports = playCommand;