// frontend/src/services/websocket.service.js
import { io } from 'socket.io-client';

class WebSocketService {
  constructor() {
    this.socket = null;
    this.isConnected = false;
    this.reconnectAttempts = 0;
    this.maxReconnectAttempts = 5;
    this.reconnectDelay = 1000;
    this.eventListeners = new Map();
    
    // URL –¥–ª—è WebSocket —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è
    this.socketUrl = process.env.REACT_APP_WS_URL || 'https://greenlight-api-ghqh.onrender.com';
    
    console.log('WebSocketService –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω, URL:', this.socketUrl);
  }

  /**
   * –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ WebSocket —Å–µ—Ä–≤–µ—Ä—É
   * @param {string} userTelegramId - ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è Telegram
   */
  async connect(userTelegramId = null) {
    try {
      if (this.socket && this.socket.connected) {
        console.log('WebSocket —É–∂–µ –ø–æ–¥–∫–ª—é—á–µ–Ω');
        return true;
      }

      console.log('üîå –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ WebSocket —Å–µ—Ä–≤–µ—Ä—É...');

      // –°–æ–∑–¥–∞–µ–º –Ω–æ–≤–æ–µ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ
      this.socket = io(this.socketUrl, {
        transports: ['websocket', 'polling'],
        timeout: 10000,
        forceNew: true,
        query: {
          userTelegramId: userTelegramId || 'anonymous'
        }
      });

      // –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è
      this.setupConnectionHandlers();

      // –ñ–¥–µ–º –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è
      return new Promise((resolve, reject) => {
        const timeout = setTimeout(() => {
          reject(new Error('–¢–∞–π–º–∞—É—Ç –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ WebSocket'));
        }, 10000);

        this.socket.on('connect', () => {
          clearTimeout(timeout);
          this.isConnected = true;
          this.reconnectAttempts = 0;
          console.log('‚úÖ WebSocket –ø–æ–¥–∫–ª—é—á–µ–Ω —É—Å–ø–µ—à–Ω–æ');
          resolve(true);
        });

        this.socket.on('connect_error', (error) => {
          clearTimeout(timeout);
          console.error('‚ùå –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ WebSocket:', error);
          reject(error);
        });
      });

    } catch (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è WebSocket —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è:', error);
      throw error;
    }
  }

  /**
   * –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è
   */
  setupConnectionHandlers() {
    if (!this.socket) return;

    // –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ
    this.socket.on('connect', () => {
      this.isConnected = true;
      this.reconnectAttempts = 0;
      console.log('üîå WebSocket –ø–æ–¥–∫–ª—é—á–µ–Ω, ID:', this.socket.id);
    });

    // –°–æ–µ–¥–∏–Ω–µ–Ω–∏–µ —Ä–∞–∑–æ—Ä–≤–∞–Ω–æ
    this.socket.on('disconnect', (reason) => {
      this.isConnected = false;
      console.log('üîå WebSocket –æ—Ç–∫–ª—é—á–µ–Ω, –ø—Ä–∏—á–∏–Ω–∞:', reason);
      
      // –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ –ø–µ—Ä–µ–ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ
      if (reason === 'io server disconnect') {
        // –°–µ—Ä–≤–µ—Ä –ø—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ –æ—Ç–∫–ª—é—á–∏–ª - –Ω–µ –ø–µ—Ä–µ–ø–æ–¥–∫–ª—é—á–∞–µ–º—Å—è
        return;
      }
      
      this.attemptReconnect();
    });

    // –û—à–∏–±–∫–∞ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è
    this.socket.on('connect_error', (error) => {
      console.error('üîå –û—à–∏–±–∫–∞ WebSocket —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è:', error);
      this.isConnected = false;
      this.attemptReconnect();
    });

    // Pong –æ—Ç–≤–µ—Ç –Ω–∞ ping
    this.socket.on('pong', (data) => {
      console.log('üèì Pong –ø–æ–ª—É—á–µ–Ω:', data);
    });

    // –û–±—â–∞—è –æ—à–∏–±–∫–∞
    this.socket.on('error', (error) => {
      console.error('üîå WebSocket –æ—à–∏–±–∫–∞:', error);
    });
  }

  /**
   * –ü–æ–ø—ã—Ç–∫–∞ –ø–µ—Ä–µ–ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è
   */
  attemptReconnect() {
    if (this.reconnectAttempts >= this.maxReconnectAttempts) {
      console.error('üîå –ü—Ä–µ–≤—ã—à–µ–Ω–æ –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–ø—ã—Ç–æ–∫ –ø–µ—Ä–µ–ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è');
      return;
    }

    this.reconnectAttempts++;
    const delay = this.reconnectDelay * this.reconnectAttempts;
    
    console.log(`üîå –ü–µ—Ä–µ–ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ —á–µ—Ä–µ–∑ ${delay}ms (–ø–æ–ø—ã—Ç–∫–∞ ${this.reconnectAttempts}/${this.maxReconnectAttempts})`);
    
    setTimeout(() => {
      if (this.socket && !this.socket.connected) {
        this.socket.connect();
      }
    }, delay);
  }

  /**
   * –û—Ç–∫–ª—é—á–µ–Ω–∏–µ –æ—Ç WebSocket
   */
  disconnect() {
    if (this.socket) {
      console.log('üîå –û—Ç–∫–ª—é—á–µ–Ω–∏–µ –æ—Ç WebSocket...');
      this.socket.disconnect();
      this.socket = null;
      this.isConnected = false;
    }
  }

  /**
   * –ü—Ä–∏—Å–æ–µ–¥–∏–Ω–∏—Ç—å—Å—è –∫ Crash –∏–≥—Ä–µ
   */
  joinCrash() {
    if (!this.socket || !this.isConnected) {
      console.warn('üéÆ –ù–µ–ª—å–∑—è –ø—Ä–∏—Å–æ–µ–¥–∏–Ω–∏—Ç—å—Å—è –∫ Crash - WebSocket –Ω–µ –ø–æ–¥–∫–ª—é—á–µ–Ω');
      return false;
    }

    console.log('üéÆ –ü—Ä–∏—Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ –∫ Crash –∏–≥—Ä–µ...');
    this.socket.emit('join_game', 'crash');
    return true;
  }

  /**
   * –ü–æ–∫–∏–Ω—É—Ç—å Crash –∏–≥—Ä—É
   */
  leaveCrash() {
    if (!this.socket || !this.isConnected) {
      console.warn('üéÆ –ù–µ–ª—å–∑—è –ø–æ–∫–∏–Ω—É—Ç—å Crash - WebSocket –Ω–µ –ø–æ–¥–∫–ª—é—á–µ–Ω');
      return false;
    }

    console.log('üéÆ –ü–æ–∫–∏–¥–∞–Ω–∏–µ Crash –∏–≥—Ä—ã...');
    this.socket.emit('leave_game', 'crash');
    return true;
  }

  /**
   * –ü–æ–¥–ø–∏—Å–∫–∞ –Ω–∞ —Å–æ–±—ã—Ç–∏–µ
   * @param {string} event - –ù–∞–∑–≤–∞–Ω–∏–µ —Å–æ–±—ã—Ç–∏—è
   * @param {function} callback - –§—É–Ω–∫—Ü–∏—è –æ–±—Ä–∞–±–æ—Ç—á–∏–∫
   * @returns {function} - –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ—Ç–ø–∏—Å–∫–∏
   */
  on(event, callback) {
    if (!this.socket) {
      console.warn(`üîå –ù–µ–ª—å–∑—è –ø–æ–¥–ø–∏—Å–∞—Ç—å—Å—è –Ω–∞ —Å–æ–±—ã—Ç–∏–µ ${event} - WebSocket –Ω–µ —Å–æ–∑–¥–∞–Ω`);
      return () => {};
    }

    console.log(`üì° –ü–æ–¥–ø–∏—Å–∫–∞ –Ω–∞ —Å–æ–±—ã—Ç–∏–µ: ${event}`);
    
    // –°–æ—Ö—Ä–∞–Ω—è–µ–º –∫–æ–ª–±—ç–∫ –¥–ª—è –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏ –æ—Ç–ø–∏—Å–∫–∏
    if (!this.eventListeners.has(event)) {
      this.eventListeners.set(event, new Set());
    }
    this.eventListeners.get(event).add(callback);

    // –ü–æ–¥–ø–∏—Å—ã–≤–∞–µ–º—Å—è –Ω–∞ —Å–æ–±—ã—Ç–∏–µ
    this.socket.on(event, callback);

    // –í–æ–∑–≤—Ä–∞—â–∞–µ–º —Ñ—É–Ω–∫—Ü–∏—é –¥–ª—è –æ—Ç–ø–∏—Å–∫–∏
    return () => {
      if (this.socket) {
        this.socket.off(event, callback);
      }
      if (this.eventListeners.has(event)) {
        this.eventListeners.get(event).delete(callback);
      }
      console.log(`üì° –û—Ç–ø–∏—Å–∫–∞ –æ—Ç —Å–æ–±—ã—Ç–∏—è: ${event}`);
    };
  }

  /**
   * –û—Ç–ø–∏—Å–∫–∞ –æ—Ç —Å–æ–±—ã—Ç–∏—è
   * @param {string} event - –ù–∞–∑–≤–∞–Ω–∏–µ —Å–æ–±—ã—Ç–∏—è
   * @param {function} callback - –§—É–Ω–∫—Ü–∏—è –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ)
   */
  off(event, callback = null) {
    if (!this.socket) return;

    if (callback) {
      this.socket.off(event, callback);
      if (this.eventListeners.has(event)) {
        this.eventListeners.get(event).delete(callback);
      }
    } else {
      this.socket.off(event);
      this.eventListeners.delete(event);
    }
    
    console.log(`üì° –û—Ç–ø–∏—Å–∫–∞ –æ—Ç —Å–æ–±—ã—Ç–∏—è: ${event}`);
  }

  /**
   * –û—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–±—ã—Ç–∏—è
   * @param {string} event - –ù–∞–∑–≤–∞–Ω–∏–µ —Å–æ–±—ã—Ç–∏—è
   * @param {any} data - –î–∞–Ω–Ω—ã–µ –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏
   */
  emit(event, data = null) {
    if (!this.socket || !this.isConnected) {
      console.warn(`üîå –ù–µ–ª—å–∑—è –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–±—ã—Ç–∏–µ ${event} - WebSocket –Ω–µ –ø–æ–¥–∫–ª—é—á–µ–Ω`);
      return false;
    }

    console.log(`üì§ –û—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–±—ã—Ç–∏—è: ${event}`, data);
    this.socket.emit(event, data);
    return true;
  }

  /**
   * Ping —Å–µ—Ä–≤–µ—Ä–∞ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è
   */
  ping() {
    if (!this.socket || !this.isConnected) {
      console.warn('üèì –ù–µ–ª—å–∑—è –æ—Ç–ø—Ä–∞–≤–∏—Ç—å ping - WebSocket –Ω–µ –ø–æ–¥–∫–ª—é—á–µ–Ω');
      return false;
    }

    console.log('üèì –û—Ç–ø—Ä–∞–≤–∫–∞ ping...');
    this.socket.emit('ping');
    return true;
  }

  /**
   * –ü–æ–ª—É—á–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è
   */
  getConnectionStatus() {
    return {
      connected: this.isConnected,
      socketId: this.socket?.id || null,
      reconnectAttempts: this.reconnectAttempts,
      url: this.socketUrl
    };
  }

  /**
   * –û—á–∏—Å—Ç–∫–∞ –≤—Å–µ—Ö –ø–æ–¥–ø–∏—Å–æ–∫
   */
  removeAllListeners() {
    if (this.socket) {
      this.socket.removeAllListeners();
    }
    this.eventListeners.clear();
    console.log('üì° –í—Å–µ –ø–æ–¥–ø–∏—Å–∫–∏ —É–¥–∞–ª–µ–Ω—ã');
  }

  /**
   * –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–æ—Å—Ç–æ—è–Ω–∏—è —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è
   */
  isSocketConnected() {
    return this.socket && this.socket.connected && this.isConnected;
  }

  /**
   * –ü–æ–ª—É—á–µ–Ω–∏–µ –æ–±—ä–µ–∫—Ç–∞ —Å–æ–∫–µ—Ç–∞ (–¥–ª—è –æ—Ç–ª–∞–¥–∫–∏)
   */
  getSocket() {
    return this.socket;
  }
}

// –°–æ–∑–¥–∞–µ–º singleton —ç–∫–∑–µ–º–ø–ª—è—Ä
const webSocketService = new WebSocketService();

export default webSocketService;