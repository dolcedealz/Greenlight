// backend/scripts/update-all-user-stats.js
// –°–∫—Ä–∏–ø—Ç –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –≤—Å–µ—Ö —Å—Ç–∞—Ç–∏—Å—Ç–∏—á–µ—Å–∫–∏—Ö –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π

const mongoose = require('mongoose');
require('dotenv').config();

// –ü–æ–¥–∫–ª—é—á–∞–µ–º—Å—è –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
const connectDB = async () => {
  try {
    await mongoose.connect(process.env.MONGODB_URI || 'mongodb://localhost:27017/greenlight');
    console.log('‚úÖ –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ MongoDB —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ');
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ MongoDB:', error);
    process.exit(1);
  }
};

// –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º –º–æ–¥–µ–ª–∏
const User = require('../src/models/user.model');
const Game = require('../src/models/game.model');

async function updateAllUserStats() {
  try {
    console.log('üîÑ –ù–∞—á–∏–Ω–∞–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –¥–ª—è –≤—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π...');
    
    // –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
    const users = await User.find({}).select('_id username totalGames totalWagered totalWon');
    console.log(`üìä –ù–∞–π–¥–µ–Ω–æ ${users.length} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π`);
    
    let updated = 0;
    let processed = 0;
    
    for (const user of users) {
      processed++;
      
      // –ü–æ–¥—Å—á–∏—Ç—ã–≤–∞–µ–º —Ä–µ–∞–ª—å–Ω—É—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –∏–∑ –∫–æ–ª–ª–µ–∫—Ü–∏–∏ Game
      const [
        totalGamesResult,
        totalWageredResult,
        totalWonResult
      ] = await Promise.all([
        Game.countDocuments({ user: user._id }),
        Game.aggregate([
          { $match: { user: user._id } },
          { $group: { _id: null, total: { $sum: '$bet' } } }
        ]),
        Game.aggregate([
          { $match: { user: user._id } },
          { 
            $group: { 
              _id: null, 
              total: { 
                $sum: { 
                  $cond: [
                    '$win', 
                    { $add: ['$bet', { $ifNull: ['$profit', 0] }] }, 
                    0
                  ] 
                } 
              } 
            } 
          }
        ])
      ]);

      const actualTotalGames = totalGamesResult;
      const actualTotalWagered = totalWageredResult[0]?.total || 0;
      const actualTotalWon = totalWonResult[0]?.total || 0;

      // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω—É–∂–Ω–æ –ª–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ
      let needsUpdate = false;
      const updates = {};

      if (user.totalGames !== actualTotalGames) {
        updates.totalGames = actualTotalGames;
        needsUpdate = true;
      }

      if (Math.abs(user.totalWagered - actualTotalWagered) > 0.01) {
        updates.totalWagered = actualTotalWagered;
        needsUpdate = true;
      }

      if (Math.abs(user.totalWon - actualTotalWon) > 0.01) {
        updates.totalWon = actualTotalWon;
        needsUpdate = true;
      }

      if (needsUpdate) {
        await User.updateOne({ _id: user._id }, { $set: updates });
        console.log(`‚úÖ ${user.username || user._id}: –∏–≥—Ä ${user.totalGames}‚Üí${actualTotalGames}, —Å—Ç–∞–≤–æ–∫ ${user.totalWagered.toFixed(2)}‚Üí${actualTotalWagered.toFixed(2)}, –≤—ã–∏–≥—Ä—ã—à–µ–π ${user.totalWon.toFixed(2)}‚Üí${actualTotalWon.toFixed(2)}`);
        updated++;
      }

      // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø—Ä–æ–≥—Ä–µ—Å—Å –∫–∞–∂–¥—ã–µ 100 –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
      if (processed % 100 === 0) {
        console.log(`üìà –û–±—Ä–∞–±–æ—Ç–∞–Ω–æ ${processed}/${users.length} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π...`);
      }
    }
    
    console.log(`\nüìä –†–µ–∑—É–ª—å—Ç–∞—Ç—ã –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è:`);
    console.log(`‚úÖ –û–±–Ω–æ–≤–ª–µ–Ω–æ: ${updated} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π`);
    console.log(`‚è≠Ô∏è –ü—Ä–æ–ø—É—â–µ–Ω–æ: ${users.length - updated} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π`);
    console.log(`üìà –í—Å–µ–≥–æ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–æ: ${users.length} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π`);
    
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏:', error);
  }
}

async function main() {
  await connectDB();
  await updateAllUserStats();
  
  console.log('üèÅ –°–∫—Ä–∏–ø—Ç –∑–∞–≤–µ—Ä—à–µ–Ω');
  process.exit(0);
}

main().catch(error => {
  console.error('‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞:', error);
  process.exit(1);
});