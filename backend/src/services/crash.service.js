// backend/src/services/crash.service.js
const { CrashRound, User, Game, Transaction } = require('../models');
const randomService = require('./random.service');
const oddsService = require('./odds.service');
const referralService = require('./referral.service');
const { CRASH_GAME_CONFIG } = require('../../../common/constants');
const mongoose = require('mongoose');
const EventEmitter = require('events');

class CrashService extends EventEmitter {
  constructor() {
    super();
    this.currentRound = null;
    this.gameTimer = null;
    this.countdownTimer = null;
    this.isRunning = false;
    this.currentMultiplier = 1.00;
    this.gameStartTime = null;
    this.lastProcessedMultiplier = 1.00; // –ù–û–í–û–ï: –û—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏–µ –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω–æ–≥–æ –º–Ω–æ–∂–∏—Ç–µ–ª—è
    
    // –ì–ª–æ–±–∞–ª—å–Ω—ã–π –º–æ–¥–∏—Ñ–∏–∫–∞—Ç–æ—Ä –¥–ª—è –≤—Å–µ–π –∏–≥—Ä—ã Crash
    this.globalCrashModifier = 0;
    
    // –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –∏–≥—Ä—ã (—Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä–æ–≤–∞–Ω—ã —á–µ—Ä–µ–∑ common/constants.js)
    this.WAITING_TIME = CRASH_GAME_CONFIG.WAITING_TIME; // 7000–º—Å
    this.CRASH_DELAY = CRASH_GAME_CONFIG.CRASH_DELAY; // 3000–º—Å
    this.MULTIPLIER_UPDATE_INTERVAL = CRASH_GAME_CONFIG.MULTIPLIER_UPDATE_INTERVAL; // 80–º—Å
    this.MAX_MULTIPLIER = 100.00; // –ú–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–π –º–Ω–æ–∂–∏—Ç–µ–ª—å
    
    // –ü—Ä–∏–≤—è–∑—ã–≤–∞–µ–º –∫–æ–Ω—Ç–µ–∫—Å—Ç –¥–ª—è –≤—Å–µ—Ö –º–µ—Ç–æ–¥–æ–≤
    this.startGameCycle = this.startGameCycle.bind(this);
    this.runSingleRound = this.runSingleRound.bind(this);
    this.createNewRound = this.createNewRound.bind(this);
    this.waitingPeriod = this.waitingPeriod.bind(this);
    this.flyingPeriod = this.flyingPeriod.bind(this);
    this.crashPeriod = this.crashPeriod.bind(this);
    this.completeRound = this.completeRound.bind(this);
    
    this.init();
  }
  
  async init() {
    console.log('üöÄ CRASH SERVICE: –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Å–µ—Ä–≤–∏—Å–∞ –∫—Ä–∞—à –∏–≥—Ä—ã');
    
    try {
      // –ó–∞–≤–µ—Ä—à–∞–µ–º –ª—é–±—ã–µ –∞–∫—Ç–∏–≤–Ω—ã–µ —Ä–∞—É–Ω–¥—ã –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ
      await CrashRound.updateMany(
        { status: { $in: ['waiting', 'flying'] } },
        { status: 'completed' }
      );
      
      // –ó–∞–ø—É—Å–∫–∞–µ–º –∏–≥—Ä–æ–≤–æ–π —Ü–∏–∫–ª
      this.startGameCycle();
    } catch (error) {
      console.error('‚ùå CRASH SERVICE: –û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏:', error);
      // –ü—Ä–æ–±—É–µ–º –ø–µ—Ä–µ–∑–∞–ø—É—Å—Ç–∏—Ç—å —á–µ—Ä–µ–∑ 5 —Å–µ–∫—É–Ω–¥
      setTimeout(() => this.init(), 5000);
    }
  }
  
  async startGameCycle() {
    if (this.isRunning) return;
    
    this.isRunning = true;
    console.log('üéÆ CRASH SERVICE: –ó–∞–ø—É—Å–∫ –∏–≥—Ä–æ–≤–æ–≥–æ —Ü–∏–∫–ª–∞');
    
    while (this.isRunning) {
      try {
        await this.runSingleRound();
      } catch (error) {
        console.error('‚ùå CRASH SERVICE: –û—à–∏–±–∫–∞ –≤ –∏–≥—Ä–æ–≤–æ–º —Ü–∏–∫–ª–µ:', error);
        await new Promise(resolve => setTimeout(resolve, 5000)); // –ü–∞—É–∑–∞ –ø—Ä–∏ –æ—à–∏–±–∫–µ
      }
    }
  }
  
  async runSingleRound() {
    // 1. –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—ã–π —Ä–∞—É–Ω–¥
    await this.createNewRound();
    
    // 2. –ü–µ—Ä–∏–æ–¥ –æ–∂–∏–¥–∞–Ω–∏—è —Å—Ç–∞–≤–æ–∫ (7 —Å–µ–∫—É–Ω–¥)
    await this.waitingPeriod();
    
    // 3. –ü–µ—Ä–∏–æ–¥ –ø–æ–ª–µ—Ç–∞ —Å —Ä–∞—Å—Ç—É—â–∏–º –º–Ω–æ–∂–∏—Ç–µ–ª–µ–º
    await this.flyingPeriod();
    
    // 4. –ü–∞—É–∑–∞ –ø–æ—Å–ª–µ –∫—Ä–∞—à–∞ (3 —Å–µ–∫—É–Ω–¥—ã)
    await this.crashPeriod();
    
    // 5. –ó–∞–≤–µ—Ä—à–∞–µ–º —Ä–∞—É–Ω–¥
    await this.completeRound();
  }
  
  async createNewRound() {
    try {
      const roundId = await CrashRound.getNextRoundId();
      
      // –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –∫—Ä–∏–ø—Ç–æ–≥—Ä–∞—Ñ–∏—á–µ—Å–∫–∏ –±–µ–∑–æ–ø–∞—Å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
      const serverSeed = randomService.generateServerSeed();
      const serverSeedHashed = randomService.hashServerSeed(serverSeed);
      const nonce = randomService.generateNonce();
      
      // –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º crash point –∏—Å–ø–æ–ª—å–∑—É—è provably fair –∞–ª–≥–æ—Ä–∏—Ç–º
      const crashPoint = this.generateCrashPoint(serverSeed, nonce);
      console.log(`üé≤ –ì–ï–ù–ï–†–ê–¶–ò–Ø CRASH POINT: –°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω crashPoint=${crashPoint.toFixed(2)}x –¥–ª—è —Ä–∞—É–Ω–¥–∞ #${roundId}`);
      
      this.currentRound = new CrashRound({
        roundId,
        status: 'waiting',
        crashPoint,
        serverSeed,
        serverSeedHashed,
        nonce,
        gameData: {}
      });
      
      await this.currentRound.save();
      
      console.log(`üÜï CRASH SERVICE: –°–æ–∑–¥–∞–Ω —Ä–∞—É–Ω–¥ #${roundId}, crash point: ${crashPoint.toFixed(2)}x`);
      
      // –°–±—Ä–∞—Å—ã–≤–∞–µ–º –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏–µ –º–Ω–æ–∂–∏—Ç–µ–ª—è
      this.lastProcessedMultiplier = 1.00;
      
      // –≠–º–∏—Ç–∏–º —Å–æ–±—ã—Ç–∏–µ –¥–ª—è WebSocket
      this.emit('roundCreated', {
        roundId,
        status: 'waiting',
        serverSeedHashed,
        timeToStart: this.WAITING_TIME / 1000
      });
    } catch (error) {
      console.error('‚ùå CRASH SERVICE: –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è —Ä–∞—É–Ω–¥–∞:', error);
      throw error;
    }
  }
  
  async waitingPeriod() {
    console.log('‚è≥ CRASH SERVICE: –ü–µ—Ä–∏–æ–¥ –æ–∂–∏–¥–∞–Ω–∏—è —Å—Ç–∞–≤–æ–∫');
    
    let timeLeft = this.WAITING_TIME / 1000; // 7 —Å–µ–∫—É–Ω–¥
    
    return new Promise((resolve) => {
      // –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ç–µ–∫—É—â–∏–π roundId –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏
      const currentRoundId = this.currentRound?.roundId;
      
      this.countdownTimer = setInterval(() => {
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —Ä–∞—É–Ω–¥ –≤—Å–µ –µ—â–µ –∞–∫—Ç—É–∞–ª–µ–Ω
        if (!this.currentRound || this.currentRound.roundId !== currentRoundId) {
          if (this.countdownTimer) {
            clearInterval(this.countdownTimer);
            this.countdownTimer = null;
          }
          resolve();
          return;
        }
        
        timeLeft--;
        
        // –≠–º–∏—Ç–∏–º –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Ç–∞–π–º–µ—Ä–∞
        this.emit('countdownUpdate', {
          roundId: this.currentRound.roundId,
          timeToStart: timeLeft
        });
        
        if (timeLeft <= 0) {
          clearInterval(this.countdownTimer);
          this.countdownTimer = null;
          resolve();
        }
      }, 1000);
    });
  }
  
  async flyingPeriod() {
    if (!this.currentRound) {
      console.error('‚ùå CRASH SERVICE: –ù–µ—Ç –∞–∫—Ç–∏–≤–Ω–æ–≥–æ —Ä–∞—É–Ω–¥–∞ –¥–ª—è –ø–æ–ª–µ—Ç–∞');
      return;
    }
    
    console.log('üöÄ CRASH SERVICE: –ù–∞—á–∞–ª–æ –ø–æ–ª–µ—Ç–∞');
    
    try {
      // –ó–∞–ø—É—Å–∫–∞–µ–º –ø–æ–ª–µ—Ç
      await CrashRound.findByIdAndUpdate(
        this.currentRound._id,
        { 
          status: 'flying',
          startedAt: new Date()
        }
      );
      this.currentRound.status = 'flying';
      this.currentRound.startedAt = new Date();
      
      this.currentMultiplier = 1.00;
      this.lastProcessedMultiplier = 1.00; // –ù–û–í–û–ï: –°–±—Ä–∞—Å—ã–≤–∞–µ–º –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏–µ
      this.gameStartTime = Date.now();
      
      // –≠–º–∏—Ç–∏–º –Ω–∞—á–∞–ª–æ –ø–æ–ª–µ—Ç–∞
      this.emit('gameStarted', {
        roundId: this.currentRound.roundId,
        status: 'flying',
        multiplier: this.currentMultiplier
      });
      
      // –ó–∞–ø—É—Å–∫–∞–µ–º —Ü–∏–∫–ª –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –º–Ω–æ–∂–∏—Ç–µ–ª—è
      return new Promise((resolve) => {
        // –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ç–µ–∫—É—â–∏–π roundId –∏ crashPoint
        const currentRoundId = this.currentRound.roundId;
        const crashPoint = this.currentRound.crashPoint;
        
        const multiplierInterval = setInterval(async () => {
          // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —Ä–∞—É–Ω–¥ –≤—Å–µ –µ—â–µ –∞–∫—Ç—É–∞–ª–µ–Ω
          if (!this.currentRound || this.currentRound.roundId !== currentRoundId) {
            clearInterval(multiplierInterval);
            resolve();
            return;
          }
          
          const now = Date.now();
          const elapsedSeconds = (now - this.gameStartTime) / 1000;
          
          // –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º –º–Ω–æ–∂–∏—Ç–µ–ª—å (–∑–∞–º–µ–¥–ª–µ–Ω–Ω–∞—è —Ñ–æ—Ä–º—É–ª–∞ –∫–∞–∫ –Ω–∞ —Ñ—Ä–æ–Ω—Ç–µ–Ω–¥–µ)
          const baseSpeed = 0.06;
          const acceleration = 0.03;
          const speed = baseSpeed + (acceleration * elapsedSeconds);
          const deltaTime = this.MULTIPLIER_UPDATE_INTERVAL / 1000;
          
          this.currentMultiplier += speed * deltaTime;
          
          // –ö–õ–Æ–ß–ï–í–ê–Ø –£–õ–£–ß–®–ï–ù–ù–ê–Ø –õ–û–ì–ò–ö–ê: –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∞–≤—Ç–æ–≤—ã–≤–æ–¥—ã –î–û –ø—Ä–æ–≤–µ—Ä–∫–∏ –∫—Ä–∞—à–∞
          await this.processAutoCashOuts();
          
          // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –¥–æ—Å—Ç–∏–≥–ª–∏ –ª–∏ crash point
          if (this.currentMultiplier >= crashPoint) {
            clearInterval(multiplierInterval);
            
            // –ö—Ä–∞—à–∏–º —Ç–æ—á–Ω–æ –Ω–∞ –∑–∞–¥–∞–Ω–Ω–æ–º crash point
            this.currentMultiplier = crashPoint;
            
            console.log(`üí• CRASH SERVICE: –ö—Ä–∞—à –Ω–∞ ${crashPoint.toFixed(2)}x`);
            console.log(`üîç –û–¢–õ–ê–î–ö–ê –ö–†–ê–®: currentMultiplier=${this.currentMultiplier.toFixed(2)}x, crashPoint=${crashPoint.toFixed(2)}x`);
            
            // –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∫—Ä–∞—à
            if (this.currentRound) {
              await CrashRound.findByIdAndUpdate(
                this.currentRound._id,
                { 
                  status: 'crashed',
                  crashedAt: new Date(),
                  finalMultiplier: crashPoint
                }
              );
              this.currentRound.status = 'crashed';
              this.currentRound.crashedAt = new Date();
              this.currentRound.finalMultiplier = crashPoint;
              
              // –≠–º–∏—Ç–∏–º –∫—Ä–∞—à
              console.log(`üîç –û–¢–õ–ê–î–ö–ê –ö–†–ê–®: –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∫–ª–∏–µ–Ω—Ç–∞–º crashPoint=${crashPoint.toFixed(2)}, finalMultiplier=${crashPoint.toFixed(2)}, currentMultiplier=${this.currentMultiplier.toFixed(2)}`);
              this.emit('gameCrashed', {
                roundId: currentRoundId,
                status: 'crashed',
                crashPoint: crashPoint,
                finalMultiplier: crashPoint // –¢–û–ß–ù–´–ô crash point –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è
              });
            }
            
            resolve();
          } else {
            // –≠–º–∏—Ç–∏–º –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –º–Ω–æ–∂–∏—Ç–µ–ª—è
            this.emit('multiplierUpdate', {
              roundId: currentRoundId,
              multiplier: this.currentMultiplier,
              timestamp: now
            });
          }
        }, this.MULTIPLIER_UPDATE_INTERVAL);
      });
    } catch (error) {
      console.error('‚ùå CRASH SERVICE: –û—à–∏–±–∫–∞ –≤ –ø–µ—Ä–∏–æ–¥ –ø–æ–ª–µ—Ç–∞:', error);
      throw error;
    }
  }
  
  // –ö–ê–†–î–ò–ù–ê–õ–¨–ù–û –£–õ–£–ß–®–ï–ù–ù–ê–Ø —Ñ—É–Ω–∫—Ü–∏—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∞–≤—Ç–æ–≤—ã–≤–æ–¥–æ–≤
  async processAutoCashOuts() {
    if (!this.currentRound) return;
    
    // –ù–û–í–û–ï: –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –º–Ω–æ–∂–∏—Ç–µ–ª—å –∑–Ω–∞—á–∏—Ç–µ–ª—å–Ω–æ –∏–∑–º–µ–Ω–∏–ª—Å—è
    if (Math.abs(this.currentMultiplier - this.lastProcessedMultiplier) < 0.01) {
      return; // –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –µ—Å–ª–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–µ –º–µ–Ω—å—à–µ 0.01x
    }
    
    const session = await mongoose.startSession();
    session.startTransaction();
    
    try {
      // –£–õ–£–ß–®–ï–ù–ù–ê–Ø –õ–û–ì–ò–ö–ê: –ù–∞—Ö–æ–¥–∏–º —Å—Ç–∞–≤–∫–∏ –¥–ª—è –∞–≤—Ç–æ–≤—ã–≤–æ–¥–∞ —Å –±–æ–ª–µ–µ —Ç–æ—á–Ω–æ–π –ø—Ä–æ–≤–µ—Ä–∫–æ–π
      const betsToProcess = this.currentRound.bets.filter(bet => {
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤—Å–µ —É—Å–ª–æ–≤–∏—è –¥–ª—è –∞–≤—Ç–æ–≤—ã–≤–æ–¥–∞
        const isActive = !bet.cashedOut;
        const hasAutoCashOut = bet.autoCashOut > 0;
        const shouldCashOut = bet.autoCashOut <= this.currentMultiplier;
        const wasNotProcessed = bet.autoCashOut > this.lastProcessedMultiplier; // –ù–û–í–û–ï: –ù–µ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–ª–∏ —Ä–∞–Ω–µ–µ
        
        if (isActive && hasAutoCashOut && shouldCashOut && wasNotProcessed) {
          console.log(`üéØ –ê–í–¢–û–í–´–í–û–î: –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Å—Ç–∞–≤–∫—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ${bet.user}, —Ü–µ–ª—å: ${bet.autoCashOut}x, —Ç–µ–∫—É—â–∏–π: ${this.currentMultiplier.toFixed(2)}x`);
          return true;
        }
        
        return false;
      });
      
      if (betsToProcess.length === 0) {
        await session.commitTransaction();
        this.lastProcessedMultiplier = this.currentMultiplier; // –ù–û–í–û–ï: –û–±–Ω–æ–≤–ª—è–µ–º –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏–µ
        return;
      }
      
      console.log(`ü§ñ –ê–í–¢–û–í–´–í–û–î: –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º ${betsToProcess.length} –∞–≤—Ç–æ–≤—ã–≤–æ–¥–æ–≤ –Ω–∞ –º–Ω–æ–∂–∏—Ç–µ–ª–µ ${this.currentMultiplier.toFixed(2)}x`);
      
      // –£–õ–£–ß–®–ï–ù–ù–ê–Ø –û–ë–†–ê–ë–û–¢–ö–ê: –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∫–∞–∂–¥—É—é —Å—Ç–∞–≤–∫—É –∞—Ç–æ–º–∞—Ä–Ω–æ
      for (const bet of betsToProcess) {
        try {
          // –ö–†–ò–¢–ò–ß–ï–°–ö–ò –í–ê–ñ–ù–û: –ò—Å–ø–æ–ª—å–∑—É–µ–º —Ç–æ—á–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ –∞–≤—Ç–æ–≤—ã–≤–æ–¥–∞, –∞ –Ω–µ —Ç–µ–∫—É—â–∏–π –º–Ω–æ–∂–∏—Ç–µ–ª—å
          const exactCashOutMultiplier = bet.autoCashOut;
          const winAmount = bet.amount * exactCashOutMultiplier;
          const profit = winAmount - bet.amount;
          
          console.log(`üí∞ –ê–í–¢–û–í–´–í–û–î: –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å ${bet.user}, —Å—Ç–∞–≤–∫–∞ ${bet.amount}, –º–Ω–æ–∂–∏—Ç–µ–ª—å ${exactCashOutMultiplier}x, –≤—ã–∏–≥—Ä—ã—à ${winAmount}`);
          
          // –û–±–Ω–æ–≤–ª—è–µ–º –ª–æ–∫–∞–ª—å–Ω—É—é –∫–æ–ø–∏—é —Å—Ç–∞–≤–∫–∏
          bet.cashedOut = true;
          bet.cashOutMultiplier = exactCashOutMultiplier;
          bet.profit = profit;
          bet.cashedOutAt = new Date();
          
          // –û–±–Ω–æ–≤–ª—è–µ–º –±–∞–ª–∞–Ω—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
          const user = await User.findByIdAndUpdate(
            bet.user,
            { 
              $inc: { 
                balance: winAmount,
                totalWon: winAmount
              }
            },
            { new: true, session }
          );
          
          if (!user) {
            console.error(`‚ùå –ê–í–¢–û–í–´–í–û–î: –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å ${bet.user} –Ω–µ –Ω–∞–π–¥–µ–Ω`);
            continue;
          }
          
          // –°–æ–∑–¥–∞–µ–º —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—é –≤—ã–∏–≥—Ä—ã—à–∞
          const winTransaction = new Transaction({
            user: bet.user,
            type: 'win',
            amount: winAmount,
            description: `–ê–≤—Ç–æ–≤—ã–≤–æ–¥ –≤ –∫—Ä–∞—à –∏–≥—Ä–µ –ø—Ä–∏ ${exactCashOutMultiplier.toFixed(2)}x`,
            status: 'completed',
            balanceBefore: user.balance - winAmount,
            balanceAfter: user.balance
          });
          
          await winTransaction.save({ session });
          
          // –ù–ï–ú–ï–î–õ–ï–ù–ù–û —ç–º–∏—Ç–∏–º —Å–æ–±—ã—Ç–∏–µ –∞–≤—Ç–æ–≤—ã–≤–æ–¥–∞ –¥–ª—è –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
          this.emit('autoCashOut', {
            roundId: this.currentRound.roundId,
            userId: bet.user,
            username: user.username || '–ò–≥—Ä–æ–∫',
            amount: bet.amount,
            multiplier: exactCashOutMultiplier, // –í–ê–ñ–ù–û: –¢–æ—á–Ω—ã–π –º–Ω–æ–∂–∏—Ç–µ–ª—å –∞–≤—Ç–æ–≤—ã–≤–æ–¥–∞
            profit: profit,
            balanceAfter: user.balance
          });
          
          console.log(`‚úÖ –ê–í–¢–û–í–´–í–û–î: –£—Å–ø–µ—à–Ω–æ –æ–±—Ä–∞–±–æ—Ç–∞–Ω –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ${bet.user} –ø—Ä–∏ ${exactCashOutMultiplier.toFixed(2)}x`);
          
        } catch (betError) {
          console.error(`‚ùå –ê–í–¢–û–í–´–í–û–î: –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Å—Ç–∞–≤–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ${bet.user}:`, betError);
        }
      }
      
      // –ê–¢–û–ú–ê–†–ù–û–ï –û–ë–ù–û–í–õ–ï–ù–ò–ï: –û–±–Ω–æ–≤–ª—è–µ–º –≤—Å–µ —Å—Ç–∞–≤–∫–∏ –≤ —Ä–∞—É–Ω–¥–µ –æ–¥–Ω–∏–º –∑–∞–ø—Ä–æ—Å–æ–º
      const bulkOps = [];
      betsToProcess.forEach((bet, index) => {
        const betIndex = this.currentRound.bets.findIndex(b => 
          b.user.toString() === bet.user.toString()
        );
        
        if (betIndex !== -1) {
          bulkOps.push({
            updateOne: {
              filter: { _id: this.currentRound._id },
              update: {
                $set: {
                  [`bets.${betIndex}.cashedOut`]: true,
                  [`bets.${betIndex}.cashOutMultiplier`]: bet.autoCashOut,
                  [`bets.${betIndex}.profit`]: bet.profit,
                  [`bets.${betIndex}.cashedOutAt`]: bet.cashedOutAt
                }
              }
            }
          });
        }
      });
      
      if (bulkOps.length > 0) {
        await CrashRound.bulkWrite(bulkOps, { session });
      }
      
      await session.commitTransaction();
      
      // –ù–û–í–û–ï: –û–±–Ω–æ–≤–ª—è–µ–º –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏–µ –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω–æ–≥–æ –º–Ω–æ–∂–∏—Ç–µ–ª—è
      this.lastProcessedMultiplier = this.currentMultiplier;
      
      console.log(`üéâ –ê–í–¢–û–í–´–í–û–î: –í—Å–µ –∞–≤—Ç–æ–≤—ã–≤–æ–¥—ã –æ–±—Ä–∞–±–æ—Ç–∞–Ω—ã –Ω–∞ –º–Ω–æ–∂–∏—Ç–µ–ª–µ ${this.currentMultiplier.toFixed(2)}x`);
      
    } catch (error) {
      await session.abortTransaction();
      console.error('‚ùå –ê–í–¢–û–í–´–í–û–î: –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∞–≤—Ç–æ–≤—ã–≤–æ–¥–æ–≤:', error);
    } finally {
      session.endSession();
    }
  }
  
  async crashPeriod() {
    console.log('üí• CRASH SERVICE: –ü–µ—Ä–∏–æ–¥ –ø–æ—Å–ª–µ –∫—Ä–∞—à–∞');
    
    // –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –≤—Å–µ —Å—Ç–∞–≤–∫–∏ –∏ —Å–æ–∑–¥–∞–µ–º –∏–≥—Ä–æ–≤—ã–µ –∑–∞–ø–∏—Å–∏
    await this.processFinalResults();
    
    // –ñ–¥–µ–º 3 —Å–µ–∫—É–Ω–¥—ã
    await new Promise(resolve => setTimeout(resolve, this.CRASH_DELAY));
  }
  
  async processFinalResults() {
    if (!this.currentRound) return;
    
    const session = await mongoose.startSession();
    session.startTransaction();
    
    try {
      for (const bet of this.currentRound.bets) {
        try {
          const user = await User.findById(bet.user).session(session);
          if (!user) continue;
          
          const win = bet.cashedOut;
          const profit = win ? bet.profit : -bet.amount;
          
          // –°–æ–∑–¥–∞–µ–º –∑–∞–ø–∏—Å—å –æ–± –∏–≥—Ä–µ
          const game = new Game({
            user: bet.user,
            gameType: 'crash',
            bet: bet.amount,
            multiplier: win ? bet.cashOutMultiplier : this.currentRound.crashPoint,
            result: {
              roundId: this.currentRound.roundId,
              autoCashOut: bet.autoCashOut,
              cashedOut: bet.cashedOut,
              cashOutMultiplier: bet.cashOutMultiplier,
              crashPoint: this.currentRound.crashPoint,
              win
            },
            win,
            profit,
            balanceBefore: user.balance - (win ? 0 : bet.amount),
            balanceAfter: user.balance,
            serverSeed: this.currentRound.serverSeed,
            serverSeedHashed: this.currentRound.serverSeedHashed,
            nonce: this.currentRound.nonce,
            status: 'completed'
          });
          
          await game.save({ session });
          
          // –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (—Å—Ç–∞–≤–∫–∞ —É–∂–µ —Å–ø–∏—Å–∞–Ω–∞ –ø—Ä–∏ —Ä–∞–∑–º–µ—â–µ–Ω–∏–∏)
          if (!win) {
            user.totalWagered += bet.amount;
          }
          
          await user.save({ session });
          
          // –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω—É—é –∫–æ–º–∏—Å—Å–∏—é –ø—Ä–∏ –ø—Ä–æ–∏–≥—Ä—ã—à–µ
          if (!win) {
            try {
              await referralService.processGameLoss({
                userId: bet.user,
                gameId: game._id,
                gameType: 'crash',
                bet: bet.amount,
                profit: profit
              });
              console.log(`üí∞ CRASH REFERRAL: –û–±—Ä–∞–±–æ—Ç–∞–Ω–∞ —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω–∞—è –∫–æ–º–∏—Å—Å–∏—è –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ${bet.user}, —Å—Ç–∞–≤–∫–∞ ${bet.amount}`);
            } catch (refError) {
              console.error('‚ùå CRASH REFERRAL: –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω–æ–π –∫–æ–º–∏—Å—Å–∏–∏:', refError);
            }
          }
        } catch (betError) {
          console.error(`‚ùå CRASH SERVICE: –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞ –¥–ª—è —Å—Ç–∞–≤–∫–∏:`, betError);
        }
      }
      
      await session.commitTransaction();
    } catch (error) {
      await session.abortTransaction();
      console.error('‚ùå CRASH SERVICE: –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Ñ–∏–Ω–∞–ª—å–Ω—ã—Ö —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤:', error);
    } finally {
      session.endSession();
    }
  }
  
  async completeRound() {
    if (!this.currentRound) return;
    
    try {
      await CrashRound.findByIdAndUpdate(
        this.currentRound._id,
        { 
          status: 'completed',
          completedAt: new Date()
        }
      );
      this.currentRound.status = 'completed';
      this.currentRound.completedAt = new Date();
      
      console.log(`‚úÖ CRASH SERVICE: –†–∞—É–Ω–¥ #${this.currentRound.roundId} –∑–∞–≤–µ—Ä—à–µ–Ω`);
      
      // –≠–º–∏—Ç–∏–º –∑–∞–≤–µ—Ä—à–µ–Ω–∏–µ —Ä–∞—É–Ω–¥–∞
      this.emit('roundCompleted', {
        roundId: this.currentRound.roundId,
        crashPoint: this.currentRound.crashPoint,
        totalBets: this.currentRound.bets.length,
        totalAmount: this.currentRound.totalBetAmount
      });
    } catch (error) {
      console.error('‚ùå CRASH SERVICE: –û—à–∏–±–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è —Ä–∞—É–Ω–¥–∞:', error);
    } finally {
      this.currentRound = null;
      this.lastProcessedMultiplier = 1.00; // –ù–û–í–û–ï: –°–±—Ä–æ—Å –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è
    }
  }
  
  generateCrashPoint(serverSeed, nonce) {
    // –ò—Å–ø–æ–ª—å–∑—É–µ–º –ø—Ä–æ–≤ably fair –∞–ª–≥–æ—Ä–∏—Ç–º –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ crash point
    let randomValue = randomService.generateRandomNumber(serverSeed, 'crash-client', nonce);
    
    // –ò–ù–¢–ï–ì–†–ê–¶–ò–Ø –ú–û–î–ò–§–ò–ö–ê–¢–û–†–ê: –ü–æ–ª—É—á–∞–µ–º –≥–ª–æ–±–∞–ª—å–Ω—ã–π –º–æ–¥–∏—Ñ–∏–∫–∞—Ç–æ—Ä –¥–ª—è –≤—Å–µ–π –∏–≥—Ä—ã
    const globalCrashModifier = this.globalCrashModifier || 0;
    
    if (globalCrashModifier !== 0) {
      console.log(`CRASH: –ü—Ä–∏–º–µ–Ω—è–µ—Ç—Å—è –≥–ª–æ–±–∞–ª—å–Ω—ã–π –º–æ–¥–∏—Ñ–∏–∫–∞—Ç–æ—Ä: ${globalCrashModifier}%`);
      
      // –ú–æ–¥–∏—Ñ–∏–∫–∞—Ç–æ—Ä —É–≤–µ–ª–∏—á–∏–≤–∞–µ—Ç —à–∞–Ω—Å —Ä–∞–Ω–Ω–µ–≥–æ –∫—Ä–∞—à–∞
      if (globalCrashModifier > 0) {
        // –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º –≤–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç—å –Ω–∏–∑–∫–∏—Ö –º–Ω–æ–∂–∏—Ç–µ–ª–µ–π
        randomValue = randomValue * (1 - globalCrashModifier / 200); // –ú–∞–∫—Å —ç—Ñ—Ñ–µ–∫—Ç 25% –ø—Ä–∏ –º–æ–¥–∏—Ñ–∏–∫–∞—Ç–æ—Ä–µ 50%
      } else if (globalCrashModifier < 0) {
        // –£–º–µ–Ω—å—à–∞–µ–º –≤–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç—å –Ω–∏–∑–∫–∏—Ö –º–Ω–æ–∂–∏—Ç–µ–ª–µ–π
        randomValue = Math.min(0.99, randomValue * (1 - globalCrashModifier / 200));
      }
    }
    
    // –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º –≤ crash point —Å –ª–æ–≥–∞—Ä–∏—Ñ–º–∏—á–µ—Å–∫–∏–º —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ–º
    // –ë–æ–ª—å—à–∏–Ω—Å—Ç–≤–æ –∫—Ä–∞—à–µ–π –ø—Ä–æ–∏—Å—Ö–æ–¥–∏—Ç –Ω–∞ –Ω–∏–∑–∫–∏—Ö –º–Ω–æ–∂–∏—Ç–µ–ª—è—Ö
    if (randomValue < 0.4) {
      return 1.0 + randomValue * 0.8; // 1.0-1.8x (40%)
    } else if (randomValue < 0.7) {
      return 1.8 + (randomValue - 0.4) * 4.0; // 1.8-3.0x (30%)
    } else if (randomValue < 0.9) {
      return 3.0 + (randomValue - 0.7) * 20.0; // 3.0-7.0x (20%)
    } else if (randomValue < 0.98) {
      return 7.0 + (randomValue - 0.9) * 112.5; // 7.0-16.0x (8%)
    } else {
      return 16.0 + (randomValue - 0.98) * 4200.0; // 16.0-100.0x (2%)
    }
  }
  
  // –ü—É–±–ª–∏—á–Ω—ã–µ –º–µ—Ç–æ–¥—ã –¥–ª—è API
  async placeBet(userId, betAmount, autoCashOut = 0) {
    const session = await mongoose.startSession();
    session.startTransaction();
    
    try {
      const user = await User.findById(userId).session(session);
      if (!user) {
        throw new Error('–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω');
      }
      
      if (user.isBlocked) {
        throw new Error('–í–∞—à –∞–∫–∫–∞—É–Ω—Ç –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω');
      }
      
      if (!this.currentRound || this.currentRound.status !== 'waiting') {
        throw new Error('–°—Ç–∞–≤–∫–∏ –Ω–µ –ø—Ä–∏–Ω–∏–º–∞—é—Ç—Å—è –≤ –¥–∞–Ω–Ω—ã–π –º–æ–º–µ–Ω—Ç');
      }
      
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω–æ–π —Å—Ç–∞–≤–∫–∏
      const existingBet = this.currentRound.bets.find(bet => 
        bet.user.toString() === userId.toString()
      );
      
      if (existingBet) {
        throw new Error('–£ –≤–∞—Å —É–∂–µ –µ—Å—Ç—å —Å—Ç–∞–≤–∫–∞ –≤ —ç—Ç–æ–º —Ä–∞—É–Ω–¥–µ');
      }
      
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º –±–∞–ª–∞–Ω—Å
      if (user.balance < betAmount) {
        throw new Error('–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å—Ä–µ–¥—Å—Ç–≤');
      }
      
      // –ù–û–í–û–ï: –í–∞–ª–∏–¥–∞—Ü–∏—è –∞–≤—Ç–æ–≤—ã–≤–æ–¥–∞
      if (autoCashOut > 0 && autoCashOut < 1.01) {
        throw new Error('–ú–∏–Ω–∏–º–∞–ª—å–Ω—ã–π –∞–≤—Ç–æ–≤—ã–≤–æ–¥: 1.01x');
      }
      
      if (autoCashOut > 1000) {
        throw new Error('–ú–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–π –∞–≤—Ç–æ–≤—ã–≤–æ–¥: 1000x');
      }
      
      // –°–æ–∑–¥–∞–µ–º –æ–±—ä–µ–∫—Ç —Å—Ç–∞–≤–∫–∏
      const bet = {
        user: userId,
        amount: betAmount,
        autoCashOut: autoCashOut,
        cashedOut: false,
        cashOutMultiplier: 0,
        profit: 0,
        placedAt: new Date()
      };
      
      // –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï: –ò—Å–ø–æ–ª—å–∑—É–µ–º –∞—Ç–æ–º–∞—Ä–Ω—É—é –æ–ø–µ—Ä–∞—Ü–∏—é –≤–º–µ—Å—Ç–æ save()
      await CrashRound.findByIdAndUpdate(
        this.currentRound._id,
        { 
          $push: { bets: bet }
        },
        { session }
      );
      
      // –û–±–Ω–æ–≤–ª—è–µ–º –ª–æ–∫–∞–ª—å–Ω—ã–π –æ–±—ä–µ–∫—Ç
      this.currentRound.bets.push(bet);
      
      // –°–ø–∏—Å—ã–≤–∞–µ–º —Å—Ä–µ–¥—Å—Ç–≤–∞ —Å –±–∞–ª–∞–Ω—Å–∞
      user.balance -= betAmount;
      await user.save({ session });
      
      // –°–æ–∑–¥–∞–µ–º —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—é —Å—Ç–∞–≤–∫–∏
      const betTransaction = new Transaction({
        user: userId,
        type: 'bet',
        amount: -betAmount,
        description: `–°—Ç–∞–≤–∫–∞ –≤ –∫—Ä–∞—à –∏–≥—Ä–µ #${this.currentRound.roundId}${autoCashOut > 0 ? ` (–∞–≤—Ç–æ–≤—ã–≤–æ–¥ ${autoCashOut}x)` : ''}`,
        status: 'completed',
        balanceBefore: user.balance + betAmount,
        balanceAfter: user.balance
      });
      
      await betTransaction.save({ session });
      
      await session.commitTransaction();
      
      console.log(`üí∞ –°–¢–ê–í–ö–ê: –†–∞–∑–º–µ—â–µ–Ω–∞ —Å—Ç–∞–≤–∫–∞ ${betAmount} USDT –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º ${userId}${autoCashOut > 0 ? ` —Å –∞–≤—Ç–æ–≤—ã–≤–æ–¥–æ–º ${autoCashOut}x` : ''}`);
      
      // –≠–º–∏—Ç–∏–º —Å–æ–±—ã—Ç–∏–µ –Ω–æ–≤–æ–π —Å—Ç–∞–≤–∫–∏
      this.emit('betPlaced', {
        roundId: this.currentRound.roundId,
        userId,
        username: user.username || '–ò–≥—Ä–æ–∫',
        amount: betAmount,
        autoCashOut,
        totalBets: this.currentRound.bets.length,
        totalAmount: this.currentRound.totalBetAmount
      });
      
      return {
        success: true,
        roundId: this.currentRound.roundId,
        betAmount,
        autoCashOut,
        balanceAfter: user.balance
      };
      
    } catch (error) {
      await session.abortTransaction();
      throw error;
    } finally {
      session.endSession();
    }
  }
  
  async manualCashOut(userId) {
    if (!this.currentRound || this.currentRound.status !== 'flying') {
      throw new Error('–í—ã–≤–æ–¥ –Ω–µ–≤–æ–∑–º–æ–∂–µ–Ω –≤ –¥–∞–Ω–Ω—ã–π –º–æ–º–µ–Ω—Ç');
    }
    
    const session = await mongoose.startSession();
    session.startTransaction();
    
    try {
      // –ù–∞—Ö–æ–¥–∏–º –∏–Ω–¥–µ–∫—Å —Å—Ç–∞–≤–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
      const betIndex = this.currentRound.bets.findIndex(b => 
        b.user.toString() === userId.toString() && !b.cashedOut
      );
      
      if (betIndex === -1) {
        throw new Error('–ê–∫—Ç–∏–≤–Ω–∞—è —Å—Ç–∞–≤–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞');
      }
      
      const bet = this.currentRound.bets[betIndex];
      const winAmount = bet.amount * this.currentMultiplier;
      const profit = winAmount - bet.amount;
      
      // –û–±–Ω–æ–≤–ª—è–µ–º –ª–æ–∫–∞–ª—å–Ω—É—é –∫–æ–ø–∏—é
      bet.cashedOut = true;
      bet.cashOutMultiplier = this.currentMultiplier;
      bet.profit = profit;
      bet.cashedOutAt = new Date();
      
      // –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï: –ò—Å–ø–æ–ª—å–∑—É–µ–º –∞—Ç–æ–º–∞—Ä–Ω—É—é –æ–ø–µ—Ä–∞—Ü–∏—é
      await CrashRound.findOneAndUpdate(
        { 
          _id: this.currentRound._id,
          'bets.user': userId,
          'bets.cashedOut': false
        },
        { 
          $set: { 
            [`bets.${betIndex}.cashedOut`]: true,
            [`bets.${betIndex}.cashOutMultiplier`]: this.currentMultiplier,
            [`bets.${betIndex}.profit`]: profit,
            [`bets.${betIndex}.cashedOutAt`]: new Date()
          }
        },
        { session }
      );
      
      // –û–±–Ω–æ–≤–ª—è–µ–º –±–∞–ª–∞–Ω—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
      const user = await User.findByIdAndUpdate(
        userId,
        { 
          $inc: { 
            balance: winAmount,
            totalWon: winAmount
          }
        },
        { new: true }
      ).session(session);
      
      // –°–æ–∑–¥–∞–µ–º —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—é –≤—ã–∏–≥—Ä—ã—à–∞
      const winTransaction = new Transaction({
        user: userId,
        type: 'win',
        amount: winAmount,
        description: `–†—É—á–Ω–æ–π –≤—ã–≤–æ–¥ –≤ –∫—Ä–∞—à –∏–≥—Ä–µ –ø—Ä–∏ ${this.currentMultiplier.toFixed(2)}x`,
        status: 'completed',
        balanceBefore: user.balance - winAmount,
        balanceAfter: user.balance
      });
      
      await winTransaction.save({ session });
      
      await session.commitTransaction();
      
      console.log(`üí∏ –†–£–ß–ù–û–ô –ö–ï–®–ê–£–¢: –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å ${userId} –≤—ã–≤–µ–ª ${winAmount} USDT –ø—Ä–∏ ${this.currentMultiplier.toFixed(2)}x`);
      
      // –≠–º–∏—Ç–∏–º —Å–æ–±—ã—Ç–∏–µ —Ä—É—á–Ω–æ–≥–æ –≤—ã–≤–æ–¥–∞
      this.emit('manualCashOut', {
        roundId: this.currentRound.roundId,
        userId,
        username: user.username || '–ò–≥—Ä–æ–∫',
        amount: bet.amount,
        multiplier: this.currentMultiplier,
        profit: profit,
        balanceAfter: user.balance
      });
      
      return {
        success: true,
        multiplier: this.currentMultiplier,
        winAmount,
        profit: profit,
        balanceAfter: user.balance
      };
      
    } catch (error) {
      await session.abortTransaction();
      throw error;
    } finally {
      session.endSession();
    }
  }
  
  async getCurrentGameState() {
    if (!this.currentRound) {
      return {
        status: 'no_game',
        message: '–ò–≥—Ä–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ—Ç—Å—è'
      };
    }
    
    console.log(`üîç –°–û–°–¢–û–Ø–ù–ò–ï –ò–ì–†–´: roundId=${this.currentRound.roundId}, status=${this.currentRound.status}, crashPoint=${this.currentRound.crashPoint?.toFixed(2)}x, currentMultiplier=${this.currentMultiplier?.toFixed(2)}x`);
    
    // –ü–æ–ª—É—á–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –¥–ª—è —Å—Ç–∞–≤–æ–∫
    const userIds = this.currentRound.bets.map(bet => bet.user);
    const users = await User.find({ _id: { $in: userIds } }).select('_id username').lean();
    const userMap = users.reduce((map, user) => {
      map[user._id.toString()] = user.username || '–ò–≥—Ä–æ–∫';
      return map;
    }, {});
    
    return {
      roundId: this.currentRound.roundId,
      status: this.currentRound.status,
      currentMultiplier: this.currentMultiplier,
      serverSeedHashed: this.currentRound.serverSeedHashed,
      bets: this.currentRound.bets.map(bet => ({
        userId: bet.user,
        username: userMap[bet.user.toString()] || '–ò–≥—Ä–æ–∫',
        amount: bet.amount,
        autoCashOut: bet.autoCashOut,
        cashedOut: bet.cashedOut,
        cashOutMultiplier: bet.cashOutMultiplier
      }))
    };
  }
  
  // –ù–æ–≤—ã–π –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω—ã–π –º–µ—Ç–æ–¥ –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Å–æ—Å—Ç–æ—è–Ω–∏—è –∏–≥—Ä—ã
  async getCurrentGameStateAsync() {
    return await this.getCurrentGameState();
  }
  
  async getGameHistory(limit = 50) {
    const rounds = await CrashRound.getLastRounds(limit);
    
    return rounds.map(round => {
      // –í—ã—á–∏—Å–ª—è–µ–º –æ–±—â—É—é —Å—É–º–º—É —Å—Ç–∞–≤–æ–∫ –≤—Ä—É—á–Ω—É—é, —Ç–∞–∫ –∫–∞–∫ –∏—Å–ø–æ–ª—å–∑—É–µ–º lean()
      const totalAmount = round.bets ? round.bets.reduce((sum, bet) => sum + bet.amount, 0) : 0;
      
      return {
        roundId: round.roundId,
        crashPoint: round.crashPoint,
        timestamp: round.createdAt,
        totalBets: round.bets ? round.bets.length : 0,
        totalAmount: totalAmount
      };
    });
  }
  
  stop() {
    this.isRunning = false;
    
    // –û—á–∏—â–∞–µ–º –≤—Å–µ —Ç–∞–π–º–µ—Ä—ã
    if (this.gameTimer) {
      clearInterval(this.gameTimer);
      this.gameTimer = null;
    }
    
    if (this.countdownTimer) {
      clearInterval(this.countdownTimer);
      this.countdownTimer = null;
    }
    
    console.log('üõë CRASH SERVICE: –°–µ—Ä–≤–∏—Å –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω');
  }
  
  // –ú–µ—Ç–æ–¥—ã –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –≥–ª–æ–±–∞–ª—å–Ω—ã–º –º–æ–¥–∏—Ñ–∏–∫–∞—Ç–æ—Ä–æ–º
  
  /**
   * –£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –≥–ª–æ–±–∞–ª—å–Ω—ã–π –º–æ–¥–∏—Ñ–∏–∫–∞—Ç–æ—Ä –¥–ª—è Crash –∏–≥—Ä—ã
   * @param {number} modifier - –ú–æ–¥–∏—Ñ–∏–∫–∞—Ç–æ—Ä –≤ –ø—Ä–æ—Ü–µ–Ω—Ç–∞—Ö (-20 –¥–æ +50)
   */
  setGlobalCrashModifier(modifier) {
    // –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –º–æ–¥–∏—Ñ–∏–∫–∞—Ç–æ—Ä —Ä–∞–∑—É–º–Ω—ã–º–∏ –ø—Ä–µ–¥–µ–ª–∞–º–∏
    const clampedModifier = Math.max(-20, Math.min(50, modifier));
    this.globalCrashModifier = clampedModifier;
    
    console.log(`CRASH: –ì–ª–æ–±–∞–ª—å–Ω—ã–π –º–æ–¥–∏—Ñ–∏–∫–∞—Ç–æ—Ä —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω: ${clampedModifier}%`);
    
    return {
      success: true,
      modifier: clampedModifier,
      effect: clampedModifier > 0 
        ? '–£–≤–µ–ª–∏—á–µ–Ω–∞ –≤–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç—å —Ä–∞–Ω–Ω–µ–≥–æ –∫—Ä–∞—à–∞' 
        : clampedModifier < 0 
          ? '–£–º–µ–Ω—å—à–µ–Ω–∞ –≤–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç—å —Ä–∞–Ω–Ω–µ–≥–æ –∫—Ä–∞—à–∞'
          : '–°—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–∞—è –≤–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç—å'
    };
  }
  
  /**
   * –ü–æ–ª—É—á–∏—Ç—å —Ç–µ–∫—É—â–∏–π –≥–ª–æ–±–∞–ª—å–Ω—ã–π –º–æ–¥–∏—Ñ–∏–∫–∞—Ç–æ—Ä
   */
  getGlobalCrashModifier() {
    return {
      modifier: this.globalCrashModifier,
      effect: this.globalCrashModifier > 0 
        ? '–£–≤–µ–ª–∏—á–µ–Ω–∞ –≤–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç—å —Ä–∞–Ω–Ω–µ–≥–æ –∫—Ä–∞—à–∞' 
        : this.globalCrashModifier < 0 
          ? '–£–º–µ–Ω—å—à–µ–Ω–∞ –≤–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç—å —Ä–∞–Ω–Ω–µ–≥–æ –∫—Ä–∞—à–∞'
          : '–°—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–∞—è –≤–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç—å'
    };
  }
}

module.exports = new CrashService();
