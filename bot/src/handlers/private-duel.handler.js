// bot/src/handlers/private-duel.handler.js
const duelService = require('../services/duel.service');

/**
 * –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –¥–ª—è –ª–∏—á–Ω—ã—Ö –¥—É—ç–ª–µ–π
 */
function registerPrivateDuelHandlers(bot) {
  console.log('üîß –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –ª–∏—á–Ω—ã—Ö –¥—É—ç–ª–µ–π...');

  // –ü—Ä–∏–Ω—è—Ç–∏–µ –¥—É—ç–ª–∏
  bot.action(/^private_accept_(.+)$/, async (ctx) => {
    try {
      const duelId = ctx.match[1];
      const userId = ctx.from.id.toString();
      const username = ctx.from.username;

      console.log(`üéØ –ü—Ä–∏–Ω—è—Ç–∏–µ –¥—É—ç–ª–∏: ${duelId} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º ${username} (${userId})`);

      await ctx.answerCbQuery('‚è≥ –ü—Ä–∏–Ω–∏–º–∞–µ–º –¥—É—ç–ª—å...');

      // –ü–æ–ª—É—á–∞–µ–º –¥—É—ç–ª—å
      const duel = duelService.getDuel(duelId);
      if (!duel) {
        await ctx.answerCbQuery('‚ùå –î—É—ç–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –∏–ª–∏ –∏—Å—Ç–µ–∫–ª–∞', true);
        return;
      }

      // –ü—Ä–∏–Ω–∏–º–∞–µ–º –¥—É—ç–ª—å
      const acceptedDuel = duelService.acceptDuel(duelId, userId, username);

      // –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —É –æ–ø–ø–æ–Ω–µ–Ω—Ç–∞
      await ctx.editMessageText(
        `‚úÖ **–î–£–≠–õ–¨ –ü–†–ò–ù–Ø–¢–ê!**\n\n` +
        `üéÆ –ò–≥—Ä–∞: ${duelService.getGameName(acceptedDuel.game.type)}\n` +
        `üí∞ –°—Ç–∞–≤–∫–∞: ${acceptedDuel.settings.amount} USDT\n` +
        `üèÜ –§–æ—Ä–º–∞—Ç: ${acceptedDuel.game.format.toUpperCase()}\n` +
        `üë§ –ü—Ä–æ—Ç–∏–≤–Ω–∏–∫: @${acceptedDuel.players.challenger.username}\n\n` +
        `üöÄ –ò–≥—Ä–∞ –Ω–∞—á–∏–Ω–∞–µ—Ç—Å—è...`,
        {
          parse_mode: 'Markdown'
        }
      );

      // –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —É –∏–Ω–∏—Ü–∏–∞—Ç–æ—Ä–∞
      if (acceptedDuel.messages.challenger) {
        await bot.telegram.editMessageText(
          acceptedDuel.messages.challenger.chatId,
          acceptedDuel.messages.challenger.messageId,
          undefined,
          `‚úÖ **–î–£–≠–õ–¨ –ü–†–ò–ù–Ø–¢–ê!**\n\n` +
          `üéÆ –ò–≥—Ä–∞: ${duelService.getGameName(acceptedDuel.game.type)}\n` +
          `üí∞ –°—Ç–∞–≤–∫–∞: ${acceptedDuel.settings.amount} USDT\n` +
          `üèÜ –§–æ—Ä–º–∞—Ç: ${acceptedDuel.game.format.toUpperCase()}\n` +
          `üë§ –ü—Ä–æ—Ç–∏–≤–Ω–∏–∫: @${acceptedDuel.players.opponent.username}\n\n` +
          `üöÄ –ò–≥—Ä–∞ –Ω–∞—á–∏–Ω–∞–µ—Ç—Å—è...`,
          {
            parse_mode: 'Markdown'
          }
        );
      }

      // –ù–∞—á–∏–Ω–∞–µ–º –∏–≥—Ä—É - –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –∏–≥—Ä–æ–≤—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è –æ–±–æ–∏–º
      await startPrivateDuelGame(bot, acceptedDuel);

    } catch (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏–Ω—è—Ç–∏—è –¥—É—ç–ª–∏:', error.message);
      await ctx.answerCbQuery(`‚ùå ${error.message}`, true);
    }
  });

  // –û—Ç–∫–ª–æ–Ω–µ–Ω–∏–µ –¥—É—ç–ª–∏
  bot.action(/^private_decline_(.+)$/, async (ctx) => {
    try {
      const duelId = ctx.match[1];
      const userId = ctx.from.id.toString();
      const username = ctx.from.username;

      console.log(`‚ùå –û—Ç–∫–ª–æ–Ω–µ–Ω–∏–µ –¥—É—ç–ª–∏: ${duelId} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º ${username} (${userId})`);

      await ctx.answerCbQuery('‚ùå –î—É—ç–ª—å –æ—Ç–∫–ª–æ–Ω–µ–Ω–∞');

      // –ü–æ–ª—É—á–∞–µ–º –¥—É—ç–ª—å –¥–ª—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏
      const duel = duelService.getDuel(duelId);
      if (!duel) {
        await ctx.answerCbQuery('‚ùå –î—É—ç–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –∏–ª–∏ –∏—Å—Ç–µ–∫–ª–∞', true);
        return;
      }

      // –û—Ç–∫–ª–æ–Ω—è–µ–º –¥—É—ç–ª—å
      duelService.declineDuel(duelId, userId);

      // –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —É –æ–ø–ø–æ–Ω–µ–Ω—Ç–∞
      await ctx.editMessageText(
        `‚ùå **–î–£–≠–õ–¨ –û–¢–ö–õ–û–ù–ï–ù–ê**\n\n` +
        `üéÆ –ò–≥—Ä–∞: ${duelService.getGameName(duel.game.type)}\n` +
        `üí∞ –°—Ç–∞–≤–∫–∞: ${duel.settings.amount} USDT\n` +
        `üë§ –û—Ç: @${duel.players.challenger.username}\n\n` +
        `üòî –í—ã –æ—Ç–∫–ª–æ–Ω–∏–ª–∏ —ç—Ç–æ –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏–µ`,
        {
          parse_mode: 'Markdown'
        }
      );

      // –£–≤–µ–¥–æ–º–ª—è–µ–º –∏–Ω–∏—Ü–∏–∞—Ç–æ—Ä–∞
      if (duel.messages.challenger) {
        await bot.telegram.editMessageText(
          duel.messages.challenger.chatId,
          duel.messages.challenger.messageId,
          undefined,
          `‚ùå **–î–£–≠–õ–¨ –û–¢–ö–õ–û–ù–ï–ù–ê**\n\n` +
          `üéÆ –ò–≥—Ä–∞: ${duelService.getGameName(duel.game.type)}\n` +
          `üí∞ –°—Ç–∞–≤–∫–∞: ${duel.settings.amount} USDT\n` +
          `üë§ –û–ø–ø–æ–Ω–µ–Ω—Ç: @${duel.players.opponent.username}\n\n` +
          `üòî @${username} –æ—Ç–∫–ª–æ–Ω–∏–ª –≤–∞—à–µ –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏–µ`,
          {
            parse_mode: 'Markdown'
          }
        );
      }

    } catch (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –æ—Ç–∫–ª–æ–Ω–µ–Ω–∏—è –¥—É—ç–ª–∏:', error.message);
      await ctx.answerCbQuery(`‚ùå ${error.message}`, true);
    }
  });

  // –ò–≥—Ä–æ–≤—ã–µ –¥–µ–π—Å—Ç–≤–∏—è
  bot.action(/^private_move_(.+)_(.+)$/, async (ctx) => {
    try {
      const duelId = ctx.match[1];
      const action = ctx.match[2]; // dice, dart, etc
      const userId = ctx.from.id.toString();

      console.log(`üéÆ –ò–≥—Ä–æ–≤–æ–µ –¥–µ–π—Å—Ç–≤–∏–µ: ${action} –≤ –¥—É—ç–ª–∏ ${duelId} –æ—Ç ${userId}`);

      await ctx.answerCbQuery('üé≤ –ë—Ä–æ—Å–∞–µ–º...');

      // –ü–æ–ª—É—á–∞–µ–º –¥—É—ç–ª—å
      const duel = duelService.getDuel(duelId);
      if (!duel || duel.status !== 'active') {
        await ctx.answerCbQuery('‚ùå –î—É—ç–ª—å –Ω–µ –∞–∫—Ç–∏–≤–Ω–∞', true);
        return;
      }

      // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É—á–∞—Å—Ç–≤—É–µ—Ç –≤ –¥—É—ç–ª–∏
      const isChallenger = duel.players.challenger.id === userId;
      const isOpponent = duel.players.opponent.id === userId;
      
      if (!isChallenger && !isOpponent) {
        await ctx.answerCbQuery('‚ùå –í—ã –Ω–µ —É—á–∞—Å—Ç–≤—É–µ—Ç–µ –≤ —ç—Ç–æ–π –¥—É—ç–ª–∏', true);
        return;
      }

      // –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Ö–æ–¥ —á–µ—Ä–µ–∑ –∏–≥—Ä–æ–≤–æ–π –¥–≤–∏–∂–æ–∫
      await handleGameMove(bot, duel, userId, action);

    } catch (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –∏–≥—Ä–æ–≤–æ–≥–æ –¥–µ–π—Å—Ç–≤–∏—è:', error.message);
      await ctx.answerCbQuery(`‚ùå ${error.message}`, true);
    }
  });
}

/**
 * –ù–∞—á–∏–Ω–∞–µ—Ç –∏–≥—Ä—É –º–µ–∂–¥—É –¥–≤—É–º—è –∏–≥—Ä–æ–∫–∞–º–∏
 */
async function startPrivateDuelGame(bot, duel) {
  try {
    console.log(`üöÄ –ù–∞—á–∏–Ω–∞–µ–º –∏–≥—Ä—É –≤ –¥—É—ç–ª–∏ ${duel.id}`);

    // –ü–µ—Ä–µ—Ö–æ–¥–∏–º –∫ –ø–µ—Ä–≤–æ–º—É —Ä–∞—É–Ω–¥—É
    duel.game.currentRound = 1;

    // –°–æ–∑–¥–∞–µ–º –∏–≥—Ä–æ–≤—ã–µ –∫–Ω–æ–ø–∫–∏
    const gameKeyboard = {
      inline_keyboard: [[
        { 
          text: `üé≤ –ë—Ä–æ—Å–∏—Ç—å ${duelService.getGameName(duel.game.type)}`, 
          callback_data: `private_move_${duel.id}_${getGameAction(duel.game.type)}` 
        }
      ]]
    };

    const gameMessage = 
      `üéÆ **–î–£–≠–õ–¨ –ù–ê–ß–ê–õ–ê–°–¨!**\n\n` +
      `üë§ @${duel.players.challenger.username} VS @${duel.players.opponent.username}\n` +
      `üéØ ${duelService.getGameName(duel.game.type)}\n` +
      `üí∞ –°—Ç–∞–≤–∫–∞: ${duel.settings.amount} USDT\n` +
      `üèÜ –§–æ—Ä–º–∞—Ç: ${duel.game.format.toUpperCase()} (–¥–æ ${duel.game.maxRounds} –ø–æ–±–µ–¥)\n\n` +
      `üìç **–†–∞—É–Ω–¥ ${duel.game.currentRound}**\n` +
      `–°–¥–µ–ª–∞–π—Ç–µ —Å–≤–æ–π —Ö–æ–¥!`;

    // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∏–≥—Ä–æ–≤—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è –æ–±–æ–∏–º –∏–≥—Ä–æ–∫–∞–º
    const challengerGameMessage = await bot.telegram.sendMessage(
      duel.players.challenger.id,
      gameMessage,
      {
        parse_mode: 'Markdown',
        reply_markup: gameKeyboard
      }
    );

    const opponentGameMessage = await bot.telegram.sendMessage(
      duel.players.opponent.id,
      gameMessage,
      {
        parse_mode: 'Markdown',
        reply_markup: gameKeyboard
      }
    );

    // –û–±–Ω–æ–≤–ª—è–µ–º —Å—Å—ã–ª–∫–∏ –Ω–∞ –∏–≥—Ä–æ–≤—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è
    duel.messages.challenger.gameMessageId = challengerGameMessage.message_id;
    duel.messages.opponent.gameMessageId = opponentGameMessage.message_id;

    console.log(`‚úÖ –ò–≥—Ä–∞ –Ω–∞—á–∞–ª–∞—Å—å –≤ –¥—É—ç–ª–∏ ${duel.id}`);

  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –Ω–∞—á–∞–ª–∞ –∏–≥—Ä—ã:', error);
  }
}

/**
 * –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –∏–≥—Ä–æ–≤–æ–π —Ö–æ–¥
 */
async function handleGameMove(bot, duel, userId, action) {
  // TODO: –†–µ–∞–ª–∏–∑—É–µ–º –≤ —Å–ª–µ–¥—É—é—â–µ–º —ç—Ç–∞–ø–µ
  console.log('üéÆ –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ö–æ–¥–∞ - –±—É–¥–µ—Ç —Ä–µ–∞–ª–∏–∑–æ–≤–∞–Ω–æ –≤ —Å–ª–µ–¥—É—é—â–µ–º —ç—Ç–∞–ø–µ');
}

/**
 * –ü–æ–ª—É—á–∞–µ—Ç –¥–µ–π—Å—Ç–≤–∏–µ –¥–ª—è —Ç–∏–ø–∞ –∏–≥—Ä—ã
 */
function getGameAction(gameType) {
  const actions = {
    'üé≤': 'dice',
    'üéØ': 'dart',
    '‚öΩ': 'football',
    'üèÄ': 'basketball',
    'üé∞': 'slot',
    'üé≥': 'bowling'
  };
  return actions[gameType] || 'dice';
}

module.exports = {
  registerPrivateDuelHandlers
};