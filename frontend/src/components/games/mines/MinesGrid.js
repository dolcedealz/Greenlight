// frontend/src/components/games/mines/MinesGrid.js - –û–ü–¢–ò–ú–ò–ó–ò–†–û–í–ê–ù–ù–ê–Ø –í–ï–†–°–ò–Ø
import React, { useMemo, useCallback, useState, useEffect } from 'react';
import useTactileFeedback from '../../../hooks/useTactileFeedback';
import '../../../styles/MinesGrid.css';

const MinesGrid = ({ grid, clickedCells = [], onCellClick, gameActive, gameOver, loading }) => {
  const { gameActionFeedback } = useTactileFeedback();
  
  // –û–ü–¢–ò–ú–ò–ó–ê–¶–ò–Ø: –î–µ—Ç–µ–∫—Ç–æ—Ä –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞
  const [isLowPerformance, setIsLowPerformance] = useState(false);
  
  useEffect(() => {
    // –ü—Ä–æ—Å—Ç–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞
    const checkPerformance = () => {
      const start = performance.now();
      for (let i = 0; i < 5000; i++) {
        Math.random();
      }
      const end = performance.now();
      const isLow = (end - start) > 8; // –ï—Å–ª–∏ –æ–ø–µ—Ä–∞—Ü–∏—è –∑–∞–Ω—è–ª–∞ –±–æ–ª—å—à–µ 8ms
      setIsLowPerformance(isLow);
    };
    
    checkPerformance();
  }, []);

  // –û–ü–¢–ò–ú–ò–ó–ê–¶–ò–Ø: –ú–µ–º–æ–∏–∑–∏—Ä—É–µ–º —Å–µ—Ç –æ—Ç–∫—Ä—ã—Ç—ã—Ö —è—á–µ–µ–∫ –¥–ª—è –±—ã—Å—Ç—Ä–æ–≥–æ –ø–æ–∏—Å–∫–∞
  const clickedCellsSet = useMemo(() => {
    const set = new Set();
    clickedCells.forEach(cell => {
      set.add(`${cell[0]}-${cell[1]}`);
    });
    return set;
  }, [clickedCells]);

  // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–ª–∏–∫–∞ –ø–æ —è—á–µ–π–∫–µ
  const handleCellClick = useCallback((rowIndex, colIndex) => {
    // –ë–ª–æ–∫–∏—Ä—É–µ–º –∫–ª–∏–∫–∏ –µ—Å–ª–∏:
    // - –∏–≥—Ä–∞ –Ω–µ –∞–∫—Ç–∏–≤–Ω–∞
    // - –∏–≥—Ä–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞
    // - –∏–¥–µ—Ç –∑–∞–≥—Ä—É–∑–∫–∞
    // - —è—á–µ–π–∫–∞ —É–∂–µ –æ—Ç–∫—Ä—ã—Ç–∞
    
    // –û–ü–¢–ò–ú–ò–ó–ê–¶–ò–Ø: –ò—Å–ø–æ–ª—å–∑—É–µ–º Set –¥–ª—è –±—ã—Å—Ç—Ä–æ–π –ø—Ä–æ–≤–µ—Ä–∫–∏
    const cellKey = `${rowIndex}-${colIndex}`;
    const alreadyClicked = clickedCellsSet.has(cellKey);
    
    if (!gameActive || gameOver || loading || alreadyClicked) {
      return;
    }
    
    // –í–∏–±—Ä–∞—Ü–∏—è –ø—Ä–∏ –∫–ª–∏–∫–µ –ø–æ —è—á–µ–π–∫–µ
    gameActionFeedback();
    
    // –í—ã–∑—ã–≤–∞–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –∏–∑ —Ä–æ–¥–∏—Ç–µ–ª—å—Å–∫–æ–≥–æ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–∞
    onCellClick(rowIndex, colIndex);
  }, [gameActive, gameOver, loading, clickedCellsSet, gameActionFeedback, onCellClick]);

  // –û–ü–¢–ò–ú–ò–ó–ê–¶–ò–Ø: –ú–µ–º–æ–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –∫–æ–º–ø–æ–Ω–µ–Ω—Ç —è—á–µ–π–∫–∏
  const CellComponent = React.memo(({ cell, rowIndex, colIndex, isRevealed, cellClass, gameOver }) => (
    <div
      className={cellClass}
      onClick={() => handleCellClick(rowIndex, colIndex)}
    >
      {(isRevealed || gameOver) && cell === 'mine' && <span className="mine-icon">üí£</span>}
      {isRevealed && cell === 'gem' && <span className="gem-icon">üíé</span>}
    </div>
  ));

  return (
    <div className={`mines-grid ${gameOver ? 'game-over' : ''} ${isLowPerformance ? 'low-performance' : ''}`}>
      {loading && (
        <div className="mines-overlay">
          <div className="mines-spinner"></div>
        </div>
      )}
      
      {grid.map((row, rowIndex) => (
        <div key={rowIndex} className="mines-row">
          {row.map((cell, colIndex) => {
            // –û–ü–¢–ò–ú–ò–ó–ê–¶–ò–Ø: –ò—Å–ø–æ–ª—å–∑—É–µ–º Set –¥–ª—è –±—ã—Å—Ç—Ä–æ–π –ø—Ä–æ–≤–µ—Ä–∫–∏
            const cellKey = `${rowIndex}-${colIndex}`;
            const isRevealed = clickedCellsSet.has(cellKey);
            
            // –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï: –ü—Ä–∏ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–∏ –∏–≥—Ä—ã –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –≤—Å–µ –º–∏–Ω—ã
            const shouldShowMine = cell === 'mine' && (isRevealed || gameOver);
            const shouldShowGem = cell === 'gem' && isRevealed;
            
            
            const cellClass = `mines-cell 
              ${isRevealed || (gameOver && cell === 'mine') ? 'revealed' : ''} 
              ${shouldShowMine ? 'mine' : ''} 
              ${shouldShowGem ? 'gem' : ''}
              ${!gameActive && !isRevealed && !(gameOver && cell === 'mine') ? 'disabled' : ''}
            `;
            
            return (
              <CellComponent
                key={colIndex}
                cell={cell}
                rowIndex={rowIndex}
                colIndex={colIndex}
                isRevealed={isRevealed}
                cellClass={cellClass}
                gameOver={gameOver}
              />
            );
          })}
        </div>
      ))}
    </div>
  );
};

export default React.memo(MinesGrid);
