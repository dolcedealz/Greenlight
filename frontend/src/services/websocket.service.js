// frontend/src/services/websocket.service.js
import { io } from 'socket.io-client';

class WebSocketService {
  constructor() {
    this.socket = null;
    this.isConnected = false;
    this.reconnectAttempts = 0;
    this.maxReconnectAttempts = 5;
    this.reconnectDelay = 1000;
    this.eventListeners = new Map();

    // –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π WebSocket URL –¥–ª—è –ø—Ä–æ–¥–∞–∫—à–µ–Ω–∞
    this.socketUrl = process.env.REACT_APP_WS_URL || 'https://greenlight-api-ghqh.onrender.com';

  }

  /**
   * –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ WebSocket —Å–µ—Ä–≤–µ—Ä—É –¥–ª—è Telegram Mini App
   * @param {string} userTelegramId - ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è Telegram
   */
  async connect(userTelegramId = null) {
    try {
      if (this.socket && this.socket.connected) {

        return true;
      }

      // –ü–æ–ª—É—á–∞–µ–º Telegram WebApp –¥–∞–Ω–Ω—ã–µ –µ—Å–ª–∏ –¥–æ—Å—Ç—É–ø–Ω—ã
      let authData = {};

      if (typeof window !== 'undefined' && window.Telegram?.WebApp) {
        const tg = window.Telegram.WebApp;

        // –ò—Å–ø–æ–ª—å–∑—É–µ–º initData –¥–ª—è –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏
        if (tg.initData) {
          authData.initData = tg.initData;

        }

        // Fallback –Ω–∞ telegramId –µ—Å–ª–∏ –µ—Å—Ç—å
        if (userTelegramId && !authData.initData) {
          authData.telegramId = userTelegramId;

        }
      } else if (userTelegramId) {
        // –ï—Å–ª–∏ –Ω–µ –≤ Telegram WebApp, –∏—Å–ø–æ–ª—å–∑—É–µ–º –ø–µ—Ä–µ–¥–∞–Ω–Ω—ã–π ID
        authData.telegramId = userTelegramId;

      }

      // –°–æ–∑–¥–∞–µ–º –Ω–æ–≤–æ–µ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ —Å –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–µ–π
      this.socket = io(this.socketUrl, {
        transports: ['websocket', 'polling'],
        timeout: 10000,
        forceNew: true,
        auth: authData,
        query: {
          source: 'telegram-mini-app',
          userTelegramId: userTelegramId || 'anonymous'
        }
      });

      // –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è
      this.setupConnectionHandlers();

      // –ñ–¥–µ–º –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è
      return new Promise((resolve, reject) => {
        const timeout = setTimeout(() => {
          reject(new Error('–¢–∞–π–º–∞—É—Ç –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ WebSocket'));
        }, 10000);

        this.socket.on('connect', () => {
          clearTimeout(timeout);
          this.isConnected = true;
          this.reconnectAttempts = 0;

          resolve(true);
        });

        this.socket.on('connect_error', (error) => {
          clearTimeout(timeout);

          reject(error);
        });
      });

    } catch (error) {

      throw error;
    }
  }

  /**
   * –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è
   */
  setupConnectionHandlers() {
    if (!this.socket) return;

    // –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ
    this.socket.on('connect', () => {
      this.isConnected = true;
      this.reconnectAttempts = 0;

    });

    // –°–æ–µ–¥–∏–Ω–µ–Ω–∏–µ —Ä–∞–∑–æ—Ä–≤–∞–Ω–æ
    this.socket.on('disconnect', (reason) => {
      this.isConnected = false;

      // –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ –ø–µ—Ä–µ–ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ
      if (reason === 'io server disconnect') {
        // –°–µ—Ä–≤–µ—Ä –ø—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ –æ—Ç–∫–ª—é—á–∏–ª - –Ω–µ –ø–µ—Ä–µ–ø–æ–¥–∫–ª—é—á–∞–µ–º—Å—è
        return;
      }

      this.attemptReconnect();
    });

    // –û—à–∏–±–∫–∞ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è
    this.socket.on('connect_error', (error) => {

      this.isConnected = false;
      this.attemptReconnect();
    });

    // Pong –æ—Ç–≤–µ—Ç –Ω–∞ ping
    this.socket.on('pong', (data) => {

    });

    // –û–±—â–∞—è –æ—à–∏–±–∫–∞
    this.socket.on('error', (error) => {

    });
  }

  /**
   * –ü–æ–ø—ã—Ç–∫–∞ –ø–µ—Ä–µ–ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è
   */
  attemptReconnect() {
    if (this.reconnectAttempts >= this.maxReconnectAttempts) {

      return;
    }

    this.reconnectAttempts++;
    const delay = this.reconnectDelay * this.reconnectAttempts;

    console.log(`üîå –ü–µ—Ä–µ–ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ —á–µ—Ä–µ–∑ ${delay}ms (–ø–æ–ø—ã—Ç–∫–∞ ${this.reconnectAttempts}/${this.maxReconnectAttempts})`);

    setTimeout(() => {
      if (this.socket && !this.socket.connected) {
        this.socket.connect();
      }
    }, delay);
  }

  /**
   * –û—Ç–∫–ª—é—á–µ–Ω–∏–µ –æ—Ç WebSocket
   */
  disconnect() {
    if (this.socket) {

      this.socket.disconnect();
      this.socket = null;
      this.isConnected = false;
    }
  }

  /**
   * –ü—Ä–∏—Å–æ–µ–¥–∏–Ω–∏—Ç—å—Å—è –∫ Crash –∏–≥—Ä–µ
   */
  joinCrash() {
    if (!this.socket || !this.isConnected) {

      return false;
    }

    // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–ø–µ—Ü–∏–∞–ª—å–Ω–æ–µ —Å–æ–±—ã—Ç–∏–µ –¥–ª—è –∫—Ä–∞—à–∞
    this.socket.emit('join_crash');

    // –¢–∞–∫–∂–µ –ø—Ä–∏—Å–æ–µ–¥–∏–Ω—è–µ–º—Å—è –∫ –æ–±—â–µ–π –∫–æ–º–Ω–∞—Ç–µ –∏–≥—Ä—ã
    this.socket.emit('join_game', 'crash');

    return true;
  }

  /**
   * –ü–æ–∫–∏–Ω—É—Ç—å Crash –∏–≥—Ä—É
   */
  leaveCrash() {
    if (!this.socket || !this.isConnected) {

      return false;
    }

    // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–ø–µ—Ü–∏–∞–ª—å–Ω–æ–µ —Å–æ–±—ã—Ç–∏–µ –¥–ª—è –∫—Ä–∞—à–∞
    this.socket.emit('leave_crash');

    // –¢–∞–∫–∂–µ –ø–æ–∫–∏–¥–∞–µ–º –æ–±—â—É—é –∫–æ–º–Ω–∞—Ç—É –∏–≥—Ä—ã
    this.socket.emit('leave_game', 'crash');

    return true;
  }

  /**
   * –ó–∞–ø—Ä–æ—Å–∏—Ç—å —Ç–µ–∫—É—â–µ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ Crash –∏–≥—Ä—ã
   */
  requestCrashState() {
    if (!this.socket || !this.isConnected) {

      return false;
    }

    this.socket.emit('get_crash_state');
    return true;
  }

  /**
   * –ü–æ–¥–ø–∏—Å–∫–∞ –Ω–∞ —Å–æ–±—ã—Ç–∏–µ
   * @param {string} event - –ù–∞–∑–≤–∞–Ω–∏–µ —Å–æ–±—ã—Ç–∏—è
   * @param {function} callback - –§—É–Ω–∫—Ü–∏—è –æ–±—Ä–∞–±–æ—Ç—á–∏–∫
   * @returns {function} - –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ—Ç–ø–∏—Å–∫–∏
   */
  on(event, callback) {
    if (!this.socket) {

      return () => {};
    }

    // –°–æ—Ö—Ä–∞–Ω—è–µ–º –∫–æ–ª–±—ç–∫ –¥–ª—è –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏ –æ—Ç–ø–∏—Å–∫–∏
    if (!this.eventListeners.has(event)) {
      this.eventListeners.set(event, new Set());
    }
    this.eventListeners.get(event).add(callback);

    // –ü–æ–¥–ø–∏—Å—ã–≤–∞–µ–º—Å—è –Ω–∞ —Å–æ–±—ã—Ç–∏–µ
    this.socket.on(event, callback);

    // –í–æ–∑–≤—Ä–∞—â–∞–µ–º —Ñ—É–Ω–∫—Ü–∏—é –¥–ª—è –æ—Ç–ø–∏—Å–∫–∏
    return () => {
      if (this.socket) {
        this.socket.off(event, callback);
      }
      if (this.eventListeners.has(event)) {
        this.eventListeners.get(event).delete(callback);
      }

    };
  }

  /**
   * –û—Ç–ø–∏—Å–∫–∞ –æ—Ç —Å–æ–±—ã—Ç–∏—è
   * @param {string} event - –ù–∞–∑–≤–∞–Ω–∏–µ —Å–æ–±—ã—Ç–∏—è
   * @param {function} callback - –§—É–Ω–∫—Ü–∏—è –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ)
   */
  off(event, callback = null) {
    if (!this.socket) return;

    if (callback) {
      this.socket.off(event, callback);
      if (this.eventListeners.has(event)) {
        this.eventListeners.get(event).delete(callback);
      }
    } else {
      this.socket.off(event);
      this.eventListeners.delete(event);
    }

  }

  /**
   * –û—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–±—ã—Ç–∏—è
   * @param {string} event - –ù–∞–∑–≤–∞–Ω–∏–µ —Å–æ–±—ã—Ç–∏—è
   * @param {any} data - –î–∞–Ω–Ω—ã–µ –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏
   */
  emit(event, data = null) {
    if (!this.socket || !this.isConnected) {

      return false;
    }

    this.socket.emit(event, data);
    return true;
  }

  /**
   * Ping —Å–µ—Ä–≤–µ—Ä–∞ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è
   */
  ping() {
    if (!this.socket || !this.isConnected) {

      return false;
    }

    this.socket.emit('ping');
    return true;
  }

  /**
   * –ü–æ–ª—É—á–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è
   */
  getConnectionStatus() {
    return {
      connected: this.isConnected,
      socketId: this.socket?.id || null,
      reconnectAttempts: this.reconnectAttempts,
      url: this.socketUrl
    };
  }

  /**
   * –û—á–∏—Å—Ç–∫–∞ –≤—Å–µ—Ö –ø–æ–¥–ø–∏—Å–æ–∫
   */
  removeAllListeners() {
    if (this.socket) {
      this.socket.removeAllListeners();
    }
    this.eventListeners.clear();

  }

  /**
   * –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–æ—Å—Ç–æ—è–Ω–∏—è —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è
   */
  isSocketConnected() {
    return this.socket && this.socket.connected && this.isConnected;
  }

  /**
   * –ü–æ–ª—É—á–µ–Ω–∏–µ –æ–±—ä–µ–∫—Ç–∞ —Å–æ–∫–µ—Ç–∞ (–¥–ª—è –æ—Ç–ª–∞–¥–∫–∏)
   */
  getSocket() {
    return this.socket;
  }
}

// –°–æ–∑–¥–∞–µ–º singleton —ç–∫–∑–µ–º–ø–ª—è—Ä
const webSocketService = new WebSocketService();

export default webSocketService;