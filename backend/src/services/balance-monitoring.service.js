// backend/src/services/balance-monitoring.service.js
const axios = require('axios');
const cron = require('node-cron');
const { CasinoFinance } = require('../models');
const { createLogger } = require('../utils/logger');

const logger = createLogger('BALANCE_MONITORING');

class BalanceMonitoringService {
  constructor() {
    this.cryptoBotToken = process.env.CRYPTO_PAY_API_TOKEN;
    this.adminNotifications = [];
    this.isMonitoring = false;
    this.lastCheckTime = null;
    this.alertThreshold = 0.01; // 0.01 USDT –º–∏–Ω–∏–º–∞–ª—å–Ω–æ–µ —Ä–∞—Å—Ö–æ–∂–¥–µ–Ω–∏–µ –¥–ª—è –∞–ª–µ—Ä—Ç–∞
    this.criticalThreshold = 1.0; // 1.0 USDT –∫—Ä–∏—Ç–∏—á–µ—Å–∫–æ–µ —Ä–∞—Å—Ö–æ–∂–¥–µ–Ω–∏–µ
  }

  /**
   * –ü–æ–ª—É—á–∞–µ—Ç –±–∞–ª–∞–Ω—Å CryptoBot
   */
  async getCryptoBotBalance() {
    try {
      if (!this.cryptoBotToken) {
        logger.warn('CryptoBot —Ç–æ–∫–µ–Ω –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω - –±–∞–ª–∞–Ω—Å –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω');
        return {
          available: 0,
          onhold: 0,
          total: 0,
          warning: 'CryptoBot —Ç–æ–∫–µ–Ω –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω'
        };
      }

      const response = await axios.get('https://pay.crypt.bot/api/getBalance', {
        headers: {
          'Crypto-Pay-API-Token': this.cryptoBotToken
        }
      });

      if (!response.data.ok) {
        throw new Error(`CryptoBot API –æ—à–∏–±–∫–∞: ${response.data.error?.name || '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞'}`);
      }

      // –ò—â–µ–º USDT –±–∞–ª–∞–Ω—Å
      const usdtBalance = response.data.result.find(balance => balance.currency_code === 'USDT');
      if (!usdtBalance) {
        throw new Error('USDT –±–∞–ª–∞–Ω—Å –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ CryptoBot');
      }

      return parseFloat(usdtBalance.available);
    } catch (error) {
      logger.error('–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –±–∞–ª–∞–Ω—Å–∞ CryptoBot:', error);
      throw error;
    }
  }

  /**
   * –ü–æ–ª—É—á–∞–µ—Ç –æ–∂–∏–¥–∞–µ–º—ã–π –±–∞–ª–∞–Ω—Å —Å–∏—Å—Ç–µ–º—ã (–æ–ø–µ—Ä–∞—Ç–∏–≤–Ω—ã–π + –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏)
   */
  async getExpectedSystemBalance() {
    try {
      const casinoFinance = await CasinoFinance.findOne().sort({ createdAt: -1 });
      if (!casinoFinance) {
        throw new Error('–î–∞–Ω–Ω—ã–µ –∫–∞–∑–∏–Ω–æ —Ñ–∏–Ω–∞–Ω—Å–æ–≤ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã');
      }

      // –û–∂–∏–¥–∞–µ–º—ã–π –±–∞–ª–∞–Ω—Å CryptoBot = –û–ø–µ—Ä–∞—Ç–∏–≤–Ω—ã–π –±–∞–ª–∞–Ω—Å + –ë–∞–ª–∞–Ω—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
      return casinoFinance.operationalBalance + casinoFinance.totalUserBalance;
    } catch (error) {
      logger.error('–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –æ–∂–∏–¥–∞–µ–º–æ–≥–æ –±–∞–ª–∞–Ω—Å–∞ —Å–∏—Å—Ç–µ–º—ã:', error);
      throw error;
    }
  }

  /**
   * –í—ã–ø–æ–ª–Ω—è–µ—Ç —Å–≤–µ—Ä–∫—É –±–∞–ª–∞–Ω—Å–æ–≤
   */
  async performBalanceReconciliation() {
    try {
      logger.info('–ù–∞—á–∏–Ω–∞–µ–º —Å–≤–µ—Ä–∫—É –±–∞–ª–∞–Ω—Å–æ–≤...');

      const [cryptoBotBalanceData, expectedSystemBalance] = await Promise.all([
        this.getCryptoBotBalance(),
        this.getExpectedSystemBalance()
      ]);

      const cryptoBotBalance = cryptoBotBalanceData.total || cryptoBotBalanceData;

      const difference = Math.abs(cryptoBotBalance - expectedSystemBalance);
      const discrepancyPercent = expectedSystemBalance > 0 ? (difference / expectedSystemBalance) * 100 : 100;

      const reconciliationResult = {
        timestamp: new Date(),
        cryptoBotBalance,
        expectedSystemBalance,
        difference,
        discrepancyPercent: Math.round(discrepancyPercent * 100) / 100,
        status: this.getReconciliationStatus(difference),
        details: this.generateReconciliationDetails(cryptoBotBalance, expectedSystemBalance, difference)
      };

      this.lastCheckTime = new Date();

      // –õ–æ–≥–∏—Ä—É–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
      logger.info(`–°–≤–µ—Ä–∫–∞ –±–∞–ª–∞–Ω—Å–æ–≤ –∑–∞–≤–µ—Ä—à–µ–Ω–∞:`, {
        cryptoBot: cryptoBotBalance,
        expectedSystem: expectedSystemBalance,
        difference: difference,
        status: reconciliationResult.status
      });

      // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –ø—Ä–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏
      await this.handleReconciliationResult(reconciliationResult);

      return reconciliationResult;

    } catch (error) {
      logger.error('–û—à–∏–±–∫–∞ —Å–≤–µ—Ä–∫–∏ –±–∞–ª–∞–Ω—Å–æ–≤:', error);
      
      // –£–≤–µ–¥–æ–º–ª—è–µ–º –∞–¥–º–∏–Ω–æ–≤ –æ–± –æ—à–∏–±–∫–µ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞
      await this.sendErrorNotification(error);
      
      throw error;
    }
  }

  /**
   * –û–ø—Ä–µ–¥–µ–ª—è–µ—Ç —Å—Ç–∞—Ç—É—Å —Å–≤–µ—Ä–∫–∏ –Ω–∞ –æ—Å–Ω–æ–≤–µ —Ä–∞—Å—Ö–æ–∂–¥–µ–Ω–∏—è
   */
  getReconciliationStatus(difference) {
    if (difference <= this.alertThreshold) {
      return 'NORMAL';
    } else if (difference <= this.criticalThreshold) {
      return 'WARNING';
    } else {
      return 'CRITICAL';
    }
  }

  /**
   * –ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –¥–µ—Ç–∞–ª–∏ —Å–≤–µ—Ä–∫–∏
   */
  generateReconciliationDetails(cryptoBotBalance, expectedSystemBalance, difference) {
    const details = {
      balanceComparison: {
        higher: cryptoBotBalance > expectedSystemBalance ? 'CryptoBot' : 'System',
        lower: cryptoBotBalance < expectedSystemBalance ? 'CryptoBot' : 'System'
      },
      possibleCauses: []
    };

    if (difference > this.alertThreshold) {
      if (cryptoBotBalance > expectedSystemBalance) {
        details.possibleCauses.push('–í–æ–∑–º–æ–∂–Ω—ã –Ω–µ–∑–∞—Ñ–∏–∫—Å–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –¥–µ–ø–æ–∑–∏—Ç—ã –≤ —Å–∏—Å—Ç–µ–º–µ');
        details.possibleCauses.push('–ü—Ä–æ–±–ª–µ–º—ã —Å –æ–±—Ä–∞–±–æ—Ç–∫–æ–π –≤—Ö–æ–¥—è—â–∏—Ö –ø–ª–∞—Ç–µ–∂–µ–π');
        details.possibleCauses.push('–ö–æ–º–∏—Å—Å–∏–∏ CryptoBot –Ω–µ —É—á—Ç–µ–Ω—ã –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ');
      } else {
        details.possibleCauses.push('–í–æ–∑–º–æ–∂–Ω—ã –ø—Ä–æ–±–ª–µ–º—ã —Å –≤—ã–≤–æ–¥–∞–º–∏ —Å—Ä–µ–¥—Å—Ç–≤');
        details.possibleCauses.push('–û—à–∏–±–∫–∏ –≤ —Ä–∞—Å—á–µ—Ç–µ –±–∞–ª–∞–Ω—Å–æ–≤ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π');
        details.possibleCauses.push('–ù–µ–∑–∞–≤–µ—Ä—à–µ–Ω–Ω—ã–µ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏');
        details.possibleCauses.push('–§–∞–Ω—Ç–æ–º–Ω—ã–µ –±–∞–ª–∞–Ω—Å—ã —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π');
      }
    }

    return details;
  }

  /**
   * –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç —Å–≤–µ—Ä–∫–∏ –∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
   */
  async handleReconciliationResult(result) {
    if (result.status === 'NORMAL') {
      // –î–ª—è –Ω–æ—Ä–º–∞–ª—å–Ω–æ–≥–æ —Å–æ—Å—Ç–æ—è–Ω–∏—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –Ω–µ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º
      return;
    }

    try {
      if (result.status === 'WARNING') {
        await this.sendWarningNotification(result);
      } else if (result.status === 'CRITICAL') {
        await this.sendCriticalNotification(result);
      }
    } catch (error) {
      logger.error('–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ —Å–≤–µ—Ä–∫–µ:', error);
    }
  }

  /**
   * –û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–∞—é—â–µ–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ
   */
  async sendWarningNotification(result) {
    const message = this.formatWarningMessage(result);
    await this.sendAdminNotification(message, 'warning');
  }

  /**
   * –û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –∫—Ä–∏—Ç–∏—á–µ—Å–∫–æ–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ
   */
  async sendCriticalNotification(result) {
    const message = this.formatCriticalMessage(result);
    await this.sendAdminNotification(message, 'critical');
  }

  /**
   * –û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ–± –æ—à–∏–±–∫–µ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞
   */
  async sendErrorNotification(error) {
    const message = 
      `üö® *–û–®–ò–ë–ö–ê –ú–û–ù–ò–¢–û–†–ò–ù–ì–ê –ë–ê–õ–ê–ù–°–û–í*\n\n` +
      `‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –≤—ã–ø–æ–ª–Ω–∏—Ç—å —Å–≤–µ—Ä–∫—É –±–∞–ª–∞–Ω—Å–æ–≤\n` +
      `üïê –í—Ä–µ–º—è: ${new Date().toLocaleString('ru-RU')}\n` +
      `üìã –û—à–∏–±–∫–∞: ${error.message}\n\n` +
      `‚ö†Ô∏è –¢—Ä–µ–±—É–µ—Ç—Å—è –ø—Ä–æ–≤–µ—Ä–∫–∞ —Å–∏—Å—Ç–µ–º—ã –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞!`;

    await this.sendAdminNotification(message, 'error');
  }

  /**
   * –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–∞—é—â–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
   */
  formatWarningMessage(result) {
    const cryptoBotBalance = result.cryptoBotBalance ?? 0;
    const systemBalance = result.systemBalance ?? 0;
    const difference = result.difference ?? 0;
    const discrepancyPercent = result.discrepancyPercent ?? 0;
    const possibleCauses = result.details?.possibleCauses || [];
    
    return (
      `‚ö†Ô∏è *–ü–†–ï–î–£–ü–†–ï–ñ–î–ï–ù–ò–ï: –†–ê–°–•–û–ñ–î–ï–ù–ò–ï –ë–ê–õ–ê–ù–°–û–í*\n\n` +
      `üí∞ CryptoBot: ${cryptoBotBalance.toFixed(2)} USDT\n` +
      `üè¶ –°–∏—Å—Ç–µ–º–∞: ${systemBalance.toFixed(2)} USDT\n` +
      `üìä –†–∞—Å—Ö–æ–∂–¥–µ–Ω–∏–µ: ${difference.toFixed(2)} USDT (${discrepancyPercent}%)\n` +
      `üïê –í—Ä–µ–º—è –ø—Ä–æ–≤–µ—Ä–∫–∏: ${result.timestamp?.toLocaleString?.('ru-RU') || '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ'}\n\n` +
      `üîç –í–æ–∑–º–æ–∂–Ω—ã–µ –ø—Ä–∏—á–∏–Ω—ã:\n${possibleCauses.map(cause => `‚Ä¢ ${cause}`).join('\n')}\n\n` +
      `üìà –†–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç—Å—è –ø—Ä–æ–≤–µ—Ä–∏—Ç—å –ø–æ—Å–ª–µ–¥–Ω–∏–µ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏ –∏ –ø—Ä–æ–≤–µ—Å—Ç–∏ —Ä—É—á–Ω—É—é —Å–≤–µ—Ä–∫—É.`
    );
  }

  /**
   * –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç –∫—Ä–∏—Ç–∏—á–µ—Å–∫–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
   */
  formatCriticalMessage(result) {
    return (
      `üö® *–ö–†–ò–¢–ò–ß–ï–°–ö–û–ï: –°–ï–†–¨–ï–ó–ù–û–ï –†–ê–°–•–û–ñ–î–ï–ù–ò–ï –ë–ê–õ–ê–ù–°–û–í*\n\n` +
      `üí∞ CryptoBot: ${result.cryptoBotBalance.toFixed(2)} USDT\n` +
      `üè¶ –°–∏—Å—Ç–µ–º–∞: ${result.systemBalance.toFixed(2)} USDT\n` +
      `üìä –†–∞—Å—Ö–æ–∂–¥–µ–Ω–∏–µ: ${result.difference.toFixed(2)} USDT (${result.discrepancyPercent}%)\n` +
      `üïê –í—Ä–µ–º—è –ø—Ä–æ–≤–µ—Ä–∫–∏: ${result.timestamp.toLocaleString('ru-RU')}\n\n` +
      `üîç –í–æ–∑–º–æ–∂–Ω—ã–µ –ø—Ä–∏—á–∏–Ω—ã:\n${result.details.possibleCauses.map(cause => `‚Ä¢ ${cause}`).join('\n')}\n\n` +
      `üö® –¢–†–ï–ë–£–ï–¢–°–Ø –ù–ï–ú–ï–î–õ–ï–ù–ù–ê–Ø –ü–†–û–í–ï–†–ö–ê!\n` +
      `‚ö†Ô∏è –†–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç—Å—è –≤—Ä–µ–º–µ–Ω–Ω–æ –ø—Ä–∏–æ—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –¥–µ–ø–æ–∑–∏—Ç—ã –∏ –≤—ã–≤–æ–¥—ã –¥–æ –≤—ã—è—Å–Ω–µ–Ω–∏—è –ø—Ä–∏—á–∏–Ω.`
    );
  }

  /**
   * –û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞–º
   */
  async sendAdminNotification(message, type = 'info') {
    try {
      // –ó–¥–µ—Å—å –±—É–¥–µ—Ç –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è —Å —Å–∏—Å—Ç–µ–º–æ–π —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –∞–¥–º–∏–Ω–∫–∏
      // –ü–æ–∫–∞ —á—Ç–æ –ª–æ–≥–∏—Ä—É–µ–º –∏ —Å–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –º–∞—Å—Å–∏–≤ –¥–ª—è –ø–æ—Å–ª–µ–¥—É—é—â–µ–π –æ—Ç–ø—Ä–∞–≤–∫–∏
      
      const notification = {
        id: Date.now(),
        type,
        message,
        timestamp: new Date(),
        sent: false
      };

      this.adminNotifications.push(notification);

      // –õ–æ–≥–∏—Ä—É–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ
      const logLevel = type === 'critical' ? 'error' : type === 'warning' ? 'warn' : 'info';
      logger[logLevel](`BALANCE MONITORING [${type.toUpperCase()}]:`, message);

      // TODO: –ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è —Å Telegram Bot –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –≤ –∞–¥–º–∏–Ω-—á–∞—Ç
      // await this.sendTelegramNotification(message);

      return notification;
    } catch (error) {
      logger.error('–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –∞–¥–º–∏–Ω-—É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è:', error);
    }
  }

  /**
   * –ó–∞–ø—É—Å–∫–∞–µ—Ç –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–π –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥
   */
  startMonitoring() {
    if (this.isMonitoring) {
      logger.warn('–ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –±–∞–ª–∞–Ω—Å–æ–≤ —É–∂–µ –∑–∞–ø—É—â–µ–Ω');
      return;
    }

    logger.info('–ó–∞–ø—É—Å–∫ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–≥–æ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ –±–∞–ª–∞–Ω—Å–æ–≤...');

    // –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–∞–∂–¥—ã–µ 30 –º–∏–Ω—É—Ç
    cron.schedule('*/30 * * * *', async () => {
      try {
        await this.performBalanceReconciliation();
      } catch (error) {
        logger.error('–û—à–∏–±–∫–∞ –≤ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–π —Å–≤–µ—Ä–∫–µ –±–∞–ª–∞–Ω—Å–æ–≤:', error);
      }
    });

    // –ï–∂–µ–¥–Ω–µ–≤–Ω—ã–π –¥–µ—Ç–∞–ª—å–Ω—ã–π –æ—Ç—á–µ—Ç –≤ 09:00
    cron.schedule('0 9 * * *', async () => {
      try {
        const result = await this.performBalanceReconciliation();
        await this.sendDailyReport(result);
      } catch (error) {
        logger.error('–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –µ–∂–µ–¥–Ω–µ–≤–Ω–æ–≥–æ –æ—Ç—á–µ—Ç–∞:', error);
      }
    });

    this.isMonitoring = true;
    logger.info('–ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–π –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –±–∞–ª–∞–Ω—Å–æ–≤ –∑–∞–ø—É—â–µ–Ω');
  }

  /**
   * –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥
   */
  stopMonitoring() {
    this.isMonitoring = false;
    logger.info('–ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–π –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –±–∞–ª–∞–Ω—Å–æ–≤ –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω');
  }

  /**
   * –û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –µ–∂–µ–¥–Ω–µ–≤–Ω—ã–π –æ—Ç—á–µ—Ç
   */
  async sendDailyReport(reconciliationResult) {
    const report = 
      `üìä *–ï–ñ–ï–î–ù–ï–í–ù–´–ô –û–¢–ß–ï–¢ –ú–û–ù–ò–¢–û–†–ò–ù–ì–ê –ë–ê–õ–ê–ù–°–û–í*\n\n` +
      `üìÖ –î–∞—Ç–∞: ${new Date().toLocaleDateString('ru-RU')}\n` +
      `üïê –í—Ä–µ–º—è –ø–æ—Å–ª–µ–¥–Ω–µ–π –ø—Ä–æ–≤–µ—Ä–∫–∏: ${this.lastCheckTime?.toLocaleString('ru-RU') || '–ù–µ –≤—ã–ø–æ–ª–Ω—è–ª–∞—Å—å'}\n\n` +
      `üí∞ CryptoBot –±–∞–ª–∞–Ω—Å: ${reconciliationResult.cryptoBotBalance.toFixed(2)} USDT\n` +
      `üè¶ –°–∏—Å—Ç–µ–º–Ω—ã–π –±–∞–ª–∞–Ω—Å: ${reconciliationResult.systemBalance.toFixed(2)} USDT\n` +
      `üìä –°—Ç–∞—Ç—É—Å: ${this.getStatusEmoji(reconciliationResult.status)} ${reconciliationResult.status}\n\n` +
      `üìà –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –∑–∞ –¥–µ–Ω—å: ${this.adminNotifications.filter(n => n.timestamp > new Date(Date.now() - 24*60*60*1000)).length}`;

    await this.sendAdminNotification(report, 'daily_report');
  }

  /**
   * –ü–æ–ª—É—á–∞–µ—Ç —ç–º–æ–¥–∑–∏ –¥–ª—è —Å—Ç–∞—Ç—É—Å–∞
   */
  getStatusEmoji(status) {
    switch (status) {
      case 'NORMAL': return '‚úÖ';
      case 'WARNING': return '‚ö†Ô∏è';
      case 'CRITICAL': return 'üö®';
      default: return '‚ùì';
    }
  }

  /**
   * –ü–æ–ª—É—á–∞–µ—Ç –≤—Å–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
   */
  getNotifications(limit = 50) {
    return this.adminNotifications
      .sort((a, b) => b.timestamp - a.timestamp)
      .slice(0, limit);
  }

  /**
   * –ü–æ–ª—É—á–∞–µ—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞
   */
  getMonitoringStats() {
    const now = new Date();
    const last24h = new Date(now - 24*60*60*1000);
    const last7d = new Date(now - 7*24*60*60*1000);

    const notificationsLast24h = this.adminNotifications.filter(n => n.timestamp > last24h);
    const notificationsLast7d = this.adminNotifications.filter(n => n.timestamp > last7d);

    return {
      isActive: this.isMonitoring,
      lastCheckTime: this.lastCheckTime,
      totalNotifications: this.adminNotifications.length,
      notificationsLast24h: notificationsLast24h.length,
      notificationsLast7d: notificationsLast7d.length,
      criticalAlertsLast24h: notificationsLast24h.filter(n => n.type === 'critical').length,
      warningAlertsLast24h: notificationsLast24h.filter(n => n.type === 'warning').length,
      thresholds: {
        alert: this.alertThreshold,
        critical: this.criticalThreshold
      }
    };
  }

  /**
   * –û–±–Ω–æ–≤–ª—è–µ—Ç –ø–æ—Ä–æ–≥–æ–≤—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è
   */
  updateThresholds(alertThreshold, criticalThreshold) {
    this.alertThreshold = alertThreshold;
    this.criticalThreshold = criticalThreshold;
    
    logger.info(`–ü–æ—Ä–æ–≥–æ–≤—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è –æ–±–Ω–æ–≤–ª–µ–Ω—ã: Alert=${alertThreshold}, Critical=${criticalThreshold}`);
  }
}

module.exports = new BalanceMonitoringService();