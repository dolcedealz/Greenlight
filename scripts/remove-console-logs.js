#!/usr/bin/env node

/**
 * –°–∫—Ä–∏–ø—Ç –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è console.log –∏–∑ production —Å–±–æ—Ä–∫–∏ frontend
 */

const fs = require('fs');
const path = require('path');

const FRONTEND_SRC = path.join(__dirname, '..', 'frontend', 'src');

// –ü–∞—Ç—Ç–µ—Ä–Ω—ã –¥–ª—è –ø–æ–∏—Å–∫–∞ console.* –≤ –∫–æ–¥–µ
const CONSOLE_PATTERNS = [
  /console\.log\([^)]*\);?\s*$/gm,
  /console\.warn\([^)]*\);?\s*$/gm,
  /console\.error\([^)]*\);?\s*$/gm,
  /console\.info\([^)]*\);?\s*$/gm,
  /console\.debug\([^)]*\);?\s*$/gm,
];

// –§–∞–π–ª—ã –∫–æ—Ç–æ—Ä—ã–µ –Ω—É–∂–Ω–æ –ø—Ä–æ–ø—É—Å—Ç–∏—Ç—å (–≥–¥–µ console.log –Ω—É–∂–µ–Ω –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏)
const SKIP_FILES = [
  'logger.js',
  'debug.js'
];

function shouldSkipFile(filePath) {
  return SKIP_FILES.some(skipFile => filePath.includes(skipFile));
}

function processFile(filePath) {
  if (shouldSkipFile(filePath)) {
    return { processed: false, reason: 'skipped' };
  }

  try {
    let content = fs.readFileSync(filePath, 'utf8');
    const originalContent = content;
    let removedCount = 0;

    // –ü—Ä–∏–º–µ–Ω—è–µ–º –≤—Å–µ –ø–∞—Ç—Ç–µ—Ä–Ω—ã
    CONSOLE_PATTERNS.forEach(pattern => {
      const matches = content.match(pattern);
      if (matches) {
        removedCount += matches.length;
        content = content.replace(pattern, '');
      }
    });

    // –£–¥–∞–ª—è–µ–º –ø—É—Å—Ç—ã–µ —Å—Ç—Ä–æ–∫–∏, –∫–æ—Ç–æ—Ä—ã–µ –æ—Å—Ç–∞–ª–∏—Å—å –ø–æ—Å–ª–µ —É–¥–∞–ª–µ–Ω–∏—è console.*
    content = content.replace(/^\s*$/gm, '').replace(/\n\n\n+/g, '\n\n');

    if (content !== originalContent) {
      fs.writeFileSync(filePath, content, 'utf8');
      return { processed: true, removedCount };
    }

    return { processed: false, reason: 'no_console_found' };
  } catch (error) {
    return { processed: false, error: error.message };
  }
}

function findJsFiles(dir) {
  const files = [];
  
  function scanDirectory(currentDir) {
    const items = fs.readdirSync(currentDir);
    
    items.forEach(item => {
      const fullPath = path.join(currentDir, item);
      const stat = fs.statSync(fullPath);
      
      if (stat.isDirectory() && !item.startsWith('.')) {
        scanDirectory(fullPath);
      } else if (stat.isFile() && (item.endsWith('.js') || item.endsWith('.jsx'))) {
        files.push(fullPath);
      }
    });
  }
  
  scanDirectory(dir);
  return files;
}

console.log('üßπ –£–¥–∞–ª–µ–Ω–∏–µ console.log –∏–∑ frontend –∫–æ–¥–∞...\n');

const jsFiles = findJsFiles(FRONTEND_SRC);
console.log(`–ù–∞–π–¥–µ–Ω–æ ${jsFiles.length} JS/JSX —Ñ–∞–π–ª–æ–≤ –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏\n`);

let processedCount = 0;
let skippedCount = 0;
let errorCount = 0;
let totalRemovedLogs = 0;

jsFiles.forEach(filePath => {
  const relativePath = path.relative(FRONTEND_SRC, filePath);
  const result = processFile(filePath);
  
  if (result.processed) {
    console.log(`‚úÖ ${relativePath} - —É–¥–∞–ª–µ–Ω–æ ${result.removedCount} console.*`);
    processedCount++;
    totalRemovedLogs += result.removedCount;
  } else if (result.reason === 'skipped') {
    console.log(`‚è≠Ô∏è  ${relativePath} - –ø—Ä–æ–ø—É—â–µ–Ω`);
    skippedCount++;
  } else if (result.error) {
    console.log(`‚ùå ${relativePath} - –æ—à–∏–±–∫–∞: ${result.error}`);
    errorCount++;
  } else {
    // –§–∞–π–ª –±–µ–∑ console.log - –Ω–µ –≤—ã–≤–æ–¥–∏–º
  }
});

console.log('\nüìä –†–µ–∑—É–ª—å—Ç–∞—Ç—ã:');
console.log(`   –û–±—Ä–∞–±–æ—Ç–∞–Ω–æ —Ñ–∞–π–ª–æ–≤: ${processedCount}`);
console.log(`   –ü—Ä–æ–ø—É—â–µ–Ω–æ —Ñ–∞–π–ª–æ–≤: ${skippedCount}`);
console.log(`   –û—à–∏–±–æ–∫: ${errorCount}`);
console.log(`   –í—Å–µ–≥–æ —É–¥–∞–ª–µ–Ω–æ console.*: ${totalRemovedLogs}`);

// –ü—Ä–æ–≤–µ—Ä—è–µ–º –æ—Å—Ç–∞–ª–∏—Å—å –ª–∏ console.* –≤ –∫–æ–¥–µ
console.log('\nüîç –ü—Ä–æ–≤–µ—Ä–∫–∞ –æ—Å—Ç–∞–≤—à–∏—Ö—Å—è console.*...');
let remainingConsoles = 0;

jsFiles.forEach(filePath => {
  const content = fs.readFileSync(filePath, 'utf8');
  const matches = content.match(/console\.[a-zA-Z]+\(/g);
  if (matches) {
    const relativePath = path.relative(FRONTEND_SRC, filePath);
    console.log(`‚ö†Ô∏è  ${relativePath} - –æ—Å—Ç–∞–ª–æ—Å—å ${matches.length} console.*`);
    remainingConsoles += matches.length;
  }
});

if (remainingConsoles === 0) {
  console.log('‚ú® –í—Å–µ console.* —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω—ã!');
} else {
  console.log(`‚ö†Ô∏è  –û—Å—Ç–∞–ª–æ—Å—å ${remainingConsoles} console.* (–≤–æ–∑–º–æ–∂–Ω–æ, –≤ —É—Å–ª–æ–≤–Ω—ã—Ö –±–ª–æ–∫–∞—Ö)`);
}

console.log('\nüöÄ –ì–æ—Ç–æ–≤–æ! Frontend –∫–æ–¥ –æ—á–∏—â–µ–Ω –¥–ª—è production.');