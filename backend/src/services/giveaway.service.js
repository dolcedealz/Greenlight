// backend/src/services/giveaway.service.js
const { 
  Giveaway, 
  GiveawayParticipation, 
  User 
} = require('../models');
const crypto = require('crypto');
const TelegramService = require('./telegram.service');

class GiveawayService {
  constructor() {
    this.telegramService = new TelegramService();
  }

  /**
   * –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–π –≤—ã–±–æ—Ä –ø–æ–±–µ–¥–∏—Ç–µ–ª–µ–π –¥–ª—è —Ä–æ–∑—ã–≥—Ä—ã—à–∞
   */
  async conductAutomaticGiveaway(giveawayId) {
    try {
      console.log(`–ü—Ä–æ–≤–µ–¥–µ–Ω–∏–µ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–≥–æ —Ä–æ–∑—ã–≥—Ä—ã—à–∞: ${giveawayId}`);

      const giveaway = await Giveaway.findById(giveawayId)
        .populate('prize');

      if (!giveaway) {
        throw new Error('–†–æ–∑—ã–≥—Ä—ã—à –Ω–µ –Ω–∞–π–¥–µ–Ω');
      }

      if (giveaway.status !== 'active') {
        throw new Error('–†–æ–∑—ã–≥—Ä—ã—à –Ω–µ –∞–∫—Ç–∏–≤–µ–Ω');
      }

      // –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ—Ö —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤
      const participants = await GiveawayParticipation.find({
        giveaway: giveawayId
      }).populate('user', 'firstName lastName username telegramId');

      if (participants.length === 0) {
        console.log(`–†–æ–∑—ã–≥—Ä—ã—à ${giveawayId}: –Ω–µ—Ç —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤`);
        // –ü–µ—Ä–µ–Ω–æ—Å–∏–º —Ä–æ–∑—ã–≥—Ä—ã—à –∏–ª–∏ –æ—Ç–º–µ–Ω—è–µ–º
        await this.postponeOrCancelGiveaway(giveaway);
        return { success: false, message: '–ù–µ—Ç —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤' };
      }

      if (participants.length < giveaway.winnersCount) {
        console.log(`–†–æ–∑—ã–≥—Ä—ã—à ${giveawayId}: –Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ (${participants.length}/${giveaway.winnersCount})`);
        // –£–º–µ–Ω—å—à–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–±–µ–¥–∏—Ç–µ–ª–µ–π –∏–ª–∏ –ø–µ—Ä–µ–Ω–æ—Å–∏–º
        return await this.handleInsufficientParticipants(giveaway, participants);
      }

      // –ü–æ–ª—É—á–∞–µ–º —Å–ª—É—á–∞–π–Ω–æ–µ —á–∏—Å–ª–æ –æ—Ç Telegram (–±—Ä–æ—Å–æ–∫ –∫—É–±–∏–∫–∞)
      const diceResult = await this.telegramService.rollDice();
      
      // –ò—Å–ø–æ–ª—å–∑—É–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç –∫—É–±–∏–∫–∞ –∫–∞–∫ seed –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ç–æ—Ä–∞
      const seed = this.generateSeedFromDice(diceResult, participants.length);
      const winners = this.selectWinners(participants, giveaway.winnersCount, seed);

      // –û–±–Ω–æ–≤–ª—è–µ–º –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
      await this.updateGiveawayResults(giveaway, winners, diceResult);

      // –ü—É–±–ª–∏–∫—É–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –≤ Telegram –∫–∞–Ω–∞–ª–µ
      await this.publishResultsToChannel(giveaway, winners, participants.length, diceResult);

      // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –ø–æ–±–µ–¥–∏—Ç–µ–ª—è–º
      await this.notifyWinners(winners, giveaway);

      console.log(`–†–æ–∑—ã–≥—Ä—ã—à ${giveawayId} —É—Å–ø–µ—à–Ω–æ –ø—Ä–æ–≤–µ–¥–µ–Ω`);
      return { 
        success: true, 
        winners: winners.map(w => ({
          user: w.user,
          position: w.position,
          participationNumber: w.participationNumber
        }))
      };

    } catch (error) {
      console.error(`–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ–¥–µ–Ω–∏–∏ —Ä–æ–∑—ã–≥—Ä—ã—à–∞ ${giveawayId}:`, error);
      throw error;
    }
  }

  /**
   * –ì–µ–Ω–µ—Ä–∞—Ü–∏—è seed –Ω–∞ –æ—Å–Ω–æ–≤–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞ –∫—É–±–∏–∫–∞
   */
  generateSeedFromDice(diceResult, participantsCount) {
    const diceValue = diceResult.value;
    const timestamp = Date.now();
    const seedString = `${diceValue}-${timestamp}-${participantsCount}`;
    return crypto.createHash('sha256').update(seedString).digest('hex');
  }

  /**
   * –í—ã–±–æ—Ä –ø–æ–±–µ–¥–∏—Ç–µ–ª–µ–π –Ω–∞ –æ—Å–Ω–æ–≤–µ seed
   */
  selectWinners(participants, winnersCount, seed) {
    // –°–æ–∑–¥–∞–µ–º –¥–µ—Ç–µ—Ä–º–∏–Ω–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –≥–µ–Ω–µ—Ä–∞—Ç–æ—Ä —Å–ª—É—á–∞–π–Ω—ã—Ö —á–∏—Å–µ–ª
    const random = this.createSeededRandom(seed);
    const winners = [];
    const availableParticipants = [...participants];

    for (let i = 0; i < winnersCount && availableParticipants.length > 0; i++) {
      const randomIndex = Math.floor(random() * availableParticipants.length);
      const winner = availableParticipants.splice(randomIndex, 1)[0];
      
      winners.push({
        user: winner.user,
        position: i + 1,
        participationNumber: winner.participationNumber,
        selectedAt: new Date()
      });
    }

    return winners;
  }

  /**
   * –°–æ–∑–¥–∞–Ω–∏–µ –¥–µ—Ç–µ—Ä–º–∏–Ω–∏—Ä–æ–≤–∞–Ω–Ω–æ–≥–æ –≥–µ–Ω–µ—Ä–∞—Ç–æ—Ä–∞ —Å–ª—É—á–∞–π–Ω—ã—Ö —á–∏—Å–µ–ª
   */
  createSeededRandom(seed) {
    let hash = 0;
    for (let i = 0; i < seed.length; i++) {
      hash = ((hash << 5) - hash) + seed.charCodeAt(i);
      hash = hash & hash; // Convert to 32-bit integer
    }
    
    return function() {
      hash = ((hash * 9301) + 49297) % 233280;
      return hash / 233280;
    };
  }

  /**
   * –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ —Ä–æ–∑—ã–≥—Ä—ã—à–∞ –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
   */
  async updateGiveawayResults(giveaway, winners, diceResult) {
    // –û–±–Ω–æ–≤–ª—è–µ–º —Ä–æ–∑—ã–≥—Ä—ã—à
    giveaway.winners = winners.map(w => ({
      user: w.user._id,
      position: w.position,
      selectedAt: w.selectedAt
    }));
    giveaway.status = 'completed';
    giveaway.diceResult = diceResult;
    await giveaway.save();

    // –û–±–Ω–æ–≤–ª—è–µ–º —É—á–∞—Å—Ç–∏—è
    for (const winner of winners) {
      await GiveawayParticipation.findOneAndUpdate(
        { 
          giveaway: giveaway._id, 
          user: winner.user._id 
        },
        {
          isWinner: true,
          winnerPosition: winner.position,
          status: 'winner'
        }
      );
    }

    // –û–±–Ω–æ–≤–ª—è–µ–º –æ—Å—Ç–∞–ª—å–Ω—ã—Ö —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤
    await GiveawayParticipation.updateMany(
      { 
        giveaway: giveaway._id, 
        isWinner: false 
      },
      { status: 'not_winner' }
    );
  }

  /**
   * –ü—É–±–ª–∏–∫–∞—Ü–∏—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –≤ Telegram –∫–∞–Ω–∞–ª–µ
   */
  async publishResultsToChannel(giveaway, winners, totalParticipants, diceResult) {
    try {
      const message = this.formatResultsMessage(giveaway, winners, totalParticipants, diceResult);
      const messageId = await this.telegramService.sendToChannel(message);
      
      // –°–æ—Ö—Ä–∞–Ω—è–µ–º ID —Å–æ–æ–±—â–µ–Ω–∏—è –≤ —Ä–æ–∑—ã–≥—Ä—ã—à–µ
      giveaway.telegramMessageId = messageId;
      await giveaway.save();

    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ –ø—É–±–ª–∏–∫–∞—Ü–∏–∏ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –≤ –∫–∞–Ω–∞–ª–µ:', error);
      // –ù–µ –ø—Ä–µ—Ä—ã–≤–∞–µ–º –ø—Ä–æ—Ü–µ—Å—Å, –µ—Å–ª–∏ –Ω–µ —É–¥–∞–ª–æ—Å—å –æ–ø—É–±–ª–∏–∫–æ–≤–∞—Ç—å
    }
  }

  /**
   * –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è —Å —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞–º–∏
   */
  formatResultsMessage(giveaway, winners, totalParticipants, diceResult) {
    const prizeEmoji = giveaway.prize?.type === 'telegram_gift' ? 'üéÅ' : 'üèÜ';
    const typeText = giveaway.type === 'daily' ? '–ï–∂–µ–¥–Ω–µ–≤–Ω—ã–π' : giveaway.type === 'weekly' ? '–ù–µ–¥–µ–ª—å–Ω—ã–π' : '–ö–∞—Å—Ç–æ–º–Ω—ã–π';
    
    let message = `${prizeEmoji} <b>${typeText} —Ä–æ–∑—ã–≥—Ä—ã—à –∑–∞–≤–µ—Ä—à–µ–Ω!</b>\n\n`;
    message += `üéØ <b>–ü—Ä–∏–∑:</b> ${giveaway.prize?.name || '–ù–µ —É–∫–∞–∑–∞–Ω'}\n`;
    message += `üë• <b>–£—á–∞—Å—Ç–Ω–∏–∫–æ–≤:</b> ${totalParticipants}\n`;
    message += `üé≤ <b>–†–µ–∑—É–ª—å—Ç–∞—Ç –∫—É–±–∏–∫–∞:</b> ${diceResult.value}\n\n`;
    
    message += `üèÜ <b>–ü–æ–±–µ–¥–∏—Ç–µ–ª–∏:</b>\n`;
    winners.forEach((winner, index) => {
      const userName = winner.user.firstName + (winner.user.lastName ? ` ${winner.user.lastName}` : '');
      message += `${index + 1}. ${userName} (—É—á–∞—Å—Ç–Ω–∏–∫ #${winner.participationNumber})\n`;
    });

    message += `\nüéâ –ü–æ–∑–¥—Ä–∞–≤–ª—è–µ–º –ø–æ–±–µ–¥–∏—Ç–µ–ª–µ–π!\n`;
    message += `üì¢ –°–ª–µ–¥—É—é—â–∏–π —Ä–æ–∑—ã–≥—Ä—ã—à —Å–∫–æ—Ä–æ!`;

    return message;
  }

  /**
   * –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –ø–æ–±–µ–¥–∏—Ç–µ–ª–µ–π
   */
  async notifyWinners(winners, giveaway) {
    for (const winner of winners) {
      try {
        const message = `üéâ –ü–æ–∑–¥—Ä–∞–≤–ª—è–µ–º! –í—ã –≤—ã–∏–≥—Ä–∞–ª–∏ –≤ —Ä–æ–∑—ã–≥—Ä—ã—à–µ!\n\n` +
                       `üèÜ –ü—Ä–∏–∑: ${giveaway.prize?.name}\n` +
                       `üìç –í–∞—à–∞ –ø–æ–∑–∏—Ü–∏—è: ${winner.position}\n\n` +
                       `–°–≤—è–∂–∏—Ç–µ—Å—å —Å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ü–∏–µ–π –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –ø—Ä–∏–∑–∞.`;
        
        await this.telegramService.sendPrivateMessage(winner.user.telegramId, message);
      } catch (error) {
        console.error(`–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é ${winner.user.telegramId}:`, error);
      }
    }
  }

  /**
   * –û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ–≥–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤
   */
  async handleInsufficientParticipants(giveaway, participants) {
    // –ï—Å–ª–∏ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ –º–µ–Ω—å—à–µ, —á–µ–º –Ω—É–∂–Ω–æ –ø–æ–±–µ–¥–∏—Ç–µ–ª–µ–π, –Ω–æ –±–æ–ª—å—à–µ 0
    // –ü—Ä–æ–≤–æ–¥–∏–º —Ä–æ–∑—ã–≥—Ä—ã—à —Å –º–µ–Ω—å—à–∏–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ–º –ø–æ–±–µ–¥–∏—Ç–µ–ª–µ–π
    if (participants.length > 0) {
      const diceResult = await this.telegramService.rollDice();
      const seed = this.generateSeedFromDice(diceResult, participants.length);
      const winners = this.selectWinners(participants, participants.length, seed);

      await this.updateGiveawayResults(giveaway, winners, diceResult);
      await this.publishResultsToChannel(giveaway, winners, participants.length, diceResult);
      await this.notifyWinners(winners, giveaway);

      return { 
        success: true, 
        message: `–†–æ–∑—ã–≥—Ä—ã—à –ø—Ä–æ–≤–µ–¥–µ–Ω —Å ${participants.length} –ø–æ–±–µ–¥–∏—Ç–µ–ª—è–º–∏`,
        winners 
      };
    }

    return { success: false, message: '–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤' };
  }

  /**
   * –ü–µ—Ä–µ–Ω–æ—Å –∏–ª–∏ –æ—Ç–º–µ–Ω–∞ —Ä–æ–∑—ã–≥—Ä—ã—à–∞
   */
  async postponeOrCancelGiveaway(giveaway) {
    // –õ–æ–≥–∏–∫–∞ –ø–µ—Ä–µ–Ω–æ—Å–∞ –∏–ª–∏ –æ—Ç–º–µ–Ω—ã
    // –ü–æ–∫–∞ –ø—Ä–æ—Å—Ç–æ –æ—Ç–º–µ–Ω—è–µ–º
    giveaway.status = 'cancelled';
    await giveaway.save();
  }

  /**
   * –ü–æ–ª—É—á–µ–Ω–∏–µ —Ä–æ–∑—ã–≥—Ä—ã—à–µ–π, –≥–æ—Ç–æ–≤—ã—Ö –∫ –ø—Ä–æ–≤–µ–¥–µ–Ω–∏—é
   */
  async getReadyGiveaways() {
    const now = new Date();
    
    return await Giveaway.find({
      status: 'active',
      drawDate: { $lte: now }
    }).populate('prize');
  }

  /**
   * –ü–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏—Ö —Ä–æ–∑—ã–≥—Ä—ã—à–µ–π
   */
  async scheduleAutomaticGiveaways() {
    try {
      const readyGiveaways = await this.getReadyGiveaways();
      
      for (const giveaway of readyGiveaways) {
        try {
          await this.conductAutomaticGiveaway(giveaway._id);
        } catch (error) {
          console.error(`–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ–¥–µ–Ω–∏–∏ —Ä–æ–∑—ã–≥—Ä—ã—à–∞ ${giveaway._id}:`, error);
        }
      }

      return readyGiveaways.length;
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–∏ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏—Ö —Ä–æ–∑—ã–≥—Ä—ã—à–µ–π:', error);
      throw error;
    }
  }
}

module.exports = GiveawayService;