// backend/src/jobs/giveaway.jobs.js
const cron = require('node-cron');
const GiveawayService = require('../services/giveaway.service');
const TelegramService = require('../services/telegram.service');
const { Giveaway, GiveawayParticipation } = require('../models');

class GiveawayJobs {
  constructor() {
    this.giveawayService = new GiveawayService();
    this.telegramService = new TelegramService();
    this.jobs = new Map();
  }

  /**
   * –ó–∞–ø—É—Å–∫ –≤—Å–µ—Ö –∫—Ä–æ–Ω-–∑–∞–¥–∞—á
   */
  startAllJobs() {
    try {
      // –ü—Ä–æ–≤–µ—Ä–∫–∞ –≥–æ—Ç–æ–≤—ã—Ö –∫ –ø—Ä–æ–≤–µ–¥–µ–Ω–∏—é —Ä–æ–∑—ã–≥—Ä—ã—à–µ–π –∫–∞–∂–¥—ã–µ 5 –º–∏–Ω—É—Ç
      this.startGiveawayCheck();
      
      // –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ —Å–æ–∑–¥–∞–Ω–∏–µ –µ–∂–µ–¥–Ω–µ–≤–Ω—ã—Ö —Ä–æ–∑—ã–≥—Ä—ã—à–µ–π
      this.startDailyGiveawayCreation();
      
      // –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ —Å–æ–∑–¥–∞–Ω–∏–µ –Ω–µ–¥–µ–ª—å–Ω—ã—Ö —Ä–æ–∑—ã–≥—Ä—ã—à–µ–π
      this.startWeeklyGiveawayCreation();
      
      // –û—Ç–ø—Ä–∞–≤–∫–∞ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π
      this.startReminderJobs();
      
      // –û—á–∏—Å—Ç–∫–∞ —Å—Ç–∞—Ä—ã—Ö –¥–∞–Ω–Ω—ã—Ö
      this.startCleanupJobs();

      console.log('‚úÖ –í—Å–µ –∑–∞–¥–∞—á–∏ —Ä–æ–∑—ã–≥—Ä—ã—à–µ–π –∑–∞–ø—É—â–µ–Ω—ã');
    } catch (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞ –∑–∞–¥–∞—á —Ä–æ–∑—ã–≥—Ä—ã—à–µ–π:', error);
    }
  }

  /**
   * –ü—Ä–æ–≤–µ—Ä–∫–∞ –∏ –ø—Ä–æ–≤–µ–¥–µ–Ω–∏–µ –≥–æ—Ç–æ–≤—ã—Ö —Ä–æ–∑—ã–≥—Ä—ã—à–µ–π
   */
  startGiveawayCheck() {
    const task = cron.schedule('*/5 * * * *', async () => {
      try {
        console.log('üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ –≥–æ—Ç–æ–≤—ã—Ö –∫ –ø—Ä–æ–≤–µ–¥–µ–Ω–∏—é —Ä–æ–∑—ã–≥—Ä—ã—à–µ–π...');
        const conductedCount = await this.giveawayService.scheduleAutomaticGiveaways();
        
        if (conductedCount > 0) {
          console.log(`‚úÖ –ü—Ä–æ–≤–µ–¥–µ–Ω–æ —Ä–æ–∑—ã–≥—Ä—ã—à–µ–π: ${conductedCount}`);
        }
      } catch (error) {
        console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ —Ä–æ–∑—ã–≥—Ä—ã—à–µ–π:', error);
      }
    }, {
      scheduled: false
    });

    this.jobs.set('giveawayCheck', task);
    task.start();
    console.log('üìÖ –ó–∞–ø—É—â–µ–Ω–∞ –∑–∞–¥–∞—á–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ —Ä–æ–∑—ã–≥—Ä—ã—à–µ–π (–∫–∞–∂–¥—ã–µ 5 –º–∏–Ω—É—Ç)');
  }

  /**
   * –°–æ–∑–¥–∞–Ω–∏–µ –µ–∂–µ–¥–Ω–µ–≤–Ω—ã—Ö —Ä–æ–∑—ã–≥—Ä—ã—à–µ–π
   */
  startDailyGiveawayCreation() {
    // –ö–∞–∂–¥—ã–π –¥–µ–Ω—å –≤ 00:01 —Å–æ–∑–¥–∞–µ–º –µ–∂–µ–¥–Ω–µ–≤–Ω—ã–π —Ä–æ–∑—ã–≥—Ä—ã—à
    const task = cron.schedule('1 0 * * *', async () => {
      try {
        console.log('üéØ –°–æ–∑–¥–∞–Ω–∏–µ –µ–∂–µ–¥–Ω–µ–≤–Ω–æ–≥–æ —Ä–æ–∑—ã–≥—Ä—ã—à–∞...');
        await this.createDailyGiveaway();
      } catch (error) {
        console.error('‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –µ–∂–µ–¥–Ω–µ–≤–Ω–æ–≥–æ —Ä–æ–∑—ã–≥—Ä—ã—à–∞:', error);
      }
    }, {
      scheduled: false,
      timezone: 'Europe/Moscow'
    });

    this.jobs.set('dailyCreation', task);
    task.start();
    console.log('üìÖ –ó–∞–ø—É—â–µ–Ω–∞ –∑–∞–¥–∞—á–∞ —Å–æ–∑–¥–∞–Ω–∏—è –µ–∂–µ–¥–Ω–µ–≤–Ω—ã—Ö —Ä–æ–∑—ã–≥—Ä—ã—à–µ–π (00:01 –∫–∞–∂–¥—ã–π –¥–µ–Ω—å)');
  }

  /**
   * –°–æ–∑–¥–∞–Ω–∏–µ –Ω–µ–¥–µ–ª—å–Ω—ã—Ö —Ä–æ–∑—ã–≥—Ä—ã—à–µ–π
   */
  startWeeklyGiveawayCreation() {
    // –ö–∞–∂–¥–æ–µ –≤–æ—Å–∫—Ä–µ—Å–µ–Ω—å–µ –≤ 00:01 —Å–æ–∑–¥–∞–µ–º –Ω–µ–¥–µ–ª—å–Ω—ã–π —Ä–æ–∑—ã–≥—Ä—ã—à
    const task = cron.schedule('1 0 * * 0', async () => {
      try {
        console.log('üíé –°–æ–∑–¥–∞–Ω–∏–µ –Ω–µ–¥–µ–ª—å–Ω–æ–≥–æ —Ä–æ–∑—ã–≥—Ä—ã—à–∞...');
        await this.createWeeklyGiveaway();
      } catch (error) {
        console.error('‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –Ω–µ–¥–µ–ª—å–Ω–æ–≥–æ —Ä–æ–∑—ã–≥—Ä—ã—à–∞:', error);
      }
    }, {
      scheduled: false,
      timezone: 'Europe/Moscow'
    });

    this.jobs.set('weeklyCreation', task);
    task.start();
    console.log('üìÖ –ó–∞–ø—É—â–µ–Ω–∞ –∑–∞–¥–∞—á–∞ —Å–æ–∑–¥–∞–Ω–∏—è –Ω–µ–¥–µ–ª—å–Ω—ã—Ö —Ä–æ–∑—ã–≥—Ä—ã—à–µ–π (00:01 –∫–∞–∂–¥–æ–µ –≤–æ—Å–∫—Ä–µ—Å–µ–Ω—å–µ)');
  }

  /**
   * –ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è –æ —Ä–æ–∑—ã–≥—Ä—ã—à–∞—Ö
   */
  startReminderJobs() {
    // –ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è –∑–∞ 2 —á–∞—Å–∞ –¥–æ –æ–∫–æ–Ω—á–∞–Ω–∏—è
    const reminderTask = cron.schedule('0 */1 * * *', async () => {
      try {
        await this.sendGiveawayReminders();
      } catch (error) {
        console.error('‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π:', error);
      }
    }, {
      scheduled: false,
      timezone: 'Europe/Moscow'
    });

    this.jobs.set('reminders', reminderTask);
    reminderTask.start();
    console.log('üìÖ –ó–∞–ø—É—â–µ–Ω–∞ –∑–∞–¥–∞—á–∞ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π (–∫–∞–∂–¥—ã–π —á–∞—Å)');
  }

  /**
   * –û—á–∏—Å—Ç–∫–∞ —Å—Ç–∞—Ä—ã—Ö –¥–∞–Ω–Ω—ã—Ö
   */
  startCleanupJobs() {
    // –û—á–∏—Å—Ç–∫–∞ —Å—Ç–∞—Ä—ã—Ö –∑–∞–≤–µ—Ä—à–µ–Ω–Ω—ã—Ö —Ä–æ–∑—ã–≥—Ä—ã—à–µ–π (–∫–∞–∂–¥—ã–π –¥–µ–Ω—å –≤ 02:00)
    const cleanupTask = cron.schedule('0 2 * * *', async () => {
      try {
        console.log('üßπ –û—á–∏—Å—Ç–∫–∞ —Å—Ç–∞—Ä—ã—Ö –¥–∞–Ω–Ω—ã—Ö —Ä–æ–∑—ã–≥—Ä—ã—à–µ–π...');
        await this.cleanupOldGiveaways();
      } catch (error) {
        console.error('‚ùå –û—à–∏–±–∫–∞ –æ—á–∏—Å—Ç–∫–∏ –¥–∞–Ω–Ω—ã—Ö:', error);
      }
    }, {
      scheduled: false,
      timezone: 'Europe/Moscow'
    });

    this.jobs.set('cleanup', cleanupTask);
    cleanupTask.start();
    console.log('üìÖ –ó–∞–ø—É—â–µ–Ω–∞ –∑–∞–¥–∞—á–∞ –æ—á–∏—Å—Ç–∫–∏ –¥–∞–Ω–Ω—ã—Ö (02:00 –∫–∞–∂–¥—ã–π –¥–µ–Ω—å)');
  }

  /**
   * –°–æ–∑–¥–∞–Ω–∏–µ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–≥–æ –µ–∂–µ–¥–Ω–µ–≤–Ω–æ–≥–æ —Ä–æ–∑—ã–≥—Ä—ã—à–∞
   */
  async createDailyGiveaway() {
    try {
      // –ü–æ–ª—É—á–∞–µ–º —Å–ª—É—á–∞–π–Ω—ã–π –ø—Ä–∏–∑ –¥–ª—è –µ–∂–µ–¥–Ω–µ–≤–Ω–æ–≥–æ —Ä–æ–∑—ã–≥—Ä—ã—à–∞
      const prizes = await this.getAvailablePrizes('daily');
      if (prizes.length === 0) {
        console.log('‚ö†Ô∏è –ù–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –ø—Ä–∏–∑–æ–≤ –¥–ª—è –µ–∂–µ–¥–Ω–µ–≤–Ω–æ–≥–æ —Ä–æ–∑—ã–≥—Ä—ã—à–∞');
        return;
      }

      const randomPrize = prizes[Math.floor(Math.random() * prizes.length)];
      
      const today = new Date();
      const startDate = new Date(today);
      startDate.setHours(0, 0, 0, 0);
      
      const endDate = new Date(today);
      endDate.setHours(19, 0, 0, 0); // –î–æ 19:00
      
      const drawDate = new Date(today);
      drawDate.setUTCHours(20 - 3, 0, 0, 0); // –†–æ–∑—ã–≥—Ä—ã—à –≤ 20:00 –ú–°–ö (UTC = MSK - 3)

      // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ—Ç –ª–∏ —É–∂–µ —Å–æ–∑–¥–∞–Ω–Ω–æ–≥–æ —Ä–æ–∑—ã–≥—Ä—ã—à–∞ –Ω–∞ —Å–µ–≥–æ–¥–Ω—è
      const existingGiveaway = await Giveaway.findOne({
        type: 'daily',
        startDate: { $gte: startDate },
        status: { $in: ['pending', 'active'] }
      });

      if (existingGiveaway) {
        console.log('‚ÑπÔ∏è –ï–∂–µ–¥–Ω–µ–≤–Ω—ã–π —Ä–æ–∑—ã–≥—Ä—ã—à –Ω–∞ —Å–µ–≥–æ–¥–Ω—è —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç');
        return;
      }

      const giveaway = new Giveaway({
        title: `–ï–∂–µ–¥–Ω–µ–≤–Ω—ã–π —Ä–æ–∑—ã–≥—Ä—ã—à ${today.toLocaleDateString('ru-RU')}`,
        type: 'daily',
        prize: randomPrize._id,
        winnersCount: 1,
        startDate,
        endDate,
        drawDate,
        status: 'active',
        requiresDeposit: true,
        depositTimeframe: 'same_day',
        createdBy: null // –°–∏—Å—Ç–µ–º–Ω—ã–π —Ä–æ–∑—ã–≥—Ä—ã—à
      });

      await giveaway.save();

      // –û–±—ä—è–≤–ª—è–µ–º –æ –Ω–∞—á–∞–ª–µ —Ä–æ–∑—ã–≥—Ä—ã—à–∞
      const populatedGiveaway = await Giveaway.findById(giveaway._id).populate('prize');
      await this.telegramService.announceGiveawayStart(populatedGiveaway);

      console.log(`‚úÖ –°–æ–∑–¥–∞–Ω –µ–∂–µ–¥–Ω–µ–≤–Ω—ã–π —Ä–æ–∑—ã–≥—Ä—ã—à: ${giveaway._id}`);
    } catch (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –µ–∂–µ–¥–Ω–µ–≤–Ω–æ–≥–æ —Ä–æ–∑—ã–≥—Ä—ã—à–∞:', error);
    }
  }

  /**
   * –°–æ–∑–¥–∞–Ω–∏–µ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–≥–æ –Ω–µ–¥–µ–ª—å–Ω–æ–≥–æ —Ä–æ–∑—ã–≥—Ä—ã—à–∞
   */
  async createWeeklyGiveaway() {
    try {
      const prizes = await this.getAvailablePrizes('weekly');
      if (prizes.length === 0) {
        console.log('‚ö†Ô∏è –ù–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –ø—Ä–∏–∑–æ–≤ –¥–ª—è –Ω–µ–¥–µ–ª—å–Ω–æ–≥–æ —Ä–æ–∑—ã–≥—Ä—ã—à–∞');
        return;
      }

      // –î–ª—è –Ω–µ–¥–µ–ª—å–Ω–æ–≥–æ —Ä–æ–∑—ã–≥—Ä—ã—à–∞ –≤—ã–±–∏—Ä–∞–µ–º –±–æ–ª–µ–µ —Ü–µ–Ω–Ω—ã–µ –ø—Ä–∏–∑—ã
      const premiumPrizes = prizes.filter(p => p.value >= 100 || p.type === 'telegram_gift');
      const selectedPrize = premiumPrizes.length > 0 ? 
        premiumPrizes[Math.floor(Math.random() * premiumPrizes.length)] :
        prizes[Math.floor(Math.random() * prizes.length)];

      const today = new Date(); // –í–æ—Å–∫—Ä–µ—Å–µ–Ω—å–µ
      const startDate = new Date(today);
      startDate.setHours(0, 0, 0, 0);
      
      // –ù–µ–¥–µ–ª—è —É—á–∞—Å—Ç–∏—è –¥–æ —Å–ª–µ–¥—É—é—â–µ–≥–æ –≤–æ—Å–∫—Ä–µ—Å–µ–Ω—å—è 19:00
      const endDate = new Date(today);
      endDate.setDate(today.getDate() + 6);
      endDate.setHours(19, 0, 0, 0);
      
      // –†–æ–∑—ã–≥—Ä—ã—à –≤ —Å–ª–µ–¥—É—é—â–µ–µ –≤–æ—Å–∫—Ä–µ—Å–µ–Ω—å–µ –≤ 20:00
      const drawDate = new Date(today);
      drawDate.setDate(today.getDate() + 7);
      drawDate.setUTCHours(20 - 3, 0, 0, 0); // –†–æ–∑—ã–≥—Ä—ã—à –≤ 20:00 –ú–°–ö (UTC = MSK - 3)

      const existingGiveaway = await Giveaway.findOne({
        type: 'weekly',
        startDate: { $gte: startDate },
        status: { $in: ['pending', 'active'] }
      });

      if (existingGiveaway) {
        console.log('‚ÑπÔ∏è –ù–µ–¥–µ–ª—å–Ω—ã–π —Ä–æ–∑—ã–≥—Ä—ã—à –Ω–∞ —ç—Ç—É –Ω–µ–¥–µ–ª—é —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç');
        return;
      }

      const giveaway = new Giveaway({
        title: `–ù–µ–¥–µ–ª—å–Ω—ã–π —Ä–æ–∑—ã–≥—Ä—ã—à ${today.toLocaleDateString('ru-RU')}`,
        type: 'weekly',
        prize: selectedPrize._id,
        winnersCount: 3,
        startDate,
        endDate,
        drawDate,
        status: 'active',
        requiresDeposit: true,
        depositTimeframe: 'same_week',
        createdBy: null
      });

      await giveaway.save();

      const populatedGiveaway = await Giveaway.findById(giveaway._id).populate('prize');
      await this.telegramService.announceGiveawayStart(populatedGiveaway);

      console.log(`‚úÖ –°–æ–∑–¥–∞–Ω –Ω–µ–¥–µ–ª—å–Ω—ã–π —Ä–æ–∑—ã–≥—Ä—ã—à: ${giveaway._id}`);
    } catch (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –Ω–µ–¥–µ–ª—å–Ω–æ–≥–æ —Ä–æ–∑—ã–≥—Ä—ã—à–∞:', error);
    }
  }

  /**
   * –ü–æ–ª—É—á–µ–Ω–∏–µ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –ø—Ä–∏–∑–æ–≤
   */
  async getAvailablePrizes(type) {
    const { GiveawayPrize } = require('../models');
    
    // –§–∏–ª—å—Ç—Ä—É–µ–º –ø—Ä–∏–∑—ã –ø–æ —Ç–∏–ø—É —Ä–æ–∑—ã–≥—Ä—ã—à–∞
    const filter = { isActive: true };
    
    if (type === 'daily') {
      // –î–ª—è –µ–∂–µ–¥–Ω–µ–≤–Ω—ã—Ö —Ä–æ–∑—ã–≥—Ä—ã—à–µ–π - –º–µ–Ω–µ–µ —Ü–µ–Ω–Ω—ã–µ –ø—Ä–∏–∑—ã
      filter.$or = [
        { value: { $lte: 50 } },
        { type: 'promo_code' }
      ];
    } else if (type === 'weekly') {
      // –î–ª—è –Ω–µ–¥–µ–ª—å–Ω—ã—Ö —Ä–æ–∑—ã–≥—Ä—ã—à–µ–π - –±–æ–ª–µ–µ —Ü–µ–Ω–Ω—ã–µ –ø—Ä–∏–∑—ã
      filter.$or = [
        { value: { $gte: 50 } },
        { type: 'telegram_gift' }
      ];
    }

    return await GiveawayPrize.find(filter);
  }

  /**
   * –û—Ç–ø—Ä–∞–≤–∫–∞ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π –æ —Ä–æ–∑—ã–≥—Ä—ã—à–∞—Ö
   */
  async sendGiveawayReminders() {
    try {
      const now = new Date();
      const twoHoursLater = new Date(now.getTime() + 2 * 60 * 60 * 1000);

      // –ù–∞—Ö–æ–¥–∏–º —Ä–æ–∑—ã–≥—Ä—ã—à–∏, –∫–æ—Ç–æ—Ä—ã–µ –∑–∞–∫–∞–Ω—á–∏–≤–∞—é—Ç—Å—è —á–µ—Ä–µ–∑ 2 —á–∞—Å–∞
      const endingSoon = await Giveaway.find({
        status: 'active',
        endDate: {
          $gte: now,
          $lte: twoHoursLater
        }
      }).populate('prize');

      for (const giveaway of endingSoon) {
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –æ—Ç–ø—Ä–∞–≤–ª—è–ª–∏ –ª–∏ —É–∂–µ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ
        if (!giveaway.reminderSent) {
          const participantsCount = await GiveawayParticipation.countDocuments({
            giveaway: giveaway._id
          });

          await this.telegramService.sendGiveawayReminder(giveaway, participantsCount);
          
          // –û—Ç–º–µ—á–∞–µ–º, —á—Ç–æ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ
          giveaway.reminderSent = true;
          await giveaway.save();

          console.log(`üì¢ –û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ –¥–ª—è —Ä–æ–∑—ã–≥—Ä—ã—à–∞: ${giveaway._id}`);
        }
      }
    } catch (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π:', error);
    }
  }

  /**
   * –û—á–∏—Å—Ç–∫–∞ —Å—Ç–∞—Ä—ã—Ö –¥–∞–Ω–Ω—ã—Ö
   */
  async cleanupOldGiveaways() {
    try {
      const oneMonthAgo = new Date();
      oneMonthAgo.setMonth(oneMonthAgo.getMonth() - 1);

      // –£–¥–∞–ª—è–µ–º —Å—Ç–∞—Ä—ã–µ –∑–∞–≤–µ—Ä—à–µ–Ω–Ω—ã–µ —Ä–æ–∑—ã–≥—Ä—ã—à–∏ –∏ –∏—Ö —É—á–∞—Å—Ç–∏—è
      const oldGiveaways = await Giveaway.find({
        status: 'completed',
        createdAt: { $lt: oneMonthAgo }
      });

      for (const giveaway of oldGiveaways) {
        await GiveawayParticipation.deleteMany({ giveaway: giveaway._id });
      }

      const deletedCount = await Giveaway.deleteMany({
        status: 'completed',
        createdAt: { $lt: oneMonthAgo }
      });

      console.log(`üßπ –û—á–∏—â–µ–Ω–æ —Å—Ç–∞—Ä—ã—Ö —Ä–æ–∑—ã–≥—Ä—ã—à–µ–π: ${deletedCount.deletedCount}`);
    } catch (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –æ—á–∏—Å—Ç–∫–∏ –¥–∞–Ω–Ω—ã—Ö:', error);
    }
  }

  /**
   * –û—Å—Ç–∞–Ω–æ–≤–∫–∞ –≤—Å–µ—Ö –∑–∞–¥–∞—á
   */
  stopAllJobs() {
    this.jobs.forEach((job, name) => {
      job.stop();
      console.log(`‚èπÔ∏è –û—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞ –∑–∞–¥–∞—á–∞: ${name}`);
    });
    this.jobs.clear();
  }

  /**
   * –ü–æ–ª—É—á–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞ –∑–∞–¥–∞—á
   */
  getJobsStatus() {
    const status = {};
    this.jobs.forEach((job, name) => {
      status[name] = {
        running: job.running,
        lastDate: job.lastDate,
        nextDate: job.nextDate
      };
    });
    return status;
  }
}

module.exports = GiveawayJobs;