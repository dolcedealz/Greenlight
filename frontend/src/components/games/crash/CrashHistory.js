// frontend/src/components/games/crash/CrashHistory.js
import React from 'react';
import '../../../styles/CrashHistory.css';

const CrashHistory = ({ history }) => {

  // –ü–æ–ª—É—á–µ–Ω–∏–µ —Ü–≤–µ—Ç–∞ –¥–ª—è –º–Ω–æ–∂–∏—Ç–µ–ª—è
  const getMultiplierColor = (multiplier) => {
    if (multiplier < 1.5) return '#ff3b30'; // –ö—Ä–∞—Å–Ω—ã–π
    if (multiplier < 2) return '#ff9500'; // –û—Ä–∞–Ω–∂–µ–≤—ã–π
    if (multiplier < 5) return '#ffcc00'; // –ñ–µ–ª—Ç—ã–π
    if (multiplier < 10) return '#34c759'; // –ó–µ–ª–µ–Ω—ã–π
    return '#0ba84a'; // –¢–µ–º–Ω–æ-–∑–µ–ª–µ–Ω—ã–π
  };

  // –ü–æ–ª—É—á–µ–Ω–∏–µ –∫–ª–∞—Å—Å–∞ –¥–ª—è –º–Ω–æ–∂–∏—Ç–µ–ª—è
  const getMultiplierClass = (multiplier) => {
    if (multiplier < 1.5) return 'very-low';
    if (multiplier < 2) return 'low';
    if (multiplier < 5) return 'medium';
    if (multiplier < 10) return 'high';
    return 'very-high';
  };

  // –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –≤—Ä–µ–º–µ–Ω–∏
  const formatTime = (timestamp) => {
    const date = new Date(timestamp);
    return date.toLocaleTimeString('ru-RU', { 
      hour: '2-digit', 
      minute: '2-digit', 
      second: '2-digit' 
    });
  };

  // –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –∏—Å—Ç–æ—Ä–∏–∏ - –ø–æ–∫–∞–∑—ã–≤–∞–µ–º —Ç–æ–ª—å–∫–æ —Ä–µ–∞–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
  const getDisplayHistory = () => {
    // –í–æ–∑–≤—Ä–∞—â–∞–µ–º —Ç–æ–ª—å–∫–æ —Ä–µ–∞–ª—å–Ω—É—é –∏—Å—Ç–æ—Ä–∏—é –∏–∑ API
    return history && Array.isArray(history) ? history : [];
  };

  const displayHistory = getDisplayHistory();

  return (
    <div className="crash-history">
      <div className="history-header">
        <h3 className="history-title">üìà –ò—Å—Ç–æ—Ä–∏—è</h3>
        {displayHistory.length > 0 && (
          <span className="history-count">{displayHistory.length} —Ä–∞—É–Ω–¥–æ–≤</span>
        )}
      </div>

      <div className="history-content">
        {displayHistory.length === 0 ? (
          <div className="no-history">
            <span className="no-history-icon">üìà</span>
            <span className="no-history-text">–ò—Å—Ç–æ—Ä–∏—è —Ä–∞—É–Ω–¥–æ–≤ –ø–æ—è–≤–∏—Ç—Å—è –ø–æ—Å–ª–µ –ø–µ—Ä–≤—ã—Ö –∏–≥—Ä</span>
            <span className="no-history-subtext">–°—ã–≥—Ä–∞–π—Ç–µ –Ω–µ—Å–∫–æ–ª—å–∫–æ —Ä–∞—É–Ω–¥–æ–≤, —á—Ç–æ–±—ã —É–≤–∏–¥–µ—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É</span>
          </div>
        ) : (
          <>
            {/* –£–õ–£–ß–®–ï–ù–ù–´–ô: –ö–æ–º–ø–∞–∫—Ç–Ω—ã–π –≤–∏–¥ - –ø–æ—Å–ª–µ–¥–Ω–∏–µ 12 —Ä–∞—É–Ω–¥–æ–≤ –≤ –æ–¥–Ω–æ–π —Å—Ç—Ä–æ–∫–µ */}
            <div className="history-compact">
              <div className="compact-title">–ü–æ—Å–ª–µ–¥–Ω–∏–µ —Ä–∞—É–Ω–¥—ã (–º–Ω–æ–∂–∏—Ç–µ–ª–∏):</div>
              <div className="compact-list">
                {displayHistory.slice(0, 12).map((round, index) => (
                  <div
                    key={round.roundId || index}
                    className={`compact-item ${getMultiplierClass(round.crashPoint)}`}
                    style={{ color: getMultiplierColor(round.crashPoint) }}
                    title={`–†–∞—É–Ω–¥ ${round.roundId}: ${round.crashPoint.toFixed(2)}x –≤ ${formatTime(round.timestamp)}`}
                  >
                    {round.crashPoint.toFixed(2)}x
                  </div>
                ))}
              </div>
            </div>

            {/* –£–õ–£–ß–®–ï–ù–ù–´–ô: –î–µ—Ç–∞–ª—å–Ω—ã–π —Å–ø–∏—Å–æ–∫ —Å –ª—É—á—à–µ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π */}
            <div className="history-detailed">
              {displayHistory.slice(0, 15).map((round, index) => (
                <div key={round.roundId || index} className="history-item">
                  <div className="round-info">
                    <div className="round-id">
                      <span className="round-number">#{round.roundId}</span>
                      <span className="round-ago">{Math.floor((Date.now() - round.timestamp) / 1000)}—Å –Ω–∞–∑–∞–¥</span>
                    </div>
                    <div className="round-time">{formatTime(round.timestamp)}</div>
                  </div>

                  <div className="round-result">
                    <div 
                      className={`crash-multiplier ${getMultiplierClass(round.crashPoint)}`}
                      style={{ color: getMultiplierColor(round.crashPoint) }}
                      title={`Crash Point: ${round.crashPoint.toFixed(2)}x`}
                    >
                      {round.crashPoint >= 10 ? 'üöÄ' : round.crashPoint >= 5 ? 'üî•' : round.crashPoint >= 2 ? '‚ö°' : 'üí•'} 
                      <span className="multiplier-value">{round.crashPoint.toFixed(2)}x</span>
                    </div>
                  </div>

                  <div className="round-stats">
                    <div className="stat">
                      <span className="stat-icon">üë•</span>
                      <span className="stat-value">{round.totalBets || 0}</span>
                    </div>
                    <div className="stat">
                      <span className="stat-icon">üí∞</span>
                      <span className="stat-value">{(round.totalAmount || 0).toFixed(0)} USDT</span>
                    </div>
                  </div>
                </div>
              ))}
            </div>
          </>
        )}
      </div>

      {/* –£–õ–£–ß–®–ï–ù–ù–ê–Ø: –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ –∏—Å—Ç–æ—Ä–∏–∏ —Å –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π */}
      {displayHistory.length > 0 && (
        <div className="history-stats">
          <div className="stats-title">üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ—Å–ª–µ–¥–Ω–∏—Ö {displayHistory.length} —Ä–∞—É–Ω–¥–æ–≤:</div>
          <div className="stats-grid">
            <div className="stat-item">
              <span className="stat-label">–°—Ä–µ–¥–Ω–∏–π:</span>
              <span className="stat-value">
                {(displayHistory.reduce((sum, round) => sum + round.crashPoint, 0) / displayHistory.length).toFixed(2)}x
              </span>
            </div>
            <div className="stat-item">
              <span className="stat-label">–ú–∞–∫—Å.:</span>
              <span className="stat-value">
                üöÄ {Math.max(...displayHistory.map(round => round.crashPoint)).toFixed(2)}x
              </span>
            </div>
            <div className="stat-item">
              <span className="stat-label">–ú–∏–Ω.:</span>
              <span className="stat-value">
                üí• {Math.min(...displayHistory.map(round => round.crashPoint)).toFixed(2)}x
              </span>
            </div>
            <div className="stat-item">
              <span className="stat-label">‚â• 1.5x:</span>
              <span className="stat-value">
                {Math.round((displayHistory.filter(round => round.crashPoint >= 1.5).length / displayHistory.length) * 100)}%
              </span>
            </div>
            <div className="stat-item">
              <span className="stat-label">‚â• 2x:</span>
              <span className="stat-value">
                {Math.round((displayHistory.filter(round => round.crashPoint >= 2).length / displayHistory.length) * 100)}%
              </span>
            </div>
            <div className="stat-item">
              <span className="stat-label">‚â• 5x:</span>
              <span className="stat-value">
                {Math.round((displayHistory.filter(round => round.crashPoint >= 5).length / displayHistory.length) * 100)}%
              </span>
            </div>
          </div>

          {/* –ù–û–í–û–ï: –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Å–∫–æ—Ä–æ—Å—Ç–∏ –∏–≥—Ä—ã */}
          <div className="speed-info">
            <div className="speed-note">
              ‚ö° –ò–≥—Ä–∞ –∑–∞–º–µ–¥–ª–µ–Ω–∞ –¥–ª—è –ª—É—á—à–µ–≥–æ –æ–ø—ã—Ç–∞ - –º–Ω–æ–∂–∏—Ç–µ–ª–∏ —Ä–∞—Å—Ç—É—Ç –ø–ª–∞–≤–Ω–µ–µ!
            </div>
          </div>
        </div>
      )}
    </div>
  );
};

export default CrashHistory;
