// frontend/src/components/games/slots/SlotMachine.js
import React, { useState, useEffect, useCallback, useRef } from 'react';
import '../../../styles/SlotMachine.css';

// –°–∏–º–≤–æ–ª—ã —Å–ª–æ—Ç–æ–≤ —Å –≤–µ—Å–∞–º–∏ –∏ –≤—ã–ø–ª–∞—Ç–∞–º–∏
const SLOT_SYMBOLS = [
  { symbol: 'üçí', name: 'cherry', weight: 25, payout: 2 },
  { symbol: 'üçã', name: 'lemon', weight: 20, payout: 3 },
  { symbol: 'üçä', name: 'orange', weight: 15, payout: 4 },
  { symbol: 'üçá', name: 'grape', weight: 12, payout: 5 },
  { symbol: 'üîî', name: 'bell', weight: 8, payout: 8 },
  { symbol: 'üíé', name: 'diamond', weight: 5, payout: 15 },
  { symbol: '‚≠ê', name: 'star', weight: 3, payout: 25 },
  { symbol: 'üé∞', name: 'jackpot', weight: 2, payout: 50 }
];

const SlotMachine = ({ 
  onSpin, 
  isSpinning, 
  balance, 
  betAmount,
  lastResult,
  autoplay,
  loading,
  gameStats 
}) => {
  // –°–æ—Å—Ç–æ—è–Ω–∏–µ –±–∞—Ä–∞–±–∞–Ω–æ–≤ —Å–æ—Ö—Ä–∞–Ω—è–µ—Ç—Å—è –º–µ–∂–¥—É –∏–≥—Ä–∞–º–∏
  const [reels, setReels] = useState(() => {
    // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Å–ª—É—á–∞–π–Ω—ã–º–∏ —Å–∏–º–≤–æ–ª–∞–º–∏
    return [
      ['üçí', 'üçã', 'üçä', 'üçá'],
      ['üçí', 'üçã', 'üçä', 'üçá'],
      ['üçí', 'üçã', 'üçä', 'üçá'],
      ['üçí', 'üçã', 'üçä', 'üçá']
    ];
  });
  
  // –ò–°–ü–†–ê–í–õ–ï–ù–û: –¥–æ–±–∞–≤–ª–µ–Ω—ã —Å–æ—Å—Ç–æ—è–Ω–∏—è –¥–ª—è –∞–Ω–∏–º–∞—Ü–∏–∏
  const [isAnimating, setIsAnimating] = useState(false);
  const [animatingReels, setAnimatingReels] = useState([false, false, false, false]);
  const [winningLines, setWinningLines] = useState([]);
  const [finalResult, setFinalResult] = useState(null);
  const lastResultRef = useRef(null);
  const winningTimeoutRef = useRef(null);
  const animationTimeoutRefs = useRef([]);
  
  // –§—É–Ω–∫—Ü–∏—è –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —Å–ª—É—á–∞–π–Ω–æ–≥–æ —Å–∏–º–≤–æ–ª–∞ –¥–ª—è –∞–Ω–∏–º–∞—Ü–∏–∏
  const getRandomSymbol = useCallback(() => {
    const totalWeight = SLOT_SYMBOLS.reduce((sum, s) => sum + s.weight, 0);
    let random = Math.random() * totalWeight;
    
    for (const symbolData of SLOT_SYMBOLS) {
      random -= symbolData.weight;
      if (random <= 0) {
        return symbolData.symbol;
      }
    }
    
    return SLOT_SYMBOLS[0].symbol;
  }, []);
  
  // –ò–°–ü–†–ê–í–õ–ï–ù–û: –û—á–∏—Å—Ç–∫–∞ —Å–æ—Å—Ç–æ—è–Ω–∏—è –ø—Ä–∏ –Ω–∞—á–∞–ª–µ –Ω–æ–≤–æ–≥–æ —Å–ø–∏–Ω–∞
  useEffect(() => {
    if (isSpinning && !isAnimating) {
      console.log('–°–ø–∏–Ω –Ω–∞—á–∞–ª—Å—è - –∑–∞–ø—É—Å–∫–∞–µ–º –∞–Ω–∏–º–∞—Ü–∏—é');
      
      // –û—á–∏—â–∞–µ–º –ø—Ä–µ–¥—ã–¥—É—â–∏–µ —Ç–∞–π–º–∞—É—Ç—ã
      animationTimeoutRefs.current.forEach(timeout => {
        if (timeout) clearTimeout(timeout);
      });
      animationTimeoutRefs.current = [];
      
      if (winningTimeoutRef.current) {
        clearTimeout(winningTimeoutRef.current);
        winningTimeoutRef.current = null;
      }
      
      // –û—á–∏—â–∞–µ–º –≤—ã–∏–≥—Ä—ã—à–Ω—ã–µ –ª–∏–Ω–∏–∏
      setWinningLines([]);
      setFinalResult(null);
      lastResultRef.current = null;
      
      // –ó–∞–ø—É—Å–∫–∞–µ–º –∞–Ω–∏–º–∞—Ü–∏—é –≤—Ä–∞—â–µ–Ω–∏—è
      setIsAnimating(true);
      setAnimatingReels([true, true, true, true]);
      
      // –ó–∞–ø—É—Å–∫–∞–µ–º –∞–Ω–∏–º–∞—Ü–∏—é –±–∞—Ä–∞–±–∞–Ω–æ–≤
      const animationIntervals = [];
      
      // –î–ª—è –∫–∞–∂–¥–æ–≥–æ –±–∞—Ä–∞–±–∞–Ω–∞ —Å–æ–∑–¥–∞–µ–º –∏–Ω—Ç–µ—Ä–≤–∞–ª —Å –±—ã—Å—Ç—Ä–æ–π —Å–º–µ–Ω–æ–π —Å–∏–º–≤–æ–ª–æ–≤
      reels.forEach((_, reelIndex) => {
        const interval = setInterval(() => {
          setReels(prev => {
            const newReels = [...prev];
            newReels[reelIndex] = [
              getRandomSymbol(),
              getRandomSymbol(),
              getRandomSymbol(),
              getRandomSymbol()
            ];
            return newReels;
          });
        }, 100); // –ú–µ–Ω—è–µ–º —Å–∏–º–≤–æ–ª—ã –∫–∞–∂–¥—ã–µ 100–º—Å
        
        animationIntervals.push(interval);
      });
      
      // –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∞–Ω–∏–º–∞—Ü–∏—é —á–µ—Ä–µ–∑ 2 —Å–µ–∫—É–Ω–¥—ã
      const stopAnimationTimeout = setTimeout(() => {
        // –û—á–∏—â–∞–µ–º –≤—Å–µ –∏–Ω—Ç–µ—Ä–≤–∞–ª—ã
        animationIntervals.forEach(interval => clearInterval(interval));
        
        // –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∞–Ω–∏–º–∞—Ü–∏—é –±–∞—Ä–∞–±–∞–Ω–æ–≤ –ø–æ–æ—á–µ—Ä–µ–¥–Ω–æ
        const delays = [0, 200, 400, 600];
        
        delays.forEach((delay, index) => {
          const timeout = setTimeout(() => {
            setAnimatingReels(prev => {
              const newState = [...prev];
              newState[index] = false;
              return newState;
            });
            
            // –ï—Å–ª–∏ —ç—Ç–æ –ø–æ—Å–ª–µ–¥–Ω–∏–π –±–∞—Ä–∞–±–∞–Ω
            if (index === delays.length - 1) {
              setIsAnimating(false);
            }
          }, delay);
          
          animationTimeoutRefs.current.push(timeout);
        });
      }, 2000);
      
      animationTimeoutRefs.current.push(stopAnimationTimeout);
    }
  }, [isSpinning, isAnimating, getRandomSymbol, reels]);
  
  // –ò–°–ü–†–ê–í–õ–ï–ù–û: –û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–æ–≤–æ–≥–æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞
  useEffect(() => {
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–æ –Ω–æ–≤—ã–π –∏ –∞–Ω–∏–º–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞
    if (lastResult && lastResult !== lastResultRef.current && lastResult.reels && !isAnimating) {
      console.log('–ü–æ–ª—É—á–µ–Ω –ù–û–í–´–ô —Ä–µ–∑—É–ª—å—Ç–∞—Ç —Å —Å–µ—Ä–≤–µ—Ä–∞:', lastResult);
      
      // –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å—Å—ã–ª–∫—É –Ω–∞ —Ç–µ–∫—É—â–∏–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç
      lastResultRef.current = lastResult;
      setFinalResult({ ...lastResult });
      
      // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ñ–∏–Ω–∞–ª—å–Ω—ã–µ —Å–∏–º–≤–æ–ª—ã
      setReels(lastResult.reels);
      
      // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –≤—ã–∏–≥—Ä—ã—à–Ω—ã–µ –ª–∏–Ω–∏–∏ –µ—Å–ª–∏ –µ—Å—Ç—å
      if (lastResult.winningLines && lastResult.winningLines.length > 0) {
        setTimeout(() => {
          console.log('–£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –≤—ã–∏–≥—Ä—ã—à–Ω—ã–µ –ª–∏–Ω–∏–∏');
          setWinningLines(lastResult.winningLines);
          
          // –£–±–∏—Ä–∞–µ–º –ø–æ–¥—Å–≤–µ—Ç–∫—É —á–µ—Ä–µ–∑ 3 —Å–µ–∫—É–Ω–¥—ã
          winningTimeoutRef.current = setTimeout(() => {
            console.log('–û—á–∏—â–∞–µ–º –≤—ã–∏–≥—Ä—ã—à–Ω—ã–µ –ª–∏–Ω–∏–∏ —á–µ—Ä–µ–∑ —Ç–∞–π–º–∞—É—Ç');
            setWinningLines([]);
            winningTimeoutRef.current = null;
          }, 3000);
        }, 500);
      }
    }
  }, [lastResult, isAnimating]);
  
  // –û—á–∏—Å—Ç–∫–∞ —Ç–∞–π–º–∞—É—Ç–æ–≤ –ø—Ä–∏ —Ä–∞–∑–º–æ–Ω—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏
  useEffect(() => {
    return () => {
      animationTimeoutRefs.current.forEach(timeout => {
        if (timeout) clearTimeout(timeout);
      });
      if (winningTimeoutRef.current) {
        clearTimeout(winningTimeoutRef.current);
      }
    };
  }, []);
  
  // –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –∫–ª–∞—Å—Å–∞ —è—á–µ–π–∫–∏
  const getCellClass = useCallback((reelIndex, rowIndex) => {
    const baseClass = 'slot-cell';
    const position = `${reelIndex}-${rowIndex}`;
    
    // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –≤—ã–∏–≥—Ä—ã—à–Ω—ã–µ —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –µ—Å—Ç—å –∞–∫—Ç—É–∞–ª—å–Ω—ã–µ –ª–∏–Ω–∏–∏
    if (winningLines.length > 0 && winningLines.some(line => line.includes(position))) {
      return `${baseClass} winning`;
    }
    
    return baseClass;
  }, [winningLines]);
  
  return (
    <div className="slot-machine">
      {/* –ò–≥—Ä–æ–≤–æ–µ –ø–æ–ª–µ 4x4 */}
      <div className="slot-display">
        <div className="slot-reels">
          {reels.map((reel, reelIndex) => (
            <div 
              key={reelIndex} 
              className={`slot-reel ${animatingReels[reelIndex] ? 'spinning' : ''}`}
            >
              {reel.map((symbol, rowIndex) => (
                <div
                  key={`${reelIndex}-${rowIndex}`}
                  className={getCellClass(reelIndex, rowIndex)}
                  data-position={`${reelIndex}-${rowIndex}`}
                >
                  <span className="slot-symbol">{symbol}</span>
                </div>
              ))}
            </div>
          ))}
        </div>
        
        {/* –õ–∏–Ω–∏–∏ –≤—ã–ø–ª–∞—Ç –¥–ª—è 4x4 –ø–æ–ª—è */}
        <div className="paylines">
          {/* –ì–æ—Ä–∏–∑–æ–Ω—Ç–∞–ª—å–Ω—ã–µ –ª–∏–Ω–∏–∏ */}
          <div className="payline horizontal line-1"></div>
          <div className="payline horizontal line-2"></div>
          <div className="payline horizontal line-3"></div>
          <div className="payline horizontal line-4"></div>
          {/* –í–µ—Ä—Ç–∏–∫–∞–ª—å–Ω—ã–µ –ª–∏–Ω–∏–∏ */}
          <div className="payline vertical line-5"></div>
          <div className="payline vertical line-6"></div>
          <div className="payline vertical line-7"></div>
          <div className="payline vertical line-8"></div>
          {/* –î–∏–∞–≥–æ–Ω–∞–ª—å–Ω—ã–µ –ª–∏–Ω–∏–∏ */}
          <div className="payline diagonal line-9"></div>
          <div className="payline diagonal line-10"></div>
        </div>
      </div>
      
      {/* –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ø–æ—Å–ª–µ–¥–Ω–µ–º —Å–ø–∏–Ω–µ */}
      {finalResult && !isSpinning && !isAnimating && finalResult === lastResultRef.current && (
        <div className="last-spin-info">
          {finalResult.win ? (
            <div className="win-display">
              <span className="win-text">–í–´–ò–ì–†–´–®!</span>
              <span className="win-amount">+{(Math.abs(finalResult.profit) || 0).toFixed(2)} USDT</span>
              {finalResult.winningSymbols && (
                <div className="winning-symbols">
                  {finalResult.winningSymbols.map((symbol, index) => (
                    <span key={index} className="winning-symbol">{symbol}</span>
                  ))}
                </div>
              )}
              {finalResult.winningLines && finalResult.winningLines.length > 0 && (
                <div className="winning-lines-count">
                  –í—ã–∏–≥—Ä—ã—à–Ω—ã—Ö –ª–∏–Ω–∏–π: {finalResult.winningLines.length}
                </div>
              )}
            </div>
          ) : (
            <div className="lose-display">
              <span className="lose-text">–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑!</span>
            </div>
          )}
        </div>
      )}
    </div>
  );
};

export default SlotMachine;
