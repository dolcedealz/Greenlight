// frontend/src/components/events/EventCard.js
import React from 'react';
import '../../styles/EventCard.css';

const EventCard = ({ event, onSelect, onOutcomeSelect, formatTimeLeft }) => {
  // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–ª–∏–∫–∞ –ø–æ –∫–∞—Ä—Ç–æ—á–∫–µ
  const handleCardClick = () => {
    onSelect(event);
  };

  // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–ª–∏–∫–∞ –ø–æ –∏—Å—Ö–æ–¥—É (–ø—Ä–µ–¥–æ—Ç–≤—Ä–∞—â–∞–µ–º –≤—Å–ø–ª—ã—Ç–∏–µ)
  const handleOutcomeClick = (e, outcomeId) => {
    e.stopPropagation();
    onOutcomeSelect(event, outcomeId);
  };

  // –ü–æ–ª—É—á–µ–Ω–∏–µ –∏–∫–æ–Ω–∫–∏ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
  const getCategoryIcon = (category) => {
    switch (category) {
      case 'sports': return '‚öΩ';
      case 'crypto': return '‚Çø';
      case 'politics': return 'üó≥Ô∏è';
      case 'entertainment': return 'üé¨';
      default: return 'üéØ';
    }
  };

  // –ü–æ–ª—É—á–µ–Ω–∏–µ —Ü–≤–µ—Ç–∞ —Å—Ç–∞—Ç—É—Å–∞
  const getStatusColor = (status) => {
    switch (status) {
      case 'active': return '#0ba84a';
      case 'upcoming': return '#ff9500';
      case 'betting_closed': return '#ff3b30';
      default: return '#8e8e93';
    }
  };

  // –ü–æ–ª—É—á–µ–Ω–∏–µ —Ç–µ–∫—Å—Ç–∞ —Å—Ç–∞—Ç—É—Å–∞
  const getStatusText = (status) => {
    switch (status) {
      case 'active': return '–ê–∫—Ç–∏–≤–Ω–æ';
      case 'upcoming': return '–°–∫–æ—Ä–æ';
      case 'betting_closed': return '–°—Ç–∞–≤–∫–∏ –∑–∞–∫—Ä—ã—Ç—ã';
      case 'finished': return '–ó–∞–≤–µ—Ä—à–µ–Ω–æ';
      default: return status;
    }
  };

  return (
    <div className="event-card" onClick={handleCardClick}>
      {/* –ó–∞–≥–æ–ª–æ–≤–æ–∫ –∫–∞—Ä—Ç–æ—á–∫–∏ */}
      <div className="event-card-header">
        <div className="event-category">
          <span className="category-icon">{getCategoryIcon(event.category)}</span>
          <span className="category-name">{event.category}</span>
        </div>
        <div 
          className="event-status"
          style={{ color: getStatusColor(event.status) }}
        >
          {getStatusText(event.status)}
        </div>
      </div>

      {/* –ù–∞–∑–≤–∞–Ω–∏–µ —Å–æ–±—ã—Ç–∏—è */}
      <div className="event-title">
        <h3>{event.title}</h3>
      </div>

      {/* –û–ø–∏—Å–∞–Ω–∏–µ —Å–æ–±—ã—Ç–∏—è */}
      <div className="event-description">
        <p>{event.description}</p>
      </div>

      {/* –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ø—É–ª–µ */}
      <div className="event-pool-info">
        <div className="pool-total">
          <span className="pool-label">–û–±—â–∏–π –ø—É–ª:</span>
          <span className="pool-amount">{event.totalPool.toFixed(2)} USDT</span>
        </div>
        <div className="time-left">
          <span className="time-label">–î–æ –æ–∫–æ–Ω—á–∞–Ω–∏—è:</span>
          <span className="time-value">{formatTimeLeft(event.bettingEndsAt)}</span>
        </div>
      </div>

      {/* –ò—Å—Ö–æ–¥—ã —Å–æ–±—ã—Ç–∏—è */}
      <div className="event-outcomes">
        {event.outcomes.map((outcome) => {
          const odds = event.currentOdds[outcome.id];
          const percentage = event.totalPool > 0 
            ? ((outcome.totalBets / event.totalPool) * 100).toFixed(1)
            : 0;

          return (
            <div 
              key={outcome.id} 
              className="outcome-item"
              onClick={(e) => handleOutcomeClick(e, outcome.id)}
            >
              <div className="outcome-info">
                <div className="outcome-name">{outcome.name}</div>
                <div className="outcome-stats">
                  <span className="outcome-percentage">{percentage}%</span>
                  <span className="outcome-bets">{outcome.betsCount} —Å—Ç–∞–≤–æ–∫</span>
                </div>
              </div>
              <div className="outcome-odds">
                <div className="odds-value">√ó{odds.toFixed(2)}</div>
                <div className="odds-amount">{outcome.totalBets.toFixed(0)} USDT</div>
              </div>
            </div>
          );
        })}
      </div>

      {/* –ò–Ω–¥–∏–∫–∞—Ç–æ—Ä –∫–ª–∏–∫–∞–±–µ–ª—å–Ω–æ—Å—Ç–∏ */}
      <div className="event-card-footer">
        <span className="tap-hint">–ù–∞–∂–º–∏—Ç–µ –¥–ª—è –ø–æ–¥—Ä–æ–±–Ω–æ—Å—Ç–µ–π ‚Üí</span>
      </div>
    </div>
  );
};

export default EventCard;
