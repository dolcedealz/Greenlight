// backend/src/services/game.service.js
const { User, Game, Transaction } = require('../models');
const randomService = require('./random.service');
// –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º –Ω–æ–≤—ã–π —Å–µ—Ä–≤–∏—Å –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —à–∞–Ω—Å–∞–º–∏
const oddsService = require('./odds.service');
const mongoose = require('mongoose');

// –ü—Ä–µ–¥–≤–∞—Ä–∏—Ç–µ–ª—å–Ω–æ —Ä–∞—Å—Å—á–∏—Ç–∞–Ω–Ω—ã–µ —Ç–∞–±–ª–∏—Ü—ã –∫–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç–æ–≤ –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –º–∏–Ω
const payoutTables = {
  3: {
    1: 1.13, 2: 1.29, 3: 1.48, 4: 1.71, 5: 2.00, 6: 2.35, 7: 2.79, 8: 3.35, 9: 4.07, 10: 5.00,
    11: 6.26, 12: 7.96, 13: 10.35, 14: 13.80, 15: 18.98, 16: 27.11, 17: 40.66, 18: 65.06,
    19: 113.85, 20: 227.70, 21: 569.25, 22: 2277.00
  },
  5: {
    1: 1.24, 2: 1.56, 3: 2.00, 4: 2.58, 5: 3.39, 6: 4.52, 7: 6.14, 8: 8.50, 9: 12.04, 10: 17.52,
    11: 26.27, 12: 40.87, 13: 66.41, 14: 113.85, 15: 208.73, 16: 417.45, 17: 939.26, 18: 2504.70,
    19: 8766.45, 20: 52598.70
  },
  7: {
    1: 1.38, 2: 1.94, 3: 2.79, 4: 4.09, 5: 6.14, 6: 9.44, 7: 14.95, 8: 24.47, 9: 41.60, 10: 73.95,
    11: 138.66, 12: 277.33, 13: 600.88, 14: 1442.10, 15: 3965.78, 16: 13219.25, 17: 59486.63, 18: 475893.00
  },
  9: {
    1: 1.55, 2: 2.48, 3: 4.07, 4: 6.88, 5: 12.04, 6: 21.89, 7: 41.60, 8: 83.20, 9: 176.80, 10: 404.10,
    11: 1010.26, 12: 2828.73, 13: 9193.39, 14: 36773.55, 15: 202254.53, 16: 2022545.25
  },
  12: {
    1: 1.90, 2: 3.81, 3: 7.96, 4: 17.52, 5: 40.87, 6: 102.17, 7: 277.33, 8: 831.98, 9: 2828.73, 10: 11314.94,
    11: 56574.69, 12: 396022.85, 13: 5148297.00
  },
  15: {
    1: 2.48, 2: 6.60, 3: 18.98, 4: 59.64, 5: 208.73, 6: 834.90, 7: 3965.78, 8: 23794.65, 9: 202254.53, 10: 3236072.40
  },
  18: {
    1: 3.54, 2: 14.14, 3: 65.06, 4: 357.81, 5: 2504.70, 6: 25047.00, 7: 475893.00
  },
  21: {
    1: 6.19, 2: 49.50, 3: 569.25, 4: 12523.50
  },
  23: {
    1: 12.38, 2: 297.00
  }
};

/**
 * –°–µ—Ä–≤–∏—Å –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –∏–≥—Ä–æ–≤—ã–º–∏ –ø—Ä–æ—Ü–µ—Å—Å–∞–º–∏
 */
class GameService {
  /**
   * –ò–≥—Ä–∞—Ç—å –≤ –º–æ–Ω–µ—Ç–∫—É - –ü–û–õ–ù–û–°–¢–¨–Æ –ò–ó–ú–ï–ù–ï–ù–ù–´–ô –ú–ï–¢–û–î
   * @param {Object} userData - –î–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
   * @param {Object} gameData - –î–∞–Ω–Ω—ã–µ –∏–≥—Ä—ã
   * @returns {Object} - –†–µ–∑—É–ª—å—Ç–∞—Ç –∏–≥—Ä—ã
   */
  async playCoinFlip(userData, gameData) {
    const session = await mongoose.startSession();
    session.startTransaction();
    
    try {
      const { userId, telegramId } = userData;
      const { betAmount, selectedSide } = gameData;
      
      // –ù–∞–π–¥–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
      const user = await User.findOne(
        userId ? { _id: userId } : { telegramId }
      ).session(session);
      
      if (!user) {
        throw new Error('–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω');
      }
      
      if (user.isBlocked) {
        throw new Error('–í–∞—à –∞–∫–∫–∞—É–Ω—Ç –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω');
      }
      
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –ª–∏ —Å—Ä–µ–¥—Å—Ç–≤
      if (user.balance < betAmount) {
        throw new Error('–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å—Ä–µ–¥—Å—Ç–≤');
      }
      
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–∞–≤–∏–ª—å–Ω–æ—Å—Ç—å —Å—Ç–∞–≤–∫–∏
      if (betAmount <= 0) {
        throw new Error('–°—É–º–º–∞ —Å—Ç–∞–≤–∫–∏ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω–æ–π');
      }
      
      if (selectedSide !== 'heads' && selectedSide !== 'tails') {
        throw new Error('–í—ã–±—Ä–∞–Ω–∞ –Ω–µ–≤–µ—Ä–Ω–∞—è —Å—Ç–æ—Ä–æ–Ω–∞ –º–æ–Ω–µ—Ç—ã');
      }
      
      // –ü–æ–ª—É—á–∞–µ–º —à–∞–Ω—Å –≤—ã–∏–≥—Ä—ã—à–∞ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
      const winChance = await oddsService.getUserWinChance(user, 'coin');
      
      // –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —Å–ª—É—á–∞–π–Ω–æ–µ —á–∏—Å–ª–æ –æ—Ç 0 –¥–æ 1
      const randomValue = Math.random();
      
      // –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç –∏–≥—Ä—ã
      const win = randomValue < winChance;
      
      // –ï—Å–ª–∏ –∏–≥—Ä–æ–∫ –≤—ã–∏–≥—Ä–∞–ª, —Ä–µ–∑—É–ª—å—Ç–∞—Ç —Å–æ–≤–ø–∞–¥–∞–µ—Ç —Å –µ–≥–æ –≤—ã–±–æ—Ä–æ–º
      // –ï—Å–ª–∏ –ø—Ä–æ–∏–≥—Ä–∞–ª - —Ä–µ–∑—É–ª—å—Ç–∞—Ç –ø—Ä–æ—Ç–∏–≤–æ–ø–æ–ª–æ–∂–Ω—ã–π –≤—ã–±–æ—Ä—É
      const result = win ? selectedSide : (selectedSide === 'heads' ? 'tails' : 'heads');
      
      // –û–ø—Ä–µ–¥–µ–ª—è–µ–º –≤—ã–∏–≥—Ä—ã—à/–ø—Ä–æ–∏–≥—Ä—ã—à —Å –º–Ω–æ–∂–∏—Ç–µ–ª–µ–º x2
      const multiplier = 2.0;
      const profit = win ? betAmount * multiplier - betAmount : -betAmount;
      
      // –ë–∞–ª–∞–Ω—Å –¥–æ –∏ –ø–æ—Å–ª–µ
      const balanceBefore = user.balance;
      const balanceAfter = user.balance + profit;
      
      // –û–±–Ω–æ–≤–ª—è–µ–º –±–∞–ª–∞–Ω—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
      user.balance = balanceAfter;
      user.totalWagered += betAmount;
      if (win) {
        user.totalWon += betAmount * multiplier;
      }
      user.lastActivity = new Date();
      await user.save({ session });
      
      // –°–æ–∑–¥–∞–µ–º –∑–∞–ø–∏—Å—å –æ–± –∏–≥—Ä–µ (–±–µ–∑ seed –∏ –ø—Ä–æ—á–µ–≥–æ)
      const game = new Game({
        user: user._id,
        gameType: 'coin',
        bet: betAmount,
        multiplier,
        result: {
          selectedSide,
          result,
          win
        },
        win,
        profit,
        balanceBefore,
        balanceAfter,
        gameData: {
          selectedSide,
          result
        },
        status: 'completed'
      });
      
      await game.save({ session });
      
      // –°–æ–∑–¥–∞–µ–º —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—é –¥–ª—è —Å—Ç–∞–≤–∫–∏
      const betTransaction = new Transaction({
        user: user._id,
        type: 'bet',
        amount: -betAmount,
        game: game._id,
        description: '–°—Ç–∞–≤–∫–∞ –≤ –∏–≥—Ä–µ "–ú–æ–Ω–µ—Ç–∫–∞"',
        balanceBefore,
        balanceAfter: balanceBefore - betAmount
      });
      
      await betTransaction.save({ session });
      
      // –ï—Å–ª–∏ –±—ã–ª –≤—ã–∏–≥—Ä—ã—à, —Å–æ–∑–¥–∞–µ–º —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—é –¥–ª—è –≤—ã–∏–≥—Ä—ã—à–∞
      if (win) {
        const winAmount = betAmount * multiplier;
        const winTransaction = new Transaction({
          user: user._id,
          type: 'win',
          amount: winAmount,
          game: game._id,
          description: '–í—ã–∏–≥—Ä—ã—à –≤ –∏–≥—Ä–µ "–ú–æ–Ω–µ—Ç–∫–∞"',
          balanceBefore: balanceBefore - betAmount,
          balanceAfter
        });
        
        await winTransaction.save({ session });
      }
      
      await session.commitTransaction();
      
      // –í–æ–∑–≤—Ä–∞—â–∞–µ–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è –∫–ª–∏–µ–Ω—Ç–∞ (–±–µ–∑ seed –∏ –ø—Ä–æ—á–µ–≥–æ)
      return {
        result,
        win,
        profit,
        multiplier,
        balanceAfter
      };
    } catch (error) {
      await session.abortTransaction();
      throw error;
    } finally {
      session.endSession();
    }
  }
  
// backend/src/services/game.service.js (—Ç–æ–ª—å–∫–æ —Ñ—É–Ω–∫—Ü–∏—è playSlots, –æ—Å—Ç–∞–ª—å–Ω–æ–µ –±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π)

/**
 * –ò–≥—Ä–∞—Ç—å –≤ —Å–ª–æ—Ç—ã (–æ–±–Ω–æ–≤–ª–µ–Ω–Ω–∞—è –≤–µ—Ä—Å–∏—è –¥–ª—è 4x4 —Å –ò–°–ü–†–ê–í–õ–ï–ù–ù–´–ú–ò –∫–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç–∞–º–∏)
 * @param {Object} userData - –î–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
 * @param {Object} gameData - –î–∞–Ω–Ω—ã–µ –∏–≥—Ä—ã
 * @returns {Object} - –†–µ–∑—É–ª—å—Ç–∞—Ç –∏–≥—Ä—ã
 */
async playSlots(userData, gameData) {
  const session = await mongoose.startSession();
  session.startTransaction();
  
  try {
    const { userId, telegramId } = userData;
    const { betAmount } = gameData;
    
    // –ù–∞–π–¥–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    const user = await User.findOne(
      userId ? { _id: userId } : { telegramId }
    ).session(session);
    
    if (!user) {
      throw new Error('–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω');
    }
    
    if (user.isBlocked) {
      throw new Error('–í–∞—à –∞–∫–∫–∞—É–Ω—Ç –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω');
    }
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –ª–∏ —Å—Ä–µ–¥—Å—Ç–≤
    if (user.balance < betAmount) {
      throw new Error('–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å—Ä–µ–¥—Å—Ç–≤');
    }
    
    if (betAmount <= 0) {
      throw new Error('–°—É–º–º–∞ —Å—Ç–∞–≤–∫–∏ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω–æ–π');
    }
    
    // –ò–°–ü–†–ê–í–õ–ï–ù–û: –°–∏–º–≤–æ–ª—ã —Å–ª–æ—Ç–æ–≤ —Å –ø—Ä–∞–≤–∏–ª—å–Ω—ã–º–∏ –∫–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç–∞–º–∏
    const SLOT_SYMBOLS = [
      { symbol: 'üçí', weight: 25, payout: 2 }, // 3 –≤ —Ä—è–¥: 1, 4 –≤ —Ä—è–¥: 2
      { symbol: 'üçã', weight: 20, payout: 3 }, // 3 –≤ —Ä—è–¥: 1.5, 4 –≤ —Ä—è–¥: 3
      { symbol: 'üçä', weight: 15, payout: 4 }, // 3 –≤ —Ä—è–¥: 2, 4 –≤ —Ä—è–¥: 4
      { symbol: 'üçá', weight: 12, payout: 5 }, // 3 –≤ —Ä—è–¥: 2.5, 4 –≤ —Ä—è–¥: 5
      { symbol: 'üîî', weight: 8, payout: 8 },  // 3 –≤ —Ä—è–¥: 4, 4 –≤ —Ä—è–¥: 8
      { symbol: 'üíé', weight: 5, payout: 15 }, // 3 –≤ —Ä—è–¥: 7.5, 4 –≤ —Ä—è–¥: 15
      { symbol: '‚≠ê', weight: 3, payout: 25 }, // 3 –≤ —Ä—è–¥: 12.5, 4 –≤ —Ä—è–¥: 25
      { symbol: 'üé∞', weight: 2, payout: 50 }  // 3 –≤ —Ä—è–¥: 25, 4 –≤ —Ä—è–¥: 50
    ];
    
    // –§—É–Ω–∫—Ü–∏—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —Å–∏–º–≤–æ–ª–∞
    const generateSymbol = () => {
      const totalWeight = SLOT_SYMBOLS.reduce((sum, s) => sum + s.weight, 0);
      let random = Math.random() * totalWeight;
      
      for (const symbolData of SLOT_SYMBOLS) {
        random -= symbolData.weight;
        if (random <= 0) {
          return symbolData;
        }
      }
      
      return SLOT_SYMBOLS[0];
    };
    
    // –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –±–∞—Ä–∞–±–∞–Ω—ã (4x4)
    const reels = [
      [generateSymbol().symbol, generateSymbol().symbol, generateSymbol().symbol, generateSymbol().symbol],
      [generateSymbol().symbol, generateSymbol().symbol, generateSymbol().symbol, generateSymbol().symbol],
      [generateSymbol().symbol, generateSymbol().symbol, generateSymbol().symbol, generateSymbol().symbol],
      [generateSymbol().symbol, generateSymbol().symbol, generateSymbol().symbol, generateSymbol().symbol]
    ];
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤—ã–∏–≥—Ä—ã—à–Ω—ã–µ –ª–∏–Ω–∏–∏ –¥–ª—è 4x4 –ø–æ–ª—è
    const winningLines = [];
    const winningSymbols = [];
    let totalMultiplier = 0;
    
    // –ì–æ—Ä–∏–∑–æ–Ω—Ç–∞–ª—å–Ω—ã–µ –ª–∏–Ω–∏–∏ (4 —Å—Ç—Ä–æ–∫–∏)
    for (let row = 0; row < 4; row++) {
      const symbol = reels[0][row];
      let consecutiveCount = 1;
      
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–¥—Ä—è–¥ –∏–¥—É—â–∏–µ —Å–∏–º–≤–æ–ª—ã
      for (let col = 1; col < 4; col++) {
        if (reels[col][row] === symbol) {
          consecutiveCount++;
        } else {
          break;
        }
      }
      
      // –ò–°–ü–†–ê–í–õ–ï–ù–û: –†–∞–∑–Ω—ã–µ –∫–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç—ã –¥–ª—è 3 –∏ 4 –≤ —Ä—è–¥
      if (consecutiveCount >= 3) {
        const symbolData = SLOT_SYMBOLS.find(s => s.symbol === symbol);
        if (symbolData) {
          const linePositions = [];
          for (let col = 0; col < consecutiveCount; col++) {
            linePositions.push(`${col}-${row}`);
          }
          winningLines.push(linePositions);
          winningSymbols.push(symbol);
          
          if (consecutiveCount === 3) {
            // –ò–°–ü–†–ê–í–õ–ï–ù–û: –¥–ª—è 3 –≤ —Ä—è–¥ –∫–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç –≤ 2 —Ä–∞–∑–∞ –º–µ–Ω—å—à–µ
            totalMultiplier += symbolData.payout / 2;
          } else if (consecutiveCount === 4) {
            // –î–ª—è 4 –≤ —Ä—è–¥ - –ø–æ–ª–Ω—ã–π –∫–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç —Å–∏–º–≤–æ–ª–∞
            totalMultiplier += symbolData.payout;
          }
        }
      }
    }
    
    // –í–µ—Ä—Ç–∏–∫–∞–ª—å–Ω—ã–µ –ª–∏–Ω–∏–∏ (4 –∫–æ–ª–æ–Ω–∫–∏)
    for (let col = 0; col < 4; col++) {
      const symbol = reels[col][0];
      let consecutiveCount = 1;
      
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–¥—Ä—è–¥ –∏–¥—É—â–∏–µ —Å–∏–º–≤–æ–ª—ã
      for (let row = 1; row < 4; row++) {
        if (reels[col][row] === symbol) {
          consecutiveCount++;
        } else {
          break;
        }
      }
      
      // –ò–°–ü–†–ê–í–õ–ï–ù–û: –†–∞–∑–Ω—ã–µ –∫–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç—ã –¥–ª—è 3 –∏ 4 –≤ —Ä—è–¥
      if (consecutiveCount >= 3) {
        const symbolData = SLOT_SYMBOLS.find(s => s.symbol === symbol);
        if (symbolData) {
          const linePositions = [];
          for (let row = 0; row < consecutiveCount; row++) {
            linePositions.push(`${col}-${row}`);
          }
          winningLines.push(linePositions);
          winningSymbols.push(symbol);
          
          if (consecutiveCount === 3) {
            // –ò–°–ü–†–ê–í–õ–ï–ù–û: –¥–ª—è 3 –≤ —Ä—è–¥ –∫–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç –≤ 2 —Ä–∞–∑–∞ –º–µ–Ω—å—à–µ
            totalMultiplier += symbolData.payout / 2;
          } else if (consecutiveCount === 4) {
            // –î–ª—è 4 –≤ —Ä—è–¥ - –ø–æ–ª–Ω—ã–π –∫–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç —Å–∏–º–≤–æ–ª–∞
            totalMultiplier += symbolData.payout;
          }
        }
      }
    }
    
    // –ì–ª–∞–≤–Ω–∞—è –¥–∏–∞–≥–æ–Ω–∞–ª—å (—Å–≤–µ—Ä—Ö—É-—Å–ª–µ–≤–∞ –≤–Ω–∏–∑-–≤–ø—Ä–∞–≤–æ)
    const diagonal1 = reels[0][0];
    let diagonal1Count = 1;
    for (let i = 1; i < 4; i++) {
      if (reels[i][i] === diagonal1) {
        diagonal1Count++;
      } else {
        break;
      }
    }
    
    if (diagonal1Count >= 3) {
      const symbolData = SLOT_SYMBOLS.find(s => s.symbol === diagonal1);
      if (symbolData) {
        const linePositions = [];
        for (let i = 0; i < diagonal1Count; i++) {
          linePositions.push(`${i}-${i}`);
        }
        winningLines.push(linePositions);
        winningSymbols.push(diagonal1);
        
        if (diagonal1Count === 3) {
          // –ò–°–ü–†–ê–í–õ–ï–ù–û: –¥–ª—è 3 –≤ —Ä—è–¥ –∫–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç –≤ 2 —Ä–∞–∑–∞ –º–µ–Ω—å—à–µ
          totalMultiplier += symbolData.payout / 2;
        } else if (diagonal1Count === 4) {
          // –î–ª—è 4 –≤ —Ä—è–¥ - –ø–æ–ª–Ω—ã–π –∫–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç —Å–∏–º–≤–æ–ª–∞
          totalMultiplier += symbolData.payout;
        }
      }
    }
    
    // –ü–æ–±–æ—á–Ω–∞—è –¥–∏–∞–≥–æ–Ω–∞–ª—å (—Å–≤–µ—Ä—Ö—É-—Å–ø—Ä–∞–≤–∞ –≤–Ω–∏–∑-–≤–ª–µ–≤–æ)
    const diagonal2 = reels[0][3];
    let diagonal2Count = 1;
    for (let i = 1; i < 4; i++) {
      if (reels[i][3 - i] === diagonal2) {
        diagonal2Count++;
      } else {
        break;
      }
    }
    
    if (diagonal2Count >= 3) {
      const symbolData = SLOT_SYMBOLS.find(s => s.symbol === diagonal2);
      if (symbolData) {
        const linePositions = [];
        for (let i = 0; i < diagonal2Count; i++) {
          linePositions.push(`${i}-${3 - i}`);
        }
        winningLines.push(linePositions);
        winningSymbols.push(diagonal2);
        
        if (diagonal2Count === 3) {
          // –ò–°–ü–†–ê–í–õ–ï–ù–û: –¥–ª—è 3 –≤ —Ä—è–¥ –∫–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç –≤ 2 —Ä–∞–∑–∞ –º–µ–Ω—å—à–µ
          totalMultiplier += symbolData.payout / 2;
        } else if (diagonal2Count === 4) {
          // –î–ª—è 4 –≤ —Ä—è–¥ - –ø–æ–ª–Ω—ã–π –∫–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç —Å–∏–º–≤–æ–ª–∞
          totalMultiplier += symbolData.payout;
        }
      }
    }
    
    // –û–ø—Ä–µ–¥–µ–ª—è–µ–º –≤—ã–∏–≥—Ä—ã—à
    const win = totalMultiplier > 0;
    const winAmount = win ? betAmount * totalMultiplier : 0;
    const profit = win ? winAmount - betAmount : -betAmount;
    
    // –ë–∞–ª–∞–Ω—Å –¥–æ –∏ –ø–æ—Å–ª–µ
    const balanceBefore = user.balance;
    const balanceAfter = balanceBefore + profit;
    
    // –û–±–Ω–æ–≤–ª—è–µ–º –±–∞–ª–∞–Ω—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    user.balance = balanceAfter;
    user.totalWagered += betAmount;
    if (win) {
      user.totalWon += winAmount;
    }
    user.lastActivity = new Date();
    await user.save({ session });
    
    // –°–æ–∑–¥–∞–µ–º –∑–∞–ø–∏—Å—å –æ–± –∏–≥—Ä–µ
    const game = new Game({
      user: user._id,
      gameType: 'slots',
      bet: betAmount,
      multiplier: totalMultiplier || 0,
      result: {
        reels,
        winningLines,
        winningSymbols,
        totalMultiplier,
        win
      },
      win,
      profit,
      balanceBefore,
      balanceAfter,
      status: 'completed'
    });
    
    await game.save({ session });
    
    // –°–æ–∑–¥–∞–µ–º —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—é –¥–ª—è —Å—Ç–∞–≤–∫–∏
    const betTransaction = new Transaction({
      user: user._id,
      type: 'bet',
      amount: -betAmount,
      game: game._id,
      description: '–°—Ç–∞–≤–∫–∞ –≤ –∏–≥—Ä–µ "–°–ª–æ—Ç—ã"',
      balanceBefore,
      balanceAfter: balanceBefore - betAmount
    });
    
    await betTransaction.save({ session });
    
    // –ï—Å–ª–∏ –±—ã–ª –≤—ã–∏–≥—Ä—ã—à, —Å–æ–∑–¥–∞–µ–º —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—é –¥–ª—è –≤—ã–∏–≥—Ä—ã—à–∞
    if (win) {
      const winTransaction = new Transaction({
        user: user._id,
        type: 'win',
        amount: winAmount,
        game: game._id,
        description: `–í—ã–∏–≥—Ä—ã—à –≤ –∏–≥—Ä–µ "–°–ª–æ—Ç—ã" (x${totalMultiplier})`,
        balanceBefore: balanceBefore - betAmount,
        balanceAfter
      });
      
      await winTransaction.save({ session });
    }
    
    await session.commitTransaction();
    
    // –í–æ–∑–≤—Ä–∞—â–∞–µ–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è –∫–ª–∏–µ–Ω—Ç–∞
    return {
      reels,
      winningLines,
      winningSymbols,
      win,
      profit,
      multiplier: totalMultiplier,
      balanceAfter
    };
  } catch (error) {
    await session.abortTransaction();
    throw error;
  } finally {
    session.endSession();
  }
}

  /**
   * –ù–∞—á–∞—Ç—å –∏–≥—Ä—É –≤ –º–∏–Ω—ã
   * @param {Object} userData - –î–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
   * @param {Object} gameData - –î–∞–Ω–Ω—ã–µ –∏–≥—Ä—ã
   * @returns {Object} - –†–µ–∑—É–ª—å—Ç–∞—Ç —Å–æ–∑–¥–∞–Ω–∏—è –∏–≥—Ä—ã
   */
  async playMines(userData, gameData) {
    const session = await mongoose.startSession();
    session.startTransaction();
    
    try {
      const { userId, telegramId } = userData;
      const { betAmount, minesCount = 5, clientSeed = null } = gameData;
      
      // –í–∞–ª–∏–¥–∞—Ü–∏—è –≤—Ö–æ–¥–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö
      if (betAmount <= 0) {
        throw new Error('–°—É–º–º–∞ —Å—Ç–∞–≤–∫–∏ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω–æ–π');
      }
      
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –º–∏–Ω –∏–∑ —Ä–∞–∑—Ä–µ—à–µ–Ω–Ω–æ–≥–æ —Å–ø–∏—Å–∫–∞
      const allowedMinesCount = [3, 5, 7, 9, 12, 15, 18, 21, 23];
      if (!allowedMinesCount.includes(Number(minesCount))) {
        throw new Error('–ù–µ–≤–µ—Ä–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –º–∏–Ω. –†–∞–∑—Ä–µ—à–µ–Ω–Ω—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è: 3, 5, 7, 9, 12, 15, 18, 21, 23');
      }
      
      // –ù–∞–π–¥–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
      const user = await User.findOne(
        userId ? { _id: userId } : { telegramId }
      ).session(session);
      
      if (!user) {
        throw new Error('–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω');
      }
      
      if (user.isBlocked) {
        throw new Error('–í–∞—à –∞–∫–∫–∞—É–Ω—Ç –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω');
      }
      
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –ª–∏ —Å—Ä–µ–¥—Å—Ç–≤
      if (user.balance < betAmount) {
        throw new Error('–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å—Ä–µ–¥—Å—Ç–≤');
      }
      
      // –ó–∞–≤–µ—Ä—à–∞–µ–º –≤—Å–µ –ø—Ä–µ–¥—ã–¥—É—â–∏–µ –∞–∫—Ç–∏–≤–Ω—ã–µ –∏–≥—Ä—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –º–∏–Ω—ã
      await Game.updateMany(
        { 
          user: user._id, 
          gameType: 'mines', 
          status: 'active' 
        },
        { 
          $set: { 
            status: 'completed',
            win: false,
            'result.win': false
          } 
        }
      ).session(session);
      
      // –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —Å–µ—Ä–≤–µ—Ä–Ω—ã–π —Å–∏–¥ –∏ —Ö–µ—à–∏—Ä—É–µ–º –µ–≥–æ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —á–µ—Å—Ç–Ω–æ—Å—Ç–∏
      const serverSeed = randomService.generateServerSeed();
      const serverSeedHashed = randomService.hashServerSeed(serverSeed);
      const realClientSeed = clientSeed || 'default';
      const nonce = randomService.generateNonce();
      
      // –°–æ–∑–¥–∞–µ–º –∏–≥—Ä–æ–≤–æ–µ –ø–æ–ª–µ 5x5
      const grid = Array(5).fill().map(() => Array(5).fill('gem'));
      
      // –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –ø–æ–∑–∏—Ü–∏–∏ –º–∏–Ω
      const minePositions = [];
      const allPositions = [];
      
      // –ó–∞–ø–æ–ª–Ω—è–µ–º –º–∞—Å—Å–∏–≤ –≤—Å–µ–º–∏ –≤–æ–∑–º–æ–∂–Ω—ã–º–∏ –ø–æ–∑–∏—Ü–∏—è–º–∏
      for (let i = 0; i < 5; i++) {
        for (let j = 0; j < 5; j++) {
          allPositions.push([i, j]);
        }
      }
      
      // –ü–µ—Ä–µ–º–µ—à–∏–≤–∞–µ–º –ø–æ–∑–∏—Ü–∏–∏ —Å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º –∫—Ä–∏–ø—Ç–æ–≥—Ä–∞—Ñ–∏—á–µ—Å–∫–∏ –Ω–∞–¥–µ–∂–Ω–æ–≥–æ —Ä–∞–Ω–¥–æ–º–∞
      for (let i = allPositions.length - 1; i > 0; i--) {
        const randomValue = randomService.generateRandomNumber(
          serverSeed, 
          realClientSeed, 
          nonce + i
        );
        const j = Math.floor(randomValue * (i + 1));
        [allPositions[i], allPositions[j]] = [allPositions[j], allPositions[i]];
      }
      
      // –í—ã–±–∏—Ä–∞–µ–º –ø–µ—Ä–≤—ã–µ N –ø–æ–∑–∏—Ü–∏–π –¥–ª—è –º–∏–Ω
      for (let i = 0; i < minesCount; i++) {
        const [row, col] = allPositions[i];
        grid[row][col] = 'mine';
        minePositions.push([row, col]);
      }
      
      // –ë–∞–ª–∞–Ω—Å –¥–æ –∏–≥—Ä—ã –∏ –ø–æ—Å–ª–µ —Å–ø–∏—Å–∞–Ω–∏—è —Å—Ç–∞–≤–∫–∏
      const balanceBefore = user.balance;
      const balanceAfter = balanceBefore - betAmount;
      
      // –û–±–Ω–æ–≤–ª—è–µ–º –±–∞–ª–∞–Ω—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (—Å–ø–∏—Å—ã–≤–∞–µ–º —Å—Ç–∞–≤–∫—É)
      user.balance = balanceAfter;
      user.totalWagered += betAmount;
      user.lastActivity = new Date();
      await user.save({ session });
      
      // –ü–æ–ª—É—á–∞–µ–º –Ω–∞—á–∞–ª—å–Ω—ã–π –º–Ω–æ–∂–∏—Ç–µ–ª—å –∏–∑ —Ç–∞–±–ª–∏—Ü—ã
      const initialMultiplier = payoutTables[minesCount][1] || 0.95;
      
      // –°–æ–∑–¥–∞–µ–º –∑–∞–ø–∏—Å—å –æ–± –∏–≥—Ä–µ
      const game = new Game({
        user: user._id,
        gameType: 'mines',
        bet: betAmount,
        multiplier: initialMultiplier, // –ò—Å–ø–æ–ª—å–∑—É–µ–º –∑–Ω–∞—á–µ–Ω–∏–µ –∏–∑ —Ç–∞–±–ª–∏—Ü—ã
        result: {
          grid,
          minesCount,
          minePositions,
          clickedCells: [],
          win: null,  // null = –∏–≥—Ä–∞ –≤ –ø—Ä–æ—Ü–µ—Å—Å–µ
          cashout: false
        },
        win: null,
        profit: -betAmount, // –ò–∑–Ω–∞—á–∞–ª—å–Ω–æ —Å–ø–∏—Å—ã–≤–∞–µ–º —Å—Ç–∞–≤–∫—É
        balanceBefore,
        balanceAfter,
        clientSeed: realClientSeed,
        serverSeed,
        serverSeedHashed,
        nonce,
        status: 'active',
        gameData: {
          minesCount,
          safeTotal: 25 - minesCount
        }
      });
      
      await game.save({ session });
      
      // –°–æ–∑–¥–∞–µ–º —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—é –¥–ª—è —Å—Ç–∞–≤–∫–∏
      const betTransaction = new Transaction({
        user: user._id,
        type: 'bet',
        amount: -betAmount,
        game: game._id,
        description: '–°—Ç–∞–≤–∫–∞ –≤ –∏–≥—Ä–µ "–ú–∏–Ω—ã"',
        balanceBefore,
        balanceAfter,
        status: 'completed'
      });
      
      await betTransaction.save({ session });
      
      await session.commitTransaction();
      
      // –í–æ–∑–≤—Ä–∞—â–∞–µ–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è –∫–ª–∏–µ–Ω—Ç–∞ (–±–µ–∑ —Ä–∞—Å–∫—Ä—ã—Ç–∏—è –ø–æ–∑–∏—Ü–∏–π –º–∏–Ω)
      return {
        gameId: game._id,
        betAmount,
        minesCount,
        serverSeedHashed,
        clientSeed: realClientSeed,
        nonce,
        balanceAfter
      };
    } catch (error) {
      await session.abortTransaction();
      throw error;
    } finally {
      session.endSession();
    }
  }

  /**
   * –ó–∞–≤–µ—Ä—à–∏—Ç—å –∏–≥—Ä—É –≤ –º–∏–Ω—ã (–æ—Ç–∫—Ä—ã—Ç—å —è—á–µ–π–∫—É –∏–ª–∏ –∑–∞–±—Ä–∞—Ç—å –≤—ã–∏–≥—Ä—ã—à)
   * @param {Object} userData - –î–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
   * @param {Object} gameData - –î–∞–Ω–Ω—ã–µ –∏–≥—Ä—ã
   * @returns {Object} - –†–µ–∑—É–ª—å—Ç–∞—Ç —Ö–æ–¥–∞
   */
  async completeMinesGame(userData, gameData) {
    const session = await mongoose.startSession();
    session.startTransaction();
    
    try {
      const { userId, telegramId } = userData;
      const { gameId, row, col, cashout } = gameData;
      
      // –ù–∞—Ö–æ–¥–∏–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
      const user = await User.findOne(
        userId ? { _id: userId } : { telegramId }
      ).session(session);
      
      if (!user) {
        throw new Error('–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω');
      }
      
      // –ù–∞—Ö–æ–¥–∏–º –∏–≥—Ä—É —Å –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ–π –ø—Ä–æ–µ–∫—Ü–∏–µ–π –≤—Å–µ—Ö –ø–æ–ª–µ–π
      const game = await Game.findOne({
        _id: gameId,
        user: user._id,
        status: 'active'
      }).session(session);
      
      if (!game) {
        throw new Error('–ò–≥—Ä–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –∏–ª–∏ —É–∂–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∞');
      }
      
      console.log('–û–¢–õ–ê–î–ö–ê –¢–ï–ö–£–©–ï–ì–û –°–û–°–¢–û–Ø–ù–ò–Ø –ò–ì–†–´:', 
                  `ID=${gameId}`, 
                  `clickedCells=${JSON.stringify(game.result.clickedCells)}`,
                  `minesCount=${game.result.minesCount}`);
      
      // –í–∞–∂–Ω—ã–µ –∫–æ–Ω—Å—Ç–∞–Ω—Ç—ã –¥–ª—è —Ä–∞—Å—á–µ—Ç–æ–≤
      const minesCount = game.result.minesCount;
      const safeTotal = 25 - minesCount;
      
      // –ù–û–í–´–ô –ü–û–î–•–û–î: –≥–∞—Ä–∞–Ω—Ç–∏—Ä—É–µ–º, —á—Ç–æ clickedCells –≤—Å–µ–≥–¥–∞ –º–∞—Å—Å–∏–≤
      // –∏ –ø—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –µ–≥–æ –∫ —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–æ–º—É —Ñ–æ—Ä–º–∞—Ç—É
      let clickedCells = [];
      if (Array.isArray(game.result.clickedCells)) {
        // –°–æ–∑–¥–∞–µ–º –≥–ª—É–±–æ–∫—É—é –∫–æ–ø–∏—é –º–∞—Å—Å–∏–≤–∞
        clickedCells = JSON.parse(JSON.stringify(game.result.clickedCells));
      }
      
      console.log('–û–¢–õ–ê–î–ö–ê –¢–ï–ö–£–©–ò–• –ö–õ–ò–ö–û–í:', JSON.stringify(clickedCells));
      
      // –ï—Å–ª–∏ –∏–≥—Ä–æ–∫ —Ö–æ—á–µ—Ç –∑–∞–±—Ä–∞—Ç—å –≤—ã–∏–≥—Ä—ã—à
      if (cashout) {
        // –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º –º–Ω–æ–∂–∏—Ç–µ–ª—å
        const revealedCount = clickedCells.length;
        
        if (revealedCount === 0) {
          throw new Error('–ù–µ–æ–±—Ö–æ–¥–∏–º–æ –æ—Ç–∫—Ä—ã—Ç—å —Ö–æ—Ç—è –±—ã –æ–¥–Ω—É —è—á–µ–π–∫—É');
        }
        
        const remainingSafe = safeTotal - revealedCount;
        
        if (remainingSafe <= 0) {
          throw new Error('–í—Å–µ –±–µ–∑–æ–ø–∞—Å–Ω—ã–µ —è—á–µ–π–∫–∏ —É–∂–µ –æ—Ç–∫—Ä—ã—Ç—ã');
        }
        
        // –ü–æ–ª—É—á–∞–µ–º –º–Ω–æ–∂–∏—Ç–µ–ª—å –∏–∑ –ø—Ä–µ–¥—Ä–∞—Å—Å—á–∏—Ç–∞–Ω–Ω–æ–π —Ç–∞–±–ª–∏—Ü—ã
        const multiplier = payoutTables[minesCount][revealedCount];
        
        if (!multiplier) {
          throw new Error('–û—à–∏–±–∫–∞ —Ä–∞—Å—á–µ—Ç–∞ –º–Ω–æ–∂–∏—Ç–µ–ª—è');
        }
        
        // –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º –≤—ã–∏–≥—Ä—ã—à
        const winAmount = game.bet * multiplier;
        const profit = winAmount - game.bet;
        
        console.log(`–ö–ï–®–ê–£–¢: —Å—Ç–∞–≤–∫–∞=${game.bet}, –º–Ω–æ–∂–∏—Ç–µ–ª—å=${multiplier}, –≤—ã–∏–≥—Ä—ã—à=${winAmount}, –ø—Ä–∏–±—ã–ª—å=${profit}`);
        
        // –ò—Å–ø–æ–ª—å–∑—É–µ–º –∞—Ç–æ–º–∞—Ä–Ω–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å –æ–ø–µ—Ä–∞—Ç–æ—Ä–∞–º–∏ MongoDB
        await Game.updateOne(
          { _id: gameId },
          { 
            $set: {
              multiplier: multiplier,
              'result.win': true,
              'result.cashout': true,
              win: true,
              profit: profit,
              balanceAfter: game.balanceBefore + profit,
              status: 'completed'
            }
          }
        ).session(session);
        
        // –û–±–Ω–æ–≤–ª—è–µ–º –±–∞–ª–∞–Ω—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∞—Ç–æ–º–∞—Ä–Ω–æ
        await User.updateOne(
          { _id: user._id },
          { 
            $inc: { 
              balance: winAmount,
              totalWon: winAmount
            },
            $set: { lastActivity: new Date() }
          }
        ).session(session);
        
        // –°–æ–∑–¥–∞–µ–º —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—é –¥–ª—è –≤—ã–∏–≥—Ä—ã—à–∞
        const winTransaction = new Transaction({
          user: user._id,
          type: 'win',
          amount: winAmount,
          game: game._id,
          description: `–í—ã–∏–≥—Ä—ã—à –≤ –∏–≥—Ä–µ "–ú–∏–Ω—ã" (x${multiplier.toFixed(2)})`,
          balanceBefore: user.balance,
          balanceAfter: user.balance + winAmount,
          status: 'completed'
        });
        
        await winTransaction.save({ session });
        
        // –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä—É–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ —Å –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–º–∏ –∑–Ω–∞—á–µ–Ω–∏—è–º–∏
        user.balance += winAmount;
        
        await session.commitTransaction();
        
        // –í–æ–∑–≤—Ä–∞—â–∞–µ–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è –∫–ª–∏–µ–Ω—Ç–∞
        return {
          win: true,
          multiplier,
          profit,
          balanceAfter: user.balance,
          clickedCells,
          grid: game.result.grid, // –î–æ–±–∞–≤–ª—è–µ–º —Å–µ—Ç–∫—É –≤ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –∫–µ—à–∞—É—Ç–∞
          serverSeedHashed: game.serverSeedHashed,
          clientSeed: game.clientSeed,
          nonce: game.nonce
        };
      } else {
        // –ò–≥—Ä–æ–∫ –∫–ª–∏–∫–Ω—É–ª –ø–æ —è—á–µ–π–∫–µ
        if (row === null || col === null || row === undefined || col === undefined) {
          throw new Error('–ù–µ —É–∫–∞–∑–∞–Ω—ã –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã —è—á–µ–π–∫–∏');
        }
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã –≤ –¥–æ–ø—É—Å—Ç–∏–º—ã—Ö –ø—Ä–µ–¥–µ–ª–∞—Ö
        if (row < 0 || row > 4 || col < 0 || col > 4) {
          throw new Error('–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–µ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã —è—á–µ–π–∫–∏');
        }
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —è—á–µ–π–∫–∞ –µ—â–µ –Ω–µ –±—ã–ª–∞ –æ—Ç–∫—Ä—ã—Ç–∞
        const cellAlreadyClicked = clickedCells.some(
          cell => cell[0] === row && cell[1] === col
        );
        
        if (cellAlreadyClicked) {
          throw new Error('–≠—Ç–∞ —è—á–µ–π–∫–∞ —É–∂–µ –æ—Ç–∫—Ä—ã—Ç–∞');
        }
        
        // –ü–æ–ª—É—á–∞–µ–º –∏–≥—Ä–æ–≤–æ–µ –ø–æ–ª–µ –∏ –ø–æ–∑–∏—Ü–∏–∏ –º–∏–Ω
        const grid = game.result.grid;
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –ø–æ–ø–∞–ª –ª–∏ –∏–≥—Ä–æ–∫ –Ω–∞ –º–∏–Ω—É
        if (grid[row][col] === 'mine') {
          // –ù–û–í–´–ô –ü–û–î–•–û–î: –î–æ–±–∞–≤–ª—è–µ–º —è—á–µ–π–∫—É –≤ —Å–ø–∏—Å–æ–∫ –æ—Ç–∫—Ä—ã—Ç—ã—Ö
          // –ò—Å–ø–æ–ª—å–∑—É–µ–º –æ–ø–µ—Ä–∞—Ç–æ—Ä $push –¥–ª—è –∞—Ç–æ–º–∞—Ä–Ω–æ–≥–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –º–∞—Å—Å–∏–≤–∞
          await Game.updateOne(
            { _id: gameId },
            { 
              $push: { 'result.clickedCells': [row, col] },
              $set: {
                'result.win': false,
                win: false,
                status: 'completed'
              }
            }
          ).session(session);
          
          await session.commitTransaction();
          
          // –î–æ–±–∞–≤–ª—è–µ–º –Ω–æ–≤—É—é —è—á–µ–π–∫—É –≤ –ª–æ–∫–∞–ª—å–Ω—ã–π –º–∞—Å—Å–∏–≤ –¥–ª—è –æ—Ç–≤–µ—Ç–∞
          clickedCells.push([row, col]);
          
          // –í–æ–∑–≤—Ä–∞—â–∞–µ–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è –∫–ª–∏–µ–Ω—Ç–∞
          return {
            win: false,
            clickedCells,
            grid,
            balanceAfter: user.balance
          };
        } else {
          // –ò–≥—Ä–æ–∫ –æ—Ç–∫—Ä—ã–ª –±–µ–∑–æ–ø–∞—Å–Ω—É—é —è—á–µ–π–∫—É
          // –î–æ–±–∞–≤–ª—è–µ–º —è—á–µ–π–∫—É –≤–æ –≤—Ä–µ–º–µ–Ω–Ω—ã–π –º–∞—Å—Å–∏–≤ –¥–ª—è —Ä–∞—Å—á–µ—Ç–æ–≤
          clickedCells.push([row, col]);
          
          const revealedCount = clickedCells.length;
          const remainingSafe = safeTotal - revealedCount;
          
          // –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –æ—Ç–∫—Ä—ã—Ç–∏–µ –≤—Å–µ—Ö –±–µ–∑–æ–ø–∞—Å–Ω—ã—Ö —è—á–µ–µ–∫
          const allSafeCellsRevealed = revealedCount === safeTotal;
          
          if (allSafeCellsRevealed) {
            // –ú–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–π –≤—ã–∏–≥—Ä—ã—à - –≤—Å–µ –±–µ–∑–æ–ø–∞—Å–Ω—ã–µ —è—á–µ–π–∫–∏ –æ—Ç–∫—Ä—ã—Ç—ã
            // –ü–æ–ª—É—á–∞–µ–º –º–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–π –º–Ω–æ–∂–∏—Ç–µ–ª—å –∏–∑ —Ç–∞–±–ª–∏—Ü—ã
            const maxMultiplier = payoutTables[minesCount][safeTotal - 1];
            
            if (!maxMultiplier) {
              throw new Error('–û—à–∏–±–∫–∞ —Ä–∞—Å—á–µ—Ç–∞ –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–≥–æ –º–Ω–æ–∂–∏—Ç–µ–ª—è');
            }
            
            const winAmount = game.bet * maxMultiplier;
            const profit = winAmount - game.bet;
            
            // –ù–û–í–´–ô –ü–û–î–•–û–î: –ê—Ç–æ–º–∞—Ä–Ω–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å $push –∏ $set
            await Game.updateOne(
              { _id: gameId },
              { 
                $push: { 'result.clickedCells': [row, col] },
                $set: {
                  multiplier: maxMultiplier,
                  'result.win': true,
                  'result.cashout': true,
                  win: true,
                  profit: profit,
                  balanceAfter: game.balanceBefore + profit,
                  status: 'completed'
                }
              }
            ).session(session);
            
            // –û–±–Ω–æ–≤–ª—è–µ–º –±–∞–ª–∞–Ω—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∞—Ç–æ–º–∞—Ä–Ω–æ
            await User.updateOne(
              { _id: user._id },
              { 
                $inc: { 
                  balance: winAmount,
                  totalWon: winAmount
                },
                $set: { lastActivity: new Date() }
              }
            ).session(session);
            
            // –°–æ–∑–¥–∞–µ–º —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—é –¥–ª—è –≤—ã–∏–≥—Ä—ã—à–∞
            const winTransaction = new Transaction({
              user: user._id,
              type: 'win',
              amount: winAmount,
              game: game._id,
              description: `–ú–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–π –≤—ã–∏–≥—Ä—ã—à –≤ –∏–≥—Ä–µ "–ú–∏–Ω—ã" (x${maxMultiplier.toFixed(2)})`,
              balanceBefore: user.balance,
              balanceAfter: user.balance + winAmount,
              status: 'completed'
            });
            
            await winTransaction.save({ session });
            
            // –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä—É–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ
            user.balance += winAmount;
            
            await session.commitTransaction();
            
            // –í–æ–∑–≤—Ä–∞—â–∞–µ–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è –∫–ª–∏–µ–Ω—Ç–∞
            return {
              win: true,
              multiplier: maxMultiplier,
              profit,
              balanceAfter: user.balance,
              clickedCells,
              grid, // –î–æ–±–∞–≤–ª—è–µ–º —Å–µ—Ç–∫—É
              maxWin: true,
              serverSeedHashed: game.serverSeedHashed,
              clientSeed: game.clientSeed,
              nonce: game.nonce
            };
          } else {
            // –ò–≥—Ä–∞ –ø—Ä–æ–¥–æ–ª–∂–∞–µ—Ç—Å—è
            
            // –ü–æ–ª—É—á–∞–µ–º –º–Ω–æ–∂–∏—Ç–µ–ª—å –∏–∑ —Ç–∞–±–ª–∏—Ü—ã –¥–ª—è —Ç–µ–∫—É—â–µ–≥–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –æ—Ç–∫—Ä—ã—Ç—ã—Ö —è—á–µ–µ–∫
            const multiplier = payoutTables[minesCount][revealedCount];
            
            if (!multiplier) {
              throw new Error('–û—à–∏–±–∫–∞ —Ä–∞—Å—á–µ—Ç–∞ –º–Ω–æ–∂–∏—Ç–µ–ª—è');
            }
            
            console.log(`–û–¢–õ–ê–î–ö–ê –ú–ù–û–ñ–ò–¢–ï–õ–Ø: minesCount=${minesCount}, revealedCount=${revealedCount}, multiplier=${multiplier}`);
            
            // –ù–û–í–´–ô –ü–û–î–•–û–î: –ò—Å–ø–æ–ª—å–∑—É–µ–º $push –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –≤ –º–∞—Å—Å–∏–≤ –∏ $set –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –º–Ω–æ–∂–∏—Ç–µ–ª—è
            await Game.updateOne(
              { _id: gameId },
              { 
                $push: { 'result.clickedCells': [row, col] },
                $set: { multiplier: multiplier }
              }
            ).session(session);
            
            await session.commitTransaction();
            
            // –í–æ–∑–≤—Ä–∞—â–∞–µ–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è –∫–ª–∏–µ–Ω—Ç–∞
            return {
              win: null, // null –æ–∑–Ω–∞—á–∞–µ—Ç, —á—Ç–æ –∏–≥—Ä–∞ –ø—Ä–æ–¥–æ–ª–∂–∞–µ—Ç—Å—è
              clickedCells, // –í–æ–∑–≤—Ä–∞—â–∞–µ–º –í–°–ï –æ—Ç–∫—Ä—ã—Ç—ã–µ —è—á–µ–π–∫–∏
              grid, // –î–æ–±–∞–≤–ª—è–µ–º —Å–µ—Ç–∫—É - –°–ê–ú–û–ï –í–ê–ñ–ù–û–ï –ò–ó–ú–ï–ù–ï–ù–ò–ï
              currentMultiplier: multiplier,
              possibleWin: game.bet * multiplier,
              balanceAfter: user.balance
            };
          }
        }
      }
    } catch (error) {
      await session.abortTransaction();
      throw error;
    } finally {
      session.endSession();
    }
  }
  
  /**
   * –ü–æ–ª—É—á–∏—Ç—å –∏—Å—Ç–æ—Ä–∏—é –∏–≥—Ä –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
   * @param {Object} userData - –î–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
   * @param {Object} params - –ü–∞—Ä–∞–º–µ—Ç—Ä—ã –∑–∞–ø—Ä–æ—Å–∞
   * @returns {Array} - –ò—Å—Ç–æ—Ä–∏—è –∏–≥—Ä
   */
  async getUserGames(userData, params = {}) {
    const { userId, telegramId } = userData;
    const { gameType, limit = 20, skip = 0, sort = '-createdAt' } = params;
    
    // –ù–∞–π–¥–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    const user = await User.findOne(
      userId ? { _id: userId } : { telegramId }
    );
    
    if (!user) {
      throw new Error('–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω');
    }
    
    // –°—Ç—Ä–æ–∏–º —É—Å–ª–æ–≤–∏—è –ø–æ–∏—Å–∫–∞
    const query = { user: user._id };
    if (gameType) {
      query.gameType = gameType;
    }
    
    // –ü–æ–ª—É—á–∞–µ–º –∏–≥—Ä—ã
    const games = await Game.find(query)
      .sort(sort)
      .skip(Number(skip))
      .limit(Number(limit));
    
    // –ü–æ–ª—É—á–∞–µ–º –æ–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∏–≥—Ä
    const total = await Game.countDocuments(query);
    
    return {
      games,
      total,
      currentPage: Math.floor(skip / limit) + 1,
      totalPages: Math.ceil(total / limit)
    };
  }
  
  /**
   * –ü–æ–ª—É—á–∏—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –∏–≥—Ä –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
   * @param {Object} userData - –î–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
   * @returns {Object} - –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∏–≥—Ä
   */
  async getUserGameStats(userData) {
    const { userId, telegramId } = userData;
    
    // –ù–∞–π–¥–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    const user = await User.findOne(
      userId ? { _id: userId } : { telegramId }
    );
    
    if (!user) {
      throw new Error('–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω');
    }
    
    // –ü–æ–ª—É—á–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
    const stats = await Game.aggregate([
      { $match: { user: user._id } },
      { $group: {
        _id: '$gameType',
        totalGames: { $sum: 1 },
        totalBet: { $sum: '$bet' },
        totalWin: { $sum: { $cond: ['$win', '$profit', 0] } },
        totalLoss: { $sum: { $cond: ['$win', 0, '$bet'] } },
        winCount: { $sum: { $cond: ['$win', 1, 0] } }
      }},
      { $project: {
        _id: 0,
        gameType: '$_id',
        totalGames: 1,
        totalBet: 1,
        totalWin: 1,
        totalLoss: 1,
        winCount: 1,
        winRate: { $divide: ['$winCount', '$totalGames'] }
      }}
    ]);
    
    // –û–±—â–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ –≤—Å–µ–º –∏–≥—Ä–∞–º
    const overall = {
      totalGames: 0,
      totalBet: 0,
      totalWin: 0,
      totalLoss: 0,
      winCount: 0,
      winRate: 0
    };
    
    stats.forEach(stat => {
      overall.totalGames += stat.totalGames;
      overall.totalBet += stat.totalBet;
      overall.totalWin += stat.totalWin;
      overall.totalLoss += stat.totalLoss;
      overall.winCount += stat.winCount;
    });
    
    if (overall.totalGames > 0) {
      overall.winRate = overall.winCount / overall.totalGames;
    }
    
    return {
      overall,
      byGameType: stats.reduce((acc, stat) => {
        acc[stat.gameType] = stat;
        return acc;
      }, {})
    };
  }
}

module.exports = new GameService();
