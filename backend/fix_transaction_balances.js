// –°–∫—Ä–∏–ø—Ç –¥–ª—è –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è –Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã—Ö balanceBefore –≤ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—è—Ö –≤—ã–∏–≥—Ä—ã—à–µ–π
const { User, Game, Transaction } = require('./src/models');
const mongoose = require('mongoose');

async function fixTransactionBalances() {
  try {
    await mongoose.connect(process.env.MONGODB_URI || 'mongodb://localhost:27017/greenlight');
    console.log('üîó –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ');
    
    console.log('\nüîß === –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï –ë–ê–õ–ê–ù–°–û–í –í –¢–†–ê–ù–ó–ê–ö–¶–ò–Ø–• ===');
    
    // –ù–∞–π—Ç–∏ –≤—Å–µ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏ –≤—ã–∏–≥—Ä—ã—à–µ–π —Å –Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã–º–∏ balanceBefore
    const winTransactions = await Transaction.find({ 
      type: 'win',
      description: { $regex: /–≤—ã–∏–≥—Ä—ã—à|–≤—ã–≤–æ–¥|–∞–≤—Ç–æ–≤—ã–≤–æ–¥/i }
    }).sort({ createdAt: 1 });
    
    console.log(`\n–ù–∞–π–¥–µ–Ω–æ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π –≤—ã–∏–≥—Ä—ã—à–µ–π: ${winTransactions.length}`);
    
    let fixedCount = 0;
    
    for (const transaction of winTransactions) {
      // –ü—Ä–∞–≤–∏–ª—å–Ω—ã–π balanceBefore = balanceAfter - amount
      const correctBalanceBefore = transaction.balanceAfter - transaction.amount;
      
      if (Math.abs(transaction.balanceBefore - correctBalanceBefore) > 0.01) {
        console.log(`\nüîß –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏ ${transaction._id}:`);
        console.log(`   –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: ${transaction.user}`);
        console.log(`   –°—É–º–º–∞: ${transaction.amount} USDT`);
        console.log(`   –ë—ã–ª–æ: ${transaction.balanceBefore} ‚Üí ${transaction.balanceAfter}`);
        console.log(`   –°—Ç–∞–ª–æ: ${correctBalanceBefore} ‚Üí ${transaction.balanceAfter}`);
        
        await Transaction.findByIdAndUpdate(transaction._id, {
          balanceBefore: correctBalanceBefore
        });
        
        fixedCount++;
      }
    }
    
    console.log(`\n‚úÖ –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–æ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π: ${fixedCount}`);
    
    // –¢–∞–∫–∂–µ –∏—Å–ø—Ä–∞–≤–∏–º —Å—Ç–∞–≤–æ—á–Ω—ã–µ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏, –∫–æ—Ç–æ—Ä—ã–µ –º–æ–≥—É—Ç –∏–º–µ—Ç—å –ø—Ä–æ–±–ª–µ–º—ã
    console.log('\nüîß –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç–∞–≤–æ—á–Ω—ã—Ö —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π...');
    
    const betTransactions = await Transaction.find({ 
      type: 'bet'
    }).sort({ createdAt: 1 });
    
    let betFixedCount = 0;
    
    for (const transaction of betTransactions) {
      // –ü—Ä–∞–≤–∏–ª—å–Ω—ã–π balanceAfter = balanceBefore + amount (amount –æ—Ç—Ä–∏—Ü–∞—Ç–µ–ª—å–Ω—ã–π –¥–ª—è —Å—Ç–∞–≤–æ–∫)
      const correctBalanceAfter = transaction.balanceBefore + transaction.amount;
      
      if (Math.abs(transaction.balanceAfter - correctBalanceAfter) > 0.01) {
        console.log(`\nüîß –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Å—Ç–∞–≤–æ—á–Ω–æ–π —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏ ${transaction._id}:`);
        console.log(`   –°—É–º–º–∞: ${transaction.amount} USDT`);
        console.log(`   –ë—ã–ª–æ: ${transaction.balanceBefore} ‚Üí ${transaction.balanceAfter}`);
        console.log(`   –°—Ç–∞–ª–æ: ${transaction.balanceBefore} ‚Üí ${correctBalanceAfter}`);
        
        await Transaction.findByIdAndUpdate(transaction._id, {
          balanceAfter: correctBalanceAfter
        });
        
        betFixedCount++;
      }
    }
    
    console.log(`‚úÖ –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–æ —Å—Ç–∞–≤–æ—á–Ω—ã—Ö —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π: ${betFixedCount}`);
    console.log('‚úÖ –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π –∑–∞–≤–µ—Ä—à–µ–Ω–æ');
    
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–∏:', error);
  } finally {
    mongoose.disconnect();
  }
}

fixTransactionBalances();