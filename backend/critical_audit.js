// –ö–†–ò–¢–ò–ß–ï–°–ö–ò–ô –ê–£–î–ò–¢ - –ü–û–õ–ù–ê–Ø –ü–†–û–í–ï–†–ö–ê –°–ò–°–¢–ï–ú–´
const { User, Game, Transaction, ReferralEarning } = require('./src/models');
const mongoose = require('mongoose');

async function criticalAudit() {
  try {
    await mongoose.connect(process.env.MONGODB_URI || 'mongodb://localhost:27017/greenlight');
    console.log('üîó –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ');
    
    console.log('\nüö® === –ö–†–ò–¢–ò–ß–ï–°–ö–ò–ô –ê–£–î–ò–¢ –°–ò–°–¢–ï–ú–´ === üö®');
    
    // –§–û–ö–£–° –ù–ê –ü–û–õ–¨–ó–û–í–ê–¢–ï–õ–ï aiuserv
    console.log('\n=== –î–ï–¢–ê–õ–¨–ù–´–ô –ê–ù–ê–õ–ò–ó –ü–û–õ–¨–ó–û–í–ê–¢–ï–õ–Ø aiuserv ===');
    const aiuserv = await User.findOne({ username: 'aiuserv' });
    
    if (aiuserv) {
      console.log('üë§ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å aiuserv –Ω–∞–π–¥–µ–Ω:');
      console.log(`   _id: ${aiuserv._id}`);
      console.log(`   telegramId: ${aiuserv.telegramId}`);
      console.log(`   –ë–∞–ª–∞–Ω—Å –≤ –º–æ–¥–µ–ª–∏: ${aiuserv.balance} USDT`);
      console.log(`   totalGames: ${aiuserv.totalGames}`);
      console.log(`   totalWagered: ${aiuserv.totalWagered}`);
      console.log(`   totalWon: ${aiuserv.totalWon}`);
      console.log(`   –†–µ—Ñ–µ—Ä–µ—Ä: ${aiuserv.referrer}`);
      console.log(`   –°–æ–∑–¥–∞–Ω: ${aiuserv.createdAt}`);
      console.log(`   –ü–æ—Å–ª–µ–¥–Ω—è—è –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å: ${aiuserv.lastActivity}`);
      
      // –í—Å–µ –∏–≥—Ä—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
      const games = await Game.find({ user: aiuserv._id }).sort({ createdAt: 1 });
      console.log(`\nüéÆ –í–°–ï –ò–ì–†–´ –ü–û–õ–¨–ó–û–í–ê–¢–ï–õ–Ø (${games.length} –∏–≥—Ä):`);
      
      let runningBalance = 0;
      for (const [index, game] of games.entries()) {
        const prevBalance = runningBalance;
        runningBalance = game.balanceAfter;
        
        console.log(`   ${index + 1}. ${game.createdAt.toISOString()} | ${game.gameType} | –°—Ç–∞–≤–∫–∞: ${game.bet} | –ü—Ä–∏–±—ã–ª—å: ${game.profit} | ${game.win ? 'WIN' : 'LOSS'}`);
        console.log(`      –ë–∞–ª–∞–Ω—Å: ${game.balanceBefore} ‚Üí ${game.balanceAfter} (—Ä–∞—Å—á–µ—Ç: ${prevBalance + game.profit})`);
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º –ª–æ–≥–∏–∫—É –±–∞–ª–∞–Ω—Å–∞
        if (Math.abs(game.balanceAfter - (game.balanceBefore + game.profit)) > 0.01) {
          console.log(`      ‚ùå –û–®–ò–ë–ö–ê –ë–ê–õ–ê–ù–°–ê –í –ò–ì–†–ï!`);
        }
      }
      
      // –í—Å–µ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
      const transactions = await Transaction.find({ user: aiuserv._id }).sort({ createdAt: 1 });
      console.log(`\nüí∞ –í–°–ï –¢–†–ê–ù–ó–ê–ö–¶–ò–ò –ü–û–õ–¨–ó–û–í–ê–¢–ï–õ–Ø (${transactions.length} —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π):`);
      
      let transactionSum = 0;
      for (const [index, tx] of transactions.entries()) {
        transactionSum += tx.amount;
        console.log(`   ${index + 1}. ${tx.createdAt.toISOString()} | ${tx.type} | ${tx.amount} USDT | –°—É–º–º–∞: ${transactionSum.toFixed(2)}`);
        console.log(`      –û–ø–∏—Å–∞–Ω–∏–µ: ${tx.description}`);
        console.log(`      –ë–∞–ª–∞–Ω—Å: ${tx.balanceBefore} ‚Üí ${tx.balanceAfter}`);
        
        if (tx.game) {
          const relatedGame = games.find(g => g._id.toString() === tx.game.toString());
          if (relatedGame) {
            console.log(`      –°–≤—è–∑–∞–Ω–Ω–∞—è –∏–≥—Ä–∞: ${relatedGame.gameType} ${relatedGame.bet} USDT`);
          }
        }
      }
      
      console.log(`\nüìä –ò–¢–û–ì–û–í–ê–Ø –ü–†–û–í–ï–†–ö–ê aiuserv:`);
      console.log(`   –ë–∞–ª–∞–Ω—Å –≤ User –º–æ–¥–µ–ª–∏: ${aiuserv.balance} USDT`);
      console.log(`   –°—É–º–º–∞ –≤—Å–µ—Ö —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π: ${transactionSum.toFixed(2)} USDT`);
      console.log(`   –ü–æ—Å–ª–µ–¥–Ω–∏–π balanceAfter –≤ –∏–≥—Ä–∞—Ö: ${games.length > 0 ? games[games.length - 1].balanceAfter : 'N/A'} USDT`);
      console.log(`   –†–∞–∑–Ω–∏—Ü–∞ (–º–æ–¥–µ–ª—å - —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏): ${(aiuserv.balance - transactionSum).toFixed(2)} USDT`);
      
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω—ã–µ –∫–æ–º–∏—Å—Å–∏–∏ —Å —ç—Ç–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
      const referalEarnings = await ReferralEarning.find({ referral: aiuserv._id });
      console.log(`\nü§ù –†–ï–§–ï–†–ê–õ–¨–ù–´–ï –ö–û–ú–ò–°–°–ò–ò –° –ü–û–õ–¨–ó–û–í–ê–¢–ï–õ–Ø:`);
      for (const earning of referalEarnings) {
        const partner = await User.findById(earning.partner);
        console.log(`   –ü–∞—Ä—Ç–Ω–µ—Ä: ${partner?.username} –ø–æ–ª—É—á–∏–ª ${earning.calculation.earnedAmount} USDT`);
        console.log(`   –ü—Ä–æ—Ü–µ–Ω—Ç: ${earning.calculation.commissionPercent}% —Å —Å—É–º–º—ã ${earning.calculation.baseAmount}`);
        console.log(`   –î–∞—Ç–∞: ${earning.createdAt.toISOString()}`);
      }
    }
    
    // –ü–†–û–í–ï–†–Ø–ï–ú –°–ò–°–¢–ï–ú–ù–´–ï –ü–†–û–ë–õ–ï–ú–´
    console.log('\n=== –°–ò–°–¢–ï–ú–ù–´–ï –ü–†–û–ë–õ–ï–ú–´ ===');
    
    // 1. –ü—Ä–æ–≤–µ—Ä—è–µ–º –ª–æ–≥–∏–∫—É —Å–æ–∑–¥–∞–Ω–∏—è –¥–µ–ø–æ–∑–∏—Ç–æ–≤
    console.log('\nüí≥ –ü–†–û–í–ï–†–ö–ê –î–ï–ü–û–ó–ò–¢–û–í:');
    const deposits = await Transaction.find({ type: 'deposit' }).sort({ createdAt: -1 }).limit(10);
    console.log(`–ù–∞–π–¥–µ–Ω–æ –¥–µ–ø–æ–∑–∏—Ç–æ–≤: ${deposits.length}`);
    
    for (const deposit of deposits) {
      const user = await User.findById(deposit.user);
      console.log(`   ${user?.username} | ${deposit.amount} USDT | ${deposit.createdAt.toISOString().split('T')[0]}`);
      console.log(`   –ë–∞–ª–∞–Ω—Å: ${deposit.balanceBefore} ‚Üí ${deposit.balanceAfter}`);
    }
    
    // 2. –ü—Ä–æ–≤–µ—Ä—è–µ–º –ª–æ–≥–∏–∫—É –Ω–∞—á–∞–ª—å–Ω—ã—Ö –±–∞–ª–∞–Ω—Å–æ–≤
    console.log('\nüè¶ –ê–ù–ê–õ–ò–ó –ù–ê–ß–ê–õ–¨–ù–´–• –ë–ê–õ–ê–ù–°–û–í:');
    const allUsers = await User.find({}).sort({ createdAt: 1 });
    
    for (const user of allUsers) {
      const firstTransaction = await Transaction.findOne({ user: user._id }).sort({ createdAt: 1 });
      const firstGame = await Game.findOne({ user: user._id }).sort({ createdAt: 1 });
      
      console.log(`\nüë§ ${user.username || user.telegramId}:`);
      console.log(`   –¢–µ–∫—É—â–∏–π –±–∞–ª–∞–Ω—Å: ${user.balance} USDT`);
      console.log(`   –ü–µ—Ä–≤–∞—è —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—è: ${firstTransaction ? `${firstTransaction.type} ${firstTransaction.amount} (${firstTransaction.balanceBefore} ‚Üí ${firstTransaction.balanceAfter})` : '–ù–ï–¢'}`);
      console.log(`   –ü–µ—Ä–≤–∞—è –∏–≥—Ä–∞: ${firstGame ? `${firstGame.gameType} ${firstGame.bet} (${firstGame.balanceBefore} ‚Üí ${firstGame.balanceAfter})` : '–ù–ï–¢'}`);
      
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º –æ—Ç–∫—É–¥–∞ –ø–æ—è–≤–∏–ª—Å—è –ø–µ—Ä–≤–æ–Ω–∞—á–∞–ª—å–Ω—ã–π –±–∞–ª–∞–Ω—Å
      if (firstGame && firstGame.balanceBefore > 0 && !firstTransaction) {
        console.log(`   ‚ùå –ü–†–û–ë–õ–ï–ú–ê: –ò–≥—Ä–∞ –Ω–∞—á–∞–ª–∞—Å—å —Å –±–∞–ª–∞–Ω—Å–∞ ${firstGame.balanceBefore} –±–µ–∑ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π!`);
      }
      
      if (firstTransaction && firstTransaction.balanceBefore > 0 && firstTransaction.type !== 'deposit') {
        console.log(`   ‚ùå –ü–†–û–ë–õ–ï–ú–ê: –ü–µ—Ä–≤–∞—è —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—è ${firstTransaction.type} –Ω–∞—á–∞–ª–∞—Å—å —Å –±–∞–ª–∞–Ω—Å–∞ ${firstTransaction.balanceBefore}!`);
      }
    }
    
    // 3. –ü–†–û–í–ï–†–Ø–ï–ú –õ–û–ì–ò–ö–£ –û–ë–ù–û–í–õ–ï–ù–ò–Ø –ë–ê–õ–ê–ù–°–û–í –í –ò–ì–†–ê–•
    console.log('\nüéÆ –ü–†–û–í–ï–†–ö–ê –õ–û–ì–ò–ö–ò –ò–ì–†:');
    
    // –ù–∞—Ö–æ–¥–∏–º –∏–≥—Ä—ã —Å –Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω–æ–π –ª–æ–≥–∏–∫–æ–π –±–∞–ª–∞–Ω—Å–∞
    const problematicGames = await Game.aggregate([
      {
        $addFields: {
          calculatedBalanceAfter: { $add: ['$balanceBefore', '$profit'] }
        }
      },
      {
        $match: {
          $expr: {
            $gt: [
              { $abs: { $subtract: ['$balanceAfter', '$calculatedBalanceAfter'] } },
              0.01
            ]
          }
        }
      },
      {
        $limit: 10
      }
    ]);
    
    console.log(`–ò–≥—Ä —Å –Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω–æ–π –ª–æ–≥–∏–∫–æ–π –±–∞–ª–∞–Ω—Å–∞: ${problematicGames.length}`);
    
    for (const game of problematicGames) {
      const user = await User.findById(game.user);
      console.log(`   ${user?.username} | ${game.gameType} | ${game.bet} USDT`);
      console.log(`   –î–æ–ª–∂–Ω–æ –±—ã—Ç—å: ${game.balanceBefore} + ${game.profit} = ${game.balanceBefore + game.profit}`);
      console.log(`   –§–∞–∫—Ç–∏—á–µ—Å–∫–∏: ${game.balanceAfter}`);
      console.log(`   –†–∞–∑–Ω–∏—Ü–∞: ${(game.balanceAfter - (game.balanceBefore + game.profit)).toFixed(4)}`);
    }
    
    // 4. –ü–†–û–í–ï–†–Ø–ï–ú –î–£–ë–õ–ò–†–û–í–ê–ù–ò–ï –¢–†–ê–ù–ó–ê–ö–¶–ò–ô
    console.log('\nüîÑ –ü–†–û–í–ï–†–ö–ê –î–£–ë–õ–ò–†–û–í–ê–ù–ò–Ø –¢–†–ê–ù–ó–ê–ö–¶–ò–ô:');
    
    const duplicateTransactions = await Transaction.aggregate([
      {
        $group: {
          _id: {
            user: '$user',
            type: '$type',
            amount: '$amount',
            game: '$game',
            createdAt: { $dateToString: { format: '%Y-%m-%d %H:%M:%S', date: '$createdAt' } }
          },
          count: { $sum: 1 },
          docs: { $push: '$_id' }
        }
      },
      {
        $match: {
          count: { $gt: 1 }
        }
      }
    ]);
    
    console.log(`–ì—Ä—É–ø–ø –¥—É–±–ª–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π: ${duplicateTransactions.length}`);
    
    for (const dup of duplicateTransactions.slice(0, 5)) {
      console.log(`   –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: ${dup._id.user} | ${dup._id.type} | ${dup._id.amount} USDT | –î—É–±–ª–µ–π: ${dup.count}`);
    }
    
    console.log('\n‚úÖ –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∏–π –∞—É–¥–∏—Ç –∑–∞–≤–µ—Ä—à–µ–Ω');
    
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∞—É–¥–∏—Ç–µ:', error);
  } finally {
    mongoose.disconnect();
  }
}

criticalAudit();