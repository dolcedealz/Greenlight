// frontend/src/components/games/crash/CrashGame.js
import React, { useState, useEffect, useCallback, useRef } from 'react';
import CrashGraph from './CrashGraph';
import CrashControls from './CrashControls';
import CrashBetsList from './CrashBetsList';
import CrashHistory from './CrashHistory';
import useTactileFeedback from '../../../hooks/useTactileFeedback';
import { gameApi } from '../../../services';
import '../../../styles/CrashGame.css';

const CrashGame = ({ 
  balance, 
  setBalance, 
  gameStats, 
  setGameResult, 
  setError 
}) => {
  // –î–æ–±–∞–≤–ª—è–µ–º —Ç–∞–∫—Ç–∏–ª—å–Ω—É—é –æ–±—Ä–∞—Ç–Ω—É—é —Å–≤—è–∑—å
  const { 
    gameActionFeedback, 
    importantActionFeedback, 
    criticalActionFeedback,
    gameWinFeedback,
    gameLoseFeedback 
  } = useTactileFeedback();

  // –ù–û–í–û–ï: –°–æ—Å—Ç–æ—è–Ω–∏–µ –∑–∞–≥—Ä—É–∑–∫–∏
  const [isInitializing, setIsInitializing] = useState(true);
  
  // –°–æ—Å—Ç–æ—è–Ω–∏–µ –∏–≥—Ä—ã
  const [gameState, setGameState] = useState('waiting'); // waiting, flying, crashed
  const [currentMultiplier, setCurrentMultiplier] = useState(1.00);
  const [timeToStart, setTimeToStart] = useState(7);
  const [crashPoint, setCrashPoint] = useState(0);
  const [loading, setLoading] = useState(false);
  
  // –°–æ—Å—Ç–æ—è–Ω–∏–µ —Å—Ç–∞–≤–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
  const [betAmount, setBetAmount] = useState(10);
  const [autoCashOut, setAutoCashOut] = useState(2.0);
  const [hasBet, setHasBet] = useState(false);
  const [cashedOut, setCashedOut] = useState(false);
  const [userBet, setUserBet] = useState(null);
  const [userCashOutMultiplier, setUserCashOutMultiplier] = useState(0);
  
  // –°—Ç–∞–≤–∫–∏ –¥—Ä—É–≥–∏—Ö –∏–≥—Ä–æ–∫–æ–≤ (–º–æ–∫ –¥–∞–Ω–Ω—ã–µ)
  const [activeBets, setActiveBets] = useState([]);
  const [cashedOutBets, setCashedOutBets] = useState([]);
  const [history, setHistory] = useState([]);
  
  // –ò–°–ü–†–ê–í–õ–ï–ù–û: –ë–æ–ª–µ–µ –Ω–∞–¥–µ–∂–Ω—ã–µ —Ä–µ—Ñ—ã –¥–ª—è —Ç–∞–π–º–µ—Ä–æ–≤
  const gameTimerRef = useRef(null);
  const multiplierTimerRef = useRef(null);
  const startTimeRef = useRef(null);
  const isCrashedRef = useRef(false);
  const roundIdRef = useRef(0);
  const lastMultiplierUpdateRef = useRef(0);
  const isGameActiveRef = useRef(false); // –ù–û–í–´–ô –†–ï–§ –¥–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ –∏–≥—Ä—ã
  
  // –ù–û–í–û–ï: –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Å –∑–∞–≥—Ä—É–∑–æ—á–Ω—ã–º —ç–∫—Ä–∞–Ω–æ–º
  useEffect(() => {
    const initializeGame = async () => {
      try {
        // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∑–∞–≥—Ä—É–∑–æ—á–Ω—ã–π —ç–∫—Ä–∞–Ω –º–∏–Ω–∏–º—É–º 2 —Å–µ–∫—É–Ω–¥—ã
        await new Promise(resolve => setTimeout(resolve, 2000));
        
        console.log('=== –ò–ù–ò–¶–ò–ê–õ–ò–ó–ê–¶–ò–Ø –ö–†–ê–® –ò–ì–†–´ ===');
        setIsInitializing(false);
        
        // –ó–∞–ø—É—Å–∫–∞–µ–º –ø–µ—Ä–≤—ã–π —Ä–∞—É–Ω–¥
        setTimeout(() => {
          startWaitingPeriod();
        }, 500);
        
      } catch (err) {
        console.error('–û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏:', err);
        setError('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∏–≥—Ä—ã');
        setIsInitializing(false);
      }
    };
    
    initializeGame();
    
    return () => {
      cleanupAllTimers();
    };
  }, []);
  
  // –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –∫—Ä–∞—à-–ø–æ–∏–Ω—Ç–∞ (—Ä–µ–∞–ª—å–Ω–∞—è –ª–æ–≥–∏–∫–∞ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –Ω–∞ —Å–µ—Ä–≤–µ—Ä–µ)
  const generateCrashPoint = useCallback(() => {
    const random = Math.random();
    if (random < 0.4) return 1.0 + Math.random() * 0.8; // 1.0-1.8x (40%)
    if (random < 0.7) return 1.8 + Math.random() * 1.2; // 1.8-3.0x (30%)
    if (random < 0.9) return 3.0 + Math.random() * 4.0; // 3.0-7.0x (20%)
    return 7.0 + Math.random() * 13.0; // 7.0-20.0x (10%)
  }, []);
  
  // –ò–°–ü–†–ê–í–õ–ï–ù–û: –ù–∞–¥–µ–∂–Ω–∞—è –æ—á–∏—Å—Ç–∫–∞ –≤—Å–µ—Ö —Ç–∞–π–º–µ—Ä–æ–≤
  const cleanupAllTimers = useCallback(() => {
    console.log('üßπ –û—á–∏—Å—Ç–∫–∞ –≤—Å–µ—Ö —Ç–∞–π–º–µ—Ä–æ–≤');
    
    if (gameTimerRef.current) {
      clearInterval(gameTimerRef.current);
      gameTimerRef.current = null;
    }
    if (multiplierTimerRef.current) {
      clearInterval(multiplierTimerRef.current);
      multiplierTimerRef.current = null;
    }
    
    isGameActiveRef.current = false;
  }, []);
  
  // –†–∞–∑–º–µ—â–µ–Ω–∏–µ —Å—Ç–∞–≤–∫–∏
  const placeBet = useCallback(async () => {
    if (gameState !== 'waiting' || hasBet || betAmount <= 0 || betAmount > balance || loading) {
      return;
    }
    
    try {
      setLoading(true);
      
      setBalance(prev => prev - betAmount);
      setHasBet(true);
      setCashedOut(false);
      setUserBet({
        amount: betAmount,
        autoCashOut: autoCashOut
      });
      
      setActiveBets(prev => [...prev, {
        id: Date.now(),
        amount: betAmount,
        autoCashOut: autoCashOut,
        username: '–í—ã',
        userId: 'current-user',
        isCurrentUser: true
      }]);
      
      setLoading(false);
      console.log('‚úÖ –°—Ç–∞–≤–∫–∞ —Ä–∞–∑–º–µ—â–µ–Ω–∞:', betAmount, 'USDT');
      
    } catch (err) {
      console.error('‚ùå –û—à–∏–±–∫–∞ —Ä–∞–∑–º–µ—â–µ–Ω–∏—è —Å—Ç–∞–≤–∫–∏:', err);
      setError(err.response?.data?.message || '–û—à–∏–±–∫–∞ —Ä–∞–∑–º–µ—â–µ–Ω–∏—è —Å—Ç–∞–≤–∫–∏');
      setLoading(false);
    }
  }, [gameState, hasBet, betAmount, balance, loading, autoCashOut, setBalance, setError]);
  
  // –ò–°–ü–†–ê–í–õ–ï–ù–û: –ö–µ—à–∞—É—Ç –∫–æ—Ç–æ—Ä—ã–π –ù–ï –ª–æ–º–∞–µ—Ç –∏–≥—Ä—É
  const cashOut = useCallback(async () => {
    if (gameState !== 'flying' || !hasBet || cashedOut || loading || isCrashedRef.current) {
      console.log('‚ùå –ö–µ—à–∞—É—Ç –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω:', { gameState, hasBet, cashedOut, loading, crashed: isCrashedRef.current });
      return;
    }
    
    try {
      setLoading(true);
      
      console.log('üí∞ –ö–ï–®–ê–£–¢: –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤—ã–≤–æ–¥–∏—Ç –ø—Ä–∏', currentMultiplier.toFixed(2), 'x');
      
      const winAmount = userBet.amount * currentMultiplier;
      setBalance(prev => prev + winAmount);
      setCashedOut(true);
      setUserCashOutMultiplier(currentMultiplier);
      
      // –£–±–∏—Ä–∞–µ–º —Å—Ç–∞–≤–∫—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ –∞–∫—Ç–∏–≤–Ω—ã—Ö
      setActiveBets(prev => prev.filter(bet => !bet.isCurrentUser));
      
      // –î–æ–±–∞–≤–ª—è–µ–º –≤ —Å–ø–∏—Å–æ–∫ –≤—ã–≤–µ–¥–µ–Ω–Ω—ã—Ö —Å—Ç–∞–≤–æ–∫
      setCashedOutBets(prev => [...prev, {
        id: Date.now(),
        amount: userBet.amount,
        autoCashOut: userBet.autoCashOut,
        username: '–í—ã',
        userId: 'current-user',
        isCurrentUser: true,
        cashOutMultiplier: currentMultiplier,
        winAmount: winAmount
      }]);
      
      setGameResult({
        win: true,
        amount: winAmount - userBet.amount,
        newBalance: balance + winAmount
      });
      
      // –í–∏–±—Ä–∞—Ü–∏—è –ø—Ä–∏ —É—Å–ø–µ—à–Ω–æ–º –∫–µ—à–∞—É—Ç–µ
      gameWinFeedback();
      
      setLoading(false);
      
      console.log('‚úÖ –ö–ï–®–ê–£–¢: –ó–∞–≤–µ—Ä—à–µ–Ω —É—Å–ø–µ—à–Ω–æ, –∏–≥—Ä–∞ –ø—Ä–æ–¥–æ–ª–∂–∞–µ—Ç—Å—è –¥–ª—è –≤—Å–µ—Ö –æ—Å—Ç–∞–ª—å–Ω—ã—Ö');
      
      // –ö–†–ò–¢–ò–ß–ï–°–ö–ò –í–ê–ñ–ù–û: –ù–ï –¢–†–û–ì–ê–ï–ú –ò–ì–†–û–í–´–ï –¢–ê–ô–ú–ï–†–´!
      // –ò–≥—Ä–∞ –¥–æ–ª–∂–Ω–∞ –ø—Ä–æ–¥–æ–ª–∂–∞—Ç—å—Å—è –Ω–µ–∑–∞–≤–∏—Å–∏–º–æ –æ—Ç –¥–µ–π—Å—Ç–≤–∏–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
      
    } catch (err) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –∫–µ—à–∞—É—Ç–∞:', err);
      setError(err.response?.data?.message || '–û—à–∏–±–∫–∞ –≤—ã–≤–æ–¥–∞ —Å—Ç–∞–≤–∫–∏');
      setLoading(false);
    }
  }, [gameState, hasBet, cashedOut, loading, currentMultiplier, userBet, balance, setBalance, setError, setGameResult, gameWinFeedback]);
  
  // –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–π –∫–µ—à–∞—É—Ç
  useEffect(() => {
    if (gameState === 'flying' && 
        hasBet && 
        !cashedOut && 
        !isCrashedRef.current &&
        userBet?.autoCashOut > 0 && 
        currentMultiplier >= userBet.autoCashOut) {
      console.log('ü§ñ –ê–í–¢–û–ö–ï–®–ê–£–¢: —Å—Ä–∞–±–æ—Ç–∞–ª –ø—Ä–∏', currentMultiplier.toFixed(2), 'x');
      cashOut();
    }
  }, [gameState, hasBet, cashedOut, userBet, currentMultiplier, cashOut]);
  
  // –ò–°–ü–†–ê–í–õ–ï–ù–û: –ü–µ—Ä–∏–æ–¥ –æ–∂–∏–¥–∞–Ω–∏—è —Å —Ç–æ—á–Ω—ã–º —Ç–∞–π–º–∏–Ω–≥–æ–º
  const startWaitingPeriod = useCallback(() => {
    console.log('‚è≥ === –ù–ê–ß–ê–õ–û –ü–ï–†–ò–û–î–ê –û–ñ–ò–î–ê–ù–ò–Ø ===');
    
    // –°–±—Ä–∞—Å—ã–≤–∞–µ–º –≤—Å–µ —Å–æ—Å—Ç–æ—è–Ω–∏—è
    cleanupAllTimers();
    setGameState('waiting');
    setTimeToStart(7); // –¢–û–ß–ù–û 7 —Å–µ–∫—É–Ω–¥
    setCurrentMultiplier(1.00);
    isCrashedRef.current = false;
    isGameActiveRef.current = false;
    
    // –û—á–∏—â–∞–µ–º –¥–∞–Ω–Ω—ã–µ –ø—Ä–µ–¥—ã–¥—É—â–µ–≥–æ —Ä–∞—É–Ω–¥–∞
    setHasBet(false);
    setCashedOut(false);
    setUserBet(null);
    setUserCashOutMultiplier(0);
    setActiveBets([]);
    setCashedOutBets([]);
    
    // –ò–°–ü–†–ê–í–õ–ï–ù–û: –¢–æ—á–Ω—ã–π —Ç–∞–π–º–µ—Ä –æ–±—Ä–∞—Ç–Ω–æ–≥–æ –æ—Ç—Å—á–µ—Ç–∞
    let countdown = 7;
    setTimeToStart(countdown);
    
    gameTimerRef.current = setInterval(() => {
      countdown -= 1;
      setTimeToStart(countdown);
      
      console.log('‚è∞ –û–±—Ä–∞—Ç–Ω—ã–π –æ—Ç—Å—á–µ—Ç:', countdown);
      
      if (countdown <= 0) {
        clearInterval(gameTimerRef.current);
        gameTimerRef.current = null;
        
        console.log('üöÄ –í—Ä–µ–º—è –æ–∂–∏–¥–∞–Ω–∏—è –∏—Å—Ç–µ–∫–ª–æ, –∑–∞–ø—É—Å–∫–∞–µ–º –ø–æ–ª–µ—Ç');
        startFlyingPhase();
      }
    }, 1000); // –¢–û–ß–ù–û 1 —Å–µ–∫—É–Ω–¥–∞
    
  }, [cleanupAllTimers]);
  
  // –ò–°–ü–†–ê–í–õ–ï–ù–û: –§–∞–∑–∞ –ø–æ–ª–µ—Ç–∞ —Å –ø—Ä–∞–≤–∏–ª—å–Ω–æ–π —Å–∫–æ—Ä–æ—Å—Ç—å—é
  const startFlyingPhase = useCallback(() => {
    console.log('üöÄ === –ù–ê–ß–ê–õ–û –§–ê–ó–´ –ü–û–õ–ï–¢–ê ===');
    
    // –û—á–∏—â–∞–µ–º —Ç–∞–π–º–µ—Ä—ã –æ–∂–∏–¥–∞–Ω–∏—è
    if (gameTimerRef.current) {
      clearInterval(gameTimerRef.current);
      gameTimerRef.current = null;
    }
    
    // –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –Ω–æ–≤—ã–π –∫—Ä–∞—à-–ø–æ–∏–Ω—Ç
    const newCrashPoint = generateCrashPoint();
    setCrashPoint(newCrashPoint);
    roundIdRef.current += 1;
    
    console.log('üéØ –ù–æ–≤—ã–π –∫—Ä–∞—à-–ø–æ–∏–Ω—Ç:', newCrashPoint.toFixed(2), 'x');
    console.log('üÜî ID —Ä–∞—É–Ω–¥–∞:', roundIdRef.current);
    
    // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –ø–æ–ª–µ—Ç–∞
    setGameState('flying');
    setCurrentMultiplier(1.00);
    startTimeRef.current = Date.now();
    lastMultiplierUpdateRef.current = Date.now();
    isCrashedRef.current = false;
    isGameActiveRef.current = true;
    
    // –ò–°–ü–†–ê–í–õ–ï–ù–û: –ó–∞–º–µ–¥–ª–µ–Ω–Ω–∞—è –ª–æ–≥–∏–∫–∞ —Ä–æ—Å—Ç–∞ –º–Ω–æ–∂–∏—Ç–µ–ª—è
    multiplierTimerRef.current = setInterval(() => {
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –∏–≥—Ä–∞ –≤—Å–µ –µ—â–µ –∞–∫—Ç–∏–≤–Ω–∞
      if (!isGameActiveRef.current || isCrashedRef.current) {
        return;
      }
      
      const now = Date.now();
      const totalElapsed = (now - startTimeRef.current) / 1000; // –û–±—â–µ–µ –≤—Ä–µ–º—è —Å –Ω–∞—á–∞–ª–∞
      const deltaTime = (now - lastMultiplierUpdateRef.current) / 1000; // –í—Ä–µ–º—è —Å –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è
      lastMultiplierUpdateRef.current = now;
      
      // –ó–ê–ú–ï–î–õ–ï–ù–ù–ê–Ø –§–û–†–ú–£–õ–ê: –ë–æ–ª–µ–µ –º–µ–¥–ª–µ–Ω–Ω—ã–π —Ä–æ—Å—Ç –º–Ω–æ–∂–∏—Ç–µ–ª—è
      const baseSpeed = 0.06; // –£–ú–ï–ù–¨–®–ï–ù–û —Å 0.1 –¥–æ 0.06 (–Ω–∞ 40% –º–µ–¥–ª–µ–Ω–Ω–µ–µ)
      const acceleration = 0.03; // –£–ú–ï–ù–¨–®–ï–ù–û —Å 0.05 –¥–æ 0.03 (–Ω–∞ 40% –º–µ–¥–ª–µ–Ω–Ω–µ–µ)
      const speedIncrease = baseSpeed + (acceleration * totalElapsed);
      
      // –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º –Ω–æ–≤—ã–π –º–Ω–æ–∂–∏—Ç–µ–ª—å
      const multiplierIncrease = speedIncrease * deltaTime;
      
      setCurrentMultiplier(prevMultiplier => {
        const newMultiplier = prevMultiplier + multiplierIncrease;
        
        // –ü–†–û–í–ï–†–Ø–ï–ú –ö–†–ê–®
        if (newMultiplier >= newCrashPoint) {
          console.log('üí• === –ö–†–ê–® –ü–†–ò', newCrashPoint.toFixed(2), 'x ===');
          
          // –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∏–≥—Ä—É
          isCrashedRef.current = true;
          isGameActiveRef.current = false;
          
          clearInterval(multiplierTimerRef.current);
          multiplierTimerRef.current = null;
          
          // –ü–µ—Ä–µ—Ö–æ–¥–∏–º –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –∫—Ä–∞—Ö–∞
          setGameState('crashed');
          
          // –î–æ–±–∞–≤–ª—è–µ–º –≤ –∏—Å—Ç–æ—Ä–∏—é
          setHistory(prev => [{
            roundId: roundIdRef.current,
            crashPoint: newCrashPoint,
            timestamp: Date.now(),
            totalBets: Math.floor(Math.random() * 15) + 1,
            totalAmount: Math.random() * 800 + 100
          }, ...prev.slice(0, 19)]);
          
          // –ï—Å–ª–∏ —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –±—ã–ª–∞ —Å—Ç–∞–≤–∫–∞ –∏ –æ–Ω –Ω–µ –≤—ã–≤–µ–ª
          if (hasBet && !cashedOut) {
            gameLoseFeedback(); // –í–∏–±—Ä–∞—Ü–∏—è –ø—Ä–∏ –ø—Ä–æ–∏–≥—Ä—ã—à–µ
            setGameResult({
              win: false,
              amount: userBet.amount,
              newBalance: balance
            });
          }
          
          // –¢–û–ß–ù–û —á–µ—Ä–µ–∑ 3 —Å–µ–∫—É–Ω–¥—ã –∑–∞–ø—É—Å–∫–∞–µ–º –Ω–æ–≤—ã–π –ø–µ—Ä–∏–æ–¥ –æ–∂–∏–¥–∞–Ω–∏—è
          setTimeout(() => {
            console.log('üîÑ –ü–µ—Ä–µ—Ö–æ–¥–∏–º –∫ –Ω–æ–≤–æ–º—É —Ä–∞—É–Ω–¥—É');
            startWaitingPeriod();
          }, 3000); // –¢–û–ß–ù–û 3 —Å–µ–∫—É–Ω–¥—ã
          
          return newCrashPoint; // –í–æ–∑–≤—Ä–∞—â–∞–µ–º —Ç–æ—á–Ω—ã–π –∫—Ä–∞—à-–ø–æ–∏–Ω—Ç
        } else {
          // –ú–Ω–æ–∂–∏—Ç–µ–ª—å –ø—Ä–æ–¥–æ–ª–∂–∞–µ—Ç —Ä–∞—Å—Ç–∏
          return newMultiplier;
        }
      });
    }, 80); // –ó–ê–ú–ï–î–õ–ï–ù–û —Å 50ms –¥–æ 80ms (–Ω–∞ 60% –º–µ–¥–ª–µ–Ω–Ω–µ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è)
    
  }, [generateCrashPoint, hasBet, cashedOut, userBet, balance, setGameResult, startWaitingPeriod, gameLoseFeedback]);
  
  // –ü–æ–ª—É—á–µ–Ω–∏–µ —Ç–µ–∫—Å—Ç–∞ –¥–ª—è –≥–ª–∞–≤–Ω–æ–π –∫–Ω–æ–ø–∫–∏
  const getMainButtonText = () => {
    if (loading) return '–ó–∞–≥—Ä—É–∑–∫–∞...';
    
    switch (gameState) {
      case 'waiting':
        if (hasBet) return `–°—Ç–∞–≤–∫–∞ —Ä–∞–∑–º–µ—â–µ–Ω–∞ (${userBet?.amount} USDT)`;
        return `–ü–æ—Å—Ç–∞–≤–∏—Ç—å ${betAmount} USDT`;
      case 'flying':
        if (!hasBet) return '–°—Ç–∞–≤–∫–∞ –Ω–µ —Ä–∞–∑–º–µ—â–µ–Ω–∞';
        if (cashedOut) return `–í—ã–≤–µ–¥–µ–Ω–æ –ø—Ä–∏ ${userCashOutMultiplier.toFixed(2)}x`;
        return `–í—ã–≤–µ—Å—Ç–∏ (${(userBet.amount * currentMultiplier).toFixed(2)} USDT)`;
      case 'crashed':
        if (hasBet && !cashedOut) return '–ü—Ä–æ–∏–≥—Ä—ã—à';
        if (hasBet && cashedOut) return `–í—ã–∏–≥—Ä—ã—à ${userCashOutMultiplier.toFixed(2)}x`;
        return '–†–∞—É–Ω–¥ –∑–∞–≤–µ—Ä—à–µ–Ω';
      default:
        return '–û—à–∏–±–∫–∞ —Å–æ—Å—Ç–æ—è–Ω–∏—è';
    }
  };
  
  // –ü–æ–ª—É—á–µ–Ω–∏–µ –∫–ª–∞—Å—Å–∞ –¥–ª—è –≥–ª–∞–≤–Ω–æ–π –∫–Ω–æ–ø–∫–∏
  const getMainButtonClass = () => {
    if (loading) return 'loading';
    
    switch (gameState) {
      case 'waiting':
        if (hasBet) return 'placed';
        return 'bet';
      case 'flying':
        if (!hasBet) return 'disabled';
        if (cashedOut) return 'won';
        return 'cashout';
      case 'crashed':
        if (hasBet && !cashedOut) return 'lost';
        if (hasBet && cashedOut) return 'won';
        return 'disabled';
      default:
        return 'disabled';
    }
  };
  
  // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≥–ª–∞–≤–Ω–æ–π –∫–Ω–æ–ø–∫–∏ —Å —Ç–∞–∫—Ç–∏–ª—å–Ω–æ–π –æ–±—Ä–∞—Ç–Ω–æ–π —Å–≤—è–∑—å—é
  const handleMainButtonClick = () => {
    if (loading) return;
    
    switch (gameState) {
      case 'waiting':
        if (!hasBet) {
          gameActionFeedback(); // –í–∏–±—Ä–∞—Ü–∏—è –ø—Ä–∏ —Ä–∞–∑–º–µ—â–µ–Ω–∏–∏ —Å—Ç–∞–≤–∫–∏
          placeBet();
        }
        break;
      case 'flying':
        if (hasBet && !cashedOut) {
          criticalActionFeedback(); // –°–∏–ª—å–Ω–∞—è –≤–∏–±—Ä–∞—Ü–∏—è –ø—Ä–∏ –∫–µ—à–∞—É—Ç–µ
          cashOut();
        }
        break;
      default:
        break;
    }
  };
  
  // –ù–û–í–û–ï: –ó–∞–≥—Ä—É–∑–æ—á–Ω—ã–π —ç–∫—Ä–∞–Ω
  if (isInitializing) {
    return (
      <div className="crash-loading-screen">
        <div className="crash-loading-content">
          <div className="greenlight-logo">
            <div className="logo-icon">üöÄ</div>
            <div className="logo-text">Greenlight</div>
            <div className="logo-subtitle">Crash Game</div>
          </div>
          <div className="loading-spinner">
            <div className="spinner-ring"></div>
            <div className="spinner-ring"></div>
            <div className="spinner-ring"></div>
          </div>
          <div className="loading-text">–ó–∞–≥—Ä—É–∑–∫–∞ –∏–≥—Ä—ã...</div>
        </div>
      </div>
    );
  }
  
  return (
    <div className={`crash-game ${loading ? 'loading' : ''}`} data-game-state={gameState}>
      {/* –ì—Ä–∞—Ñ–∏–∫ */}
      <CrashGraph 
        multiplier={currentMultiplier}
        gameState={gameState}
        crashPoint={crashPoint}
        timeToStart={timeToStart}
        roundId={roundIdRef.current}
      />
      
      {/* –ì–ª–∞–≤–Ω–∞—è –∫–Ω–æ–ø–∫–∞ –¥–µ–π—Å—Ç–≤–∏—è —Å —Ç–∞–∫—Ç–∏–ª—å–Ω–æ–π –æ–±—Ä–∞—Ç–Ω–æ–π —Å–≤—è–∑—å—é */}
      <button 
        className={`crash-main-action-btn ${getMainButtonClass()}`}
        onClick={handleMainButtonClick}
        disabled={loading || (gameState === 'waiting' && hasBet) || (gameState === 'flying' && (!hasBet || cashedOut)) || gameState === 'crashed'}
      >
        {getMainButtonText()}
      </button>
      
      {/* –ü–∞–Ω–µ–ª—å —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è */}
      <CrashControls 
        betAmount={betAmount}
        setBetAmount={setBetAmount}
        autoCashOut={autoCashOut}
        setAutoCashOut={setAutoCashOut}
        balance={balance}
        gameState={gameState}
        hasBet={hasBet}
        cashedOut={cashedOut}
        userBet={userBet}
        userCashOutMultiplier={userCashOutMultiplier}
        loading={loading}
        currentMultiplier={currentMultiplier}
      />
      
      {/* –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏–æ–Ω–Ω—ã–µ –ø–∞–Ω–µ–ª–∏ */}
      <div className="crash-info-panels">
        <CrashBetsList 
          activeBets={activeBets}
          cashedOutBets={cashedOutBets}
          gameState={gameState}
        />
        
        <CrashHistory 
          history={history}
        />
      </div>
    </div>
  );
};

export default CrashGame;
