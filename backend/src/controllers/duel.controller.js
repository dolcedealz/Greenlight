const duelService = require('../services/duel.service');

class DuelController {
  
  // –°–æ–∑–¥–∞–Ω–∏–µ –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏—è –Ω–∞ –¥—É—ç–ª—å (–¥–ª—è inline —Ä–µ–∂–∏–º–∞)
  async createInvitation(req, res) {
    try {
      
      const { targetUsername, gameType, format = 'bo1', amount } = req.body;
      const challengerId = req.user.id;
      const challengerUsername = req.user.username;
      
      const invitation = await duelService.createInvitation({
        challengerId,
        challengerUsername,
        targetUsername,
        gameType,
        format,
        amount,
        metadata: {
          source: 'api',
          userAgent: req.headers['user-agent'],
          ip: req.ip
        }
      });
      
      res.json({
        success: true,
        data: {
          inviteId: invitation.inviteId,
          invitation
        }
      });
      
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏—è:', error);
      res.status(400).json({
        success: false,
        message: error.message
      });
    }
  }
  
  // –ü—Ä–∏–Ω—è—Ç–∏–µ –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏—è
  async acceptInvitation(req, res) {
    try {
      const { inviteId } = req.params;
      const acceptorId = req.user.id;
      const acceptorUsername = req.user.username;
      
      const result = await duelService.acceptInvitation(inviteId, acceptorId, acceptorUsername);
      
      res.json({
        success: true,
        data: {
          duel: result.duel,
          sessionId: result.duel.sessionId
        }
      });
      
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏–Ω—è—Ç–∏—è –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏—è:', error);
      res.status(400).json({
        success: false,
        message: error.message
      });
    }
  }
  
  // –û—Ç–∫–ª–æ–Ω–µ–Ω–∏–µ –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏—è
  async declineInvitation(req, res) {
    try {
      const { inviteId } = req.params;
      const userId = req.user.id;
      
      const DuelInvitation = require('../models/duel-invitation.model');
      
      // –ù–∞—Ö–æ–¥–∏–º –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏–µ –∏ –æ–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å
      const invitation = await DuelInvitation.findOne({ inviteId });
      
      if (!invitation) {
        return res.status(404).json({
          success: false,
          message: '–ü—Ä–∏–≥–ª–∞—à–µ–Ω–∏–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ'
        });
      }
      
      if (!invitation.canAccept(userId, req.user.username)) {
        return res.status(403).json({
          success: false,
          message: '–í—ã –Ω–µ –º–æ–∂–µ—Ç–µ –æ—Ç–∫–ª–æ–Ω–∏—Ç—å —ç—Ç–æ –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏–µ'
        });
      }
      
      invitation.status = 'declined';
      await invitation.save();
      
      res.json({
        success: true,
        message: '–ü—Ä–∏–≥–ª–∞—à–µ–Ω–∏–µ –æ—Ç–∫–ª–æ–Ω–µ–Ω–æ'
      });
      
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ –æ—Ç–∫–ª–æ–Ω–µ–Ω–∏—è –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏—è:', error);
      res.status(500).json({
        success: false,
        message: '–í–Ω—É—Ç—Ä–µ–Ω–Ω—è—è –æ—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞'
      });
    }
  }
  
  // –°–æ–∑–¥–∞–Ω–∏–µ –¥—É—ç–ª–∏ –Ω–∞–ø—Ä—è–º—É—é (–¥–ª—è –≥—Ä—É–ø–ø–æ–≤—ã—Ö —á–∞—Ç–æ–≤)
  async createDuel(req, res) {
    try {
      
      const {
        challengerId,
        challengerUsername,
        opponentId,
        opponentUsername,
        gameType,
        format = 'bo1',
        amount,
        chatId,
        chatType,
        messageId,
        winsRequired
      } = req.body;
      
      // –ò—Å–ø–æ–ª—å–∑—É–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ –∑–∞–ø—Ä–æ—Å–∞ (–¥–ª—è Telegram –±–æ—Ç–∞) –∏–ª–∏ –∏–∑ auth middleware
      const actualChallengerId = challengerId || req.user?.id;
      const actualChallengerUsername = challengerUsername || req.user?.username;
      
      if (!actualChallengerId || !actualChallengerUsername) {
        return res.status(400).json({
          success: false,
          message: '–û—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç –¥–∞–Ω–Ω—ã–µ –∏–Ω–∏—Ü–∏–∞—Ç–æ—Ä–∞ –¥—É—ç–ª–∏'
        });
      }
      
      const duel = await duelService.createDuel({
        challengerId: actualChallengerId,
        challengerUsername: actualChallengerUsername,
        opponentId,
        opponentUsername,
        gameType,
        format,
        amount,
        chatId,
        chatType,
        messageId
      });
      
      res.json({
        success: true,
        data: {
          duel,
          sessionId: duel.sessionId
        }
      });
      
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –¥—É—ç–ª–∏:', error);
      res.status(400).json({
        success: false,
        message: error.message
      });
    }
  }
  
  // –ü—Ä–∏—Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ –∫ –æ—Ç–∫—Ä—ã—Ç–æ–π –¥—É—ç–ª–∏
  async joinDuel(req, res) {
    try {
      const { sessionId } = req.params;
      const playerId = req.user.id;
      const playerUsername = req.user.username;
      
      // –ù–∞—Ö–æ–¥–∏–º –¥—É—ç–ª—å –ø–æ sessionId
      const existingDuel = await duelService.getDuel(sessionId);
      
      const duel = await duelService.joinDuel(existingDuel.id, playerId, playerUsername);
      
      res.json({
        success: true,
        data: { duel }
      });
      
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏—Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è –∫ –¥—É—ç–ª–∏:', error);
      res.status(400).json({
        success: false,
        message: error.message
      });
    }
  }
  
  // –ù–∞—á–∞–ª–æ –∏–≥—Ä—ã
  async startGame(req, res) {
    try {
      const { sessionId } = req.params;
      const playerId = req.user.id;
      
      const result = await duelService.startGame(sessionId, playerId);
      
      res.json({
        success: true,
        data: result
      });
      
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ –Ω–∞—á–∞–ª–∞ –∏–≥—Ä—ã:', error);
      res.status(400).json({
        success: false,
        message: error.message
      });
    }
  }
  
  // –°–¥–µ–ª–∞—Ç—å —Ö–æ–¥
  async makeMove(req, res) {
    try {
      const { sessionId } = req.params;
      const { result, messageId } = req.body;
      const playerId = req.user.id;
      
      // –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –¥—É—ç–ª–∏ –¥–ª—è –≤–∞–ª–∏–¥–∞—Ü–∏–∏ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞ –ø–æ —Ç–∏–ø—É –∏–≥—Ä—ã
      const duel = await duelService.getDuel(sessionId);
      if (!duel) {
        return res.status(400).json({
          success: false,
          message: '–î—É—ç–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω–∞'
        });
      }
      
      // –í–∞–ª–∏–¥–∞—Ü–∏—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞ –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Ç–∏–ø–∞ –∏–≥—Ä—ã
      const gameValidation = {
        'üé≤': { min: 1, max: 6 },      // –ö–æ—Å—Ç–∏: 1-6
        'üéØ': { min: 1, max: 6 },      // –î–∞—Ä—Ç—Å: 1-6  
        '‚öΩ': { min: 1, max: 5 },      // –§—É—Ç–±–æ–ª: 1-5
        'üèÄ': { min: 1, max: 5 },      // –ë–∞—Å–∫–µ—Ç–±–æ–ª: 1-5
        'üé≥': { min: 1, max: 6 },      // –ë–æ—É–ª–∏–Ω–≥: 1-6
        'üé∞': { min: 1, max: 64 }      // –°–ª–æ—Ç—ã: 1-64
      };
      
      const validation = gameValidation[duel.gameType] || gameValidation['üé≤'];
      
      if (!result || result < validation.min || result > validation.max) {
        return res.status(400).json({
          success: false,
          message: `–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç –¥–ª—è –∏–≥—Ä—ã ${duel.gameType}: –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –æ—Ç ${validation.min} –¥–æ ${validation.max}`
        });
      }
      
      const updatedDuel = await duelService.makeMove(sessionId, playerId, result, messageId);
      
      res.json({
        success: true,
        data: { duel: updatedDuel }
      });
      
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ —Ö–æ–¥–∞:', error);
      res.status(400).json({
        success: false,
        message: error.message
      });
    }
  }
  
  // –ü–æ–ª—É—á–µ–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –¥—É—ç–ª–∏
  async getDuel(req, res) {
    try {
      const { sessionId } = req.params;
      const userId = req.user.id;
      const telegramId = req.user.telegramId?.toString();
      
      console.log(`üîç BACKEND DEBUG: getDuel called for sessionId: ${sessionId}, userId: ${userId}, telegramId: ${telegramId}`);
      
      const duel = await duelService.getDuel(sessionId);
      
      console.log(`üîç BACKEND DEBUG: Duel data from service:`, {
        sessionId: duel.sessionId,
        gameType: duel.gameType,
        format: duel.format,
        status: duel.status,
        challengerId: duel.challengerId,
        opponentId: duel.opponentId,
        allFields: Object.keys(duel.toObject ? duel.toObject() : duel)
      });
      
      console.log(`DUEL ACCESS: –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–æ—Å—Ç—É–ø–∞ - telegramId: ${telegramId}, challengerId: ${duel.challengerId}, opponentId: ${duel.opponentId}`);
      
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–∞–≤–∞ –¥–æ—Å—Ç—É–ø–∞ (–∏—Å–ø–æ–ª—å–∑—É–µ–º Telegram ID, –Ω–µ MongoDB ID)
      if (!duel.isParticipant(telegramId)) {
        return res.status(403).json({
          success: false,
          message: '–ù–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —ç—Ç–æ–π –¥—É—ç–ª–∏'
        });
      }
      
      console.log(`üîç BACKEND DEBUG: Returning duel data with gameType: ${duel.gameType}, format: ${duel.format}`);
      
      // Ensure the duel is serialized properly
      const duelObject = duel.toObject ? duel.toObject() : duel;
      
      console.log(`üîç BACKEND DEBUG: Serialized duel object:`, {
        gameType: duelObject.gameType,
        format: duelObject.format,
        hasGameType: duelObject.hasOwnProperty('gameType'),
        hasFormat: duelObject.hasOwnProperty('format')
      });
      
      res.json({
        success: true,
        data: { duel: duelObject }
      });
      
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –¥—É—ç–ª–∏:', error);
      res.status(404).json({
        success: false,
        message: error.message
      });
    }
  }
  
  // –ü–æ–ª—É—á–µ–Ω–∏–µ –∞–∫—Ç–∏–≤–Ω—ã—Ö –¥—É—ç–ª–µ–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
  async getActiveDuels(req, res) {
    try {
      const userId = req.user.id;
      const duels = await duelService.getUserActiveDuels(userId);
      
      res.json({
        success: true,
        data: { duels }
      });
      
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∞–∫—Ç–∏–≤–Ω—ã—Ö –¥—É—ç–ª–µ–π:', error);
      res.status(500).json({
        success: false,
        message: '–í–Ω—É—Ç—Ä–µ–Ω–Ω—è—è –æ—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞'
      });
    }
  }
  
  // –ü–æ–ª—É—á–µ–Ω–∏–µ –∏—Å—Ç–æ—Ä–∏–∏ –¥—É—ç–ª–µ–π
  async getDuelHistory(req, res) {
    try {
      const userId = req.user.id;
      const limit = parseInt(req.query.limit) || 20;
      const offset = parseInt(req.query.offset) || 0;
      
      const result = await duelService.getUserDuelHistory(userId, limit, offset);
      
      res.json({
        success: true,
        data: {
          duels: result.rows,
          total: result.count,
          limit,
          offset
        }
      });
      
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∏—Å—Ç–æ—Ä–∏–∏:', error);
      res.status(500).json({
        success: false,
        message: '–í–Ω—É—Ç—Ä–µ–Ω–Ω—è—è –æ—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞'
      });
    }
  }
  
  // –ü–æ–ª—É—á–µ–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –¥—É—ç–ª–µ–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
  async getDuelStats(req, res) {
    try {
      const userId = req.user.id;
      const { Duel } = require('../models');
      const { Op } = require('sequelize');
      
      // –ü–æ–ª—É—á–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
      const stats = await Duel.findAll({
        where: {
          [Op.or]: [
            { challengerId: userId },
            { opponentId: userId }
          ],
          status: 'completed'
        },
        attributes: [
          [Duel.sequelize.fn('COUNT', '*'), 'totalGames'],
          [Duel.sequelize.fn('SUM', 
            Duel.sequelize.literal(`CASE WHEN winnerId = '${userId}' THEN 1 ELSE 0 END`)
          ), 'wins'],
          [Duel.sequelize.fn('SUM', 
            Duel.sequelize.literal(`CASE WHEN winnerId = '${userId}' THEN winAmount ELSE -amount END`)
          ), 'totalProfit'],
          'gameType'
        ],
        group: ['gameType'],
        raw: true
      });
      
      // –û–±—â–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
      const totalStats = await Duel.findOne({
        where: {
          [Op.or]: [
            { challengerId: userId },
            { opponentId: userId }
          ],
          status: 'completed'
        },
        attributes: [
          [Duel.sequelize.fn('COUNT', '*'), 'totalGames'],
          [Duel.sequelize.fn('SUM', 
            Duel.sequelize.literal(`CASE WHEN winnerId = '${userId}' THEN 1 ELSE 0 END`)
          ), 'totalWins'],
          [Duel.sequelize.fn('SUM', 
            Duel.sequelize.literal(`CASE WHEN winnerId = '${userId}' THEN winAmount ELSE -amount END`)
          ), 'totalProfit']
        ],
        raw: true
      });
      
      res.json({
        success: true,
        data: {
          byGame: stats,
          total: totalStats
        }
      });
      
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏:', error);
      res.status(500).json({
        success: false,
        message: '–í–Ω—É—Ç—Ä–µ–Ω–Ω—è—è –æ—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞'
      });
    }
  }
  
  // –û—Ç–º–µ–Ω–∞ –¥—É—ç–ª–∏
  async cancelDuel(req, res) {
    try {
      const { sessionId } = req.params;
      const userId = req.user.id;
      
      const duel = await duelService.cancelDuel(sessionId, userId);
      
      res.json({
        success: true,
        data: { duel }
      });
      
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ –æ—Ç–º–µ–Ω—ã –¥—É—ç–ª–∏:', error);
      res.status(400).json({
        success: false,
        message: error.message
      });
    }
  }
  
  // –ü–æ–ª—É—á–µ–Ω–∏–µ –æ—Ç–∫—Ä—ã—Ç—ã—Ö –¥—É—ç–ª–µ–π (–¥–ª—è –∞–¥–º–∏–Ω–∞ –∏–ª–∏ –ø—É–±–ª–∏—á–Ω–æ–≥–æ –ø—Ä–æ—Å–º–æ—Ç—Ä–∞)
  async getOpenDuels(req, res) {
    try {
      const { Duel } = require('../models');
      
      const duels = await Duel.findAll({
        where: {
          status: 'pending',
          opponentId: null
        },
        limit: 20,
        order: [['createdAt', 'DESC']]
      });
      
      res.json({
        success: true,
        data: { duels }
      });
      
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –æ—Ç–∫—Ä—ã—Ç—ã—Ö –¥—É—ç–ª–µ–π:', error);
      res.status(500).json({
        success: false,
        message: '–í–Ω—É—Ç—Ä–µ–Ω–Ω—è—è –æ—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞'
      });
    }
  }

  // –ü—Ä–∏–Ω—è—Ç–∏–µ –¥—É—ç–ª–∏
  async acceptDuel(req, res) {
    try {
      const { sessionId } = req.params;
      const { userId } = req.body;
      const playerId = userId || req.user.id;
      const playerUsername = req.user.username || req.body.username || 'Unknown';
      
      // –°–Ω–∞—á–∞–ª–∞ –Ω–∞—Ö–æ–¥–∏–º –¥—É—ç–ª—å –ø–æ sessionId
      const existingDuel = await duelService.getDuel(sessionId);
      
      // –ó–∞—Ç–µ–º –ø—Ä–∏—Å–æ–µ–¥–∏–Ω—è–µ–º—Å—è –∫ –Ω–µ–π
      const duel = await duelService.joinDuel(existingDuel._id, playerId, playerUsername);
      
      res.json({
        success: true,
        data: { duel }
      });
      
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏–Ω—è—Ç–∏—è –¥—É—ç–ª–∏:', error);
      res.status(400).json({
        success: false,
        message: error.message
      });
    }
  }

  // –û—Ç–∫–ª–æ–Ω–µ–Ω–∏–µ –¥—É—ç–ª–∏
  async declineDuel(req, res) {
    try {
      const { sessionId } = req.params;
      const { userId } = req.body;
      const playerId = userId || req.user.id;
      
      const duel = await duelService.cancelDuel(sessionId, playerId, 'declined');
      
      res.json({
        success: true,
        data: { duel }
      });
      
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ –æ—Ç–∫–ª–æ–Ω–µ–Ω–∏—è –¥—É—ç–ª–∏:', error);
      res.status(400).json({
        success: false,
        message: error.message
      });
    }
  }

  // –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞ —Ä–∞—É–Ω–¥–∞
  async saveRound(req, res) {
    try {
      const { sessionId } = req.params;
      const { userId, username, gameType, result, timestamp } = req.body;
      
      // –í–∞–ª–∏–¥–∞—Ü–∏—è –¥–∞–Ω–Ω—ã—Ö —Ä–∞—É–Ω–¥–∞
      if (!userId || !result) {
        return res.status(400).json({
          success: false,
          message: '–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è —Ä–∞—É–Ω–¥–∞'
        });
      }
      
      // –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –¥—É—ç–ª–∏ –¥–ª—è –≤–∞–ª–∏–¥–∞—Ü–∏–∏ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞ –ø–æ —Ç–∏–ø—É –∏–≥—Ä—ã
      const duelData = await duelService.getDuel(sessionId);
      if (!duelData) {
        return res.status(400).json({
          success: false,
          message: '–î—É—ç–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω–∞'
        });
      }
      
      // –í–∞–ª–∏–¥–∞—Ü–∏—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞ –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Ç–∏–ø–∞ –∏–≥—Ä—ã
      const gameValidation = {
        'üé≤': { min: 1, max: 6 },      // –ö–æ—Å—Ç–∏: 1-6
        'üéØ': { min: 1, max: 6 },      // –î–∞—Ä—Ç—Å: 1-6  
        '‚öΩ': { min: 1, max: 5 },      // –§—É—Ç–±–æ–ª: 1-5
        'üèÄ': { min: 1, max: 5 },      // –ë–∞—Å–∫–µ—Ç–±–æ–ª: 1-5
        'üé≥': { min: 1, max: 6 },      // –ë–æ—É–ª–∏–Ω–≥: 1-6
        'üé∞': { min: 1, max: 64 }      // –°–ª–æ—Ç—ã: 1-64
      };
      
      const validation = gameValidation[duelData.gameType] || gameValidation['üé≤'];
      
      if (typeof result !== 'number' || result < validation.min || result > validation.max) {
        return res.status(400).json({
          success: false,
          message: `–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç –¥–ª—è –∏–≥—Ä—ã ${duelData.gameType}: –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –æ—Ç ${validation.min} –¥–æ ${validation.max}`
        });
      }
      
      // –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ö–æ–¥ —á–µ—Ä–µ–∑ —Å–µ—Ä–≤–∏—Å
      const duel = await duelService.makeMove(sessionId, userId, result);
      
      res.json({
        success: true,
        data: { duel }
      });
      
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è —Ä–∞—É–Ω–¥–∞:', error);
      res.status(400).json({
        success: false,
        message: error.message
      });
    }
  }

  // –ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ –¥—É—ç–ª–∏
  async finishDuel(req, res) {
    try {
      const { sessionId } = req.params;
      const { winnerId } = req.body;
      
      if (!winnerId) {
        return res.status(400).json({
          success: false,
          message: 'ID –ø–æ–±–µ–¥–∏—Ç–µ–ª—è –æ–±—è–∑–∞—Ç–µ–ª–µ–Ω'
        });
      }
      
      const duel = await duelService.getDuel(sessionId);
      
      if (!duel) {
        return res.status(404).json({
          success: false,
          message: '–î—É—ç–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω–∞'
        });
      }
      
      // –ó–∞–≤–µ—Ä—à–∞–µ–º –¥—É—ç–ª—å
      await duelService.finishDuel(duel, winnerId, duel.challengerId === winnerId ? duel.challengerUsername : duel.opponentUsername, null);
      
      // –í–æ–∑–≤—Ä–∞—â–∞–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—É—é –¥—É—ç–ª—å
      const updatedDuel = await duelService.getDuel(sessionId);
      
      res.json({
        success: true,
        data: { 
          duel: updatedDuel,
          winAmount: Math.floor(duel.amount * 2 * 0.95) // 95% –æ—Ç –±–∞–Ω–∫–∞
        }
      });
      
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –¥—É—ç–ª–∏:', error);
      res.status(400).json({
        success: false,
        message: error.message
      });
    }
  }

  // –ü–æ–ª—É—á–µ–Ω–∏–µ –∏—Å—Ç–æ—Ä–∏–∏ –¥—É—ç–ª–µ–π –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
  async getUserHistoryById(req, res) {
    try {
      const { userId } = req.params;
      const limit = parseInt(req.query.limit) || 20;
      const offset = parseInt(req.query.offset) || 0;
      
      const result = await duelService.getUserDuelHistory(userId, limit, offset);
      
      res.json({
        success: true,
        data: {
          duels: result.rows,
          total: result.count,
          limit,
          offset
        }
      });
      
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∏—Å—Ç–æ—Ä–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:', error);
      res.status(500).json({
        success: false,
        message: '–í–Ω—É—Ç—Ä–µ–Ω–Ω—è—è –æ—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞'
      });
    }
  }

  // –ü–æ–ª—É—á–µ–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
  async getUserStatsById(req, res) {
    try {
      const { userId } = req.params;
      const Duel = require('../models/duel.model');
      
      // MongoDB aggregation pipeline –¥–ª—è –±–µ–∑–æ–ø–∞—Å–Ω–æ–π —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
      const statsAggregation = await Duel.aggregate([
        {
          $match: {
            $or: [
              { challengerId: userId },
              { opponentId: userId }
            ],
            status: 'completed'
          }
        },
        {
          $group: {
            _id: '$gameType',
            totalGames: { $sum: 1 },
            wins: {
              $sum: {
                $cond: [
                  { $eq: ['$winnerId', userId] },
                  1,
                  0
                ]
              }
            },
            totalProfit: {
              $sum: {
                $cond: [
                  { $eq: ['$winnerId', userId] },
                  '$winAmount',
                  { $multiply: ['$amount', -1] }
                ]
              }
            }
          }
        }
      ]);
      
      // –û–±—â–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
      const totalStatsAggregation = await Duel.aggregate([
        {
          $match: {
            $or: [
              { challengerId: userId },
              { opponentId: userId }
            ],
            status: 'completed'
          }
        },
        {
          $group: {
            _id: null,
            totalGames: { $sum: 1 },
            totalWins: {
              $sum: {
                $cond: [
                  { $eq: ['$winnerId', userId] },
                  1,
                  0
                ]
              }
            },
            totalProfit: {
              $sum: {
                $cond: [
                  { $eq: ['$winnerId', userId] },
                  '$winAmount',
                  { $multiply: ['$amount', -1] }
                ]
              }
            }
          }
        }
      ]);

      const totalStats = totalStatsAggregation[0] || { totalGames: 0, totalWins: 0, totalProfit: 0 };
      
      // –ü–æ–ª—É—á–∞–µ–º –ª—é–±–∏–º—É—é –∏–≥—Ä—É
      const favoriteGame = statsAggregation.reduce((prev, current) => 
        (prev.totalGames > current.totalGames) ? prev : current
      )?._id || 'üé≤';

      // –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º —Ñ–æ—Ä–º–∞—Ç –¥–∞–Ω–Ω—ã—Ö –¥–ª—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏
      const statsByGame = statsAggregation.map(stat => ({
        gameType: stat._id,
        totalGames: stat.totalGames,
        wins: stat.wins,
        totalProfit: stat.totalProfit
      }));

      res.json({
        success: true,
        data: {
          wins: totalStats.totalWins,
          losses: totalStats.totalGames - totalStats.totalWins,
          totalWinnings: Math.max(totalStats.totalProfit, 0),
          totalLosses: Math.abs(Math.min(totalStats.totalProfit, 0)),
          favoriteGame: favoriteGame,
          byGame: statsByGame
        }
      });
      
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:', error);
      res.status(500).json({
        success: false,
        message: '–í–Ω—É—Ç—Ä–µ–Ω–Ω—è—è –æ—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞'
      });
    }
  }
}

module.exports = new DuelController();