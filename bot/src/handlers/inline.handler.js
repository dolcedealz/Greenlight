// bot/src/handlers/inline.handler.js
const config = require('../config');
const apiService = require('../services/api.service');
const duelService = require('../services/duel.service');

function registerInlineHandlers(bot) {
  console.log('üîß –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º inline handlers...');
  
  bot.on('inline_query', async (ctx) => {
    try {
      const query = ctx.inlineQuery.query.toLowerCase().trim();
      const userId = ctx.from.id.toString();
      const username = ctx.from.username;
      
      console.log('üì• Inline query –ø–æ–ª—É—á–µ–Ω:', {
        query: query,
        user: username,
        userId: userId,
        rawQuery: ctx.inlineQuery.query,
        queryId: ctx.inlineQuery.id
      });
      
      const results = [];
      
      // –ü–∞—Ä—Å–∏–º –∫–æ–º–∞–Ω–¥—É –¥—É—ç–ª–∏ –¥–ª—è –ª–∏—á–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
      // –§–æ—Ä–º–∞—Ç: duel @username 50 üé≤ bo3 (–±–æ–ª–µ–µ –≥–∏–±–∫–∏–π –ø–∞—Ä—Å–∏–Ω–≥)
      const duelMatch = query.match(/^duel\s+@?(\w+)\s+(\d+)(?:\s*(üé≤|üéØ|‚öΩ|üèÄ|üé∞|üé≥))?(?:\s*(bo\d+))?/i);
      
      console.log('üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ duel match:', {
        query: query,
        matched: !!duelMatch,
        matchGroups: duelMatch
      });
      
      if (duelMatch) {
        const targetUsername = duelMatch[1].replace('@', '');
        const amount = parseInt(duelMatch[2]);
        const gameType = duelMatch[3] || 'üé≤';
        const format = duelMatch[4] || 'bo1';
        
        // –û–ø—Ä–µ–¥–µ–ª—è–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–±–µ–¥
        const winsRequired = duelService.getWinsRequired(format);
        
        // –°–æ–∑–¥–∞–µ–º URL –¥–ª—è Deep Link
        const deepLinkData = `duel_${challengerId}_${targetUsername}_${amount}_${gameType}_${format}`;
        const botUsername = bot.botInfo?.username || 'Greenlightgames_bot';
        
        results.push({
          type: 'article',
          id: `duel_${Date.now()}`,
          title: `${gameType} –î—É—ç–ª—å —Å @${targetUsername}`,
          description: `${amount} USDT, ${format.toUpperCase()}`,
          url: `https://t.me/${botUsername}?start=${deepLinkData}`,
          input_message_content: {
            message_text: `${gameType} **–ü–†–ò–ì–õ–ê–®–ï–ù–ò–ï –ù–ê –î–£–≠–õ–¨** ${gameType}\n\n` +
              `@${username} –ø—Ä–∏–≥–ª–∞—à–∞–µ—Ç –≤–∞—Å –Ω–∞ –¥—É—ç–ª—å!\n` +
              `üí∞ –°—Ç–∞–≤–∫–∞: ${amount} USDT\n` +
              `üéÆ –ò–≥—Ä–∞: ${getGameName(gameType)}\n` +
              `üèÜ –§–æ—Ä–º–∞—Ç: ${format.toUpperCase()}\n\n` +
              `üì± –î–ª—è —É—á–∞—Å—Ç–∏—è –Ω–∞–∂–º–∏—Ç–µ: https://t.me/${botUsername}?start=${deepLinkData}`,
            parse_mode: 'Markdown'
          }
        });
      }
      
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–æ—Å—Ç—ã–µ –∫–æ–º–∞–Ω–¥—ã
      if (query.startsWith('duel') && results.length === 0) {
        results.push({
          type: 'article',
          id: 'duel_help',
          title: '‚ö†Ô∏è –ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥—É—ç–ª–∏',
          description: '–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ: duel @username —Å—É–º–º–∞',
          input_message_content: {
            message_text: `‚ùå **–ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –∫–æ–º–∞–Ω–¥—ã**\n\n` +
              `–ü—Ä–∞–≤–∏–ª—å–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç:\n` +
              `‚Ä¢ \`duel @username 50\` - –±—ã—Å—Ç—Ä–∞—è –¥—É—ç–ª—å\n` +
              `‚Ä¢ \`duel @username 100 üéØ\` - –¥–∞—Ä—Ç—Å\n` +
              `‚Ä¢ \`duel @username 50 üé≤ bo3\` - –∫–æ—Å—Ç–∏ –¥–æ 2 –ø–æ–±–µ–¥\n\n` +
              `–í–∞—à –∑–∞–ø—Ä–æ—Å: \`${ctx.inlineQuery.query}\``,
            parse_mode: 'Markdown'
          }
        });
      }
      
      // –ï—Å–ª–∏ –Ω–∏—á–µ–≥–æ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ, –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–æ–¥—Å–∫–∞–∑–∫—É
      if (results.length === 0) {
        results.push({
          type: 'article',
          id: 'help',
          title: 'üí° –ö–∞–∫ —Å–æ–∑–¥–∞—Ç—å –¥—É—ç–ª—å',
          description: '–§–æ—Ä–º–∞—Ç: duel @username —Å—É–º–º–∞',
          input_message_content: {
            message_text: `üìñ **–ö–∞–∫ —Å–æ–∑–¥–∞—Ç—å –¥—É—ç–ª—å:**\n\n` +
              `–í–≤–µ–¥–∏—Ç–µ: \`duel @username 50\`\n` +
              `–î–æ—Å—Ç—É–ø–Ω—ã–µ –∏–≥—Ä—ã: üé≤ üéØ ‚öΩ üèÄ üé∞ üé≥`,
            parse_mode: 'Markdown'
          }
        });
      }
      
      // –î–æ–±–∞–≤–ª—è–µ–º —Ç–µ—Å—Ç–æ–≤—ã–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏
      if (query.includes('test')) {
        results.unshift({
          type: 'article',
          id: 'test_result',
          title: 'üß™ –¢–µ—Å—Ç–æ–≤—ã–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç',
          description: '–ü—Ä–æ–≤–µ—Ä–∫–∞ inline mode',
          input_message_content: {
            message_text: '–¢–µ—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç inline –±–æ—Ç–∞'
          }
        });
      }
      
      console.log('üì§ –û—Ç–ø—Ä–∞–≤–ª—è–µ–º inline —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã:', {
        resultsCount: results.length,
        results: results.map(r => ({ id: r.id, title: r.title }))
      });
      
      await ctx.answerInlineQuery(results, {
        cache_time: 0,
        is_personal: true
      });
      
    } catch (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ inline query:', error);
      await ctx.answerInlineQuery([]);
    }
  });
  
  // –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ inline —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞ (–∫–æ–≥–¥–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ)
  bot.on('chosen_inline_result', async (ctx) => {
    try {
      console.log('‚úÖ Inline —Ä–µ–∑—É–ª—å—Ç–∞—Ç –≤—ã–±—Ä–∞–Ω:', {
        resultId: ctx.chosenInlineResult.result_id,
        query: ctx.chosenInlineResult.query,
        from: ctx.from.username,
        userId: ctx.from.id,
        inlineMessageId: ctx.chosenInlineResult.inline_message_id,
        fullEvent: ctx.chosenInlineResult
      });
      
      const resultId = ctx.chosenInlineResult.result_id;
      const query = ctx.chosenInlineResult.query;
      
      // –ï—Å–ª–∏ —ç—Ç–æ –¥—É—ç–ª—å, –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏—è –≤ –ª–∏—á–∫—É
      if (resultId.startsWith('duel_')) {
        const duelMatch = query.match(/^duel\s+@?(\w+)\s+(\d+)(?:\s*(üé≤|üéØ|‚öΩ|üèÄ|üé∞|üé≥))?(?:\s*(bo\d+))?/i);
        
        if (duelMatch) {
          const challengerId = ctx.from.id;
          const challengerUsername = ctx.from.username;
          const targetUsername = duelMatch[1];
          const amount = parseInt(duelMatch[2]);
          const gameType = duelMatch[3] || 'üé≤';
          const format = duelMatch[4] || 'bo1';
          
          // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ–±–æ–∏–º –∏–≥—Ä–æ–∫–∞–º
          await sendDuelInvitations(bot, {
            challengerId,
            challengerUsername,
            targetUsername,
            amount,
            gameType,
            format,
            inlineMessageId: ctx.chosenInlineResult.inline_message_id
          });
        }
      }
      
    } catch (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ chosen_inline_result:', error);
    }
  });
}

/**
 * –û—Ç–ø—Ä–∞–≤–∫–∞ –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏–π –Ω–∞ –¥—É—ç–ª—å –≤ –ª–∏—á–∫—É
 */
async function sendDuelInvitations(bot, data) {
  try {
    const { challengerId, challengerUsername, targetUsername, amount, gameType, format } = data;
    
    console.log('üéØ –°–æ–∑–¥–∞–Ω–∏–µ –±–µ–∑–æ–ø–∞—Å–Ω–æ–π –¥—É—ç–ª–∏:', data);
    
    // –°–æ–∑–¥–∞–µ–º –¥—É—ç–ª—å —á–µ—Ä–µ–∑ –±–µ–∑–æ–ø–∞—Å–Ω—ã–π —Å–µ—Ä–≤–∏—Å
    const duel = duelService.createDuel(
      challengerId.toString(),
      challengerUsername,
      targetUsername,
      amount,
      gameType,
      format,
      'private'
    );
    
    // –ü—ã—Ç–∞–µ–º—Å—è –Ω–∞–π—Ç–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–ª—è –ø—Ä—è–º–æ–π –æ—Ç–ø—Ä–∞–≤–∫–∏
    try {
      const response = await apiService.findUserByUsername(targetUsername);
      
      if (response && response.telegramId) {
        // –°–æ–∑–¥–∞–µ–º –±–µ–∑–æ–ø–∞—Å–Ω—ã–µ callback –∫–Ω–æ–ø–∫–∏
        const keyboard = {
          inline_keyboard: [[
            { 
              text: `‚úÖ –ü—Ä–∏–Ω—è—Ç—å ${gameType}`, 
              callback_data: `private_accept_${duel.id}` 
            },
            { 
              text: '‚ùå –û—Ç–∫–ª–æ–Ω–∏—Ç—å', 
              callback_data: `private_decline_${duel.id}` 
            }
          ]]
        };
        
        // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏–µ –æ–ø–ø–æ–Ω–µ–Ω—Ç—É
        const opponentMessage = await bot.telegram.sendMessage(
          response.telegramId,
          `${gameType} **–ü–†–ò–ì–õ–ê–®–ï–ù–ò–ï –ù–ê –î–£–≠–õ–¨** ${gameType}\n\n` +
          `üë§ @${challengerUsername} –ø—Ä–∏–≥–ª–∞—à–∞–µ—Ç –≤–∞—Å –Ω–∞ –¥—É—ç–ª—å!\n` +
          `üí∞ –°—Ç–∞–≤–∫–∞: ${amount} USDT\n` +
          `üéÆ –ò–≥—Ä–∞: ${duelService.getGameName(gameType)}\n` +
          `üèÜ –§–æ—Ä–º–∞—Ç: ${format.toUpperCase()} (–¥–æ ${duelService.getWinsRequired(format)} –ø–æ–±–µ–¥)\n\n` +
          `‚è± –í—Ä–µ–º—è –Ω–∞ –æ—Ç–≤–µ—Ç: 5 –º–∏–Ω—É—Ç`,
          {
            parse_mode: 'Markdown',
            reply_markup: keyboard
          }
        );
        
        // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –∏–Ω–∏—Ü–∏–∞—Ç–æ—Ä—É
        const challengerMessage = await bot.telegram.sendMessage(
          challengerId,
          `‚úÖ **–ü—Ä–∏–≥–ª–∞—à–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ!**\n\n` +
          `üéÆ –ò–≥—Ä–∞: ${duelService.getGameName(gameType)}\n` +
          `üí∞ –°—Ç–∞–≤–∫–∞: ${amount} USDT\n` +
          `üèÜ –§–æ—Ä–º–∞—Ç: ${format.toUpperCase()}\n` +
          `üë§ –û–ø–ø–æ–Ω–µ–Ω—Ç: @${targetUsername}\n\n` +
          `‚è± –û–∂–∏–¥–∞–µ–º –æ—Ç–≤–µ—Ç...`,
          {
            parse_mode: 'Markdown'
          }
        );
        
        // –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å—Å—ã–ª–∫–∏ –Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏—è –≤ –¥—É—ç–ª–∏
        duel.messages.challenger = {
          chatId: challengerId,
          messageId: challengerMessage.message_id
        };
        duel.messages.opponent = {
          chatId: response.telegramId,
          messageId: opponentMessage.message_id
        };
        
        console.log(`‚úÖ –î—É—ç–ª—å ${duel.id} —Å–æ–∑–¥–∞–Ω–∞ –∏ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é ${targetUsername}`);
        
      } else {
        throw new Error('–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö');
      }
      
    } catch (apiError) {
      console.log(`‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ @${targetUsername}, —É–¥–∞–ª—è–µ–º –¥—É—ç–ª—å`);
      
      // –£–¥–∞–ª—è–µ–º —Å–æ–∑–¥–∞–Ω–Ω—É—é –¥—É—ç–ª—å
      duelService.removeDuel(duel.id);
      
      // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∏–Ω–∏—Ü–∏–∞—Ç–æ—Ä—É —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± –æ—à–∏–±–∫–µ
      await bot.telegram.sendMessage(
        challengerId,
        `‚ùå **–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å –¥—É—ç–ª—å**\n\n` +
        `–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å @${targetUsername} –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ —Å–∏—Å—Ç–µ–º–µ.\n` +
        `–ü–æ–ø—Ä–æ—Å–∏—Ç–µ –∏—Ö —Å–Ω–∞—á–∞–ª–∞ –Ω–∞–ø–∏—Å–∞—Ç—å –±–æ—Ç—É /start`,
        {
          parse_mode: 'Markdown'
        }
      );
    }
    
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –¥—É—ç–ª–∏:', error.message);
    
    // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± –æ—à–∏–±–∫–µ –∏–Ω–∏—Ü–∏–∞—Ç–æ—Ä—É
    try {
      await bot.telegram.sendMessage(
        challengerId,
        `‚ùå **–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –¥—É—ç–ª–∏**\n\n${error.message}`,
        { parse_mode: 'Markdown' }
      );
    } catch (sendError) {
      console.error('‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± –æ—à–∏–±–∫–µ:', sendError);
    }
  }
}

/**
 * –ü—Ä–æ–≤–µ—Ä–∫–∞ –∏ –æ—Ç–ø—Ä–∞–≤–∫–∞ –æ–∂–∏–¥–∞—é—â–∏—Ö –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏–π
 */
async function checkPendingInvites(bot, username, userId) {
  if (!global.pendingDuelInvites) return;
  
  // –ò—â–µ–º –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏—è –¥–ª—è —ç—Ç–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
  for (const [inviteId, invite] of Object.entries(global.pendingDuelInvites)) {
    if (invite.targetUsername === username) {
      // –°–æ–∑–¥–∞–µ–º inline –∫–Ω–æ–ø–∫–∏ –¥–ª—è –ø—Ä–∏–Ω—è—Ç–∏—è –¥—É—ç–ª–∏ (–∏—Å–ø–æ–ª—å–∑—É–µ–º emoji callback pattern)
      const keyboard = {
        inline_keyboard: [[
          { 
            text: `‚úÖ –ü—Ä–∏–Ω—è—Ç—å ${invite.gameType}`, 
            callback_data: `emoji_accept_${invite.challengerId}_${invite.amount}_${invite.gameType}_${invite.format}` 
          },
          { 
            text: '‚ùå –û—Ç–∫–ª–æ–Ω–∏—Ç—å', 
            callback_data: `emoji_decline_${invite.challengerId}` 
          }
        ]]
      };
      
      // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏–µ
      await bot.telegram.sendMessage(
        userId,
        `${invite.gameType} **–ü–†–ò–ì–õ–ê–®–ï–ù–ò–ï –ù–ê –î–£–≠–õ–¨** ${invite.gameType}\n\n` +
        `@${invite.challengerUsername} –ø—Ä–∏–≥–ª–∞—à–∞–µ—Ç –≤–∞—Å –Ω–∞ –¥—É—ç–ª—å!\n` +
        `üí∞ –°—Ç–∞–≤–∫–∞: ${invite.amount} USDT\n` +
        `üéÆ –ò–≥—Ä–∞: ${getGameName(invite.gameType)}\n` +
        `üèÜ –§–æ—Ä–º–∞—Ç: ${invite.format.toUpperCase()} (–¥–æ ${invite.winsRequired} –ø–æ–±–µ–¥)\n\n` +
        `–ü—Ä–∏–Ω—è—Ç—å –¥—É—ç–ª—å?`,
        {
          parse_mode: 'Markdown',
          reply_markup: keyboard
        }
      );
      
      // –£–¥–∞–ª—è–µ–º –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–Ω–æ–µ –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏–µ
      delete global.pendingDuelInvites[inviteId];
    }
  }
}


module.exports = {
  registerInlineHandlers,
  checkPendingInvites
};