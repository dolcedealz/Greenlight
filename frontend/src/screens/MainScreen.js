// MainScreen.js
import React, { useState, useEffect } from 'react';
import { Header } from '../components/layout';
import { GameBlock, EventsPreview } from '../components/main';
import { userApi } from '../services';
import '../styles/MainScreen.css';

const MainScreen = ({ telegramWebApp, userData, onGameSelect, onEventsSelect, balance }) => {
  const [featuredEvent, setFeaturedEvent] = useState(null);
  const [loading, setLoading] = useState(false);
  const [error, setError] = useState(null);
  
  // –ó–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö –ø—Ä–∏ –º–æ–Ω—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏
  useEffect(() => {
    const fetchData = async () => {
      try {
        setLoading(true);
        
        // –ó–∞–≥—Ä—É–∑–∫–∞ —Å–æ–±—ã—Ç–∏—è (–ø–æ–∫–∞ –º–æ–∫, —Ç–∞–∫ –∫–∞–∫ API –¥–ª—è —Å–æ–±—ã—Ç–∏–π –µ—â–µ –Ω–µ—Ç)
        setFeaturedEvent({
          id: 'evt1',
          title: 'BTC price on May 15, 2025',
          totalBets: 15420.75,
          outcomes: [
            { id: 'out1', name: 'Above $95,000', odds: 2.1 },
            { id: 'out2', name: 'Below $95,000', odds: 1.95 }
          ]
        });
        
        setLoading(false);
      } catch (err) {
        console.error('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –¥–∞–Ω–Ω—ã—Ö:', err);
        setError('–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –¥–∞–Ω–Ω—ã–µ. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.');
        setLoading(false);
      }
    };
    
    fetchData();
  }, []);
  
  // –ú–∞—Å—Å–∏–≤ –∏–≥—Ä
  const games = [
    { id: 'slots', name: '–°–ª–æ—Ç—ã', icon: 'üé∞' },
    { id: 'mines', name: '–ú–∏–Ω—ã', icon: 'üí£' },
    { id: 'crash', name: '–ö—Ä–∞—à', icon: 'üìà' },
    { id: 'coin', name: '–ú–æ–Ω–µ—Ç–∫–∞', icon: 'ü™ô' }
  ];
  
  // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤—ã–±–æ—Ä–∞ –∏–≥—Ä—ã
  const handleGameSelect = (gameId) => {
    if (onGameSelect) {
      onGameSelect(gameId);
    }
  };
  
  // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤—ã–±–æ—Ä–∞ —Å–æ–±—ã—Ç–∏—è
  const handleEventsSelect = () => {
    if (onEventsSelect) {
      onEventsSelect();
    } else {
      console.log('–í—ã–±—Ä–∞–Ω —Ä–∞–∑–¥–µ–ª —Å–æ–±—ã—Ç–∏–π');
    }
  };
  
  return (
    <div className="main-screen">
      <Header balance={balance} />
      
      {loading ? (
        <div className="main-loading">
          <div className="loader"></div>
          <p>–ó–∞–≥—Ä—É–∑–∫–∞...</p>
        </div>
      ) : error ? (
        <div className="main-error">
          <p>{error}</p>
          <button onClick={() => window.location.reload()}>–ü–æ–ø—Ä–æ–±–æ–≤–∞—Ç—å —Å–Ω–æ–≤–∞</button>
        </div>
      ) : (
        <>
          {/* –ü—Ä–µ–≤—å—é —Å–æ–±—ã—Ç–∏—è */}
          {featuredEvent && (
            <EventsPreview 
              event={featuredEvent} 
              onClick={handleEventsSelect} 
            />
          )}
          
          {/* –ò–≥—Ä—ã */}
          <div className="games-container">
            <div className="games-title">–ò–≥—Ä—ã</div>
            <div className="games-grid">
              {games.map((game) => (
                <GameBlock
                  key={game.id}
                  name={game.name}
                  icon={game.icon}
                  onClick={() => handleGameSelect(game.id)}
                />
              ))}
            </div>
          </div>
        </>
      )}
    </div>
  );
};

export default MainScreen;