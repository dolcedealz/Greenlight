// backend/src/services/referral.service.js
const { User, ReferralEarning, ReferralPayout, Transaction } = require('../models');
const mongoose = require('mongoose');

class ReferralService {
  constructor() {
    // –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è —É—Ä–æ–≤–Ω–µ–π –ø–∞—Ä—Ç–Ω–µ—Ä—Å–∫–æ–π –ø—Ä–æ–≥—Ä–∞–º–º—ã
    this.levels = {
      bronze: {
        name: '–ë—Ä–æ–Ω–∑–∞',
        requiredActiveReferrals: 0,
        commissionPercent: 5, // –í–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ –¥–æ –∑–∞—è–≤–ª–µ–Ω–Ω–æ–≥–æ 5%
        color: 'ü•â'
      },
      silver: {
        name: '–°–µ—Ä–µ–±—Ä–æ',
        requiredActiveReferrals: 6,
        commissionPercent: 7, // –í–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ –¥–æ –∑–∞—è–≤–ª–µ–Ω–Ω–æ–≥–æ 7%
        color: 'ü•à'
      },
      gold: {
        name: '–ó–æ–ª–æ—Ç–æ',
        requiredActiveReferrals: 21,
        commissionPercent: 10, // –í–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ –¥–æ –∑–∞—è–≤–ª–µ–Ω–Ω–æ–≥–æ 10%
        color: 'ü•á'
      },
      platinum: {
        name: '–ü–ª–∞—Ç–∏–Ω–∞',
        requiredActiveReferrals: 51,
        commissionPercent: 12, // –í–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ –¥–æ –∑–∞—è–≤–ª–µ–Ω–Ω–æ–≥–æ 12%
        color: 'üíé'
      },
      vip: {
        name: 'VIP',
        requiredActiveReferrals: 101,
        commissionPercent: 15, // –í–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ –¥–æ –∑–∞—è–≤–ª–µ–Ω–Ω–æ–≥–æ 15%
        color: 'üåü'
      }
    };
  }

  /**
   * –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –ø—Ä–æ–∏–≥—Ä—ã—à –≤ –∏–≥—Ä–µ –∏ –Ω–∞—á–∏—Å–ª—è–µ—Ç –∫–æ–º–∏—Å—Å–∏—é –ø–∞—Ä—Ç–Ω–µ—Ä—É
   * @param {Object} gameData - –î–∞–Ω–Ω—ã–µ –∏–≥—Ä—ã
   * @returns {Object|null} - –î–∞–Ω–Ω—ã–µ –æ –Ω–∞—á–∏—Å–ª–µ–Ω–∏–∏ –∏–ª–∏ null
   */
  async processGameLoss(gameData) {
    const session = await mongoose.startSession();
    session.startTransaction();
    
    try {
      const { userId, gameId, gameType, bet, profit } = gameData;
      
      // –ù–∞—Ö–æ–¥–∏–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
      const user = await User.findById(userId).session(session);
      if (!user || !user.referrer) {
        // –£ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–µ—Ç —Ä–µ—Ñ–µ—Ä–µ—Ä–∞
        await session.abortTransaction();
        return null;
      }
      
      // –ù–∞—Ö–æ–¥–∏–º –ø–∞—Ä—Ç–Ω–µ—Ä–∞ (—Ä–µ—Ñ–µ—Ä–µ—Ä–∞)
      const partner = await User.findById(user.referrer).session(session);
      if (!partner) {
        await session.abortTransaction();
        return null;
      }
      
      // –ë–ï–ó–û–ü–ê–°–ù–û–°–¢–¨: –ê–Ω—Ç–∏-—Ñ—Ä–æ–¥ –ø—Ä–æ–≤–µ—Ä–∫–∏
      // 1. –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ —Ä–µ—Ñ–µ—Ä–µ—Ä –Ω–µ –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω
      if (partner.isBlocked) {
        console.warn(`REFERRAL SECURITY: –ü–∞—Ä—Ç–Ω–µ—Ä ${partner._id} –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω, –∫–æ–º–∏—Å—Å–∏—è –Ω–µ –Ω–∞—á–∏—Å–ª—è–µ—Ç—Å—è`);
        await session.abortTransaction();
        return null;
      }
      
      // 2. –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ —Ä–µ—Ñ–µ—Ä–∞–ª –Ω–µ —Ç–æ—Ç –∂–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å (—Å–∞–º–æ—Ä–µ—Ñ–µ—Ä–∞–ª)
      if (user._id.equals(partner._id)) {
        console.warn(`REFERRAL SECURITY: –ü–æ–ø—ã—Ç–∫–∞ —Å–∞–º–æ—Ä–µ—Ñ–µ—Ä–∞–ª–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º ${user._id}`);
        await session.abortTransaction();
        return null;
      }
      
      // 3. –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ –∏–≥—Ä–æ–∫ –ü–†–û–ò–ì–†–ê–õ (–Ω–µ—Ç –∫–æ–º–∏—Å—Å–∏–∏ —Å –≤—ã–∏–≥—Ä—ã—à–µ–π)
      if (profit >= 0) {
        // –ò–≥—Ä–æ–∫ –≤—ã–∏–≥—Ä–∞–ª –∏–ª–∏ —Å—ã–≥—Ä–∞–ª –≤ –Ω–æ–ª—å - –∫–æ–º–∏—Å—Å–∏–∏ –Ω–µ—Ç
        await session.abortTransaction();
        return null;
      }
      
      // 4. –ü—Ä–æ–≤–µ—Ä—è–µ–º –º–∏–Ω–∏–º–∞–ª—å–Ω—É—é —Å—Ç–∞–≤–∫—É –¥–ª—è –ø—Ä–µ–¥–æ—Ç–≤—Ä–∞—â–µ–Ω–∏—è —Å–ø–∞–º–∞
      if (bet < 0.1) {
        console.warn(`REFERRAL SECURITY: –°—Ç–∞–≤–∫–∞ —Å–ª–∏—à–∫–æ–º –º–∞–ª–∞ –¥–ª—è —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω–æ–π –∫–æ–º–∏—Å—Å–∏–∏: ${bet}`);
        await session.abortTransaction();
        return null;
      }
      
      // 4. –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –∞–∫—Ç–∏–≤–µ–Ω (–∑–∞—â–∏—Ç–∞ –æ—Ç –±–æ—Ç–æ–≤)
      const userGameCount = await User.aggregate([
        { $match: { _id: user._id } },
        { $lookup: { from: 'games', localField: '_id', foreignField: 'user', as: 'games' } },
        { $project: { gameCount: { $size: '$games' } } }
      ]).session(session);
      
      if (userGameCount[0]?.gameCount < 3) {
        console.warn(`REFERRAL SECURITY: –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å ${user._id} –Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –∞–∫—Ç–∏–≤–µ–Ω –¥–ª—è —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω–æ–π –∫–æ–º–∏—Å—Å–∏–∏ (–∏–≥—Ä: ${userGameCount[0]?.gameCount || 0})`);
        await session.abortTransaction();
        return null;
      }
      
      // –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø–∞—Ä—Ç–Ω–µ—Ä–∞
      await this.updatePartnerLevel(partner._id, session);
      
      // –ü–æ–ª—É—á–∞–µ–º –∞–∫—Ç—É–∞–ª—å–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–∞—Ä—Ç–Ω–µ—Ä–µ
      const updatedPartner = await User.findById(partner._id).session(session);
      
      // –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º –∫–æ–º–∏—Å—Å–∏—é —Å –ü–†–û–ò–ì–†–´–®–ê —Ä–µ—Ñ–µ—Ä–∞–ª–∞
      const commissionPercent = updatedPartner.referralStats.commissionPercent;
      const lossAmount = Math.abs(profit); // –†–∞–∑–º–µ—Ä –ø—Ä–æ–∏–≥—Ä—ã—à–∞
      const earnedAmount = lossAmount * (commissionPercent / 100);
      
      // –°–æ–∑–¥–∞–µ–º –∑–∞–ø–∏—Å—å –æ –Ω–∞—á–∏—Å–ª–µ–Ω–∏–∏
      const earning = new ReferralEarning({
        partner: partner._id,
        referral: user._id,
        game: gameId,
        type: 'game_loss',
        calculation: {
          baseAmount: lossAmount, // –°—É–º–º–∞ –ø—Ä–æ–∏–≥—Ä—ã—à–∞ —Ä–µ—Ñ–µ—Ä–∞–ª–∞
          partnerLevel: updatedPartner.referralStats.level,
          commissionPercent: commissionPercent,
          earnedAmount: earnedAmount
        },
        status: 'credited',
        balanceBefore: updatedPartner.referralStats.referralBalance,
        balanceAfter: updatedPartner.referralStats.referralBalance + earnedAmount,
        metadata: {
          gameType: gameType
        },
        creditedAt: new Date()
      });
      
      await earning.save({ session });
      
      // –û–±–Ω–æ–≤–ª—è–µ–º –±–∞–ª–∞–Ω—Å –ø–∞—Ä—Ç–Ω–µ—Ä–∞
      updatedPartner.referralStats.referralBalance += earnedAmount;
      updatedPartner.referralStats.totalEarned += earnedAmount;
      await updatedPartner.save({ session });
      
      await session.commitTransaction();
      
      console.log(`REFERRAL: –ù–∞—á–∏—Å–ª–µ–Ω–æ ${earnedAmount.toFixed(2)} USDT –ø–∞—Ä—Ç–Ω–µ—Ä—É ${partner._id} –æ—Ç –ø—Ä–æ–∏–≥—Ä—ã—à–∞ —Ä–µ—Ñ–µ—Ä–∞–ª–∞ ${user._id}`);
      
      return {
        partnerId: partner._id,
        referralId: user._id,
        earnedAmount,
        commissionPercent,
        level: updatedPartner.referralStats.level
      };
      
    } catch (error) {
      await session.abortTransaction();
      console.error('REFERRAL: –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –ø—Ä–æ–∏–≥—Ä—ã—à–∞:', error);
      throw error;
    } finally {
      session.endSession();
    }
  }

  /**
   * –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –ø–µ—Ä–≤—ã–π –¥–µ–ø–æ–∑–∏—Ç —Ä–µ—Ñ–µ—Ä–∞–ª–∞ –∏ –Ω–∞—á–∏—Å–ª—è–µ—Ç –±–æ–Ω—É—Å –ø–∞—Ä—Ç–Ω–µ—Ä—É
   * @param {string} userId - ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, —Å–¥–µ–ª–∞–≤—à–µ–≥–æ –¥–µ–ø–æ–∑–∏—Ç
   * @param {number} depositAmount - –°—É–º–º–∞ –¥–µ–ø–æ–∑–∏—Ç–∞
   * @returns {Object|null} - –î–∞–Ω–Ω—ã–µ –æ –Ω–∞—á–∏—Å–ª–µ–Ω–∏–∏ –∏–ª–∏ null
   */
  async processFirstDeposit(userId, depositAmount) {
    const session = await mongoose.startSession();
    session.startTransaction();
    
    try {
      const user = await User.findById(userId).session(session);
      if (!user || !user.referrer) {
        await session.abortTransaction();
        return null;
      }
      
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –±—ã–ª –ª–∏ —É–∂–µ –Ω–∞—á–∏—Å–ª–µ–Ω –±–æ–Ω—É—Å –∑–∞ –ø–µ—Ä–≤—ã–π –¥–µ–ø–æ–∑–∏—Ç
      const existingBonus = await ReferralEarning.findOne({
        referral: userId,
        type: 'registration_bonus'
      }).session(session);
      
      if (existingBonus) {
        // –ë–æ–Ω—É—Å —É–∂–µ –±—ã–ª –Ω–∞—á–∏—Å–ª–µ–Ω
        await session.abortTransaction();
        return null;
      }
      
      const partner = await User.findById(user.referrer).session(session);
      if (!partner) {
        await session.abortTransaction();
        return null;
      }
      
      // –§–∏–∫—Å–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –±–æ–Ω—É—Å –∑–∞ –ø–µ—Ä–≤—ã–π –¥–µ–ø–æ–∑–∏—Ç —Ä–µ—Ñ–µ—Ä–∞–ª–∞
      const bonusAmount = 1; // 1 USDT
      
      // –°–æ–∑–¥–∞–µ–º –∑–∞–ø–∏—Å—å –æ –Ω–∞—á–∏—Å–ª–µ–Ω–∏–∏
      const earning = new ReferralEarning({
        partner: partner._id,
        referral: user._id,
        game: null, // –≠—Ç–æ –Ω–µ –∏–≥—Ä–∞, –∞ –±–æ–Ω—É—Å
        type: 'registration_bonus',
        calculation: {
          baseAmount: depositAmount,
          partnerLevel: partner.referralStats.level,
          commissionPercent: 0, // –§–∏–∫—Å–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –±–æ–Ω—É—Å
          earnedAmount: bonusAmount
        },
        status: 'credited',
        balanceBefore: partner.referralStats.referralBalance,
        balanceAfter: partner.referralStats.referralBalance + bonusAmount,
        metadata: {
          notes: `–ë–æ–Ω—É—Å –∑–∞ –ø–µ—Ä–≤—ã–π –¥–µ–ø–æ–∑–∏—Ç —Ä–µ—Ñ–µ—Ä–∞–ª–∞ ${depositAmount} USDT`
        },
        creditedAt: new Date()
      });
      
      await earning.save({ session });
      
      // –û–±–Ω–æ–≤–ª—è–µ–º –±–∞–ª–∞–Ω—Å –ø–∞—Ä—Ç–Ω–µ—Ä–∞
      partner.referralStats.referralBalance += bonusAmount;
      partner.referralStats.totalEarned += bonusAmount;
      await partner.save({ session });
      
      await session.commitTransaction();
      
      console.log(`REFERRAL: –ù–∞—á–∏—Å–ª–µ–Ω –±–æ–Ω—É—Å ${bonusAmount} USDT –ø–∞—Ä—Ç–Ω–µ—Ä—É ${partner._id} –∑–∞ –ø–µ—Ä–≤—ã–π –¥–µ–ø–æ–∑–∏—Ç —Ä–µ—Ñ–µ—Ä–∞–ª–∞ ${user._id}`);
      
      return {
        partnerId: partner._id,
        referralId: user._id,
        earnedAmount: bonusAmount
      };
      
    } catch (error) {
      await session.abortTransaction();
      console.error('REFERRAL: –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –ø–µ—Ä–≤–æ–≥–æ –¥–µ–ø–æ–∑–∏—Ç–∞:', error);
      throw error;
    } finally {
      session.endSession();
    }
  }

  /**
   * –û–±–Ω–æ–≤–ª—è–µ—Ç —É—Ä–æ–≤–µ–Ω—å –ø–∞—Ä—Ç–Ω–µ—Ä–∞ –Ω–∞ –æ—Å–Ω–æ–≤–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –∞–∫—Ç–∏–≤–Ω—ã—Ö —Ä–µ—Ñ–µ—Ä–∞–ª–æ–≤
   * @param {string} partnerId - ID –ø–∞—Ä—Ç–Ω–µ—Ä–∞
   * @param {Object} session - MongoDB —Å–µ—Å—Å–∏—è
   * @returns {Object} - –û–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–π –ø–∞—Ä—Ç–Ω–µ—Ä
   */
  async updatePartnerLevel(partnerId, session = null) {
    try {
      const partner = await User.findById(partnerId).session(session);
      if (!partner) {
        throw new Error('–ü–∞—Ä—Ç–Ω–µ—Ä –Ω–µ –Ω–∞–π–¥–µ–Ω');
      }
      
      // –°—á–∏—Ç–∞–µ–º –∞–∫—Ç–∏–≤–Ω—ã—Ö —Ä–µ—Ñ–µ—Ä–∞–ª–æ–≤
      const thirtyDaysAgo = new Date();
      thirtyDaysAgo.setDate(thirtyDaysAgo.getDate() - 30);
      
      const activeReferralsCount = await User.countDocuments({
        referrer: partnerId,
        lastActivity: { $gte: thirtyDaysAgo },
        totalWagered: { $gt: 0 }
      }).session(session);
      
      // –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
      partner.referralStats.activeReferrals = activeReferralsCount;
      partner.referralStats.totalReferrals = await User.countDocuments({ 
        referrer: partnerId 
      }).session(session);
      
      // –û–ø—Ä–µ–¥–µ–ª—è–µ–º –Ω–æ–≤—ã–π —É—Ä–æ–≤–µ–Ω—å
      let newLevel = 'bronze';
      let newCommissionPercent = 5;
      
      for (const [level, config] of Object.entries(this.levels).reverse()) {
        if (activeReferralsCount >= config.requiredActiveReferrals) {
          newLevel = level;
          newCommissionPercent = config.commissionPercent;
          break;
        }
      }
      
      // –û–±–Ω–æ–≤–ª—è–µ–º —É—Ä–æ–≤–µ–Ω—å –µ—Å–ª–∏ –æ–Ω –∏–∑–º–µ–Ω–∏–ª—Å—è
      if (partner.referralStats.level !== newLevel) {
        console.log(`REFERRAL: –ü–∞—Ä—Ç–Ω–µ—Ä ${partnerId} –ø–æ–≤—ã—à–µ–Ω –¥–æ —É—Ä–æ–≤–Ω—è ${newLevel}`);
        partner.referralStats.level = newLevel;
        partner.referralStats.commissionPercent = newCommissionPercent;
        partner.referralStats.levelUpdatedAt = new Date();
      }
      
      await partner.save({ session });
      return partner;
      
    } catch (error) {
      console.error('REFERRAL: –û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —É—Ä–æ–≤–Ω—è –ø–∞—Ä—Ç–Ω–µ—Ä–∞:', error);
      throw error;
    }
  }

  /**
   * –ü–æ–ª—É—á–∞–µ—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø–∞—Ä—Ç–Ω–µ—Ä–∞
   * @param {string} partnerId - ID –ø–∞—Ä—Ç–Ω–µ—Ä–∞
   * @param {Date} periodStart - –ù–∞—á–∞–ª–æ –ø–µ—Ä–∏–æ–¥–∞ (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ)
   * @returns {Object} - –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–∞—Ä—Ç–Ω–µ—Ä–∞
   */
  async getPartnerStatistics(partnerId, periodStart = null) {
    try {
      const partner = await User.findById(partnerId);
      if (!partner) {
        throw new Error('–ü–∞—Ä—Ç–Ω–µ—Ä –Ω–µ –Ω–∞–π–¥–µ–Ω');
      }
      
      // –û–±–Ω–æ–≤–ª—è–µ–º —É—Ä–æ–≤–µ–Ω—å
      await this.updatePartnerLevel(partnerId);
      
      // –ü–æ–ª—É—á–∞–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
      const updatedPartner = await User.findById(partnerId);
      
      // –ë–∞–∑–æ–≤–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
      const stats = {
        level: updatedPartner.referralStats.level,
        levelInfo: this.levels[updatedPartner.referralStats.level],
        commissionPercent: updatedPartner.referralStats.commissionPercent,
        referralBalance: updatedPartner.referralStats.referralBalance,
        totalEarned: updatedPartner.referralStats.totalEarned,
        totalWithdrawn: updatedPartner.referralStats.totalWithdrawn,
        totalReferrals: updatedPartner.referralStats.totalReferrals,
        activeReferrals: updatedPartner.referralStats.activeReferrals,
        referralsWithDeposits: await User.countDocuments({
          referrer: partnerId,
          totalWagered: { $gt: 0 }
        })
      };
      
      // –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∑–∞ –ø–µ—Ä–∏–æ–¥
      if (periodStart) {
        const earningsStats = await ReferralEarning.aggregate([
          {
            $match: {
              partner: partnerId,
              status: 'credited',
              createdAt: { $gte: periodStart }
            }
          },
          {
            $group: {
              _id: null,
              periodEarned: { $sum: '$calculation.earnedAmount' },
              periodTransactions: { $sum: 1 }
            }
          }
        ]);
        
        stats.periodEarned = earningsStats[0]?.periodEarned || 0;
        stats.periodTransactions = earningsStats[0]?.periodTransactions || 0;
      }
      
      // –ü—Ä–æ–≥—Ä–µ—Å—Å –¥–æ —Å–ª–µ–¥—É—é—â–µ–≥–æ —É—Ä–æ–≤–Ω—è
      const currentLevelIndex = Object.keys(this.levels).indexOf(stats.level);
      const levelKeys = Object.keys(this.levels);
      
      if (currentLevelIndex < levelKeys.length - 1) {
        const nextLevel = levelKeys[currentLevelIndex + 1];
        const nextLevelConfig = this.levels[nextLevel];
        stats.nextLevel = nextLevel;
        stats.referralsToNextLevel = Math.max(0, 
          nextLevelConfig.requiredActiveReferrals - stats.activeReferrals
        );
        stats.progressToNextLevel = (stats.activeReferrals / nextLevelConfig.requiredActiveReferrals) * 100;
      } else {
        stats.nextLevel = null;
        stats.referralsToNextLevel = 0;
        stats.progressToNextLevel = 100;
      }
      
      return {
        partner: {
          id: updatedPartner._id,
          telegramId: updatedPartner.telegramId,
          username: updatedPartner.username,
          name: `${updatedPartner.firstName} ${updatedPartner.lastName}`.trim(),
          referralCode: updatedPartner.referralCode,
          level: stats.level,
          levelInfo: stats.levelInfo,
          progress: {
            current: stats.activeReferrals,
            needed: stats.referralsToNextLevel,
            nextLevel: stats.nextLevel,
            progress: stats.progressToNextLevel
          }
        },
        stats
      };
      
    } catch (error) {
      console.error('REFERRAL: –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –ø–∞—Ä—Ç–Ω–µ—Ä–∞:', error);
      throw error;
    }
  }

  /**
   * –°–æ–∑–¥–∞–µ—Ç –≤—ã–ø–ª–∞—Ç—É —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω–æ–≥–æ –±–∞–ª–∞–Ω—Å–∞ –Ω–∞ –æ—Å–Ω–æ–≤–Ω–æ–π —Å—á–µ—Ç
   * @param {string} partnerId - ID –ø–∞—Ä—Ç–Ω–µ—Ä–∞
   * @param {number} amount - –°—É–º–º–∞ (–µ—Å–ª–∏ –Ω–µ —É–∫–∞–∑–∞–Ω–∞, –≤—ã–ø–ª–∞—á–∏–≤–∞–µ—Ç—Å—è –≤–µ—Å—å –±–∞–ª–∞–Ω—Å)
   * @returns {Object} - –î–∞–Ω–Ω—ã–µ –æ –≤—ã–ø–ª–∞—Ç–µ
   */
  async createReferralPayout(partnerId, amount = null) {
    const session = await mongoose.startSession();
    session.startTransaction();
    
    try {
      const partner = await User.findById(partnerId).session(session);
      if (!partner) {
        throw new Error('–ü–∞—Ä—Ç–Ω–µ—Ä –Ω–µ –Ω–∞–π–¥–µ–Ω');
      }
      
      const referralBalance = partner.referralStats.referralBalance;
      
      // –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Å—É–º–º—É –≤—ã–ø–ª–∞—Ç—ã
      const payoutAmount = amount || referralBalance;
      
      // –ü—Ä–æ–≤–µ—Ä–∫–∏
      if (payoutAmount <= 0) {
        throw new Error('–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–∞—è —Å—É–º–º–∞ –¥–ª—è –≤—ã–ø–ª–∞—Ç—ã');
      }
      
      if (payoutAmount > referralBalance) {
        throw new Error('–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å—Ä–µ–¥—Å—Ç–≤ –Ω–∞ —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω–æ–º –±–∞–ª–∞–Ω—Å–µ');
      }
      
      if (payoutAmount < 10) {
        throw new Error('–ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è —Å—É–º–º–∞ –¥–ª—è –≤—ã–≤–æ–¥–∞: 10 USDT');
      }
      
      // –°–æ–∑–¥–∞–µ–º –∑–∞–ø–∏—Å—å –æ –≤—ã–ø–ª–∞—Ç–µ
      const payout = new ReferralPayout({
        partner: partnerId,
        amount: payoutAmount,
        status: 'completed', // –°—Ä–∞–∑—É –∑–∞–≤–µ—Ä—à–∞–µ–º, —Ç–∞–∫ –∫–∞–∫ —ç—Ç–æ –ø–µ—Ä–µ–≤–æ–¥ –º–µ–∂–¥—É –±–∞–ª–∞–Ω—Å–∞–º–∏
        type: 'manual',
        earningsCount: await ReferralEarning.countDocuments({
          partner: partnerId,
          status: 'credited'
        }),
        referralBalanceBefore: referralBalance,
        referralBalanceAfter: referralBalance - payoutAmount,
        operationalBalanceBefore: partner.balance,
        operationalBalanceAfter: partner.balance + payoutAmount,
        processing: {
          method: 'balance_transfer',
          approvedAt: new Date()
        },
        processedAt: new Date(),
        completedAt: new Date()
      });
      
      await payout.save({ session });
      
      // –û–±–Ω–æ–≤–ª—è–µ–º –±–∞–ª–∞–Ω—Å—ã –ø–∞—Ä—Ç–Ω–µ—Ä–∞
      partner.referralStats.referralBalance -= payoutAmount;
      partner.referralStats.totalWithdrawn += payoutAmount;
      partner.referralStats.lastPayoutAt = new Date();
      partner.balance += payoutAmount;
      
      await partner.save({ session });
      
      // –°–æ–∑–¥–∞–µ–º —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—é –¥–ª—è —É—á–µ—Ç–∞
      const transaction = new Transaction({
        user: partnerId,
        type: 'referral',
        amount: payoutAmount,
        status: 'completed',
        description: `–í—ã–≤–æ–¥ —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω–æ–≥–æ –±–∞–ª–∞–Ω—Å–∞: ${payoutAmount} USDT`,
        balanceBefore: partner.balance - payoutAmount,
        balanceAfter: partner.balance
      });
      
      await transaction.save({ session });
      
      await session.commitTransaction();
      
      console.log(`REFERRAL: –í—ã–ø–ª–∞—Ç–∞ ${payoutAmount} USDT –ø–∞—Ä—Ç–Ω–µ—Ä—É ${partnerId} –∑–∞–≤–µ—Ä—à–µ–Ω–∞`);
      
      return payout;
      
    } catch (error) {
      await session.abortTransaction();
      console.error('REFERRAL: –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –≤—ã–ø–ª–∞—Ç—ã:', error);
      throw error;
    } finally {
      session.endSession();
    }
  }

  /**
   * –ü–æ–ª—É—á–∞–µ—Ç —Å–∏—Å—Ç–µ–º–Ω—É—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω–æ–π –ø—Ä–æ–≥—Ä–∞–º–º—ã
   * @param {Date} periodStart - –ù–∞—á–∞–ª–æ –ø–µ—Ä–∏–æ–¥–∞ (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ)
   * @returns {Object} - –°–∏—Å—Ç–µ–º–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
   */
  async getSystemStatistics(periodStart = null) {
    try {
      // –û–±—â–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ –ø–∞—Ä—Ç–Ω–µ—Ä–∞–º
      const partnersStats = await User.aggregate([
        {
          $match: {
            'referralStats.totalEarned': { $gt: 0 }
          }
        },
        {
          $group: {
            _id: '$referralStats.level',
            count: { $sum: 1 },
            totalEarned: { $sum: '$referralStats.totalEarned' },
            totalBalance: { $sum: '$referralStats.referralBalance' }
          }
        },
        { $sort: { _id: 1 } }
      ]);
      
      // –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ —Ä–µ—Ñ–µ—Ä–∞–ª–∞–º
      const referralsStats = await User.aggregate([
        {
          $match: { referrer: { $exists: true } }
        },
        {
          $lookup: {
            from: 'users',
            localField: 'referrer',
            foreignField: '_id',
            as: 'partnerInfo'
          }
        },
        {
          $group: {
            _id: null,
            total: { $sum: 1 },
            withDeposits: { 
              $sum: { $cond: [{ $gt: ['$totalWagered', 0] }, 1, 0] }
            },
            active: {
              $sum: {
                $cond: [
                  {
                    $and: [
                      { $gte: ['$lastActivity', new Date(Date.now() - 30 * 24 * 60 * 60 * 1000)] },
                      { $gt: ['$totalWagered', 0] }
                    ]
                  },
                  1,
                  0
                ]
              }
            }
          }
        }
      ]);
      
      // –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ –≤—ã–ø–ª–∞—Ç–∞–º
      const payoutsStats = await ReferralPayout.getPayoutStats(null, periodStart);
      
      // –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ –Ω–∞—á–∏—Å–ª–µ–Ω–∏—è–º –∑–∞ –ø–µ—Ä–∏–æ–¥
      let earningsStats = [];
      if (periodStart) {
        earningsStats = await ReferralEarning.aggregate([
          {
            $match: {
              status: 'credited',
              createdAt: { $gte: periodStart }
            }
          },
          {
            $group: {
              _id: '$type',
              count: { $sum: 1 },
              totalAmount: { $sum: '$calculation.earnedAmount' }
            }
          }
        ]);
      }
      
      // –§–∏–Ω–∞–Ω—Å–æ–≤–æ–µ –≤–ª–∏—è–Ω–∏–µ –Ω–∞ –∫–∞–∑–∏–Ω–æ
      const totalReferralPayments = partnersStats.reduce((sum, level) => sum + level.totalEarned, 0);
      const totalReferralBalance = partnersStats.reduce((sum, level) => sum + level.totalBalance, 0);
      
      return {
        partners: {
          total: partnersStats.reduce((sum, level) => sum + level.count, 0),
          byLevel: partnersStats,
          totalBalance: totalReferralBalance
        },
        referrals: {
          total: referralsStats[0]?.total || 0,
          withDeposits: referralsStats[0]?.withDeposits || 0,
          active: referralsStats[0]?.active || 0,
          conversionRate: referralsStats[0]?.total > 0 
            ? ((referralsStats[0]?.active / referralsStats[0]?.total) * 100).toFixed(2)
            : 0
        },
        payouts: {
          totalPaid: payoutsStats[0]?.totalPaid || 0,
          payoutsCount: payoutsStats[0]?.payoutsCount || 0,
          avgPayout: payoutsStats[0]?.avgPayout || 0
        },
        earnings: earningsStats,
        finance: {
          totalReferralPayments,
          pendingPayouts: totalReferralBalance,
          impactPercent: 0 // –ë—É–¥–µ—Ç —Ä–∞—Å—Å—á–∏—Ç–∞–Ω –æ—Ç–Ω–æ—Å–∏—Ç–µ–ª—å–Ω–æ –æ–±—â–µ–π –ø—Ä–∏–±—ã–ª–∏ –∫–∞–∑–∏–Ω–æ
        }
      };
      
    } catch (error) {
      console.error('REFERRAL: –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å–∏—Å—Ç–µ–º–Ω–æ–π —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏:', error);
      throw error;
    }
  }

  /**
   * –û–±–Ω–∞—Ä—É–∂–∏–≤–∞–µ—Ç –ø–æ–¥–æ–∑—Ä–∏—Ç–µ–ª—å–Ω—É—é –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å –≤ —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω–æ–π —Å–∏—Å—Ç–µ–º–µ
   * @returns {Array} - –ú–∞—Å—Å–∏–≤ –ø–æ–¥–æ–∑—Ä–∏—Ç–µ–ª—å–Ω—ã—Ö –ø–∞—Ç—Ç–µ—Ä–Ω–æ–≤
   */
  async detectFraudulentActivity() {
    try {
      const suspiciousPatterns = [];
      
      // 1. –ü–∞—Ä—Ç–Ω–µ—Ä—ã —Å –∞–Ω–æ–º–∞–ª—å–Ω–æ –≤—ã—Å–æ–∫–∏–º –ø—Ä–æ—Ü–µ–Ω—Ç–æ–º –Ω–µ–∞–∫—Ç–∏–≤–Ω—ã—Ö —Ä–µ—Ñ–µ—Ä–∞–ª–æ–≤
      const partnersWithInactiveReferrals = await User.aggregate([
        {
          $match: {
            'referralStats.totalReferrals': { $gt: 5 }
          }
        },
        {
          $project: {
            telegramId: 1,
            username: 1,
            totalReferrals: '$referralStats.totalReferrals',
            activeReferrals: '$referralStats.activeReferrals',
            inactivePercent: {
              $multiply: [
                { $divide: [
                  { $subtract: ['$referralStats.totalReferrals', '$referralStats.activeReferrals'] },
                  '$referralStats.totalReferrals'
                ]},
                100
              ]
            }
          }
        },
        {
          $match: {
            inactivePercent: { $gt: 80 } // –ë–æ–ª–µ–µ 80% –Ω–µ–∞–∫—Ç–∏–≤–Ω—ã—Ö
          }
        },
        { $sort: { inactivePercent: -1 } }
      ]);
      
      if (partnersWithInactiveReferrals.length > 0) {
        suspiciousPatterns.push({
          type: 'high_inactive_rate',
          severity: 'medium',
          message: '–ü–∞—Ä—Ç–Ω–µ—Ä—ã —Å –≤—ã—Å–æ–∫–∏–º –ø—Ä–æ—Ü–µ–Ω—Ç–æ–º –Ω–µ–∞–∫—Ç–∏–≤–Ω—ã—Ö —Ä–µ—Ñ–µ—Ä–∞–ª–æ–≤',
          data: partnersWithInactiveReferrals
        });
      }
      
      // 2. –ú–∞—Å—Å–æ–≤—ã–µ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –∑–∞ –∫–æ—Ä–æ—Ç–∫–∏–π –ø–µ—Ä–∏–æ–¥
      const bulkRegistrations = await User.aggregate([
        {
          $match: {
            referrer: { $exists: true }
          }
        },
        {
          $group: {
            _id: {
              referrer: '$referrer',
              hour: {
                $dateToString: {
                  format: '%Y-%m-%d %H:00',
                  date: '$createdAt'
                }
              }
            },
            count: { $sum: 1 }
          }
        },
        {
          $match: {
            count: { $gt: 10 } // –ë–æ–ª–µ–µ 10 —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–π –∑–∞ —á–∞—Å
          }
        },
        {
          $lookup: {
            from: 'users',
            localField: '_id.referrer',
            foreignField: '_id',
            as: 'partnerInfo'
          }
        },
        { $sort: { count: -1 } }
      ]);
      
      if (bulkRegistrations.length > 0) {
        suspiciousPatterns.push({
          type: 'bulk_registrations',
          severity: 'high',
          message: '–ú–∞—Å—Å–æ–≤—ã–µ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –∑–∞ –∫–æ—Ä–æ—Ç–∫–∏–π –ø–µ—Ä–∏–æ–¥',
          data: bulkRegistrations
        });
      }
      
      // 3. –†–µ—Ñ–µ—Ä–∞–ª—ã —Å –¥–µ–ø–æ–∑–∏—Ç–∞–º–∏, –Ω–æ –±–µ–∑ –∏–≥—Ä–æ–≤–æ–π –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏
      const depositsWithoutGames = await User.aggregate([
        {
          $match: {
            referrer: { $exists: true },
            totalWagered: { $gt: 0 }
          }
        },
        {
          $lookup: {
            from: 'games',
            localField: '_id',
            foreignField: 'user',
            as: 'games'
          }
        },
        {
          $match: {
            'games.0': { $exists: false } // –ù–µ—Ç –∏–≥—Ä
          }
        },
        {
          $group: {
            _id: '$referrer',
            count: { $sum: 1 }
          }
        },
        {
          $match: {
            count: { $gt: 3 } // –ë–æ–ª–µ–µ 3 —Ç–∞–∫–∏—Ö —Ä–µ—Ñ–µ—Ä–∞–ª–æ–≤
          }
        }
      ]);
      
      if (depositsWithoutGames.length > 0) {
        suspiciousPatterns.push({
          type: 'deposits_without_games',
          severity: 'high',
          message: '–†–µ—Ñ–µ—Ä–∞–ª—ã —Å –¥–µ–ø–æ–∑–∏—Ç–∞–º–∏, –Ω–æ –±–µ–∑ –∏–≥—Ä',
          data: depositsWithoutGames
        });
      }
      
      return suspiciousPatterns;
      
    } catch (error) {
      console.error('REFERRAL: –û—à–∏–±–∫–∞ –æ–±–Ω–∞—Ä—É–∂–µ–Ω–∏—è –º–æ—à–µ–Ω–Ω–∏—á–µ—Å—Ç–≤–∞:', error);
      throw error;
    }
  }

  /**
   * –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω—ã–µ –Ω–∞—á–∏—Å–ª–µ–Ω–∏—è —Å –∫–æ–º–∏—Å—Å–∏–∏ –∫–∞–∑–∏–Ω–æ (–¥–ª—è –¥—É—ç–ª–µ–π)
   * –ù–∞—á–∏—Å–ª—è–µ—Ç –∫–æ–º–∏—Å—Å–∏—é —Ç–æ–ª—å–∫–æ —Ä–µ—Ñ–µ—Ä–µ—Ä—É –ø—Ä–æ–∏–≥—Ä–∞–≤—à–µ–≥–æ –∏–≥—Ä–æ–∫–∞
   * @param {Object} commissionData - –î–∞–Ω–Ω—ã–µ –æ –∫–æ–º–∏—Å—Å–∏–∏
   * @returns {Array} - –ú–∞—Å—Å–∏–≤ –Ω–∞—á–∏—Å–ª–µ–Ω–∏–π –∏–ª–∏ –ø—É—Å—Ç–æ–π –º–∞—Å—Å–∏–≤
   */
  async processCommission(commissionData) {
    try {
      const { winnerId, loserId, commission, gameType, gameId } = commissionData;
      const results = [];
      
      console.log(`REFERRAL: –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∏—Å—Å–∏–∏ ${commission} USDT –¥–ª—è –¥—É—ç–ª–∏ ${gameId} (—Ç–æ–ª—å–∫–æ –ø—Ä–æ–∏–≥—Ä–∞–≤—à–∏–π)`);
      
      // –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω—É—é –∫–æ–º–∏—Å—Å–∏—é —Ç–æ–ª—å–∫–æ –¥–ª—è –ø—Ä–æ–∏–≥—Ä–∞–≤—à–µ–≥–æ –∏–≥—Ä–æ–∫–∞
      const playerIds = [loserId].filter(Boolean);
      
      for (const playerId of playerIds) {
        const session = await mongoose.startSession();
        session.startTransaction();
        
        try {
          // –ù–∞—Ö–æ–¥–∏–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
          const user = await User.findOne({ telegramId: playerId }).session(session);
          if (!user || !user.referrer) {
            console.log(`REFERRAL: –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å ${playerId} –Ω–µ –∏–º–µ–µ—Ç —Ä–µ—Ñ–µ—Ä–µ—Ä–∞`);
            await session.abortTransaction();
            continue;
          }
          
          // –ù–∞—Ö–æ–¥–∏–º –ø–∞—Ä—Ç–Ω–µ—Ä–∞ (—Ä–µ—Ñ–µ—Ä–µ—Ä–∞)
          const partner = await User.findById(user.referrer).session(session);
          if (!partner) {
            console.log(`REFERRAL: –†–µ—Ñ–µ—Ä–µ—Ä –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ${playerId} –Ω–µ –Ω–∞–π–¥–µ–Ω`);
            await session.abortTransaction();
            continue;
          }
          
          // –ë–ï–ó–û–ü–ê–°–ù–û–°–¢–¨: –ü—Ä–æ–≤–µ—Ä–∫–∏
          if (partner.isBlocked) {
            console.warn(`REFERRAL: –ü–∞—Ä—Ç–Ω–µ—Ä ${partner._id} –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω`);
            await session.abortTransaction();
            continue;
          }
          
          if (user._id.equals(partner._id)) {
            console.warn(`REFERRAL: –ü–æ–ø—ã—Ç–∫–∞ —Å–∞–º–æ—Ä–µ—Ñ–µ—Ä–∞–ª–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º ${user._id}`);
            await session.abortTransaction();
            continue;
          }
          
          // –û–ø—Ä–µ–¥–µ–ª—è–µ–º —É—Ä–æ–≤–µ–Ω—å –ø–∞—Ä—Ç–Ω–µ—Ä–∞ –∏ –∫–æ–º–∏—Å—Å–∏—é
          const partnerLevel = this.getPartnerLevel(partner.level);
          const commissionPercent = partnerLevel.commissionPercent;
          
          // –í—ã—á–∏—Å–ª—è–µ–º —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω–æ–µ –Ω–∞—á–∏—Å–ª–µ–Ω–∏–µ —Å –∫–æ–º–∏—Å—Å–∏–∏ –∫–∞–∑–∏–Ω–æ
          const referralAmount = Math.round(commission * (commissionPercent / 100) * 100) / 100;
          
          if (referralAmount < 0.01) {
            console.log(`REFERRAL: –°—É–º–º–∞ ${referralAmount} —Å–ª–∏—à–∫–æ–º –º–∞–ª–∞ –¥–ª—è –Ω–∞—á–∏—Å–ª–µ–Ω–∏—è`);
            await session.abortTransaction();
            continue;
          }
          
          // –°–æ–∑–¥–∞–µ–º –∑–∞–ø–∏—Å—å –æ –Ω–∞—á–∏—Å–ª–µ–Ω–∏–∏
          const earning = await ReferralEarning.create([{
            partner: partner._id,
            user: user._id,
            game: gameId,
            gameType,
            type: 'commission', // –ù–æ–≤—ã–π —Ç–∏–ø –¥–ª—è –¥—É—ç–ª–µ–π
            calculation: {
              commissionAmount: commission,
              commissionPercent,
              earnedAmount: referralAmount,
              level: partnerLevel.name
            },
            status: 'credited'
          }], { session });
          
          // –ù–∞—á–∏—Å–ª—è–µ–º –±–∞–ª–∞–Ω—Å –ø–∞—Ä—Ç–Ω–µ—Ä—É
          partner.balance = Math.round((partner.balance + referralAmount) * 100) / 100;
          partner.totalEarnings = Math.round((partner.totalEarnings + referralAmount) * 100) / 100;
          await partner.save({ session });
          
          // –°–æ–∑–¥–∞–µ–º —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—é
          await Transaction.create([{
            user: partner._id,
            type: 'referral_commission',
            amount: referralAmount,
            description: `–†–µ—Ñ–µ—Ä–∞–ª—å–Ω–∞—è –∫–æ–º–∏—Å—Å–∏—è —Å –¥—É—ç–ª–∏ ${gameId}`,
            balanceBefore: partner.balance - referralAmount,
            balanceAfter: partner.balance,
            relatedUser: user._id
          }], { session });
          
          // –û–±–Ω–æ–≤–ª—è–µ–º —É—Ä–æ–≤–µ–Ω—å –ø–∞—Ä—Ç–Ω–µ—Ä–∞
          await this.updatePartnerLevel(partner._id, session);
          
          await session.commitTransaction();
          
          results.push({
            partnerId: partner._id,
            partnerUsername: partner.username,
            userId: user._id,
            userUsername: user.username,
            earnedAmount: referralAmount,
            commissionPercent,
            level: partnerLevel.name
          });
          
          console.log(`REFERRAL: –ù–∞—á–∏—Å–ª–µ–Ω–æ ${referralAmount} USDT –ø–∞—Ä—Ç–Ω–µ—Ä—É ${partner.username} (${commissionPercent}% —Å ${commission} USDT)`);
          
        } catch (error) {
          await session.abortTransaction();
          console.error(`REFERRAL: –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω–æ–π –∫–æ–º–∏—Å—Å–∏–∏ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ${playerId}:`, error);
        } finally {
          session.endSession();
        }
      }
      
      return results;
      
    } catch (error) {
      console.error('REFERRAL: –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∫–æ–º–∏—Å—Å–∏–∏:', error);
      throw error;
    }
  }
}

module.exports = new ReferralService();