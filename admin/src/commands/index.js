// admin/src/commands/index.js
const { Markup } = require('telegraf');
const axios = require('axios');

// –ü–æ–ª—É—á–∞–µ–º API URL –∏ —Ç–æ–∫–µ–Ω –∏–∑ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è
const apiUrl = process.env.API_URL || 'https://greenlight-api-ghqh.onrender.com/api';
const adminToken = process.env.ADMIN_API_TOKEN;

// –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ —Ç–æ–∫–µ–Ω–∞ –ø—Ä–∏ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏
if (!adminToken) {
  console.error('‚ùå –ö–†–ò–¢–ò–ß–ï–°–ö–ê–Ø –û–®–ò–ë–ö–ê: ADMIN_API_TOKEN –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω!');
  console.error('   –î–æ–±–∞–≤—å—Ç–µ ADMIN_API_TOKEN –≤ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è Render');
}

// –°–æ–∑–¥–∞–µ–º axios instance —Å –ø—Ä–µ–¥—É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–Ω—ã–º–∏ –∑–∞–≥–æ–ª–æ–≤–∫–∞–º–∏
const apiClient = axios.create({
  baseURL: apiUrl,
  headers: {
    'Authorization': `Bearer ${adminToken}`,
    'Content-Type': 'application/json'
  },
  timeout: 30000
});

// –î–æ–±–∞–≤–ª—è–µ–º interceptor –¥–ª—è –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
apiClient.interceptors.request.use(request => {
  console.log(`üì§ API Request: ${request.method.toUpperCase()} ${request.url}`);
  console.log('   Headers:', {
    ...request.headers,
    'Authorization': request.headers['Authorization'] ? 'Bearer [HIDDEN]' : undefined
  });
  return request;
}, error => {
  console.error('‚ùå Request Error:', error);
  return Promise.reject(error);
});

apiClient.interceptors.response.use(response => {
  console.log(`‚úÖ API Response: ${response.status} ${response.config.url}`);
  return response;
}, error => {
  console.error(`‚ùå API Error: ${error.response?.status} ${error.config?.url}`);
  console.error('   Error Data:', error.response?.data);
  return Promise.reject(error);
});

/**
 * –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ—Ç –∫–æ–º–∞–Ω–¥—ã –¥–ª—è –∞–¥–º–∏–Ω-–±–æ—Ç–∞
 * @param {Object} bot - –≠–∫–∑–µ–º–ø–ª—è—Ä Telegraf
 */
function registerCommands(bot) {
  // –ö–æ–º–∞–Ω–¥–∞ /start
  bot.command('start', (ctx) => {
    const { id, first_name } = ctx.from;
    console.log(`–ê–¥–º–∏–Ω ${first_name} (${id}) –∑–∞–ø—É—Å—Ç–∏–ª –∞–¥–º–∏–Ω-–±–æ—Ç–∞`);
    
    ctx.reply(
      `üëã –ü—Ä–∏–≤–µ—Ç, ${first_name}!\n\n–≠—Ç–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–∏–≤–Ω—ã–π –±–æ—Ç –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è Greenlight Casino.\n\n–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—ã –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Å–∏—Å—Ç–µ–º–æ–π.`,
      Markup.keyboard([
        ['üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞', 'üë• –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏'],
        ['üéÆ –ò–≥—Ä—ã', 'üîÆ –°–æ–±—ã—Ç–∏—è'],
        ['üí∞ –§–∏–Ω–∞–Ω—Å—ã', '‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏']
      ]).resize()
    );
  });
  
  // –ö–æ–º–∞–Ω–¥–∞ /stats - —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
  bot.command('stats', (ctx) => {
    ctx.reply('üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Å–∏—Å—Ç–µ–º—ã\n\n–û–±—â–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –±—É–¥–µ—Ç –∑–¥–µ—Å—å...');
  });
  
  // –ö–æ–º–∞–Ω–¥–∞ /users - –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏
  bot.command('users', (ctx) => {
    ctx.reply('üë• –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º–∏\n\n–°–ø–∏—Å–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –±—É–¥–µ—Ç –∑–¥–µ—Å—å...');
  });
  
  // –ö–æ–º–∞–Ω–¥–∞ /games - –∏–≥—Ä—ã
  bot.command('games', (ctx) => {
    ctx.reply('üéÆ –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∏–≥—Ä–∞–º–∏\n\n–ù–∞—Å—Ç—Ä–æ–π–∫–∏ –∏–≥—Ä –±—É–¥—É—Ç –∑–¥–µ—Å—å...');
  });
  
  // –ö–æ–º–∞–Ω–¥–∞ /events - —Å–æ–±—ã—Ç–∏—è
  bot.command('events', (ctx) => {
    ctx.reply(
      'üîÆ –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Å–æ–±—ã—Ç–∏—è–º–∏\n\n–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:',
      Markup.inlineKeyboard([
        [Markup.button.callback('üìã –°–ø–∏—Å–æ–∫ —Å–æ–±—ã—Ç–∏–π', 'events_list')],
        [Markup.button.callback('‚ûï –°–æ–∑–¥–∞—Ç—å —Å–æ–±—ã—Ç–∏–µ', 'event_create')],
        [Markup.button.callback('üìù –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å —Å–æ–±—ã—Ç–∏–µ', 'event_edit')]
      ])
    );
  });
  
  // –ö–æ–º–∞–Ω–¥–∞ /finance - —Ñ–∏–Ω–∞–Ω—Å—ã
  bot.command('finance', async (ctx) => {
    try {
      console.log('ADMIN: –ó–∞–ø—Ä–æ—Å —Ñ–∏–Ω–∞–Ω—Å–æ–≤–æ–≥–æ —Å–æ—Å—Ç–æ—è–Ω–∏—è');
      
      const response = await apiClient.get('/admin/finance/state');
      
      if (!response.data.success) {
        return ctx.reply('‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Ñ–∏–Ω–∞–Ω—Å–æ–≤–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ');
      }
      
      const { balances, settings, warnings } = response.data.data;
      
      // –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
      let message = 'üí∞ –§–ò–ù–ê–ù–°–û–í–û–ï –°–û–°–¢–û–Ø–ù–ò–ï –ö–ê–ó–ò–ù–û\n\n';
      
      message += 'üìä –ë–∞–ª–∞–Ω—Å—ã:\n';
      message += `‚îú –ë–∞–ª–∞–Ω—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: ${balances.totalUsers.toFixed(2)} USDT\n`;
      message += `‚îú –û–ø–µ—Ä–∞—Ç–∏–≤–Ω—ã–π —Å—á–µ—Ç: ${balances.operational.toFixed(2)} USDT\n`;
      message += `‚îú –†–µ–∑–µ—Ä–≤ (${settings.reservePercentage}%): ${balances.reserve.toFixed(2)} USDT\n`;
      message += `‚îî –î–æ—Å—Ç—É–ø–Ω–æ –¥–ª—è –≤—ã–≤–æ–¥–∞: ${balances.availableForWithdrawal.toFixed(2)} USDT\n\n`;
      
      // –ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏—è
      if (warnings.lowReserve || warnings.highRiskRatio || warnings.negativeOperational) {
        message += '‚ö†Ô∏è –ü–†–ï–î–£–ü–†–ï–ñ–î–ï–ù–ò–Ø:\n';
        if (warnings.lowReserve) message += '‚îú –ù–∏–∑–∫–∏–π —É—Ä–æ–≤–µ–Ω—å —Ä–µ–∑–µ—Ä–≤–∞\n';
        if (warnings.highRiskRatio) message += '‚îú –í—ã—Å–æ–∫–æ–µ —Å–æ–æ—Ç–Ω–æ—à–µ–Ω–∏–µ –±–∞–ª–∞–Ω—Å–æ–≤ –∫ —Ä–µ–∑–µ—Ä–≤—É\n';
        if (warnings.negativeOperational) message += '‚îî –û—Ç—Ä–∏—Ü–∞—Ç–µ–ª—å–Ω—ã–π –æ–ø–µ—Ä–∞—Ç–∏–≤–Ω—ã–π –±–∞–ª–∞–Ω—Å\n\n';
      }
      
      await ctx.reply(message, 
        Markup.inlineKeyboard([
          [
            Markup.button.callback('üìà –û—Ç—á–µ—Ç –∑–∞ –¥–µ–Ω—å', 'finance_report:day'),
            Markup.button.callback('üìä –û—Ç—á–µ—Ç –∑–∞ –Ω–µ–¥–µ–ª—é', 'finance_report:week')
          ],
          [
            Markup.button.callback('üîÑ –ü–µ—Ä–µ—Å—á–∏—Ç–∞—Ç—å', 'finance_recalculate'),
            Markup.button.callback('‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏', 'finance_settings')
          ],
          [
            Markup.button.callback('üí∏ –í—ã–≤–µ—Å—Ç–∏ –ø—Ä–∏–±—ã–ª—å', 'finance_withdraw')
          ]
        ])
      );
      
    } catch (error) {
      console.error('ADMIN: –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Ñ–∏–Ω–∞–Ω—Å–æ–≤:', error);
      ctx.reply(`‚ùå –û—à–∏–±–∫–∞: ${error.response?.data?.message || error.message}`);
    }
  });
  
  // –ö–æ–º–∞–Ω–¥–∞ /settings - –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
  bot.command('settings', (ctx) => {
    ctx.reply('‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏ —Å–∏—Å—Ç–µ–º—ã\n\n–ù–∞—Å—Ç—Ä–æ–π–∫–∏ –±—É–¥—É—Ç –∑–¥–µ—Å—å...');
  });
  
  // –ö–æ–º–∞–Ω–¥–∞ /help
  bot.command('help', (ctx) => {
    ctx.reply(
      'üîç –°–ø—Ä–∞–≤–∫–∞ –ø–æ –∫–æ–º–∞–Ω–¥–∞–º:\n\n' +
      '--- –û–±—â–∏–µ –∫–æ–º–∞–Ω–¥—ã ---\n' +
      '/start - –ù–∞—á–∞–ª–æ —Ä–∞–±–æ—Ç—ã —Å –±–æ—Ç–æ–º\n' +
      '/stats - –ü—Ä–æ—Å–º–æ—Ç—Ä —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ —Å–∏—Å—Ç–µ–º—ã\n' +
      '/users - –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º–∏\n' +
      '/games - –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∏–≥—Ä–∞–º–∏\n' +
      '/events - –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Å–æ–±—ã—Ç–∏—è–º–∏\n' +
      '/finance - –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Ñ–∏–Ω–∞–Ω—Å–∞–º–∏\n' +
      '/settings - –ù–∞—Å—Ç—Ä–æ–π–∫–∏ —Å–∏—Å—Ç–µ–º—ã\n' +
      '/help - –ü–æ–∫–∞–∑–∞—Ç—å —ç—Ç—É —Å–ø—Ä–∞–≤–∫—É\n\n' +
      '--- –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —à–∞–Ω—Å–∞–º–∏ ---\n' +
      '/set_win_chance - –£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –±–∞–∑–æ–≤—ã–π —à–∞–Ω—Å –≤—ã–∏–≥—Ä—ã—à–∞\n' +
      '/set_user_chance - –£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å —à–∞–Ω—Å –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è\n' +
      '/get_chance_settings - –ü–æ–∫–∞–∑–∞—Ç—å –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ —à–∞–Ω—Å–æ–≤\n' +
      '/get_user_chance - –ü–æ–∫–∞–∑–∞—Ç—å —à–∞–Ω—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è\n\n' +
      '--- –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –≤—ã–≤–æ–¥–∞–º–∏ ---\n' +
      '/pending_withdrawals - –í—ã–≤–æ–¥—ã –Ω–∞ –æ–¥–æ–±—Ä–µ–Ω–∏–∏\n' +
      '/withdrawal_stats - –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –≤—ã–≤–æ–¥–æ–≤\n' +
      '/casino_balance - –ë–∞–ª–∞–Ω—Å –∫–∞–∑–∏–Ω–æ –≤ CryptoBot\n' +
      '/recent_withdrawals - –ü–æ—Å–ª–µ–¥–Ω–∏–µ 10 –≤—ã–≤–æ–¥–æ–≤\n\n' +
      '--- –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Ñ–∏–Ω–∞–Ω—Å–∞–º–∏ ---\n' +
      '/finance - –§–∏–Ω–∞–Ω—Å–æ–≤–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ\n' +
      '/profit - –î–æ—Å—Ç—É–ø–Ω–∞—è –ø—Ä–∏–±—ã–ª—å\n' +
      '/set_reserve - –£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –ø—Ä–æ—Ü–µ–Ω—Ç —Ä–µ–∑–µ—Ä–≤–∞\n' +
      '/game_stats - –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ –∏–≥—Ä–∞–º\n' +
      '/finance_history - –ò—Å—Ç–æ—Ä–∏—è –∏–∑–º–µ–Ω–µ–Ω–∏–π –±–∞–ª–∞–Ω—Å–æ–≤\n' +
      '/monitor - –í–∫–ª—é—á–∏—Ç—å/–≤—ã–∫–ª—é—á–∏—Ç—å –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥\n\n' +
      '--- –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω–æ–π —Å–∏—Å—Ç–µ–º–æ–π ---\n' +
      '/referral_stats - –û–±—â–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω–æ–π —Å–∏—Å—Ç–µ–º—ã\n' +
      '/top_partners [–∫–æ–ª–∏—á–µ—Å—Ç–≤–æ] - –¢–æ–ø –ø–∞—Ä—Ç–Ω–µ—Ä–æ–≤\n' +
      '/partner_info [user_id/@username] - –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ø–∞—Ä—Ç–Ω–µ—Ä–µ\n' +
      '/referral_fraud - –ü—Ä–æ–≤–µ—Ä–∫–∞ –º–æ—à–µ–Ω–Ω–∏—á–µ—Å–∫–æ–π –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏'
    );
  });

  // –ö–û–ú–ê–ù–î–´ –î–õ–Ø –£–ü–†–ê–í–õ–ï–ù–ò–Ø –®–ê–ù–°–ê–ú–ò
  
  // –ö–æ–º–∞–Ω–¥–∞ –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –±–∞–∑–æ–≤—ã–º —à–∞–Ω—Å–æ–º –≤—ã–∏–≥—Ä—ã—à–∞
  bot.command('set_win_chance', async (ctx) => {
    try {
      const args = ctx.message.text.split(' ');
      if (args.length < 3) {
        return ctx.reply('–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: /set_win_chance [gameType] [—à–∞–Ω—Å]\n–ü—Ä–∏–º–µ—Ä: /set_win_chance coin 0.475');
      }
      
      const gameType = args[1].toLowerCase();
      const winChance = parseFloat(args[2]);
      
      if (isNaN(winChance) || winChance < 0 || winChance > 1) {
        return ctx.reply('–®–∞–Ω—Å –≤—ã–∏–≥—Ä—ã—à–∞ –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å —á–∏—Å–ª–æ–º –æ—Ç 0 –¥–æ 1');
      }
      
      // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∑–∞–ø—Ä–æ—Å –Ω–∞ API
      const response = await apiClient.post('/admin/win-chance/base', {
        gameType,
        winChance
      });
      
      if (response.data.success) {
        ctx.reply(`‚úÖ –ë–∞–∑–æ–≤—ã–π —à–∞–Ω—Å –≤—ã–∏–≥—Ä—ã—à–∞ –¥–ª—è ${gameType} —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –Ω–∞ ${winChance * 100}%`);
      } else {
        ctx.reply(`‚ùå –û—à–∏–±–∫–∞: ${response.data.message}`);
      }
    } catch (error) {
      ctx.reply(`‚ùå –û—à–∏–±–∫–∞: ${error.response?.data?.message || error.message}`);
      console.error(error);
    }
  });

  // –ö–æ–º–∞–Ω–¥–∞ –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã–º —à–∞–Ω—Å–æ–º –≤—ã–∏–≥—Ä—ã—à–∞
  bot.command('set_user_chance', async (ctx) => {
    try {
      const args = ctx.message.text.split(' ');
      if (args.length < 4) {
        return ctx.reply('–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: /set_user_chance [userId] [gameType] [–º–æ–¥–∏—Ñ–∏–∫–∞—Ç–æ—Ä]\n–ü—Ä–∏–º–µ—Ä: /set_user_chance 612a3b4c5d6e7f8910111213 coin 10');
      }
      
      const userId = args[1];
      const gameType = args[2].toLowerCase();
      const modifierPercent = parseFloat(args[3]);
      
      if (isNaN(modifierPercent)) {
        return ctx.reply('–ú–æ–¥–∏—Ñ–∏–∫–∞—Ç–æ—Ä –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å —á–∏—Å–ª–æ–º (–≤ –ø—Ä–æ—Ü–µ–Ω—Ç–Ω—ã—Ö –ø—É–Ω–∫—Ç–∞—Ö)');
      }
      
      // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∑–∞–ø—Ä–æ—Å –Ω–∞ API
      const response = await apiClient.post('/admin/win-chance/user', {
        userId,
        gameType,
        modifierPercent
      });
      
      if (response.data.success) {
        const { effectiveWinChance } = response.data.data;
        ctx.reply(
          `‚úÖ –ú–æ–¥–∏—Ñ–∏–∫–∞—Ç–æ—Ä —à–∞–Ω—Å–∞ –≤—ã–∏–≥—Ä—ã—à–∞ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:\n` +
          `ID: ${userId}\n` +
          `–ò–≥—Ä–∞: ${gameType}\n` +
          `–ú–æ–¥–∏—Ñ–∏–∫–∞—Ç–æ—Ä: ${modifierPercent > 0 ? '+' : ''}${modifierPercent}%\n` +
          `–≠—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω—ã–π —à–∞–Ω—Å: ${(effectiveWinChance * 100).toFixed(2)}%`
        );
      } else {
        ctx.reply(`‚ùå –û—à–∏–±–∫–∞: ${response.data.message}`);
      }
    } catch (error) {
      ctx.reply(`‚ùå –û—à–∏–±–∫–∞: ${error.response?.data?.message || error.message}`);
      console.error(error);
    }
  });

  // –ö–æ–º–∞–Ω–¥–∞ –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Ç–µ–∫—É—â–∏—Ö –Ω–∞—Å—Ç—Ä–æ–µ–∫ —à–∞–Ω—Å–æ–≤
  bot.command('get_chance_settings', async (ctx) => {
    try {
      // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∑–∞–ø—Ä–æ—Å –Ω–∞ API
      const response = await apiClient.get('/admin/win-chance/settings');
      
      if (response.data.success) {
        const { gameSettings } = response.data.data;
        let message = '‚öôÔ∏è –¢–µ–∫—É—â–∏–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ —à–∞–Ω—Å–æ–≤ –≤—ã–∏–≥—Ä—ã—à–∞:\n\n';
        
        for (const [gameType, settings] of Object.entries(gameSettings)) {
          message += `üìå ${gameType.toUpperCase()}:\n`;
          message += `  ‚Ä¢ –ë–∞–∑–æ–≤—ã–π —à–∞–Ω—Å: ${(settings.baseWinChance * 100).toFixed(2)}%\n`;
          message += `  ‚Ä¢ –ú–Ω–æ–∂–∏—Ç–µ–ª—å: x${settings.multiplier}\n`;
          message += `  ‚Ä¢ –û–∂–∏–¥–∞–µ–º—ã–π RTP: ${(settings.baseWinChance * settings.multiplier * 100).toFixed(2)}%\n\n`;
        }
        
        ctx.reply(message);
      } else {
        ctx.reply(`‚ùå –û—à–∏–±–∫–∞: ${response.data.message}`);
      }
    } catch (error) {
      ctx.reply(`‚ùå –û—à–∏–±–∫–∞: ${error.response?.data?.message || error.message}`);
      console.error(error);
    }
  });

  // –ö–æ–º–∞–Ω–¥–∞ –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —à–∞–Ω—Å–æ–≤ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
  bot.command('get_user_chance', async (ctx) => {
    try {
      const args = ctx.message.text.split(' ');
      if (args.length < 3) {
        return ctx.reply('–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: /get_user_chance [userId] [gameType]\n–ü—Ä–∏–º–µ—Ä: /get_user_chance 612a3b4c5d6e7f8910111213 coin');
      }
      
      const userId = args[1];
      const gameType = args[2].toLowerCase();
      
      // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∑–∞–ø—Ä–æ—Å –Ω–∞ API
      const response = await apiClient.get('/admin/win-chance/user', {
        params: { userId, gameType }
      });
      
      if (response.data.success) {
        const data = response.data.data;
        ctx.reply(
          `üë§ –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —à–∞–Ω—Å–∞—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:\n` +
          `ID: ${data.userId}\n` +
          `–ò–º—è: ${data.firstName} ${data.lastName}\n` +
          `Username: ${data.username || '–Ω–µ—Ç'}\n` +
          `–ò–≥—Ä–∞: ${data.gameType}\n` +
          `–ë–∞–∑–æ–≤—ã–π —à–∞–Ω—Å: ${(data.baseWinChance * 100).toFixed(2)}%\n` +
          `–ú–æ–¥–∏—Ñ–∏–∫–∞—Ç–æ—Ä: ${data.modifierPercent > 0 ? '+' : ''}${data.modifierPercent}%\n` +
          `–≠—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω—ã–π —à–∞–Ω—Å: ${(data.effectiveWinChance * 100).toFixed(2)}%`
        );
      } else {
        ctx.reply(`‚ùå –û—à–∏–±–∫–∞: ${response.data.message}`);
      }
    } catch (error) {
      ctx.reply(`‚ùå –û—à–∏–±–∫–∞: ${error.response?.data?.message || error.message}`);
      console.error(error);
    }
  });

  // –ö–û–ú–ê–ù–î–´ –î–õ–Ø –£–ü–†–ê–í–õ–ï–ù–ò–Ø –í–´–í–û–î–ê–ú–ò
  
  // –ö–æ–º–∞–Ω–¥–∞ –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ pending –≤—ã–≤–æ–¥–æ–≤
  bot.command('pending_withdrawals', async (ctx) => {
    try {
      console.log('ADMIN: –ó–∞–ø—Ä–æ—Å pending –≤—ã–≤–æ–¥–æ–≤');
      
      const response = await apiClient.get('/admin/withdrawals/pending');
      
      if (!response.data.success || response.data.data.withdrawals.length === 0) {
        return ctx.reply('üìã –ù–µ—Ç –≤—ã–≤–æ–¥–æ–≤, —Ç—Ä–µ–±—É—é—â–∏—Ö –æ–¥–æ–±—Ä–µ–Ω–∏—è');
      }
      
      const withdrawals = response.data.data.withdrawals;
      
      for (const withdrawal of withdrawals) {
        const user = withdrawal.user;
        const userName = user.username ? `@${user.username}` : `${user.firstName} ${user.lastName}`.trim();
        
        const message = 
          `üí∏ –ó–∞–ø—Ä–æ—Å –Ω–∞ –≤—ã–≤–æ–¥ #${withdrawal.id}\n\n` +
          `üë§ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: ${userName} (ID: ${user.telegramId})\n` +
          `üí∞ –¢–µ–∫—É—â–∏–π –±–∞–ª–∞–Ω—Å: ${user.balance.toFixed(2)} USDT\n` +
          `üíµ –°—É–º–º–∞ –≤—ã–≤–æ–¥–∞: ${withdrawal.amount} USDT\n` +
          `üì± –ü–æ–ª—É—á–∞—Ç–µ–ª—å: ${withdrawal.recipient}\n` +
          `üìù –ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π: ${withdrawal.comment || '–ù–µ—Ç'}\n` +
          `üìÖ –î–∞—Ç–∞: ${new Date(withdrawal.createdAt).toLocaleString('ru-RU')}\n\n` +
          `–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:`;
        
        await ctx.reply(message, 
          Markup.inlineKeyboard([
            [
              Markup.button.callback('‚úÖ –û–¥–æ–±—Ä–∏—Ç—å', `approve_withdrawal:${withdrawal.id}`),
              Markup.button.callback('‚ùå –û—Ç–∫–ª–æ–Ω–∏—Ç—å', `reject_withdrawal:${withdrawal.id}`)
            ],
            [
              Markup.button.callback('üë§ –ò–Ω—Ñ–æ –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ', `user_info:${user.id}`)
            ]
          ])
        );
      }
      
      ctx.reply(`üìä –í—Å–µ–≥–æ –≤—ã–≤–æ–¥–æ–≤ –Ω–∞ –æ–¥–æ–±—Ä–µ–Ω–∏–∏: ${withdrawals.length}`);
      
    } catch (error) {
      console.error('ADMIN: –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è pending –≤—ã–≤–æ–¥–æ–≤:', error);
      ctx.reply(`‚ùå –û—à–∏–±–∫–∞: ${error.response?.data?.message || error.message}`);
    }
  });
  
  // –ö–æ–º–∞–Ω–¥–∞ –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –≤—ã–≤–æ–¥–æ–≤
  bot.command('withdrawal_stats', async (ctx) => {
    try {
      console.log('ADMIN: –ó–∞–ø—Ä–æ—Å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –≤—ã–≤–æ–¥–æ–≤');
      
      const response = await apiClient.get('/admin/withdrawals/stats');
      
      if (!response.data.success) {
        return ctx.reply('‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É');
      }
      
      const stats = response.data.data.stats;
      let message = 'üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –≤—ã–≤–æ–¥–æ–≤:\n\n';
      
      let totalCount = 0;
      let totalAmount = 0;
      
      for (const stat of stats) {
        const status = stat._id;
        let statusText = '';
        
        switch (status) {
          case 'pending': statusText = '–û–∂–∏–¥–∞—é—Ç'; break;
          case 'approved': statusText = '–û–¥–æ–±—Ä–µ–Ω—ã'; break;
          case 'processing': statusText = '–û–±—Ä–∞–±–∞—Ç—ã–≤–∞—é—Ç—Å—è'; break;
          case 'completed': statusText = '–ó–∞–≤–µ—Ä—à–µ–Ω—ã'; break;
          case 'rejected': statusText = '–û—Ç–∫–ª–æ–Ω–µ–Ω—ã'; break;
          case 'failed': statusText = '–ù–µ—É–¥–∞—á–Ω—ã'; break;
          default: statusText = status;
        }
        
        message += `${statusText}:\n`;
        message += `  –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ: ${stat.count}\n`;
        message += `  –°—É–º–º–∞: ${stat.totalAmount.toFixed(2)} USDT\n`;
        message += `  –°—Ä–µ–¥–Ω—è—è: ${stat.avgAmount.toFixed(2)} USDT\n\n`;
        
        totalCount += stat.count;
        totalAmount += stat.totalAmount;
      }
      
      message += `üìà –ò—Ç–æ–≥–æ:\n`;
      message += `  –í—Å–µ–≥–æ –≤—ã–≤–æ–¥–æ–≤: ${totalCount}\n`;
      message += `  –û–±—â–∞—è —Å—É–º–º–∞: ${totalAmount.toFixed(2)} USDT`;
      
      ctx.reply(message);
      
    } catch (error) {
      console.error('ADMIN: –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –≤—ã–≤–æ–¥–æ–≤:', error);
      ctx.reply(`‚ùå –û—à–∏–±–∫–∞: ${error.response?.data?.message || error.message}`);
    }
  });
  
  // Callback –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –¥–ª—è –≤—ã–≤–æ–¥–æ–≤
  bot.action(/^approve_withdrawal:([0-9a-fA-F]{24})$/, async (ctx) => {
    try {
      const withdrawalId = ctx.match[1];
      await ctx.answerCbQuery('‚è≥ –û–¥–æ–±—Ä—è–µ–º –≤—ã–≤–æ–¥...');
      
      console.log(`ADMIN: –û–¥–æ–±—Ä–µ–Ω–∏–µ –≤—ã–≤–æ–¥–∞ ${withdrawalId}`);
      
      const response = await apiClient.post(`/admin/withdrawals/${withdrawalId}/approve`, {});
      
      if (response.data.success) {
        await ctx.editMessageText(
          ctx.callbackQuery.message.text + '\n\n‚úÖ –û–î–û–ë–†–ï–ù–û',
          { parse_mode: 'HTML' }
        );
        await ctx.reply(`‚úÖ –í—ã–≤–æ–¥ #${withdrawalId} –æ–¥–æ–±—Ä–µ–Ω –∏ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –Ω–∞ –æ–±—Ä–∞–±–æ—Ç–∫—É`);
      } else {
        await ctx.reply(`‚ùå –û—à–∏–±–∫–∞: ${response.data.message}`);
      }
      
    } catch (error) {
      console.error('ADMIN: –û—à–∏–±–∫–∞ –æ–¥–æ–±—Ä–µ–Ω–∏—è –≤—ã–≤–æ–¥–∞:', error);
      await ctx.reply(`‚ùå –û—à–∏–±–∫–∞: ${error.response?.data?.message || error.message}`);
    }
  });
  
  bot.action(/^reject_withdrawal:([0-9a-fA-F]{24})$/, async (ctx) => {
    try {
      const withdrawalId = ctx.match[1];
      await ctx.answerCbQuery();
      
      // –°–æ—Ö—Ä–∞–Ω—è–µ–º ID –≤—ã–≤–æ–¥–∞ –≤ —Å–µ—Å—Å–∏–∏ –¥–ª—è —Å–ª–µ–¥—É—é—â–µ–≥–æ —à–∞–≥–∞
      ctx.session = ctx.session || {};
      ctx.session.rejectingWithdrawalId = withdrawalId;
      
      await ctx.reply(
        `‚ùå –û—Ç–∫–ª–æ–Ω–µ–Ω–∏–µ –≤—ã–≤–æ–¥–∞ #${withdrawalId}\n\n` +
        `–£–∫–∞–∂–∏—Ç–µ –ø—Ä–∏—á–∏–Ω—É –æ—Ç–∫–ª–æ–Ω–µ–Ω–∏—è:`
      );
      
    } catch (error) {
      console.error('ADMIN: –û—à–∏–±–∫–∞ –ø—Ä–∏ –Ω–∞—á–∞–ª–µ –æ—Ç–∫–ª–æ–Ω–µ–Ω–∏—è –≤—ã–≤–æ–¥–∞:', error);
      await ctx.reply(`‚ùå –û—à–∏–±–∫–∞: ${error.message}`);
    }
  });
  
  // –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π –¥–ª—è –ø—Ä–∏—á–∏–Ω—ã –æ—Ç–∫–ª–æ–Ω–µ–Ω–∏—è –∏ –≤—ã–≤–æ–¥–∞ –ø—Ä–∏–±—ã–ª–∏
  bot.on('text', async (ctx, next) => {
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –æ–∂–∏–¥–∞–µ–º –ª–∏ –º—ã —Å—É–º–º—É –¥–ª—è –≤—ã–≤–æ–¥–∞ –ø—Ä–∏–±—ã–ª–∏
    if (ctx.session && ctx.session.withdrawingProfit) {
      const amount = parseFloat(ctx.message.text);
      
      if (isNaN(amount) || amount <= 0) {
        await ctx.reply('‚ùå –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–∞—è —Å—É–º–º–∞. –í–≤–µ–¥–∏—Ç–µ –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω–æ–µ —á–∏—Å–ª–æ:');
        return;
      }
      
      if (amount < 10) {
        await ctx.reply('‚ùå –ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è —Å—É–º–º–∞ –¥–ª—è –≤—ã–≤–æ–¥–∞: 10 USDT. –í–≤–µ–¥–∏—Ç–µ –¥—Ä—É–≥—É—é —Å—É–º–º—É:');
        return;
      }
      
      try {
        console.log(`ADMIN: –í—ã–≤–æ–¥ –ø—Ä–∏–±—ã–ª–∏ ${amount} USDT`);
        
        const response = await apiClient.post('/admin/finance/withdraw-profit', { 
          amount,
          recipient: ctx.from.username || `admin_${ctx.from.id}`,
          comment: '–í—ã–≤–æ–¥ –ø—Ä–∏–±—ã–ª–∏ –∫–∞–∑–∏–Ω–æ'
        });
        
        if (response.data.success) {
          await ctx.reply(
            `‚úÖ –ü—Ä–∏–±—ã–ª—å —É—Å–ø–µ—à–Ω–æ –≤—ã–≤–µ–¥–µ–Ω–∞!\n\n` +
            `–°—É–º–º–∞: ${amount} USDT\n` +
            `–ù–æ–≤—ã–π –æ–ø–µ—Ä–∞—Ç–∏–≤–Ω—ã–π –±–∞–ª–∞–Ω—Å: ${response.data.data.newOperationalBalance.toFixed(2)} USDT\n` +
            `–û—Å—Ç–∞–ª–æ—Å—å –¥–æ—Å—Ç—É–ø–Ω–æ: ${response.data.data.newAvailable.toFixed(2)} USDT\n\n` +
            `‚ö†Ô∏è –°—Ä–µ–¥—Å—Ç–≤–∞ –±—É–¥—É—Ç –ø–µ—Ä–µ–≤–µ–¥–µ–Ω—ã –≤—Ä—É—á–Ω—É—é —á–µ—Ä–µ–∑ CryptoBot`
          );
        } else {
          await ctx.reply(`‚ùå –û—à–∏–±–∫–∞: ${response.data.message}`);
        }
        
        delete ctx.session.withdrawingProfit;
        
      } catch (error) {
        console.error('ADMIN: –û—à–∏–±–∫–∞ –≤—ã–≤–æ–¥–∞ –ø—Ä–∏–±—ã–ª–∏:', error);
        await ctx.reply(`‚ùå –û—à–∏–±–∫–∞: ${error.response?.data?.message || error.message}`);
        delete ctx.session.withdrawingProfit;
      }
    }
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –≤ —Å–µ—Å—Å–∏–∏ ID –æ—Ç–∫–ª–æ–Ω—è–µ–º–æ–≥–æ –≤—ã–≤–æ–¥–∞
    else if (ctx.session && ctx.session.rejectingWithdrawalId) {
      const withdrawalId = ctx.session.rejectingWithdrawalId;
      const reason = ctx.message.text;
      
      try {
        console.log(`ADMIN: –û—Ç–∫–ª–æ–Ω–µ–Ω–∏–µ –≤—ã–≤–æ–¥–∞ ${withdrawalId} —Å –ø—Ä–∏—á–∏–Ω–æ–π: ${reason}`);
        
        const response = await apiClient.post(`/admin/withdrawals/${withdrawalId}/reject`, { reason });
        
        if (response.data.success) {
          await ctx.reply(
            `‚úÖ –í—ã–≤–æ–¥ #${withdrawalId} –æ—Ç–∫–ª–æ–Ω–µ–Ω\n` +
            `–ü—Ä–∏—á–∏–Ω–∞: ${reason}\n` +
            `–°—Ä–µ–¥—Å—Ç–≤–∞ –≤–æ–∑–≤—Ä–∞—â–µ–Ω—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é`
          );
        } else {
          await ctx.reply(`‚ùå –û—à–∏–±–∫–∞: ${response.data.message}`);
        }
        
        // –û—á–∏—â–∞–µ–º —Å–µ—Å—Å–∏—é
        delete ctx.session.rejectingWithdrawalId;
        
      } catch (error) {
        console.error('ADMIN: –û—à–∏–±–∫–∞ –æ—Ç–∫–ª–æ–Ω–µ–Ω–∏—è –≤—ã–≤–æ–¥–∞:', error);
        await ctx.reply(`‚ùå –û—à–∏–±–∫–∞: ${error.response?.data?.message || error.message}`);
        delete ctx.session.rejectingWithdrawalId;
      }
    } else {
      // –ü–µ—Ä–µ–¥–∞–µ–º —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Å–ª–µ–¥—É—é—â–µ–º—É –æ–±—Ä–∞–±–æ—Ç—á–∏–∫—É
      return next();
    }
  });

  // –ö–æ–º–∞–Ω–¥–∞ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –±–∞–ª–∞–Ω—Å–∞ –∫–∞–∑–∏–Ω–æ –≤ CryptoBot
  bot.command('casino_balance', async (ctx) => {
    try {
      console.log('ADMIN: –ó–∞–ø—Ä–æ—Å –±–∞–ª–∞–Ω—Å–∞ –∫–∞–∑–∏–Ω–æ –≤ CryptoBot');
      
      await ctx.reply('‚è≥ –ü—Ä–æ–≤–µ—Ä—è–µ–º –±–∞–ª–∞–Ω—Å –∫–∞–∑–∏–Ω–æ –≤ CryptoBot...');
      
      // –î–µ–ª–∞–µ–º –∑–∞–ø—Ä–æ—Å –∫ CryptoBot API
      const cryptoBotToken = process.env.CRYPTO_PAY_API_TOKEN;
      const cryptoBotApiUrl = process.env.CRYPTO_PAY_API_URL || 'https://pay.crypt.bot/api';
      
      if (!cryptoBotToken) {
        return ctx.reply('‚ùå CRYPTO_PAY_API_TOKEN –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω');
      }
      
      const response = await axios.get(`${cryptoBotApiUrl}/getBalance`, {
        headers: {
          'Crypto-Pay-API-Token': cryptoBotToken
        }
      });
      
      if (response.data.ok) {
        const balances = response.data.result;
        let message = 'üí∞ –ë–∞–ª–∞–Ω—Å –∫–∞–∑–∏–Ω–æ –≤ CryptoBot:\n\n';
        
        let totalInUSDT = 0;
        
        for (const balance of balances) {
          const available = parseFloat(balance.available);
          const onhold = parseFloat(balance.onhold || 0);
          const total = available + onhold;
          
          message += `${balance.currency_code}:\n`;
          message += `  –î–æ—Å—Ç—É–ø–Ω–æ: ${available.toFixed(2)}\n`;
          if (onhold > 0) {
            message += `  –ó–∞–º–æ—Ä–æ–∂–µ–Ω–æ: ${onhold.toFixed(2)}\n`;
          }
          message += `  –í—Å–µ–≥–æ: ${total.toFixed(2)}\n\n`;
          
          // –î–ª—è —É–ø—Ä–æ—â–µ–Ω–∏—è —Å—á–∏—Ç–∞–µ–º –≤—Å–µ –∫–∞–∫ USDT (–≤ —Ä–µ–∞–ª—å–Ω–æ—Å—Ç–∏ –Ω—É–∂–Ω–∞ –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏—è)
          if (balance.currency_code === 'USDT') {
            totalInUSDT += total;
          }
        }
        
        // –ü–æ–ª—É—á–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –≤—ã–≤–æ–¥–æ–≤ –∏–∑ –ë–î
        const response2 = await apiClient.get('/admin/withdrawals/stats');
        
        if (response2.data.success) {
          const stats = response2.data.data.stats;
          message += 'üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –≤—ã–≤–æ–¥–æ–≤:\n';
          
          for (const stat of stats) {
            if (stat._id === 'processing' || stat._id === 'pending') {
              message += `${stat._id}: ${stat.count} —à—Ç. –Ω–∞ ${stat.totalAmount.toFixed(2)} USDT\n`;
            }
          }
        }
        
        // –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏
        message += '\nüí° –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏:\n';
        if (totalInUSDT < 100) {
          message += '‚ö†Ô∏è –ù–∏–∑–∫–∏–π –±–∞–ª–∞–Ω—Å! –†–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç—Å—è –ø–æ–ø–æ–ª–Ω–∏—Ç—å —Å—á–µ—Ç –∫–∞–∑–∏–Ω–æ.\n';
        } else if (totalInUSDT < 500) {
          message += '‚ö†Ô∏è –°—Ä–µ–¥–Ω–∏–π –±–∞–ª–∞–Ω—Å. –°–ª–µ–¥–∏—Ç–µ –∑–∞ –∫—Ä—É–ø–Ω—ã–º–∏ –≤—ã–≤–æ–¥–∞–º–∏.\n';
        } else {
          message += '‚úÖ –ë–∞–ª–∞–Ω—Å –≤ –Ω–æ—Ä–º–µ.\n';
        }
        
        await ctx.reply(message);
        
      } else {
        await ctx.reply('‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –±–∞–ª–∞–Ω—Å–∞ –æ—Ç CryptoBot');
      }
      
    } catch (error) {
      console.error('ADMIN: –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –±–∞–ª–∞–Ω—Å–∞ –∫–∞–∑–∏–Ω–æ:', error);
      ctx.reply(`‚ùå –û—à–∏–±–∫–∞: ${error.message}`);
    }
  });

  // –ö–æ–º–∞–Ω–¥–∞ –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –¥–µ—Ç–∞–ª—å–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –ø–æ—Å–ª–µ–¥–Ω–∏—Ö –≤—ã–≤–æ–¥–∞—Ö
  bot.command('recent_withdrawals', async (ctx) => {
    try {
      console.log('ADMIN: –ó–∞–ø—Ä–æ—Å –ø–æ—Å–ª–µ–¥–Ω–∏—Ö –≤—ã–≤–æ–¥–æ–≤');
      
      const response = await apiClient.get('/admin/withdrawals', {
        params: { limit: 10 }
      });
      
      if (!response.data.success || response.data.data.withdrawals.length === 0) {
        return ctx.reply('üìã –ù–µ—Ç –≤—ã–≤–æ–¥–æ–≤');
      }
      
      const withdrawals = response.data.data.withdrawals;
      let message = 'üìã –ü–æ—Å–ª–µ–¥–Ω–∏–µ 10 –≤—ã–≤–æ–¥–æ–≤:\n\n';
      
      for (const w of withdrawals) {
        const date = new Date(w.createdAt).toLocaleString('ru-RU');
        let statusEmoji = '';
        
        switch (w.status) {
          case 'pending': statusEmoji = '‚è≥'; break;
          case 'approved': statusEmoji = '‚úÖ'; break;
          case 'processing': statusEmoji = '‚öôÔ∏è'; break;
          case 'completed': statusEmoji = '‚úÖ'; break;
          case 'rejected': statusEmoji = '‚ùå'; break;
          case 'failed': statusEmoji = '‚ö†Ô∏è'; break;
        }
        
        message += `${statusEmoji} ${date}\n`;
        message += `–°—É–º–º–∞: ${w.amount} USDT\n`;
        message += `–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: @${w.user.username || '–Ω–µ—Ç'} (${w.user.firstName})\n`;
        message += `–ü–æ–ª—É—á–∞—Ç–µ–ª—å: @${w.recipient}\n`;
        message += `–°—Ç–∞—Ç—É—Å: ${w.status}\n`;
        
        if (w.lastError && w.lastError.message) {
          message += `–û—à–∏–±–∫–∞: ${w.lastError.message}\n`;
        }
        
        message += '\n';
      }
      
      await ctx.reply(message);
      
    } catch (error) {
      console.error('ADMIN: –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –ø–æ—Å–ª–µ–¥–Ω–∏—Ö –≤—ã–≤–æ–¥–æ–≤:', error);
      ctx.reply(`‚ùå –û—à–∏–±–∫–∞: ${error.response?.data?.message || error.message}`);
    }
  });

  // –ö–æ–º–∞–Ω–¥–∞ –¥–ª—è –±—ã—Å—Ç—Ä–æ–≥–æ –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –¥–æ—Å—Ç—É–ø–Ω–æ–π –ø—Ä–∏–±—ã–ª–∏
  bot.command('profit', async (ctx) => {
    try {
      const response = await apiClient.get('/admin/finance/state');
      
      if (!response.data.success) {
        return ctx.reply('‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –¥–∞–Ω–Ω—ã–µ');
      }
      
      const { balances } = response.data.data;
      
      await ctx.reply(
        `üíµ –î–û–°–¢–£–ü–ù–ê–Ø –ü–†–ò–ë–´–õ–¨\n\n` +
        `üí∞ –î–æ—Å—Ç—É–ø–Ω–æ –¥–ª—è –≤—ã–≤–æ–¥–∞: ${balances.availableForWithdrawal.toFixed(2)} USDT\n` +
        `üìä –û–ø–µ—Ä–∞—Ç–∏–≤–Ω—ã–π —Å—á–µ—Ç: ${balances.operational.toFixed(2)} USDT\n` +
        `üõ°Ô∏è –†–µ–∑–µ—Ä–≤: ${balances.reserve.toFixed(2)} USDT\n\n` +
        `–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /finance –¥–ª—è –ø–æ–¥—Ä–æ–±–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏`
      );
      
    } catch (error) {
      console.error('ADMIN: –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –ø—Ä–∏–±—ã–ª–∏:', error);
      ctx.reply(`‚ùå –û—à–∏–±–∫–∞: ${error.response?.data?.message || error.message}`);
    }
  });

  // –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ callback –¥–ª—è —Ñ–∏–Ω–∞–Ω—Å–æ–≤
  bot.action(/^finance_report:(.+)$/, async (ctx) => {
    try {
      const period = ctx.match[1];
      await ctx.answerCbQuery('‚è≥ –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –æ—Ç—á–µ—Ç...');
      
      const response = await apiClient.get('/admin/finance/report', {
        params: { period }
      });
      
      if (!response.data.success) {
        return ctx.reply('‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –æ—Ç—á–µ—Ç');
      }
      
      const report = response.data.data;
      
      let periodName = '';
      switch (period) {
        case 'day': periodName = '–î–ï–ù–¨'; break;
        case 'week': periodName = '–ù–ï–î–ï–õ–Æ'; break;
        case 'month': periodName = '–ú–ï–°–Ø–¶'; break;
        default: periodName = '–í–°–ï –í–†–ï–ú–Ø';
      }
      
      let message = `üìä –§–ò–ù–ê–ù–°–û–í–´–ô –û–¢–ß–ï–¢ –ó–ê ${periodName}\n\n`;
      
      message += 'üí≥ –î–µ–ø–æ–∑–∏—Ç—ã:\n';
      message += `‚îú –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ: ${report.period.deposits.count}\n`;
      message += `‚îî –°—É–º–º–∞: ${report.period.deposits.total.toFixed(2)} USDT\n\n`;
      
      message += 'üí∏ –í—ã–≤–æ–¥—ã:\n';
      message += `‚îú –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ: ${report.period.withdrawals.count}\n`;
      message += `‚îî –°—É–º–º–∞: ${report.period.withdrawals.total.toFixed(2)} USDT\n\n`;
      
      message += 'üéÆ –ò–≥—Ä—ã:\n';
      message += `‚îú –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ: ${report.period.games.count}\n`;
      message += `‚îú –°—Ç–∞–≤–∫–∏: ${report.period.games.totalBets.toFixed(2)} USDT\n`;
      message += `‚îú –í—ã–∏–≥—Ä—ã—à–∏: ${report.period.games.totalWins.toFixed(2)} USDT\n`;
      message += `‚îî –ü—Ä–∏–±—ã–ª—å: ${report.period.games.profit.toFixed(2)} USDT\n\n`;
      
      message += `üë• –ê–∫—Ç–∏–≤–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: ${report.period.activeUsers}\n\n`;
      
      message += 'üìà –ò–¢–û–ì–û –ó–ê –í–°–ï –í–†–ï–ú–Ø:\n';
      message += `‚îú –î–µ–ø–æ–∑–∏—Ç—ã: ${report.allTime.totalDeposits.toFixed(2)} USDT\n`;
      message += `‚îú –í—ã–≤–æ–¥—ã: ${report.allTime.totalWithdrawals.toFixed(2)} USDT\n`;
      message += `‚îú –°—Ç–∞–≤–∫–∏: ${report.allTime.totalBets.toFixed(2)} USDT\n`;
      message += `‚îú –í—ã–∏–≥—Ä—ã—à–∏: ${report.allTime.totalWins.toFixed(2)} USDT\n`;
      message += `‚îî –í—ã–≤–µ–¥–µ–Ω–æ –≤–ª–∞–¥–µ–ª—å—Ü–µ–º: ${report.allTime.totalOwnerWithdrawals.toFixed(2)} USDT`;
      
      await ctx.reply(message);
      
    } catch (error) {
      console.error('ADMIN: –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –æ—Ç—á–µ—Ç–∞:', error);
      await ctx.reply(`‚ùå –û—à–∏–±–∫–∞: ${error.response?.data?.message || error.message}`);
    }
  });

  bot.action('finance_recalculate', async (ctx) => {
    try {
      await ctx.answerCbQuery('‚è≥ –ü–µ—Ä–µ—Å—á–∏—Ç—ã–≤–∞–µ–º...');
      
      const response = await apiClient.post('/admin/finance/recalculate', {});
      
      if (response.data.success) {
        const { balances, warnings } = response.data.data;
        
        let message = '‚úÖ –§–∏–Ω–∞–Ω—Å—ã —É—Å–ø–µ—à–Ω–æ –ø–µ—Ä–µ—Å—á–∏—Ç–∞–Ω—ã\n\n';
        message += `üí∞ –ë–∞–ª–∞–Ω—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: ${balances.totalUsers.toFixed(2)} USDT\n`;
        message += `üìä –û–ø–µ—Ä–∞—Ç–∏–≤–Ω—ã–π: ${balances.operational.toFixed(2)} USDT\n`;
        message += `üõ°Ô∏è –†–µ–∑–µ—Ä–≤: ${balances.reserve.toFixed(2)} USDT\n`;
        message += `üíµ –î–æ—Å—Ç—É–ø–Ω–æ: ${balances.availableForWithdrawal.toFixed(2)} USDT`;
        
        if (warnings.lowReserve || warnings.highRiskRatio || warnings.negativeOperational) {
          message += '\n\n‚ö†Ô∏è –ï—Å—Ç—å –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏—è!';
        }
        
        await ctx.reply(message);
      } else {
        await ctx.reply(`‚ùå –û—à–∏–±–∫–∞: ${response.data.message}`);
      }
      
    } catch (error) {
      console.error('ADMIN: –û—à–∏–±–∫–∞ –ø–µ—Ä–µ—Å—á–µ—Ç–∞:', error);
      await ctx.reply(`‚ùå –û—à–∏–±–∫–∞: ${error.response?.data?.message || error.message}`);
    }
  });

  bot.action('finance_settings', async (ctx) => {
    try {
      await ctx.answerCbQuery();
      
      const response = await apiClient.get('/admin/finance/state');
      
      const { settings } = response.data.data;
      
      await ctx.reply(
        `‚öôÔ∏è –ù–ê–°–¢–†–û–ô–ö–ò –§–ò–ù–ê–ù–°–û–í\n\n` +
        `–¢–µ–∫—É—â–∏–π –ø—Ä–æ—Ü–µ–Ω—Ç —Ä–µ–∑–µ—Ä–≤–∏—Ä–æ–≤–∞–Ω–∏—è: ${settings.reservePercentage}%\n\n` +
        `–î–ª—è –∏–∑–º–µ–Ω–µ–Ω–∏—è –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ:\n` +
        `/set_reserve [–ø—Ä–æ—Ü–µ–Ω—Ç]\n` +
        `–ù–∞–ø—Ä–∏–º–µ—Ä: /set_reserve 40`
      );
      
    } catch (error) {
      console.error('ADMIN: –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –Ω–∞—Å—Ç—Ä–æ–µ–∫:', error);
      await ctx.reply(`‚ùå –û—à–∏–±–∫–∞: ${error.response?.data?.message || error.message}`);
    }
  });

  bot.action('finance_withdraw', async (ctx) => {
    try {
      await ctx.answerCbQuery();
      
      ctx.session = ctx.session || {};
      ctx.session.withdrawingProfit = true;
      
      const response = await apiClient.get('/admin/finance/state');
      
      const { balances } = response.data.data;
      
      await ctx.reply(
        `üí∏ –í–´–í–û–î –ü–†–ò–ë–´–õ–ò\n\n` +
        `–î–æ—Å—Ç—É–ø–Ω–æ –¥–ª—è –≤—ã–≤–æ–¥–∞: ${balances.availableForWithdrawal.toFixed(2)} USDT\n` +
        `–ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è —Å—É–º–º–∞: 10 USDT\n\n` +
        `–í–≤–µ–¥–∏—Ç–µ —Å—É–º–º—É –¥–ª—è –≤—ã–≤–æ–¥–∞:`
      );
      
    } catch (error) {
      console.error('ADMIN: –û—à–∏–±–∫–∞ –Ω–∞—á–∞–ª–∞ –≤—ã–≤–æ–¥–∞:', error);
      await ctx.reply(`‚ùå –û—à–∏–±–∫–∞: ${error.response?.data?.message || error.message}`);
    }
  });

  // –ö–æ–º–∞–Ω–¥–∞ –¥–ª—è —É—Å—Ç–∞–Ω–æ–≤–∫–∏ –ø—Ä–æ—Ü–µ–Ω—Ç–∞ —Ä–µ–∑–µ—Ä–≤–∞
  bot.command('set_reserve', async (ctx) => {
    try {
      const args = ctx.message.text.split(' ');
      if (args.length < 2) {
        return ctx.reply('–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: /set_reserve [–ø—Ä–æ—Ü–µ–Ω—Ç]\n–ü—Ä–∏–º–µ—Ä: /set_reserve 40');
      }
      
      const percentage = parseFloat(args[1]);
      
      if (isNaN(percentage) || percentage < 0 || percentage > 100) {
        return ctx.reply('–ü—Ä–æ—Ü–µ–Ω—Ç –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å —á–∏—Å–ª–æ–º –æ—Ç 0 –¥–æ 100');
      }
      
      const response = await apiClient.post('/admin/finance/reserve-percentage', { percentage });
      
      if (response.data.success) {
        const { reservePercentage, reserveBalance, availableForWithdrawal } = response.data.data;
        
        await ctx.reply(
          `‚úÖ –ü—Ä–æ—Ü–µ–Ω—Ç —Ä–µ–∑–µ—Ä–≤–∏—Ä–æ–≤–∞–Ω–∏—è –∏–∑–º–µ–Ω–µ–Ω\n\n` +
          `–ù–æ–≤—ã–π –ø—Ä–æ—Ü–µ–Ω—Ç: ${reservePercentage}%\n` +
          `–†–µ–∑–µ—Ä–≤: ${reserveBalance.toFixed(2)} USDT\n` +
          `–î–æ—Å—Ç—É–ø–Ω–æ –¥–ª—è –≤—ã–≤–æ–¥–∞: ${availableForWithdrawal.toFixed(2)} USDT`
        );
      } else {
        await ctx.reply(`‚ùå –û—à–∏–±–∫–∞: ${response.data.message}`);
      }
      
    } catch (error) {
      console.error('ADMIN: –û—à–∏–±–∫–∞ —É—Å—Ç–∞–Ω–æ–≤–∫–∏ —Ä–µ–∑–µ—Ä–≤–∞:', error);
      ctx.reply(`‚ùå –û—à–∏–±–∫–∞: ${error.response?.data?.message || error.message}`);
    }
  });

  // –ö–æ–º–∞–Ω–¥–∞ –¥–ª—è –≤–∫–ª—é—á–µ–Ω–∏—è/–≤—ã–∫–ª—é—á–µ–Ω–∏—è –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞
  bot.command('monitor', async (ctx) => {
    ctx.session = ctx.session || {};
    
    if (ctx.session.monitoring) {
      // –í—ã–∫–ª—é—á–∞–µ–º –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥
      clearInterval(ctx.session.monitoringInterval);
      delete ctx.session.monitoring;
      delete ctx.session.monitoringInterval;
      delete ctx.session.monitoringMessageId;
      
      await ctx.reply('üìä –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ —Ñ–∏–Ω–∞–Ω—Å–æ–≤ –≤—ã–∫–ª—é—á–µ–Ω');
    } else {
      // –í–∫–ª—é—á–∞–µ–º –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥
      ctx.session.monitoring = true;
      
      try {
        // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø–µ—Ä–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
        const message = await ctx.reply('‚è≥ –ó–∞–ø—É—Å–∫ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞...');
        ctx.session.monitoringMessageId = message.message_id;
        
        // –§—É–Ω–∫—Ü–∏—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö
        const updateMonitoring = async () => {
          try {
            const response = await apiClient.get('/admin/finance/state');
            
            if (!response.data.success) return;
            
            const { balances, statistics } = response.data.data;
            
            const monitorText = 
              `üìä –ú–û–ù–ò–¢–û–†–ò–ù–ì –§–ò–ù–ê–ù–°–û–í\n` +
              `–û–±–Ω–æ–≤–ª–µ–Ω–æ: ${new Date().toLocaleTimeString('ru-RU')}\n\n` +
              `üí∞ –ë–∞–ª–∞–Ω—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: ${balances.totalUsers.toFixed(2)} USDT\n` +
              `üìà –û–ø–µ—Ä–∞—Ç–∏–≤–Ω—ã–π —Å—á–µ—Ç: ${balances.operational.toFixed(2)} USDT\n` +
              `üõ°Ô∏è –†–µ–∑–µ—Ä–≤: ${balances.reserve.toFixed(2)} USDT\n` +
              `üíµ –î–æ—Å—Ç—É–ø–Ω–æ –¥–ª—è –≤—ã–≤–æ–¥–∞: ${balances.availableForWithdrawal.toFixed(2)} USDT\n\n` +
              `üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:\n` +
              `‚îú –í—Å–µ–≥–æ –¥–µ–ø–æ–∑–∏—Ç–æ–≤: ${statistics.totalDeposits.toFixed(2)} USDT\n` +
              `‚îú –í—Å–µ–≥–æ –≤—ã–≤–æ–¥–æ–≤: ${statistics.totalWithdrawals.toFixed(2)} USDT\n` +
              `‚îú –í—Å–µ–≥–æ —Å—Ç–∞–≤–æ–∫: ${statistics.totalBets.toFixed(2)} USDT\n` +
              `‚îî –í—Å–µ–≥–æ –≤—ã–∏–≥—Ä—ã—à–µ–π: ${statistics.totalWins.toFixed(2)} USDT\n\n` +
              `–î–ª—è –æ—Å—Ç–∞–Ω–æ–≤–∫–∏ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ /monitor`;
            
            // –†–µ–¥–∞–∫—Ç–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
            await ctx.telegram.editMessageText(
              ctx.chat.id,
              ctx.session.monitoringMessageId,
              null,
              monitorText
            );
            
          } catch (error) {
            console.error('MONITOR: –û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è:', error);
            // –ï—Å–ª–∏ –Ω–µ —É–¥–∞–ª–æ—Å—å –æ—Ç—Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å, –æ—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥
            if (error.response && error.response.error_code === 400) {
              clearInterval(ctx.session.monitoringInterval);
              delete ctx.session.monitoring;
              delete ctx.session.monitoringInterval;
              delete ctx.session.monitoringMessageId;
            }
          }
        };
        
        // –ó–∞–ø—É—Å–∫–∞–µ–º –ø–µ—Ä–≤–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ
        await updateMonitoring();
        
        // –ó–∞–ø—É—Å–∫–∞–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∫–∞–∂–¥—ã–µ 30 —Å–µ–∫—É–Ω–¥
        ctx.session.monitoringInterval = setInterval(updateMonitoring, 30000);
        
      } catch (error) {
        console.error('MONITOR: –û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞:', error);
        await ctx.reply(`‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞: ${error.message}`);
        delete ctx.session.monitoring;
      }
    }
  });

  // –ö–æ–º–∞–Ω–¥–∞ –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –∏—Å—Ç–æ—Ä–∏–∏ –±–∞–ª–∞–Ω—Å–æ–≤
  bot.command('finance_history', async (ctx) => {
    try {
      const response = await apiClient.get('/admin/finance/history', {
        params: { limit: 20 }
      });
      
      if (!response.data.success) {
        return ctx.reply('‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –∏—Å—Ç–æ—Ä–∏—é');
      }
      
      const { history } = response.data.data;
      
      if (history.length === 0) {
        return ctx.reply('üìä –ò—Å—Ç–æ—Ä–∏—è –∏–∑–º–µ–Ω–µ–Ω–∏–π –ø–æ–∫–∞ –ø—É—Å—Ç–∞');
      }
      
      let message = 'üìä –ò–°–¢–û–†–ò–Ø –ò–ó–ú–ï–ù–ï–ù–ò–ô –ë–ê–õ–ê–ù–°–û–í\n\n';
      
      history.slice(0, 10).forEach(record => {
        const date = new Date(record.timestamp).toLocaleString('ru-RU');
        let eventName = '';
        
        switch (record.event) {
          case 'deposit': eventName = 'üí≥ –î–µ–ø–æ–∑–∏—Ç'; break;
          case 'user_withdrawal': eventName = 'üí∏ –í—ã–≤–æ–¥ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è'; break;
          case 'owner_withdrawal': eventName = 'üí∞ –í—ã–≤–æ–¥ –ø—Ä–∏–±—ã–ª–∏'; break;
          case 'game_win': eventName = 'üéÆ –í—ã–∏–≥—Ä—ã—à –≤ –∏–≥—Ä–µ'; break;
          case 'game_loss': eventName = 'üéÆ –ü—Ä–æ–∏–≥—Ä—ã—à –≤ –∏–≥—Ä–µ'; break;
          case 'full_recalculation': eventName = 'üîÑ –ü–µ—Ä–µ—Å—á–µ—Ç'; break;
          default: eventName = record.event;
        }
        
        message += `${date}\n`;
        message += `${eventName}\n`;
        message += `–û–ø–µ—Ä–∞—Ç–∏–≤–Ω—ã–π: ${record.operationalBalance.toFixed(2)} USDT\n`;
        if (record.details && record.details.amount) {
          message += `–°—É–º–º–∞: ${record.details.amount.toFixed(2)} USDT\n`;
        }
        message += '\n';
      });
      
      await ctx.reply(message);
      
    } catch (error) {
      console.error('ADMIN: –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∏—Å—Ç–æ—Ä–∏–∏:', error);
      ctx.reply(`‚ùå –û—à–∏–±–∫–∞: ${error.response?.data?.message || error.message}`);
    }
  });

  // –ö–æ–º–∞–Ω–¥–∞ –¥–ª—è –±—ã—Å—Ç—Ä–æ–π —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –ø–æ –∏–≥—Ä–∞–º
  bot.command('game_stats', async (ctx) => {
    try {
      const response = await apiClient.get('/admin/finance/game-stats');
      
      if (!response.data.success) {
        return ctx.reply('‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É');
      }
      
      const { games, total } = response.data.data;
      
      let message = 'üéÆ –°–¢–ê–¢–ò–°–¢–ò–ö–ê –ü–û –ò–ì–†–ê–ú\n\n';
      
      // –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ –∫–∞–∂–¥–æ–π –∏–≥—Ä–µ
      const gameNames = {
        coin: 'ü™ô –ú–æ–Ω–µ—Ç–∫–∞',
        mines: 'üí£ –ú–∏–Ω—ã',
        slots: 'üé∞ –°–ª–æ—Ç—ã',
        crash: 'üìà –ö—Ä–∞—à'
      };
      
      for (const [gameType, stats] of Object.entries(games)) {
        message += `${gameNames[gameType] || gameType}:\n`;
        message += `‚îú –ò–≥—Ä: ${stats.totalGames}\n`;
        message += `‚îú –°—Ç–∞–≤–æ–∫: ${stats.totalBets.toFixed(2)} USDT\n`;
        message += `‚îú –í—ã–ø–ª–∞—Ç: ${stats.totalWins.toFixed(2)} USDT\n`;
        message += `‚îú –ü—Ä–∏–±—ã–ª—å: ${stats.profit.toFixed(2)} USDT\n`;
        message += `‚îú RTP: ${stats.rtp}%\n`;
        message += `‚îî House Edge: ${stats.houseEdge}%\n\n`;
      }
      
      // –û–±—â–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
      message += 'üìä –ò–¢–û–ì–û:\n';
      message += `‚îú –í—Å–µ–≥–æ —Å—Ç–∞–≤–æ–∫: ${total.totalBets.toFixed(2)} USDT\n`;
      message += `‚îú –í—Å–µ–≥–æ –≤—ã–ø–ª–∞—Ç: ${total.totalWins.toFixed(2)} USDT\n`;
      message += `‚îú –ü—Ä–∏–±—ã–ª—å –∫–∞–∑–∏–Ω–æ: ${total.totalProfit.toFixed(2)} USDT\n`;
      message += `‚îú –û–±—â–∏–π RTP: ${total.rtp}%\n`;
      message += `‚îî House Edge: ${total.houseEdge}%`;
      
      await ctx.reply(message);
      
    } catch (error) {
      console.error('ADMIN: –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –∏–≥—Ä:', error);
      ctx.reply(`‚ùå –û—à–∏–±–∫–∞: ${error.response?.data?.message || error.message}`);
    }
  });

  // === –ö–û–ú–ê–ù–î–´ –î–õ–Ø –£–ü–†–ê–í–õ–ï–ù–ò–Ø –†–ï–§–ï–†–ê–õ–¨–ù–û–ô –°–ò–°–¢–ï–ú–û–ô ===
  
  // –ö–æ–º–∞–Ω–¥–∞ –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω–æ–π —Å–∏—Å—Ç–µ–º—ã
  bot.command('referral_stats', async (ctx) => {
    try {
      console.log('ADMIN: –ó–∞–ø—Ä–æ—Å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω–æ–π —Å–∏—Å—Ç–µ–º—ã');
      
      const response = await apiClient.get('/referrals/admin/stats');
      
      if (!response.data.success) {
        return ctx.reply('‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É');
      }
      
      const stats = response.data.data;
      
      let message = 'üìä –°–¢–ê–¢–ò–°–¢–ò–ö–ê –†–ï–§–ï–†–ê–õ–¨–ù–û–ô –°–ò–°–¢–ï–ú–´\n\n';
      
      message += 'üí∞ –§–∏–Ω–∞–Ω—Å—ã:\n';
      message += `‚îú –í—Å–µ–≥–æ –≤—ã–ø–ª–∞—á–µ–Ω–æ –ø–∞—Ä—Ç–Ω–µ—Ä–∞–º: ${stats.finance.totalReferralPayments.toFixed(2)} USDT\n`;
      message += `‚îú % –æ—Ç –ø—Ä–∏–±—ã–ª–∏ –∫–∞–∑–∏–Ω–æ: ${stats.finance.impactPercent}%\n`;
      message += `‚îî –û–∂–∏–¥–∞–µ—Ç –≤—ã–ø–ª–∞—Ç—ã: ${stats.partners.totalBalance.toFixed(2)} USDT\n\n`;
      
      message += 'üë• –ü–∞—Ä—Ç–Ω–µ—Ä—ã:\n';
      message += `‚îú –í—Å–µ–≥–æ –ø–∞—Ä—Ç–Ω–µ—Ä–æ–≤: ${stats.partners.total}\n`;
      stats.partners.byLevel.forEach(level => {
        const levelNames = {
          bronze: 'ü•â –ë—Ä–æ–Ω–∑–∞',
          silver: 'ü•à –°–µ—Ä–µ–±—Ä–æ',
          gold: 'ü•á –ó–æ–ª–æ—Ç–æ',
          platinum: 'üíé –ü–ª–∞—Ç–∏–Ω–∞',
          vip: 'üåü VIP'
        };
        message += `‚îú ${levelNames[level._id] || level._id}: ${level.count} (–∑–∞—Ä–∞–±–æ—Ç–∞–ª–∏ ${level.totalEarned.toFixed(2)} USDT)\n`;
      });
      message += '\n';
      
      message += 'üìà –≠—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–æ—Å—Ç—å:\n';
      message += `‚îú –í—Å–µ–≥–æ –ø—Ä–∏–≤–ª–µ—á–µ–Ω–æ: ${stats.referrals.total}\n`;
      message += `‚îú –ê–∫—Ç–∏–≤–Ω—ã—Ö —Ä–µ—Ñ–µ—Ä–∞–ª–æ–≤: ${stats.referrals.active}\n`;
      message += `‚îú –ö–æ–Ω–≤–µ—Ä—Å–∏—è: ${stats.referrals.conversionRate}%\n\n`;
      
      message += 'üí∏ –í—ã–ø–ª–∞—Ç—ã:\n';
      message += `‚îú –í—Å–µ–≥–æ –≤—ã–ø–ª–∞—Ç: ${stats.payouts.payoutsCount}\n`;
      message += `‚îú –û–±—â–∞—è —Å—É–º–º–∞: ${stats.payouts.totalPaid.toFixed(2)} USDT\n`;
      message += `‚îî –°—Ä–µ–¥–Ω—è—è –≤—ã–ø–ª–∞—Ç–∞: ${stats.payouts.avgPayout.toFixed(2)} USDT`;
      
      await ctx.reply(message, 
        Markup.inlineKeyboard([
          [
            Markup.button.callback('üèÜ –¢–æ–ø –ø–∞—Ä—Ç–Ω–µ—Ä–æ–≤', 'ref_top_partners'),
            Markup.button.callback('üö® –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ñ—Ä–æ–¥–∞', 'ref_fraud_check')
          ],
          [
            Markup.button.callback('üìä –û—Ç—á–µ—Ç –∑–∞ –¥–µ–Ω—å', 'ref_report:day'),
            Markup.button.callback('üìä –û—Ç—á–µ—Ç –∑–∞ –Ω–µ–¥–µ–ª—é', 'ref_report:week')
          ]
        ])
      );
      
    } catch (error) {
      console.error('ADMIN: –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ —Ä–µ—Ñ–µ—Ä–∞–ª–æ–≤:', error);
      ctx.reply(`‚ùå –û—à–∏–±–∫–∞: ${error.response?.data?.message || error.message}`);
    }
  });
  
  // –ö–æ–º–∞–Ω–¥–∞ –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ —Ç–æ–ø –ø–∞—Ä—Ç–Ω–µ—Ä–æ–≤
  bot.command('top_partners', async (ctx) => {
    try {
      const args = ctx.message.text.split(' ');
      const limit = args[1] || 10;
      
      const response = await apiClient.get('/referrals/admin/top-partners', {
        params: { limit }
      });
      
      if (!response.data.success) {
        return ctx.reply('‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Ç–æ–ø –ø–∞—Ä—Ç–Ω–µ—Ä–æ–≤');
      }
      
      const partners = response.data.data.partners;
      
      let message = `üèÜ –¢–û–ü-${limit} –ü–ê–†–¢–ù–ï–†–û–í\n\n`;
      
      partners.forEach((partner, index) => {
        const levelEmojis = {
          bronze: 'ü•â',
          silver: 'ü•à',
          gold: 'ü•á',
          platinum: 'üíé',
          vip: 'üåü'
        };
        
        message += `${index + 1}. @${partner.username || '–Ω–µ—Ç'} (${partner.firstName})\n`;
        message += `   ${levelEmojis[partner.referralStats.level]} ${partner.referralStats.level.toUpperCase()}\n`;
        message += `   ‚îú –ó–∞—Ä–∞–±–æ—Ç–∞–Ω–æ: ${partner.referralStats.totalEarned.toFixed(2)} USDT\n`;
        message += `   ‚îú –ë–∞–ª–∞–Ω—Å: ${partner.referralStats.referralBalance.toFixed(2)} USDT\n`;
        message += `   ‚îú –ê–∫—Ç–∏–≤–Ω—ã—Ö —Ä–µ—Ñ–µ—Ä–∞–ª–æ–≤: ${partner.referralStats.activeReferrals}\n`;
        message += `   ‚îî –ö–æ–Ω–≤–µ—Ä—Å–∏—è: ${partner.referralDetails.conversionRate}%\n\n`;
      });
      
      await ctx.reply(message);
      
    } catch (error) {
      console.error('ADMIN: –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Ç–æ–ø –ø–∞—Ä—Ç–Ω–µ—Ä–æ–≤:', error);
      ctx.reply(`‚ùå –û—à–∏–±–∫–∞: ${error.response?.data?.message || error.message}`);
    }
  });
  
  // –ö–æ–º–∞–Ω–¥–∞ –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–º –ø–∞—Ä—Ç–Ω–µ—Ä–µ
  bot.command('partner_info', async (ctx) => {
    try {
      const args = ctx.message.text.split(' ');
      if (args.length < 2) {
        return ctx.reply('–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: /partner_info [user_id –∏–ª–∏ @username]');
      }
      
      let partnerId = args[1];
      
      // –ï—Å–ª–∏ —ç—Ç–æ username, –Ω—É–∂–Ω–æ –Ω–∞–π—Ç–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
      if (partnerId.startsWith('@')) {
        const { User } = require('../../../backend/src/models');
        const username = partnerId.substring(1);
        const user = await User.findOne({ username });
        if (!user) {
          return ctx.reply('‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω');
        }
        partnerId = user._id.toString();
      }
      
      const response = await apiClient.get(`/referrals/admin/partner/${partnerId}`);
      
      if (!response.data.success) {
        return ctx.reply('‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–∞—Ä—Ç–Ω–µ—Ä–µ');
      }
      
      const data = response.data.data;
      const partner = data.partner;
      const stats = data.stats;
      
      const levelEmojis = {
        bronze: 'ü•â',
        silver: 'ü•à',
        gold: 'ü•á',
        platinum: 'üíé',
        vip: 'üåü'
      };
      
      let message = `üë§ –ü–ê–†–¢–ù–ï–†: @${partner.username || '–Ω–µ—Ç'} (${partner.name})\n\n`;
      
      message += 'üìä –°—Ç–∞—Ç—É—Å:\n';
      message += `‚îú –£—Ä–æ–≤–µ–Ω—å: ${levelEmojis[partner.level]} ${partner.levelInfo.name} (${partner.levelInfo.commissionPercent}%)\n`;
      message += `‚îú –î–æ ${partner.progress.nextLevel || '–º–∞–∫—Å–∏–º—É–º–∞'}: ${partner.progress.needed} –∞–∫—Ç–∏–≤–Ω—ã—Ö —Ä–µ—Ñ–µ—Ä–∞–ª–æ–≤\n`;
      message += `‚îú –ü—Ä–æ–≥—Ä–µ—Å—Å: ${partner.progress.progress.toFixed(0)}%\n`;
      message += `‚îî –†–µ—Ñ–µ—Ä–∞–ª—å–Ω—ã–π –∫–æ–¥: ${partner.referralCode}\n\n`;
      
      message += 'üí∞ –§–∏–Ω–∞–Ω—Å—ã:\n';
      message += `‚îú –í—Å–µ–≥–æ –∑–∞—Ä–∞–±–æ—Ç–∞–Ω–æ: ${stats.totalEarned.toFixed(2)} USDT\n`;
      message += `‚îú –†–µ—Ñ–µ—Ä–∞–ª—å–Ω—ã–π –±–∞–ª–∞–Ω—Å: ${stats.referralBalance.toFixed(2)} USDT\n`;
      message += `‚îú –í—ã–≤–µ–¥–µ–Ω–æ: ${stats.totalWithdrawn.toFixed(2)} USDT\n`;
      message += `‚îî –¢—Ä–∞–Ω–∑–∞–∫—Ü–∏–π: ${stats.totalTransactions}\n\n`;
      
      message += 'üë• –†–µ—Ñ–µ—Ä–∞–ª—ã:\n';
      message += `‚îú –í—Å–µ–≥–æ –ø—Ä–∏–≤–ª–µ—á–µ–Ω–æ: ${stats.totalReferrals}\n`;
      message += `‚îú –ê–∫—Ç–∏–≤–Ω—ã—Ö (30–¥): ${stats.activeReferrals}\n`;
      message += `‚îî –° –¥–µ–ø–æ–∑–∏—Ç–∞–º–∏: ${stats.referralsWithDeposits}\n\n`;
      
      // –¢–æ–ø —Ä–µ—Ñ–µ—Ä–∞–ª—ã
      if (data.referrals.top.length > 0) {
        message += 'üèÜ –¢–æ–ø-3 —Ä–µ—Ñ–µ—Ä–∞–ª–∞:\n';
        data.referrals.top.slice(0, 3).forEach((ref, index) => {
          message += `${index + 1}. @${ref.referral.username || '–Ω–µ—Ç'} - –ø—Ä–∏–Ω–µ—Å ${ref.totalBrought.toFixed(2)} USDT\n`;
        });
      }
      
      await ctx.reply(message,
        Markup.inlineKeyboard([
          [
            Markup.button.callback('üìù –ò–∑–º–µ–Ω–∏—Ç—å —É—Ä–æ–≤–µ–Ω—å', `ref_change_level:${partnerId}`),
            Markup.button.callback('üìä –î–µ—Ç–∞–ª—å–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞', `ref_detailed_stats:${partnerId}`)
          ],
          [
            Markup.button.callback('üë• –°–ø–∏—Å–æ–∫ —Ä–µ—Ñ–µ—Ä–∞–ª–æ–≤', `ref_list:${partnerId}`),
            Markup.button.callback('üí∏ –ò—Å—Ç–æ—Ä–∏—è –≤—ã–ø–ª–∞—Ç', `ref_payout_history:${partnerId}`)
          ]
        ])
      );
      
    } catch (error) {
      console.error('ADMIN: –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –ø–∞—Ä—Ç–Ω–µ—Ä–µ:', error);
      ctx.reply(`‚ùå –û—à–∏–±–∫–∞: ${error.response?.data?.message || error.message}`);
    }
  });
  
  // –ö–æ–º–∞–Ω–¥–∞ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –º–æ—à–µ–Ω–Ω–∏—á–µ—Å–∫–æ–π –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏
  bot.command('referral_fraud', async (ctx) => {
    try {
      console.log('ADMIN: –ó–∞–ø—Ä–æ—Å –ø—Ä–æ–≤–µ—Ä–∫–∏ –º–æ—à–µ–Ω–Ω–∏—á–µ—Å–∫–æ–π –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏');
      
      const response = await apiClient.get('/referrals/admin/fraud');
      
      if (!response.data.success) {
        return ctx.reply('‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –≤—ã–ø–æ–ª–Ω–∏—Ç—å –ø—Ä–æ–≤–µ—Ä–∫—É');
      }
      
      const { patterns, totalSuspicious } = response.data.data;
      
      if (totalSuspicious === 0) {
        return ctx.reply('‚úÖ –ü–æ–¥–æ–∑—Ä–∏—Ç–µ–ª—å–Ω–∞—è –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å –Ω–µ –æ–±–Ω–∞—Ä—É–∂–µ–Ω–∞');
      }
      
      let message = `‚ö†Ô∏è –û–ë–ù–ê–†–£–ñ–ï–ù–ê –ü–û–î–û–ó–†–ò–¢–ï–õ–¨–ù–ê–Ø –ê–ö–¢–ò–í–ù–û–°–¢–¨\n\n`;
      message += `–í—Å–µ–≥–æ –ø–æ–¥–æ–∑—Ä–∏—Ç–µ–ª—å–Ω—ã—Ö —Å–ª—É—á–∞–µ–≤: ${totalSuspicious}\n\n`;
      
      patterns.forEach(pattern => {
        message += `üö® ${pattern.message}:\n`;
        
        if (pattern.type === 'high_inactive_rate') {
          pattern.data.forEach(partner => {
            message += `‚îú @${partner.username || 'ID:' + partner.telegramId}: ${partner.inactivePercent.toFixed(0)}% –Ω–µ–∞–∫—Ç–∏–≤–Ω—ã—Ö\n`;
          });
        } else if (pattern.type === 'bulk_registrations') {
          pattern.data.forEach(bulk => {
            const partner = bulk.partnerInfo[0];
            message += `‚îú @${partner?.username || 'ID:' + bulk._id.referrer}: ${bulk.count} —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–π –∑–∞ —á–∞—Å\n`;
          });
        } else if (pattern.type === 'deposits_without_games') {
          pattern.data.forEach(group => {
            message += `‚îú –ü–∞—Ä—Ç–Ω–µ—Ä ID:${group._id}: ${group.count} —Ä–µ—Ñ–µ—Ä–∞–ª–æ–≤ —Å –¥–µ–ø–æ–∑–∏—Ç–∞–º–∏ –±–µ–∑ –∏–≥—Ä\n`;
          });
        }
        
        message += '\n';
      });
      
      message += 'üí° –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏:\n';
      message += '‚îú –ü—Ä–æ–≤–µ—Ä–∏—Ç—å IP –∞–¥—Ä–µ—Å–∞ –ø–æ–¥–æ–∑—Ä–∏—Ç–µ–ª—å–Ω—ã—Ö –∞–∫–∫–∞—É–Ω—Ç–æ–≤\n';
      message += '‚îú –ò–∑—É—á–∏—Ç—å –∏—Å—Ç–æ—Ä–∏—é –∏–≥—Ä –Ω–∞ –ø—Ä–µ–¥–º–µ—Ç –ø–∞—Ç—Ç–µ—Ä–Ω–æ–≤\n';
      message += '‚îî –†–∞—Å—Å–º–æ—Ç—Ä–µ—Ç—å –≤—Ä–µ–º–µ–Ω–Ω—É—é –±–ª–æ–∫–∏—Ä–æ–≤–∫—É –≤—ã–ø–ª–∞—Ç';
      
      await ctx.reply(message);
      
    } catch (error) {
      console.error('ADMIN: –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ —Ñ—Ä–æ–¥–∞:', error);
      ctx.reply(`‚ùå –û—à–∏–±–∫–∞: ${error.response?.data?.message || error.message}`);
    }
  });
  
  // Callback –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –¥–ª—è —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω–æ–π —Å–∏—Å—Ç–µ–º—ã
  bot.action('ref_top_partners', async (ctx) => {
    await ctx.answerCbQuery();
    // –í—ã–∑—ã–≤–∞–µ–º –∫–æ–º–∞–Ω–¥—É top_partners
    ctx.message = { text: '/top_partners 10' };
    await bot.handleUpdate({ message: ctx.message, update_id: Date.now() });
  });
  
  bot.action('ref_fraud_check', async (ctx) => {
    await ctx.answerCbQuery();
    ctx.message = { text: '/referral_fraud' };
    await bot.handleUpdate({ message: ctx.message, update_id: Date.now() });
  });
  
  bot.action(/^ref_report:(.+)$/, async (ctx) => {
    try {
      const period = ctx.match[1];
      await ctx.answerCbQuery('‚è≥ –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –æ—Ç—á–µ—Ç...');
      
      const response = await apiClient.get('/referrals/admin/stats', {
        params: { period }
      });
      
      if (!response.data.success) {
        return ctx.reply('‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –æ—Ç—á–µ—Ç');
      }
      
      const stats = response.data.data;
      
      let periodName = '';
      switch (period) {
        case 'day': periodName = '–î–ï–ù–¨'; break;
        case 'week': periodName = '–ù–ï–î–ï–õ–Æ'; break;
        case 'month': periodName = '–ú–ï–°–Ø–¶'; break;
      }
      
      let message = `üìä –†–ï–§–ï–†–ê–õ–¨–ù–´–ô –û–¢–ß–ï–¢ –ó–ê ${periodName}\n\n`;
      
      message += 'üí∞ –ù–∞—á–∏—Å–ª–µ–Ω–∏—è:\n';
      stats.earnings.forEach(earning => {
        const typeNames = {
          game_loss: 'üéÆ –ö–æ–º–∏—Å—Å–∏–∏ —Å –ø—Ä–æ–∏–≥—Ä—ã—à–µ–π',
          registration_bonus: 'üéÅ –ë–æ–Ω—É—Å—ã –∑–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é'
        };
        message += `‚îú ${typeNames[earning._id] || earning._id}: ${earning.totalAmount.toFixed(2)} USDT (${earning.count} —Ä–∞–∑)\n`;
      });
      
      const totalEarnings = stats.earnings.reduce((sum, e) => sum + e.totalAmount, 0);
      message += `‚îî –í—Å–µ–≥–æ: ${totalEarnings.toFixed(2)} USDT\n\n`;
      
      message += 'üìà –î–∏–Ω–∞–º–∏–∫–∞:\n';
      message += `‚îú –ù–æ–≤—ã—Ö –ø–∞—Ä—Ç–Ω–µ—Ä–æ–≤: ${stats.partners.byLevel.filter(l => l._id === 'bronze').reduce((sum, l) => sum + l.count, 0)}\n`;
      message += `‚îú –ù–æ–≤—ã—Ö —Ä–µ—Ñ–µ—Ä–∞–ª–æ–≤: ${stats.referrals.total}\n`;
      message += `‚îî ROI –ø—Ä–æ–≥—Ä–∞–º–º—ã: ${totalEarnings > 0 ? ((stats.finance.totalReferralPayments / totalEarnings * 100).toFixed(0)) : 0}%`;
      
      await ctx.reply(message);
      
    } catch (error) {
      console.error('ADMIN: –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –æ—Ç—á–µ—Ç–∞:', error);
      await ctx.reply(`‚ùå –û—à–∏–±–∫–∞: ${error.response?.data?.message || error.message}`);
    }
  });
  
  bot.action(/^ref_change_level:(.+)$/, async (ctx) => {
    try {
      const partnerId = ctx.match[1];
      await ctx.answerCbQuery();
      
      ctx.session = ctx.session || {};
      ctx.session.changingLevelForPartner = partnerId;
      
      await ctx.reply(
        '–í—ã–±–µ—Ä–∏—Ç–µ –Ω–æ–≤—ã–π —É—Ä–æ–≤–µ–Ω—å –¥–ª—è –ø–∞—Ä—Ç–Ω–µ—Ä–∞:',
        Markup.inlineKeyboard([
          [
            Markup.button.callback('ü•â –ë—Ä–æ–Ω–∑–∞ (5%)', 'set_partner_level:bronze'),
            Markup.button.callback('ü•à –°–µ—Ä–µ–±—Ä–æ (7%)', 'set_partner_level:silver')
          ],
          [
            Markup.button.callback('ü•á –ó–æ–ª–æ—Ç–æ (10%)', 'set_partner_level:gold'),
            Markup.button.callback('üíé –ü–ª–∞—Ç–∏–Ω–∞ (12%)', 'set_partner_level:platinum')
          ],
          [
            Markup.button.callback('üåü VIP (15%)', 'set_partner_level:vip')
          ],
          [
            Markup.button.callback('‚ùå –û—Ç–º–µ–Ω–∞', 'cancel_level_change')
          ]
        ])
      );
      
    } catch (error) {
      console.error('ADMIN: –û—à–∏–±–∫–∞ –Ω–∞—á–∞–ª–∞ –∏–∑–º–µ–Ω–µ–Ω–∏—è —É—Ä–æ–≤–Ω—è:', error);
      await ctx.reply(`‚ùå –û—à–∏–±–∫–∞: ${error.message}`);
    }
  });
  
  bot.action(/^set_partner_level:(.+)$/, async (ctx) => {
    try {
      const level = ctx.match[1];
      const partnerId = ctx.session?.changingLevelForPartner;
      
      if (!partnerId) {
        await ctx.answerCbQuery('‚ùå –°–µ—Å—Å–∏—è –∏—Å—Ç–µ–∫–ª–∞');
        return;
      }
      
      await ctx.answerCbQuery('‚è≥ –ò–∑–º–µ–Ω—è–µ–º —É—Ä–æ–≤–µ–Ω—å...');
      
      const response = await apiClient.put(`/referrals/admin/partner/${partnerId}/level`, { level });
      
      if (response.data.success) {
        await ctx.editMessageText(
          `‚úÖ ${response.data.message}\n\n` +
          `–ù–æ–≤–∞—è –∫–æ–º–∏—Å—Å–∏—è: ${response.data.data.commissionPercent}%`
        );
      } else {
        await ctx.reply(`‚ùå –û—à–∏–±–∫–∞: ${response.data.message}`);
      }
      
      delete ctx.session.changingLevelForPartner;
      
    } catch (error) {
      console.error('ADMIN: –û—à–∏–±–∫–∞ –∏–∑–º–µ–Ω–µ–Ω–∏—è —É—Ä–æ–≤–Ω—è:', error);
      await ctx.reply(`‚ùå –û—à–∏–±–∫–∞: ${error.response?.data?.message || error.message}`);
    }
  });
  
  bot.action('cancel_level_change', async (ctx) => {
    await ctx.answerCbQuery('–û—Ç–º–µ–Ω–µ–Ω–æ');
    await ctx.deleteMessage();
    delete ctx.session?.changingLevelForPartner;
  });

  return bot;
}

module.exports = {
  registerCommands
};