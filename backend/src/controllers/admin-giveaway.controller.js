// backend/src/controllers/admin-giveaway.controller.js
const { 
  Giveaway, 
  GiveawayPrize, 
  GiveawayParticipation, 
  User 
} = require('../models');
const crypto = require('crypto');
const telegramGiftService = require('../services/telegram-gift.service');
const telegramChannelService = require('../services/telegram-channel.service');

class AdminGiveawayController {
  /**
   * –ü–æ–ª—É—á–∏—Ç—å –≤—Å–µ –ø—Ä–∏–∑—ã
   */
  async getAllPrizes(req, res) {
    try {
      const { page = 1, limit = 20, type } = req.query;
      const skip = (page - 1) * limit;

      const filter = type ? { type } : {};
      
      const prizes = await GiveawayPrize.find(filter)
        .populate('createdBy', 'firstName lastName username')
        .sort({ createdAt: -1 })
        .skip(skip)
        .limit(parseInt(limit));

      const total = await GiveawayPrize.countDocuments(filter);

      res.json({
        success: true,
        data: {
          prizes,
          pagination: {
            page: parseInt(page),
            limit: parseInt(limit),
            total,
            pages: Math.ceil(total / limit)
          }
        }
      });
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –ø—Ä–∏–∑–æ–≤:', error);
      res.status(500).json({
        success: false,
        message: '–û—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞'
      });
    }
  }

  /**
   * –°–æ–∑–¥–∞—Ç—å –ø—Ä–∏–∑
   */
  async createPrize(req, res) {
    try {
      const { name, description, image, type, value, giftData } = req.body;
      const adminId = req.user.id;

      // –í–∞–ª–∏–¥–∞—Ü–∏—è –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã—Ö –ø–æ–ª–µ–π
      if (!name || !type) {
        return res.status(400).json({
          success: false,
          message: '–ù–∞–∑–≤–∞–Ω–∏–µ –∏ —Ç–∏–ø –ø—Ä–∏–∑–∞ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã'
        });
      }

      // –í–∞–ª–∏–¥–∞—Ü–∏—è —Ç–∏–ø–∞ –ø—Ä–∏–∑–∞
      const allowedTypes = ['telegram_gift', 'promo_code', 'balance_bonus'];
      if (!allowedTypes.includes(type)) {
        return res.status(400).json({
          success: false,
          message: '–ù–µ–¥–æ–ø—É—Å—Ç–∏–º—ã–π —Ç–∏–ø –ø—Ä–∏–∑–∞'
        });
      }

      const prize = new GiveawayPrize({
        name,
        description,
        image,
        type,
        value: value || 0,
        giftData: type === 'telegram_gift' ? giftData : undefined,
        createdBy: adminId
      });

      await prize.save();

      const populatedPrize = await GiveawayPrize.findById(prize._id)
        .populate('createdBy', 'firstName lastName username');

      res.status(201).json({
        success: true,
        message: '–ü—Ä–∏–∑ —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω',
        data: populatedPrize
      });

    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –ø—Ä–∏–∑–∞:', error);
      res.status(500).json({
        success: false,
        message: '–û—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞'
      });
    }
  }

  /**
   * –û–±–Ω–æ–≤–∏—Ç—å –ø—Ä–∏–∑
   */
  async updatePrize(req, res) {
    try {
      const { prizeId } = req.params;
      const updateData = req.body;

      const prize = await GiveawayPrize.findByIdAndUpdate(
        prizeId,
        updateData,
        { new: true }
      ).populate('createdBy', 'firstName lastName username');

      if (!prize) {
        return res.status(404).json({
          success: false,
          message: '–ü—Ä–∏–∑ –Ω–µ –Ω–∞–π–¥–µ–Ω'
        });
      }

      res.json({
        success: true,
        message: '–ü—Ä–∏–∑ —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω',
        data: prize
      });

    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –ø—Ä–∏–∑–∞:', error);
      res.status(500).json({
        success: false,
        message: '–û—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞'
      });
    }
  }

  /**
   * –£–¥–∞–ª–∏—Ç—å –ø—Ä–∏–∑
   */
  async deletePrize(req, res) {
    try {
      const { prizeId } = req.params;

      // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –ª–∏ –ø—Ä–∏–∑ –≤ –∞–∫—Ç–∏–≤–Ω—ã—Ö —Ä–æ–∑—ã–≥—Ä—ã—à–∞—Ö
      const activeGiveaways = await Giveaway.countDocuments({
        prize: prizeId,
        status: { $in: ['pending', 'active'] }
      });

      if (activeGiveaways > 0) {
        return res.status(400).json({
          success: false,
          message: '–ù–µ–ª—å–∑—è —É–¥–∞–ª–∏—Ç—å –ø—Ä–∏–∑, –∏—Å–ø–æ–ª—å–∑—É–µ–º—ã–π –≤ –∞–∫—Ç–∏–≤–Ω—ã—Ö —Ä–æ–∑—ã–≥—Ä—ã—à–∞—Ö'
        });
      }

      const prize = await GiveawayPrize.findByIdAndDelete(prizeId);

      if (!prize) {
        return res.status(404).json({
          success: false,
          message: '–ü—Ä–∏–∑ –Ω–µ –Ω–∞–π–¥–µ–Ω'
        });
      }

      res.json({
        success: true,
        message: '–ü—Ä–∏–∑ —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω'
      });

    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è –ø—Ä–∏–∑–∞:', error);
      res.status(500).json({
        success: false,
        message: '–û—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞'
      });
    }
  }

  /**
   * –ü–æ–ª—É—á–∏—Ç—å –≤—Å–µ —Ä–æ–∑—ã–≥—Ä—ã—à–∏
   */
  async getAllGiveaways(req, res) {
    try {
      console.log(`üîç –û–¢–õ–ê–î–ö–ê getAllGiveaways: –ù–∞—á–∏–Ω–∞–µ–º –ø–æ–ª—É—á–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ —Ä–æ–∑—ã–≥—Ä—ã—à–µ–π`);
      console.log(`üîç –û–¢–õ–ê–î–ö–ê getAllGiveaways: –ü–∞—Ä–∞–º–µ—Ç—Ä—ã –∑–∞–ø—Ä–æ—Å–∞:`, req.query);
      
      const { page = 1, limit = 20, status, type } = req.query;
      const skip = (page - 1) * limit;

      const filter = {};
      if (status) filter.status = status;
      if (type) filter.type = type;
      
      console.log(`üîç –û–¢–õ–ê–î–ö–ê getAllGiveaways: –§–∏–ª—å—Ç—Ä –ø–æ–∏—Å–∫–∞:`, filter);

      const giveaways = await Giveaway.find(filter)
        .populate('prize')
        .populate('createdBy', 'firstName lastName username')
        .populate('winners.user', 'firstName lastName username')
        .sort({ createdAt: -1 })
        .skip(skip)
        .limit(parseInt(limit));

      const total = await Giveaway.countDocuments(filter);

      // –î–æ–±–∞–≤–ª—è–µ–º –∞–∫—Ç—É–∞–ª—å–Ω—ã–π –ø–æ–¥—Å—á–µ—Ç —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ –¥–ª—è –∫–∞–∂–¥–æ–≥–æ —Ä–æ–∑—ã–≥—Ä—ã—à–∞
      console.log(`üîç –û–¢–õ–ê–î–ö–ê getAllGiveaways: –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º ${giveaways.length} —Ä–æ–∑—ã–≥—Ä—ã—à–µ–π`);
      
      const giveawaysWithStats = await Promise.all(
        giveaways.map(async (giveaway) => {
          const actualParticipationCount = await GiveawayParticipation.countDocuments({
            giveaway: giveaway._id
          });

          console.log(`üîç –û–¢–õ–ê–î–ö–ê getAllGiveaways: –†–æ–∑—ã–≥—Ä—ã—à ${giveaway._id} (${giveaway.title})`);
          console.log(`  - –°—Ç–∞—Ç—É—Å: ${giveaway.status}`);
          console.log(`  - –°–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã–π participationCount: ${giveaway.participationCount}`);
          console.log(`  - –§–∞–∫—Ç–∏—á–µ—Å–∫–∏–π –ø–æ–¥—Å—á–µ—Ç —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤: ${actualParticipationCount}`);
          
          // –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –æ—Ç–ª–∞–¥–∫–∞: –ø–æ–ª—É—á–∞–µ–º –∞–∫—Ç—É–∞–ª—å–Ω—ã–µ –∑–∞–ø–∏—Å–∏ —É—á–∞—Å—Ç–∏—è
          const participations = await GiveawayParticipation.find({
            giveaway: giveaway._id
          }).select('user participationNumber createdAt isWinner');
          
          console.log(`  - –ù–∞–π–¥–µ–Ω—ã –∑–∞–ø–∏—Å–∏ —É—á–∞—Å—Ç–∏—è (–≤—Å–µ–≥–æ ${participations.length}):`);
          participations.forEach((p, idx) => {
            console.log(`    ${idx + 1}. User: ${p.user}, ‚Ññ${p.participationNumber}, ${p.createdAt}, winner: ${p.isWinner}`);
          });

          return {
            ...giveaway.toObject(),
            participationCount: actualParticipationCount
          };
        })
      );

      res.json({
        success: true,
        data: {
          giveaways: giveawaysWithStats,
          pagination: {
            page: parseInt(page),
            limit: parseInt(limit),
            total,
            pages: Math.ceil(total / limit)
          }
        }
      });

    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Ä–æ–∑—ã–≥—Ä—ã—à–µ–π:', error);
      res.status(500).json({
        success: false,
        message: '–û—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞'
      });
    }
  }

  /**
   * –°–æ–∑–¥–∞—Ç—å —Ä–æ–∑—ã–≥—Ä—ã—à
   */
  async createGiveaway(req, res) {
    try {
      const { 
        title, 
        type, 
        prizeId, 
        winnersCount, 
        startDate, 
        endDate, 
        drawDate,
        requiresDeposit = true,
        depositTimeframe = 'same_day'
      } = req.body;
      const adminId = req.user.id;

      // –í–∞–ª–∏–¥–∞—Ü–∏—è –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã—Ö –ø–æ–ª–µ–π
      if (!title || !type || !prizeId || !winnersCount) {
        return res.status(400).json({
          success: false,
          message: '–í—Å–µ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ –ø–æ–ª—è –¥–æ–ª–∂–Ω—ã –±—ã—Ç—å –∑–∞–ø–æ–ª–Ω–µ–Ω—ã'
        });
      }

      // –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏—è –ø—Ä–∏–∑–∞
      const prize = await GiveawayPrize.findById(prizeId);
      if (!prize) {
        return res.status(404).json({
          success: false,
          message: '–ü—Ä–∏–∑ –Ω–µ –Ω–∞–π–¥–µ–Ω'
        });
      }

      // –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∞—è –≥–µ–Ω–µ—Ä–∞—Ü–∏—è –¥–∞—Ç, –µ—Å–ª–∏ –Ω–µ —É–∫–∞–∑–∞–Ω—ã
      let start, end, draw;
      
      if (startDate && endDate && drawDate) {
        // –ò—Å–ø–æ–ª—å–∑—É–µ–º –ø–µ—Ä–µ–¥–∞–Ω–Ω—ã–µ –¥–∞—Ç—ã
        start = new Date(startDate);
        end = new Date(endDate);
        draw = new Date(drawDate);
        
        if (start >= end || end >= draw) {
          return res.status(400).json({
            success: false,
            message: '–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–µ –¥–∞—Ç—ã: –¥–∞—Ç–∞ –Ω–∞—á–∞–ª–∞ < –¥–∞—Ç–∞ –æ–∫–æ–Ω—á–∞–Ω–∏—è < –¥–∞—Ç–∞ —Ä–æ–∑—ã–≥—Ä—ã—à–∞'
          });
        }
      } else {
        // –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∞—è –≥–µ–Ω–µ—Ä–∞—Ü–∏—è –¥–∞—Ç
        const now = new Date();
        
        if (type === 'daily') {
          // –ï–∂–µ–¥–Ω–µ–≤–Ω—ã–π —Ä–æ–∑—ã–≥—Ä—ã—à: –Ω–∞—á–∏–Ω–∞–µ—Ç—Å—è —Å–µ–π—á–∞—Å, –∑–∞–∫–∞–Ω—á–∏–≤–∞–µ—Ç—Å—è –≤ 19:59, —Ä–æ–∑—ã–≥—Ä—ã—à –≤ 20:00 –ú–°–ö
          
          // –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–µ–µ –≤—Ä–µ–º—è –≤ –º–æ—Å–∫–æ–≤—Å–∫–æ–π –∑–æ–Ω–µ
          const moscowNow = new Date(now.toLocaleString("en-US", {timeZone: "Europe/Moscow"}));
          
          start = new Date(now);
          end = new Date(now);
          
          // –°–æ–∑–¥–∞–µ–º –≤—Ä–µ–º—è 19:59:59 –≤ –º–æ—Å–∫–æ–≤—Å–∫–æ–π –∑–æ–Ω–µ
          end.setUTCHours(19 - 3, 59, 59, 999); // UTC –≤—Ä–µ–º—è = MSK - 3 —á–∞—Å–∞
          
          // –°–æ–∑–¥–∞–µ–º –≤—Ä–µ–º—è 20:00:00 –≤ –º–æ—Å–∫–æ–≤—Å–∫–æ–π –∑–æ–Ω–µ  
          draw = new Date(now);
          draw.setUTCHours(20 - 3, 0, 0, 0); // UTC –≤—Ä–µ–º—è = MSK - 3 —á–∞—Å–∞
          
          // –ï—Å–ª–∏ —É–∂–µ –ø–æ—Å–ª–µ 20:00 –ú–°–ö, –ø–ª–∞–Ω–∏—Ä—É–µ–º –Ω–∞ –∑–∞–≤—Ç—Ä–∞
          if (moscowNow.getHours() >= 20) {
            start.setDate(start.getDate() + 1);
            start.setHours(0, 0, 0, 0);
            end.setDate(end.getDate() + 1);
            draw.setDate(draw.getDate() + 1);
          }
        } else if (type === 'weekly') {
          // –ù–µ–¥–µ–ª—å–Ω—ã–π —Ä–æ–∑—ã–≥—Ä—ã—à: —Å –ø–æ–Ω–µ–¥–µ–ª—å–Ω–∏–∫–∞ –ø–æ –≤–æ—Å–∫—Ä–µ—Å–µ–Ω—å–µ –≤ 20:00 –ú–°–ö
          start = new Date(now);
          const dayOfWeek = start.getDay(); // 0 = –≤–æ—Å–∫—Ä–µ—Å–µ–Ω—å–µ, 1 = –ø–æ–Ω–µ–¥–µ–ª—å–Ω–∏–∫
          const daysToMonday = dayOfWeek === 0 ? 1 : (8 - dayOfWeek); // –î–Ω–∏ –¥–æ —Å–ª–µ–¥—É—é—â–µ–≥–æ –ø–æ–Ω–µ–¥–µ–ª—å–Ω–∏–∫–∞
          
          // –ù–∞—á–∞–ª–æ –≤ –ø–æ–Ω–µ–¥–µ–ª—å–Ω–∏–∫ 00:00
          start.setDate(start.getDate() + daysToMonday);
          start.setHours(0, 0, 0, 0);
          
          // –ö–æ–Ω–µ—Ü –≤ –≤–æ—Å–∫—Ä–µ—Å–µ–Ω—å–µ 19:59 –ú–°–ö
          end = new Date(start);
          end.setDate(end.getDate() + 6); // +6 –¥–Ω–µ–π –¥–æ –≤–æ—Å–∫—Ä–µ—Å–µ–Ω—å—è
          end.setUTCHours(19 - 3, 59, 59, 999); // UTC –≤—Ä–µ–º—è = MSK - 3 —á–∞—Å–∞
          
          // –†–æ–∑—ã–≥—Ä—ã—à –≤ –≤–æ—Å–∫—Ä–µ—Å–µ–Ω—å–µ 20:00 –ú–°–ö
          draw = new Date(end);
          draw.setUTCHours(20 - 3, 0, 0, 0); // UTC –≤—Ä–µ–º—è = MSK - 3 —á–∞—Å–∞
        }
      }

      const giveaway = new Giveaway({
        title,
        type,
        prize: prizeId,
        winnersCount: parseInt(winnersCount),
        startDate: start,
        endDate: end,
        drawDate: draw,
        requiresDeposit,
        depositTimeframe,
        createdBy: adminId
      });

      await giveaway.save();

      const populatedGiveaway = await Giveaway.findById(giveaway._id)
        .populate('prize')
        .populate('createdBy', 'firstName lastName username');

      res.status(201).json({
        success: true,
        message: '–†–æ–∑—ã–≥—Ä—ã—à —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω',
        data: populatedGiveaway
      });

    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è —Ä–æ–∑—ã–≥—Ä—ã—à–∞:', error);
      res.status(500).json({
        success: false,
        message: '–û—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞'
      });
    }
  }

  /**
   * –û–±–Ω–æ–≤–∏—Ç—å —Ä–æ–∑—ã–≥—Ä—ã—à
   */
  async updateGiveaway(req, res) {
    try {
      const { giveawayId } = req.params;
      const updateData = req.body;

      const giveaway = await Giveaway.findById(giveawayId);
      if (!giveaway) {
        return res.status(404).json({
          success: false,
          message: '–†–æ–∑—ã–≥—Ä—ã—à –Ω–µ –Ω–∞–π–¥–µ–Ω'
        });
      }

      // –ó–∞–ø—Ä–µ—â–∞–µ–º –∏–∑–º–µ–Ω–µ–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–Ω—ã—Ö —Ä–æ–∑—ã–≥—Ä—ã—à–µ–π
      if (giveaway.status === 'completed') {
        return res.status(400).json({
          success: false,
          message: '–ù–µ–ª—å–∑—è –∏–∑–º–µ–Ω—è—Ç—å –∑–∞–≤–µ—Ä—à–µ–Ω–Ω—ã–µ —Ä–æ–∑—ã–≥—Ä—ã—à–∏'
        });
      }

      const updatedGiveaway = await Giveaway.findByIdAndUpdate(
        giveawayId,
        updateData,
        { new: true }
      )
      .populate('prize')
      .populate('createdBy', 'firstName lastName username')
      .populate('winners.user', 'firstName lastName username');

      res.json({
        success: true,
        message: '–†–æ–∑—ã–≥—Ä—ã—à —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω',
        data: updatedGiveaway
      });

    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Ä–æ–∑—ã–≥—Ä—ã—à–∞:', error);
      res.status(500).json({
        success: false,
        message: '–û—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞'
      });
    }
  }

  /**
   * –ê–∫—Ç–∏–≤–∏—Ä–æ–≤–∞—Ç—å —Ä–æ–∑—ã–≥—Ä—ã—à
   */
  async activateGiveaway(req, res) {
    try {
      const { giveawayId } = req.params;

      const giveaway = await Giveaway.findById(giveawayId);
      if (!giveaway) {
        return res.status(404).json({
          success: false,
          message: '–†–æ–∑—ã–≥—Ä—ã—à –Ω–µ –Ω–∞–π–¥–µ–Ω'
        });
      }

      if (giveaway.status !== 'pending') {
        return res.status(400).json({
          success: false,
          message: '–ú–æ–∂–Ω–æ –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞—Ç—å —Ç–æ–ª—å–∫–æ –æ–∂–∏–¥–∞—é—â–∏–µ —Ä–æ–∑—ã–≥—Ä—ã—à–∏'
        });
      }

      giveaway.status = 'active';
      await giveaway.save();

      const populatedGiveaway = await Giveaway.findById(giveaway._id)
        .populate('prize')
        .populate('createdBy', 'firstName lastName username');

      // –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –ø–æ—Å—Ç–∏–º –∞–Ω–æ–Ω—Å —Ä–æ–∑—ã–≥—Ä—ã—à–∞ –≤ Telegram –∫–∞–Ω–∞–ª
      try {
        const telegramResponse = await telegramChannelService.postGiveawayAnnouncement(populatedGiveaway);
        if (telegramResponse?.result?.message_id) {
          // –°–æ—Ö—Ä–∞–Ω—è–µ–º ID —Å–æ–æ–±—â–µ–Ω–∏—è –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –≤–æ–∑–º–æ–∂–Ω–æ–≥–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –≤ –±—É–¥—É—â–µ–º
          await Giveaway.findByIdAndUpdate(giveaway._id, {
            telegramMessageId: telegramResponse.result.message_id.toString()
          });
        }
        console.log('‚úÖ –ê–Ω–æ–Ω—Å —Ä–æ–∑—ã–≥—Ä—ã—à–∞ –æ–ø—É–±–ª–∏–∫–æ–≤–∞–Ω –≤ Telegram –∫–∞–Ω–∞–ª–µ');
      } catch (telegramError) {
        console.error('‚ùå –û—à–∏–±–∫–∞ –ø—É–±–ª–∏–∫–∞—Ü–∏–∏ –∞–Ω–æ–Ω—Å–∞ –≤ Telegram –∫–∞–Ω–∞–ª–µ:', telegramError.message);
        // –ü—Ä–æ–¥–æ–ª–∂–∞–µ–º –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –¥–∞–∂–µ –µ—Å–ª–∏ –ø–æ—Å—Ç–∏–Ω–≥ –Ω–µ —É–¥–∞–ª—Å—è
      }

      res.json({
        success: true,
        message: '–†–æ–∑—ã–≥—Ä—ã—à –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω',
        data: populatedGiveaway
      });

    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ –∞–∫—Ç–∏–≤–∞—Ü–∏–∏ —Ä–æ–∑—ã–≥—Ä—ã—à–∞:', error);
      res.status(500).json({
        success: false,
        message: '–û—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞'
      });
    }
  }

  /**
   * –û—Ç–º–µ–Ω–∏—Ç—å —Ä–æ–∑—ã–≥—Ä—ã—à
   */
  async cancelGiveaway(req, res) {
    try {
      const { giveawayId } = req.params;

      const giveaway = await Giveaway.findById(giveawayId);
      if (!giveaway) {
        return res.status(404).json({
          success: false,
          message: '–†–æ–∑—ã–≥—Ä—ã—à –Ω–µ –Ω–∞–π–¥–µ–Ω'
        });
      }

      if (!['pending', 'active'].includes(giveaway.status)) {
        return res.status(400).json({
          success: false,
          message: '–ú–æ–∂–Ω–æ –æ—Ç–º–µ–Ω–∏—Ç—å —Ç–æ–ª—å–∫–æ –æ–∂–∏–¥–∞—é—â–∏–µ –∏–ª–∏ –∞–∫—Ç–∏–≤–Ω—ã–µ —Ä–æ–∑—ã–≥—Ä—ã—à–∏'
        });
      }

      giveaway.status = 'cancelled';
      await giveaway.save();

      res.json({
        success: true,
        message: '–†–æ–∑—ã–≥—Ä—ã—à –æ—Ç–º–µ–Ω–µ–Ω'
      });

    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ –æ—Ç–º–µ–Ω—ã —Ä–æ–∑—ã–≥—Ä—ã—à–∞:', error);
      res.status(500).json({
        success: false,
        message: '–û—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞'
      });
    }
  }

  /**
   * –ü–æ–ª—É—á–∏—Ç—å —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ —Ä–æ–∑—ã–≥—Ä—ã—à–∞
   */
  async getGiveawayParticipants(req, res) {
    try {
      const { giveawayId } = req.params;
      const { page = 1, limit = 50 } = req.query;
      const skip = (page - 1) * limit;

      const participants = await GiveawayParticipation.find({
        giveaway: giveawayId
      })
      .populate('user', 'firstName lastName username telegramId')
      .populate('deposit', 'amount createdAt')
      .sort({ participationNumber: 1 })
      .skip(skip)
      .limit(parseInt(limit));

      const total = await GiveawayParticipation.countDocuments({
        giveaway: giveawayId
      });

      res.json({
        success: true,
        data: {
          participants,
          pagination: {
            page: parseInt(page),
            limit: parseInt(limit),
            total,
            pages: Math.ceil(total / limit)
          }
        }
      });

    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤:', error);
      res.status(500).json({
        success: false,
        message: '–û—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞'
      });
    }
  }

  /**
   * –ü—Ä–æ–≤–µ—Å—Ç–∏ —Ä–æ–∑—ã–≥—Ä—ã—à –≤—Ä—É—á–Ω—É—é
   */
  async conductGiveaway(req, res) {
    try {
      const { giveawayId } = req.params;
      const { useCustomSeed } = req.body;

      const giveaway = await Giveaway.findById(giveawayId)
        .populate('prize');

      if (!giveaway) {
        return res.status(404).json({
          success: false,
          message: '–†–æ–∑—ã–≥—Ä—ã—à –Ω–µ –Ω–∞–π–¥–µ–Ω'
        });
      }

      if (giveaway.status !== 'active') {
        return res.status(400).json({
          success: false,
          message: '–ú–æ–∂–Ω–æ –ø—Ä–æ–≤–æ–¥–∏—Ç—å —Ç–æ–ª—å–∫–æ –∞–∫—Ç–∏–≤–Ω—ã–µ —Ä–æ–∑—ã–≥—Ä—ã—à–∏'
        });
      }

      // –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ—Ö —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤
      console.log(`üîç –û–¢–õ–ê–î–ö–ê conductGiveaway: –ü–æ–∏—Å–∫ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ –¥–ª—è —Ä–æ–∑—ã–≥—Ä—ã—à–∞ ${giveawayId}`);
      console.log(`üîç –û–¢–õ–ê–î–ö–ê conductGiveaway: –¢–µ–∫—É—â–∏–π —Å—Ç–∞—Ç—É—Å —Ä–æ–∑—ã–≥—Ä—ã—à–∞: ${giveaway.status}`);
      console.log(`üîç –û–¢–õ–ê–î–ö–ê conductGiveaway: –°–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã–π participationCount –≤ —Ä–æ–∑—ã–≥—Ä—ã—à–µ: ${giveaway.participationCount}`);
      
      // –°–Ω–∞—á–∞–ª–∞ –ø—Ä–æ–≤–µ—Ä–∏–º –æ–±—â–∏–π –ø–æ–¥—Å—á–µ—Ç –±–µ–∑ populate
      const participantCount = await GiveawayParticipation.countDocuments({
        giveaway: giveawayId
      });
      console.log(`üîç –û–¢–õ–ê–î–ö–ê conductGiveaway: –ü–æ–¥—Å—á–µ—Ç –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤ —É—á–∞—Å—Ç–∏—è: ${participantCount}`);
      
      const participants = await GiveawayParticipation.find({
        giveaway: giveawayId
      }).populate('user', 'firstName lastName username telegramId');

      console.log(`üîç –û–¢–õ–ê–î–ö–ê conductGiveaway: –ù–∞–π–¥–µ–Ω–æ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ –ø–æ—Å–ª–µ populate: ${participants.length}`);
      console.log(`üîç –û–¢–õ–ê–î–ö–ê conductGiveaway: –î–µ—Ç–∞–ª–∏ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤:`);
      participants.forEach((p, idx) => {
        console.log(`  ${idx + 1}. ID: ${p._id}`);
        console.log(`     User ID: ${p.user?._id || 'NULL'}`);
        console.log(`     User: ${p.user?.firstName || p.user?.username || 'Unknown'}`);
        console.log(`     Participation Number: ${p.participationNumber}`);
        console.log(`     Created: ${p.createdAt}`);
        console.log(`     Is Winner: ${p.isWinner}`);
        console.log(`     Status: ${p.status}`);
      });
      
      // –ü—Ä–æ–≤–µ—Ä–∏–º —Ç–∞–∫–∂–µ –µ—Å—Ç—å –ª–∏ —É—á–∞—Å—Ç–∏—è —Å null/undefined –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º–∏
      const participationsWithoutUser = await GiveawayParticipation.find({
        giveaway: giveawayId,
        user: { $exists: false }
      });
      console.log(`üîç –û–¢–õ–ê–î–ö–ê conductGiveaway: –£—á–∞—Å—Ç–∏—è –±–µ–∑ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: ${participationsWithoutUser.length}`);
      
      const participationsWithNullUser = await GiveawayParticipation.find({
        giveaway: giveawayId,
        user: null
      });
      console.log(`üîç –û–¢–õ–ê–î–ö–ê conductGiveaway: –£—á–∞—Å—Ç–∏—è —Å null –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º: ${participationsWithNullUser.length}`);

      // –û–±–Ω–æ–≤–ª—è–µ–º —Å—á–µ—Ç—á–∏–∫ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ –≤ –¥–æ–∫—É–º–µ–Ω—Ç–µ —Ä–æ–∑—ã–≥—Ä—ã—à–∞
      console.log(`üîç –û–¢–õ–ê–î–ö–ê conductGiveaway: –û–±–Ω–æ–≤–ª—è–µ–º participationCount –≤ —Ä–æ–∑—ã–≥—Ä—ã—à–µ —Å ${giveaway.participationCount} –Ω–∞ ${participants.length}`);
      
      await Giveaway.findByIdAndUpdate(giveawayId, {
        participationCount: participants.length
      });
      
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –ø—Ä–æ—à–ª–æ —É—Å–ø–µ—à–Ω–æ
      const updatedGiveawayCheck = await Giveaway.findById(giveawayId);
      console.log(`üîç –û–¢–õ–ê–î–ö–ê conductGiveaway: –ü–æ—Å–ª–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è participationCount —Å—Ç–∞–ª: ${updatedGiveawayCheck.participationCount}`);

      if (participants.length === 0) {
        // –í—Å–µ —Ä–∞–≤–Ω–æ –∑–∞–≤–µ—Ä—à–∞–µ–º —Ä–æ–∑—ã–≥—Ä—ã—à, –Ω–æ –±–µ–∑ –ø–æ–±–µ–¥–∏—Ç–µ–ª–µ–π
        await Giveaway.findByIdAndUpdate(giveawayId, {
          status: 'completed',
          participationCount: 0
        });

        const populatedGiveaway = await Giveaway.findById(giveaway._id)
          .populate('prize');

        // –ü–æ—Å—Ç–∏–º –≤ –∫–∞–Ω–∞–ª –æ —Ç–æ–º, —á—Ç–æ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ –Ω–µ –±—ã–ª–æ
        try {
          await telegramChannelService.postGiveawayResults(populatedGiveaway, []);
          console.log('‚úÖ –†–µ–∑—É–ª—å—Ç–∞—Ç—ã —Ä–æ–∑—ã–≥—Ä—ã—à–∞ (–±–µ–∑ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤) –æ–ø—É–±–ª–∏–∫–æ–≤–∞–Ω—ã –≤ Telegram –∫–∞–Ω–∞–ª–µ');
        } catch (telegramError) {
          console.error('‚ùå –û—à–∏–±–∫–∞ –ø—É–±–ª–∏–∫–∞—Ü–∏–∏ –≤ Telegram –∫–∞–Ω–∞–ª–µ:', telegramError.message);
        }

        return res.json({
          success: true,
          message: '–†–æ–∑—ã–≥—Ä—ã—à –∑–∞–≤–µ—Ä—à–µ–Ω - —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ –Ω–µ –±—ã–ª–æ',
          data: {
            giveaway: populatedGiveaway,
            winnersInfo: []
          }
        });
      }

      if (participants.length < giveaway.winnersCount) {
        return res.status(400).json({
          success: false,
          message: `–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤. –ù—É–∂–Ω–æ: ${giveaway.winnersCount}, –µ—Å—Ç—å: ${participants.length}`
        });
      }

      // –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —Å–ª—É—á–∞–π–Ω—ã–µ —á–∏—Å–ª–∞ –¥–ª—è –≤—ã–±–æ—Ä–∞ –ø–æ–±–µ–¥–∏—Ç–µ–ª–µ–π
      const seed = useCustomSeed || crypto.randomBytes(32).toString('hex');
      const winners = [];
      const usedIndices = new Set();

      for (let i = 0; i < giveaway.winnersCount; i++) {
        let randomIndex;
        do {
          randomIndex = Math.floor(Math.random() * participants.length);
        } while (usedIndices.has(randomIndex));
        
        usedIndices.add(randomIndex);
        const winner = participants[randomIndex];
        
        winners.push({
          user: winner.user._id,
          position: i + 1,
          selectedAt: new Date()
        });

        // –û–±–Ω–æ–≤–ª—è–µ–º —É—á–∞—Å—Ç–∏–µ –∫–∞–∫ –≤—ã–∏–≥—Ä—ã—à–Ω–æ–µ
        await GiveawayParticipation.findByIdAndUpdate(winner._id, {
          isWinner: true,
          winnerPosition: i + 1,
          status: 'winner'
        });
      }

      // –û–±–Ω–æ–≤–ª—è–µ–º —Ä–æ–∑—ã–≥—Ä—ã—à
      giveaway.winners = winners;
      giveaway.status = 'completed';
      giveaway.diceResult = {
        value: Math.floor(Math.random() * 6) + 1,
        timestamp: new Date()
      };
      
      await giveaway.save();

      // –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤, –∫–æ—Ç–æ—Ä—ã–µ –Ω–µ –≤—ã–∏–≥—Ä–∞–ª–∏
      await GiveawayParticipation.updateMany(
        { 
          giveaway: giveawayId, 
          isWinner: false 
        },
        { status: 'not_winner' }
      );

      const populatedGiveaway = await Giveaway.findById(giveaway._id)
        .populate('prize')
        .populate('winners.user', 'firstName lastName username telegramId');

      // –ü–æ—Å—Ç–∏–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –≤ Telegram –∫–∞–Ω–∞–ª
      try {
        await telegramChannelService.postGiveawayResults(
          populatedGiveaway,
          populatedGiveaway.winners
        );
        console.log('‚úÖ –†–µ–∑—É–ª—å—Ç–∞—Ç—ã —Ä–æ–∑—ã–≥—Ä—ã—à–∞ –æ–ø—É–±–ª–∏–∫–æ–≤–∞–Ω—ã –≤ Telegram –∫–∞–Ω–∞–ª–µ');
      } catch (telegramError) {
        console.error('‚ùå –û—à–∏–±–∫–∞ –ø—É–±–ª–∏–∫–∞—Ü–∏–∏ –≤ Telegram –∫–∞–Ω–∞–ª–µ:', telegramError.message);
        // –ü—Ä–æ–¥–æ–ª–∂–∞–µ–º –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –¥–∞–∂–µ –µ—Å–ª–∏ –ø–æ—Å—Ç–∏–Ω–≥ –Ω–µ —É–¥–∞–ª—Å—è
      }

      res.json({
        success: true,
        message: '–†–æ–∑—ã–≥—Ä—ã—à —É—Å–ø–µ—à–Ω–æ –ø—Ä–æ–≤–µ–¥–µ–Ω',
        data: {
          giveaway: populatedGiveaway,
          winnersInfo: winners.map((winner, index) => ({
            position: winner.position,
            user: participants.find(p => p.user._id.toString() === winner.user.toString()).user,
            participationNumber: participants.find(p => p.user._id.toString() === winner.user.toString()).participationNumber
          }))
        }
      });

    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ–¥–µ–Ω–∏—è —Ä–æ–∑—ã–≥—Ä—ã—à–∞:', error);
      res.status(500).json({
        success: false,
        message: '–û—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞'
      });
    }
  }

  /**
   * –ü–æ–ª—É—á–∏—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É —Ä–æ–∑—ã–≥—Ä—ã—à–µ–π
   */
  async getGiveawayStats(req, res) {
    try {
      const stats = await Promise.all([
        // –û–±—â–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
        Giveaway.countDocuments(),
        Giveaway.countDocuments({ status: 'active' }),
        Giveaway.countDocuments({ status: 'completed' }),
        Giveaway.countDocuments({ status: 'pending' }),
        GiveawayParticipation.countDocuments(),
        GiveawayPrize.countDocuments(),
        
        // –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ —Ç–∏–ø–∞–º —Ä–æ–∑—ã–≥—Ä—ã—à–µ–π
        Giveaway.aggregate([
          { $group: { _id: '$type', count: { $sum: 1 } } }
        ]),
        
        // –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —É—á–∞—Å—Ç–∏—è –ø–æ –¥–Ω—è–º (–ø–æ—Å–ª–µ–¥–Ω–∏–µ 7 –¥–Ω–µ–π)
        GiveawayParticipation.aggregate([
          {
            $match: {
              createdAt: {
                $gte: new Date(Date.now() - 7 * 24 * 60 * 60 * 1000)
              }
            }
          },
          {
            $group: {
              _id: {
                $dateToString: { format: '%Y-%m-%d', date: '$createdAt' }
              },
              count: { $sum: 1 }
            }
          },
          { $sort: { '_id': 1 } }
        ])
      ]);

      const [
        totalGiveaways,
        activeGiveaways,
        completedGiveaways,
        pendingGiveaways,
        totalParticipations,
        totalPrizes,
        giveawaysByType,
        participationsByDay
      ] = stats;

      res.json({
        success: true,
        data: {
          overview: {
            totalGiveaways,
            activeGiveaways,
            completedGiveaways,
            pendingGiveaways,
            totalParticipations,
            totalPrizes
          },
          giveawaysByType,
          participationsByDay
        }
      });

    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏:', error);
      res.status(500).json({
        success: false,
        message: '–û—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞'
      });
    }
  }

  /**
   * –ü–∞—Ä—Å–∏–Ω–≥ –ø–æ–¥–∞—Ä–∫–∞ –∏–∑ Telegram Gift URL –¥–ª—è –ø—Ä–µ–¥–ø—Ä–æ—Å–º–æ—Ç—Ä–∞
   */
  async parseGiftFromUrl(req, res) {
    try {
      const { giftUrl } = req.body;

      if (!giftUrl) {
        return res.status(400).json({
          success: false,
          message: 'URL –ø–æ–¥–∞—Ä–∫–∞ –æ–±—è–∑–∞—Ç–µ–ª–µ–Ω'
        });
      }

      // –í–∞–ª–∏–¥–∞—Ü–∏—è URL
      if (!telegramGiftService.isValidTelegramGiftUrl(giftUrl)) {
        return res.status(400).json({
          success: false,
          message: '–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–∞—è —Å—Å—ã–ª–∫–∞ –Ω–∞ Telegram Gift'
        });
      }

      // –ü–∞—Ä—Å–∏–º –¥–∞–Ω–Ω—ã–µ –ø–æ–¥–∞—Ä–∫–∞
      const giftData = await telegramGiftService.parseGiftFromUrl(giftUrl);

      res.json({
        success: true,
        message: '–ü–æ–¥–∞—Ä–æ–∫ —É—Å–ø–µ—à–Ω–æ —Ä–∞—Å–ø–æ–∑–Ω–∞–Ω',
        data: {
          preview: {
            name: giftData.name,
            description: giftData.description,
            imageUrl: giftData.imageUrl,
            imageValid: giftData.imageValid,
            rarity: giftData.rarity,
            collection: giftData.collection,
            attributes: giftData.attributes,
            totalSupply: giftData.totalSupply,
            currentSupply: giftData.currentSupply,
            giftId: giftData.giftId,
            originalUrl: giftUrl
          }
        }
      });

    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ –ø–æ–¥–∞—Ä–∫–∞:', error);
      res.status(500).json({
        success: false,
        message: error.message || '–û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ –ø–æ–¥–∞—Ä–∫–∞'
      });
    }
  }

  /**
   * –°–æ–∑–¥–∞–Ω–∏–µ –ø—Ä–∏–∑–∞ –∏–∑ —Ä–∞—Å–ø–æ–∑–Ω–∞–Ω–Ω–æ–≥–æ –ø–æ–¥–∞—Ä–∫–∞
   */
  async createPrizeFromGift(req, res) {
    try {
      const { 
        name, 
        description, 
        value, 
        giftData 
      } = req.body;
      const adminId = req.user.id;

      // –í–∞–ª–∏–¥–∞—Ü–∏—è –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã—Ö –ø–æ–ª–µ–π
      if (!name || !value || !giftData) {
        return res.status(400).json({
          success: false,
          message: '–ù–∞–∑–≤–∞–Ω–∏–µ, —Ü–µ–Ω–Ω–æ—Å—Ç—å –∏ –¥–∞–Ω–Ω—ã–µ –ø–æ–¥–∞—Ä–∫–∞ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã'
        });
      }

      // –°–æ–∑–¥–∞–µ–º –ø—Ä–∏–∑
      const prize = new GiveawayPrize({
        name,
        description,
        image: giftData.imageUrl, // –ò—Å–ø–æ–ª—å–∑—É–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –∏–∑ Telegram
        type: 'telegram_gift',
        value: parseFloat(value),
        giftData: {
          originalUrl: giftData.originalUrl,
          giftId: giftData.giftId,
          rarity: giftData.rarity,
          collection: giftData.collection,
          attributes: giftData.attributes || [],
          totalSupply: giftData.totalSupply,
          currentSupply: giftData.currentSupply,
          imageUrl: giftData.imageUrl,
          imageValid: giftData.imageValid,
          parsedAt: new Date()
        },
        createdBy: adminId
      });

      await prize.save();

      const populatedPrize = await GiveawayPrize.findById(prize._id)
        .populate('createdBy', 'firstName lastName username');

      res.status(201).json({
        success: true,
        message: '–ü—Ä–∏–∑ –∏–∑ Telegram Gift —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω',
        data: populatedPrize
      });

    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –ø—Ä–∏–∑–∞ –∏–∑ –ø–æ–¥–∞—Ä–∫–∞:', error);
      res.status(500).json({
        success: false,
        message: '–û—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞'
      });
    }
  }
}

module.exports = new AdminGiveawayController();