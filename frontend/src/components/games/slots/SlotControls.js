// frontend/src/components/games/slots/SlotControls.js
import React, { useState, useEffect } from 'react';
import useTactileFeedback from '../../../hooks/useTactileFeedback';
import '../../../styles/SlotControls.css';
const SlotControls = ({ 
  balance, 
  onSpin, 
  isSpinning, 
  betAmount,
  setBetAmount,
  autoplay,
  setAutoplay,
  autoplayCount,
  setAutoplayCount,
  loading,
  autoplayRemaining,
  gameStats,
  onStopAutoplay // –ù–æ–≤—ã–π –ø—Ä–æ–ø –¥–ª—è –æ—Å—Ç–∞–Ω–æ–≤–∫–∏ –∞–≤—Ç–æ—Å–ø–∏–Ω–∞
}) => {
  const [maxWin, setMaxWin] = useState(0);
  const { 
    buttonPressFeedback, 
    selectionChanged, 
    gameActionFeedback, 
    importantActionFeedback,
    heavyImpact 
  } = useTactileFeedback();
  // –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º –º–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–π –≤–æ–∑–º–æ–∂–Ω—ã–π –≤—ã–∏–≥—Ä—ã—à
  useEffect(() => {
    const jackpotMultiplier = 50; // –û—Å—Ç–∞–µ—Ç—Å—è 50 (–º–∞–∫—Å–≤–∏–Ω)
    setMaxWin(betAmount * jackpotMultiplier);
  }, [betAmount]);
  // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∏–∑–º–µ–Ω–µ–Ω–∏—è —Å—É–º–º—ã —Å—Ç–∞–≤–∫–∏
  const handleBetAmountChange = (e) => {
    const inputValue = e.target.value;
    if (inputValue === '' || inputValue === '0') {
      setBetAmount(inputValue);
      return;
    }
    const value = parseFloat(inputValue);
    if (!isNaN(value) && value >= 0 && value <= balance) {
      setBetAmount(value);
      buttonPressFeedback(); // –õ–µ–≥–∫–∞—è –≤–∏–±—Ä–∞—Ü–∏—è –ø—Ä–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–∏ —Å—Ç–∞–≤–∫–∏
    }
  };
  // –ë—ã—Å—Ç—Ä—ã–µ —Å—Ç–∞–≤–∫–∏
  const handleQuickBet = (multiplier) => {
    if (isSpinning || loading || autoplay) return; // –ë–õ–û–ö–ò–†–£–ï–ú –ø—Ä–∏ —Å–ø–∏–Ω–µ
    buttonPressFeedback(); // –í–∏–±—Ä–∞—Ü–∏—è –ø—Ä–∏ –±—ã—Å—Ç—Ä–æ–π —Å—Ç–∞–≤–∫–µ
    const quickBet = Math.min(balance, Math.max(0.1, Math.floor(balance * multiplier * 100) / 100));
    setBetAmount(quickBet);
  };
  // –ò–°–ü–†–ê–í–õ–ï–ù–ù–´–ô –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ "–ö—Ä—É—Ç–∏—Ç—å"
  const handleSpinClick = () => {
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤—Å–µ —É—Å–ª–æ–≤–∏—è
    if (isSpinning) {
      return;
    }
    if (loading) {
      return;
    }
    if (autoplay) {
      return;
    }
    if (!betAmount || betAmount <= 0) {
      return;
    }
    if (betAmount > balance) {
      return;
    }
    if (!onSpin) {
      return;
    }
    // –°–∏–ª—å–Ω–∞—è –≤–∏–±—Ä–∞—Ü–∏—è –¥–ª—è –≥–ª–∞–≤–Ω–æ–≥–æ –∏–≥—Ä–æ–≤–æ–≥–æ –¥–µ–π—Å—Ç–≤–∏—è
    heavyImpact();
    onSpin();
  };
  // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∞–≤—Ç–æ–∏–≥—Ä—ã - –ò–°–ü–†–ê–í–õ–ï–ù–ù–´–ô
  const handleAutoplayToggle = () => {
    if (isSpinning || loading) return; // –ë–õ–û–ö–ò–†–£–ï–ú –ø—Ä–∏ —Å–ø–∏–Ω–µ
    selectionChanged(); // –í–∏–±—Ä–∞—Ü–∏—è –ø—Ä–∏ –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–∏
    // –ü–µ—Ä–µ–¥–∞–µ–º –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π –ø–∞—Ä–∞–º–µ—Ç—Ä –≤ —Ä–æ–¥–∏—Ç–µ–ª—å—Å–∫–∏–π –∫–æ–º–ø–æ–Ω–µ–Ω—Ç
    // setAutoplay –æ–∂–∏–¥–∞–µ—Ç enabled –ø–∞—Ä–∞–º–µ—Ç—Ä, –∞ –Ω–µ setState –ª–æ–≥–∏–∫—É
    if (setAutoplay) {
      setAutoplay(!autoplay);
    }
  };
  // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∏–∑–º–µ–Ω–µ–Ω–∏—è –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –∞–≤—Ç–æ—Å–ø–∏–Ω–æ–≤
  const handleAutoplayCountChange = (count) => {
    if (isSpinning || loading || autoplay) return; // –ë–õ–û–ö–ò–†–£–ï–ú –ø—Ä–∏ —Å–ø–∏–Ω–µ
    buttonPressFeedback(); // –õ–µ–≥–∫–∞—è –≤–∏–±—Ä–∞—Ü–∏—è –ø—Ä–∏ –≤—ã–±–æ—Ä–µ
    if (setAutoplayCount) {
      setAutoplayCount(count);
    }
  };
  // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ—Å—Ç–∞–Ω–æ–≤–∫–∏ –∞–≤—Ç–æ–∏–≥—Ä—ã - –ò–°–ü–†–ê–í–õ–ï–ù–ù–´–ô
  const handleStopAutoplay = () => {
    gameActionFeedback(); // –í–∏–±—Ä–∞—Ü–∏—è –ø—Ä–∏ –æ—Å—Ç–∞–Ω–æ–≤–∫–µ
    // –ò—Å–ø–æ–ª—å–∑—É–µ–º —Ñ—É–Ω–∫—Ü–∏—é –∏–∑ —Ä–æ–¥–∏—Ç–µ–ª—å—Å–∫–æ–≥–æ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–∞
    if (onStopAutoplay) {
      onStopAutoplay();
    } else if (setAutoplay) {
      // Fallback –∫ —Å—Ç–∞—Ä–æ–º—É –º–µ—Ç–æ–¥—É
      setAutoplay(false);
    }
  };
  // –û–ë–ù–û–í–õ–ï–ù–ù–´–ï –ö–û–≠–§–§–ò–¶–ò–ï–ù–¢–´ (–¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ —É—Ä–µ–∑–∞–Ω—ã –Ω–∞ 20% –∫—Ä–æ–º–µ jackpot)
  const slotSymbols = [
    { symbol: 'cherry', payout: 1.6, threeInRow: 0.8, emoji: 'üçí' },        // –±—ã–ª–æ 2‚Üí1.6, –±—ã–ª–æ 1‚Üí0.8
    { symbol: 'lemon', payout: 2.4, threeInRow: 1.2, emoji: 'üçã' },        // –±—ã–ª–æ 3‚Üí2.4, –±—ã–ª–æ 1.5‚Üí1.2
    { symbol: 'persik', payout: 3.2, threeInRow: 1.6, emoji: 'üçë' },       // –±—ã–ª–æ 4‚Üí3.2, –±—ã–ª–æ 2‚Üí1.6
    { symbol: 'grape', payout: 4.8, threeInRow: 2.4, emoji: 'üçá' },        // –±—ã–ª–æ 6‚Üí4.8, –±—ã–ª–æ 3‚Üí2.4
    { symbol: 'bell', payout: 7.2, threeInRow: 3.6, emoji: 'üîî' },         // –±—ã–ª–æ 9‚Üí7.2, –±—ã–ª–æ 4.5‚Üí3.6
    { symbol: 'diamond', payout: 12, threeInRow: 6, emoji: 'üíé' },         // –±—ã–ª–æ 15‚Üí12, –±—ã–ª–æ 7.5‚Üí6
    { symbol: 'star', payout: 20, threeInRow: 10, emoji: '‚≠ê' },           // –±—ã–ª–æ 25‚Üí20, –±—ã–ª–æ 12.5‚Üí10
    { symbol: 'jackpot', payout: 50, threeInRow: 20, emoji: 'üé∞' }         // 50 –æ—Å—Ç–∞–µ—Ç—Å—è, 25‚Üí20 (-20%)
  ];
  return (
    <div className="slot-controls">
      {/* –ö–Ω–æ–ø–∫–∞ —Å–ø–∏–Ω–∞ */}
      <div className="spin-section">
        <button 
          className={`spin-button ${isSpinning ? 'spinning' : ''} ${autoplay ? 'autoplay-active' : ''}`}
          onClick={handleSpinClick}
          disabled={isSpinning || loading || !betAmount || betAmount <= 0 || betAmount > balance || autoplay}
        >
          {isSpinning ? (
            <span className="spin-text spinning-text">
              <span className="spinner">üé∞</span> –ö—Ä—É—Ç–∏–º...
            </span>
          ) : autoplay ? (
            <span className="spin-text">
              ü§ñ –ê–í–¢–û–ò–ì–†–ê –ê–ö–¢–ò–í–ù–ê ({autoplayRemaining} –æ—Å—Ç–∞–ª–æ—Å—å)
            </span>
          ) : (
            <span className="spin-text">
              üé∞ –ö–†–£–¢–ò–¢–¨ ({betAmount} USDT)
            </span>
          )}
        </button>
      </div>
      {/* –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Å—Ç–∞–≤–∫–æ–π */}
      <div className="bet-section">
        <div className="bet-control">
          <label>–°—Ç–∞–≤–∫–∞ (USDT):</label>
          <div className="bet-input-container">
            <input
              type="number"
              min="0.1"
              max={balance}
              step="0.1"
              value={betAmount}
              onChange={handleBetAmountChange}
              disabled={isSpinning || loading || autoplay}
            />
          </div>
        </div>
        {/* –ë—ã—Å—Ç—Ä—ã–µ —Å—Ç–∞–≤–∫–∏ */}
        <div className="quick-bets">
          <button 
            onClick={() => handleQuickBet(0.01)} 
            disabled={isSpinning || loading || autoplay}
            className="quick-bet-btn large"
          >
            1% ({(balance * 0.01).toFixed(2)} USDT)
          </button>
          <button 
            onClick={() => handleQuickBet(0.05)} 
            disabled={isSpinning || loading || autoplay}
            className="quick-bet-btn large"
          >
            5% ({(balance * 0.05).toFixed(2)} USDT)
          </button>
        </div>
      </div>
      {/* –ê–≤—Ç–æ–∏–≥—Ä–∞ */}
      <div className="autoplay-section">
        <div className="autoplay-toggle">
          <label className="toggle-switch">
            <input
              type="checkbox"
              checked={autoplay}
              onChange={handleAutoplayToggle}
              disabled={isSpinning || loading}
            />
            <span className="toggle-slider"></span>
            <span className="toggle-text">–ê–≤—Ç–æ–∏–≥—Ä–∞</span>
          </label>
          {autoplay && (
            <button 
              className="stop-autoplay-btn"
              onClick={handleStopAutoplay}
              disabled={loading}
            >
              –û—Å—Ç–∞–Ω–æ–≤–∏—Ç—å
            </button>
          )}
        </div>
        {!autoplay && (
          <div className="autoplay-settings">
            <div className="autoplay-count">
              <label>–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–ø–∏–Ω–æ–≤:</label>
              <div className="count-buttons">
                {[10, 25, 50, 100].map(count => (
                  <button
                    key={count}
                    className={`count-btn ${autoplayCount === count ? 'active' : ''}`}
                    onClick={() => handleAutoplayCountChange(count)}
                    disabled={isSpinning || loading}
                  >
                    {count}
                  </button>
                ))}
              </div>
            </div>
            <div className="autoplay-info">
              <small>
                –ê–≤—Ç–æ–∏–≥—Ä–∞ –æ—Å—Ç–∞–Ω–æ–≤–∏—Ç—Å—è –ø—Ä–∏ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–∏ –ª–∏–º–∏—Ç–∞ —Å–ø–∏–Ω–æ–≤, –Ω–µ–¥–æ—Å—Ç–∞—Ç–∫–µ —Å—Ä–µ–¥—Å—Ç–≤ –∏–ª–∏ –±–æ–ª—å—à–æ–º –≤—ã–∏–≥—Ä—ã—à–µ
              </small>
            </div>
          </div>
        )}
        {autoplay && autoplayRemaining > 0 && (
          <div className="autoplay-status">
            <span>–û—Å—Ç–∞–ª–æ—Å—å —Å–ø–∏–Ω–æ–≤: {autoplayRemaining}</span>
          </div>
        )}
      </div>
      {/* –¢–∞–±–ª–∏—Ü–∞ –≤—ã–ø–ª–∞—Ç —Å –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–º–∏ –∫–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç–∞–º–∏ */}
      <div className="payout-table">
        <h4>–¢–∞–±–ª–∏—Ü–∞ –≤—ã–ø–ª–∞—Ç</h4>
        <div className="payout-rules">
          <div className="payout-rule">
            <span className="rule-text">3 –≤ —Ä—è–¥ (–≥–æ—Ä–∏–∑–æ–Ω—Ç–∞–ª—å/–¥–∏–∞–≥–æ–Ω–∞–ª—å)</span>
            <span className="rule-multiplier">√ó(–ø–æ–ª–æ–≤–∏–Ω–∞ –∫–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç–∞)</span>
          </div>
          <div className="payout-rule">
            <span className="rule-text">4 –≤ —Ä—è–¥ (–≥–æ—Ä–∏–∑–æ–Ω—Ç–∞–ª—å/–¥–∏–∞–≥–æ–Ω–∞–ª—å)</span>
            <span className="rule-multiplier">√ó(–ø–æ–ª–Ω—ã–π –∫–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç)</span>
          </div>
        </div>
        <div className="payout-grid">
          {slotSymbols.map((symbolData, index) => (
            <div key={index} className="payout-item">
              <span className="payout-symbol">{symbolData.emoji}</span>
              <span className="payout-multiplier">4√ó{symbolData.payout} | 3√ó{symbolData.threeInRow}</span>
            </div>
          ))}
        </div>
        <div className="payout-note">
          * –í—ã–∏–≥—Ä—ã—à–Ω—ã–µ –ª–∏–Ω–∏–∏: –≥–æ—Ä–∏–∑–æ–Ω—Ç–∞–ª—å–Ω—ã–µ (—Å—Ç—Ä–æ–∫–∏) –∏ –¥–∏–∞–≥–æ–Ω–∞–ª—å–Ω—ã–µ
          <br />
          * –ü–µ—Ä–≤–æ–µ —á–∏—Å–ª–æ - –≤—ã–∏–≥—Ä—ã—à –∑–∞ 4 –≤ —Ä—è–¥, –≤—Ç–æ—Ä–æ–µ - –∑–∞ 3 –≤ —Ä—è–¥
          <br />
          * –ö–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç—ã –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ —Å–Ω–∏–∂–µ–Ω—ã –Ω–∞ 20% –¥–ª—è –ª—É—á—à–µ–≥–æ –±–∞–ª–∞–Ω—Å–∞ (–∫—Ä–æ–º–µ –¥–∂–µ–∫–ø–æ—Ç–∞ 50x)
        </div>
      </div>
      {/* –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ */}
      {gameStats && (
        <div className="game-stats">
          <h4>–í–∞—à–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞</h4>
          <div className="stats-container">
            <div className="stat-item">
              <span className="stat-label">–í—Å–µ–≥–æ –∏–≥—Ä:</span>
              <span className="stat-value">{gameStats.totalGames}</span>
            </div>
            <div className="stat-item">
              <span className="stat-label">–ü–æ–±–µ–¥—ã:</span>
              <span className="stat-value">{gameStats.winCount} ({(gameStats.winRate * 100).toFixed(1)}%)</span>
            </div>
            <div className="stat-item">
              <span className="stat-label">–°—Ç–∞–≤–∫–∏:</span>
              <span className="stat-value">{gameStats.totalBet?.toFixed(2) || 0} USDT</span>
            </div>
            <div className="stat-item">
              <span className="stat-label">–í—ã–∏–≥—Ä—ã—à–∏:</span>
              <span className="stat-value">{gameStats.totalWin?.toFixed(2) || 0} USDT</span>
            </div>
            <div className="stat-item">
              <span className="stat-label">–ü—Ä–æ—Ñ–∏—Ç:</span>
              <span className={`stat-value ${(gameStats.totalWin - gameStats.totalLoss) >= 0 ? 'positive' : 'negative'}`}>
                {((gameStats.totalWin || 0) - (gameStats.totalLoss || 0)).toFixed(2)} USDT
              </span>
            </div>
          </div>
        </div>
      )}
    </div>
  );
};
export default SlotControls;