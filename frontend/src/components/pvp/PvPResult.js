// frontend/src/components/pvp/PvPResult.js
import React, { useState, useEffect } from 'react';
import { useWebApp } from '../../hooks';
import '../../styles/PvPResult.css';

const PvPResult = ({ gameResult, sessionData, onRematch, onClose }) => {
  const [showConfetti, setShowConfetti] = useState(false);
  const [animationPhase, setAnimationPhase] = useState('coin-flip'); // coin-flip, result, celebration
  const webApp = useWebApp();

  const isWinner = gameResult.winnerId === sessionData?.challengerId || 
                   gameResult.winnerId === sessionData?.opponentId;
  const isCurrentUserWinner = sessionData?.isPlayer && 
    ((sessionData.isChallenger && gameResult.winnerId === sessionData.challengerId) ||
     (!sessionData.isChallenger && gameResult.winnerId === sessionData.opponentId));

  // –ê–Ω–∏–º–∞—Ü–∏—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞
  useEffect(() => {
    const sequence = async () => {
      // –§–∞–∑–∞ 1: –ü–æ–¥–±—Ä–∞—Å—ã–≤–∞–Ω–∏–µ –º–æ–Ω–µ—Ç—ã (2 —Å–µ–∫—É–Ω–¥—ã)
      setAnimationPhase('coin-flip');
      
      setTimeout(() => {
        // –§–∞–∑–∞ 2: –ü–æ–∫–∞–∑ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞ (1 —Å–µ–∫—É–Ω–¥–∞)
        setAnimationPhase('result');
        
        setTimeout(() => {
          // –§–∞–∑–∞ 3: –ü—Ä–∞–∑–¥–Ω–æ–≤–∞–Ω–∏–µ –∏–ª–∏ –≥—Ä—É—Å—Ç—å (3 —Å–µ–∫—É–Ω–¥—ã)
          setAnimationPhase('celebration');
          
          if (isCurrentUserWinner) {
            setShowConfetti(true);
            webApp?.showAlert('üéâ –ü–æ–∑–¥—Ä–∞–≤–ª—è–µ–º —Å –ø–æ–±–µ–¥–æ–π!');
            
            // –í–∏–±—Ä–∞—Ü–∏—è –ø–æ–±–µ–¥—ã
            if (webApp?.HapticFeedback) {
              webApp.HapticFeedback.notificationOccurred('success');
            }
          } else {
            // –í–∏–±—Ä–∞—Ü–∏—è –ø–æ—Ä–∞–∂–µ–Ω–∏—è
            if (webApp?.HapticFeedback) {
              webApp.HapticFeedback.notificationOccurred('error');
            }
          }
        }, 1000);
      }, 2000);
    };

    sequence();
  }, [isCurrentUserWinner, webApp]);

  const handleRematch = () => {
    if (onRematch) {
      onRematch();
    }
  };

  const handleClose = () => {
    if (onClose) {
      onClose();
    }
  };

  const getCoinEmoji = () => {
    return gameResult.result === 'heads' ? 'ü™ô' : 'ü•à';
  };

  const getResultText = () => {
    return gameResult.result === 'heads' ? '–û–†–ï–õ' : '–†–ï–®–ö–ê';
  };

  return (
    <div className={`pvp-result ${animationPhase}`}>
      {showConfetti && (
        <div className="confetti-container">
          {[...Array(50)].map((_, i) => (
            <div
              key={i}
              className="confetti-piece"
              style={{
                left: `${Math.random() * 100}%`,
                animationDelay: `${Math.random() * 3}s`,
                backgroundColor: ['#FFD700', '#FF6B6B', '#4ECDC4', '#45B7D1', '#96CEB4'][Math.floor(Math.random() * 5)]
              }}
            />
          ))}
        </div>
      )}

      <div className="result-container">
        {/* –ó–∞–≥–æ–ª–æ–≤–æ–∫ */}
        <div className="result-header">
          <h1 className={`result-title ${isCurrentUserWinner ? 'winner' : 'loser'}`}>
            {isCurrentUserWinner ? 'üèÜ –ü–û–ë–ï–î–ê!' : 'üíî –ü–û–†–ê–ñ–ï–ù–ò–ï'}
          </h1>
          {sessionData && (
            <p className="session-info">–°–µ—Å—Å–∏—è: {sessionData.sessionId}</p>
          )}
        </div>

        {/* –ê–Ω–∏–º–∞—Ü–∏—è –º–æ–Ω–µ—Ç—ã */}
        <div className="coin-section">
          <div className={`coin-container ${animationPhase}`}>
            <div className="coin">
              {animationPhase === 'coin-flip' ? (
                <div className="coin-spinning">ü™ô</div>
              ) : (
                <div className="coin-result">
                  {getCoinEmoji()}
                </div>
              )}
            </div>
          </div>
          
          {animationPhase !== 'coin-flip' && (
            <div className="coin-result-text">
              <h2>{getResultText()}</h2>
            </div>
          )}
        </div>

        {/* –î–µ—Ç–∞–ª–∏ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞ */}
        {animationPhase === 'celebration' && (
          <>
            <div className="game-details">
              <div className="detail-item">
                <span className="label">üèÜ –ü–æ–±–µ–¥–∏—Ç–µ–ª—å:</span>
                <span className={`value ${isCurrentUserWinner ? 'highlight' : ''}`}>
                  @{gameResult.winnerUsername}
                </span>
              </div>
              
              <div className="detail-item">
                <span className="label">üí∞ –í—ã–∏–≥—Ä—ã—à:</span>
                <span className="value prize">
                  {gameResult.winAmount} USDT
                </span>
              </div>
              
              <div className="detail-item">
                <span className="label">üé≤ –†–µ–∑—É–ª—å—Ç–∞—Ç:</span>
                <span className="value">
                  {getResultText()} ({getCoinEmoji()})
                </span>
              </div>

              <div className="detail-item">
                <span className="label">üí∏ –ö–æ–º–∏—Å—Å–∏—è:</span>
                <span className="value">
                  {gameResult.commission} USDT (5%)
                </span>
              </div>
            </div>

            {/* –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∏–≥—Ä–æ–∫–æ–≤ */}
            <div className="players-result">
              <div className={`player-result ${sessionData?.isChallenger && isCurrentUserWinner ? 'winner' : 
                sessionData?.isChallenger && !isCurrentUserWinner ? 'loser' : ''}`}>
                <div className="player-info">
                  <span className="player-name">@{sessionData?.challengerUsername}</span>
                  <span className="player-side">–û–†–ï–õ ü™ô</span>
                </div>
                <div className="player-outcome">
                  {gameResult.winnerId === sessionData?.challengerId ? (
                    <span className="win">+{gameResult.winAmount} USDT</span>
                  ) : (
                    <span className="loss">-{sessionData?.amount} USDT</span>
                  )}
                </div>
              </div>

              <div className="vs-divider">VS</div>

              <div className={`player-result ${!sessionData?.isChallenger && isCurrentUserWinner ? 'winner' : 
                !sessionData?.isChallenger && !isCurrentUserWinner ? 'loser' : ''}`}>
                <div className="player-info">
                  <span className="player-name">@{sessionData?.opponentUsername}</span>
                  <span className="player-side">–†–ï–®–ö–ê ü•à</span>
                </div>
                <div className="player-outcome">
                  {gameResult.winnerId === sessionData?.opponentId ? (
                    <span className="win">+{gameResult.winAmount} USDT</span>
                  ) : (
                    <span className="loss">-{sessionData?.amount} USDT</span>
                  )}
                </div>
              </div>
            </div>

            {/* –ö–Ω–æ–ø–∫–∏ –¥–µ–π—Å—Ç–≤–∏–π */}
            <div className="action-buttons">
              <button 
                className="rematch-button"
                onClick={handleRematch}
              >
                üîÑ –†–µ–≤–∞–Ω—à
              </button>
              
              <button 
                className="close-button"
                onClick={handleClose}
              >
                ‚úÖ –ó–∞–≤–µ—Ä—à–∏—Ç—å
              </button>
            </div>

            {/* –°–æ–æ–±—â–µ–Ω–∏–µ */}
            <div className="result-message">
              {isCurrentUserWinner ? (
                <div className="winner-message">
                  <p>üéâ <strong>–ü–æ–∑–¥—Ä–∞–≤–ª—è–µ–º —Å –ø–æ–±–µ–¥–æ–π!</strong></p>
                  <p>–°—Ä–µ–¥—Å—Ç–≤–∞ –∑–∞—á–∏—Å–ª–µ–Ω—ã –Ω–∞ –≤–∞—à –±–∞–ª–∞–Ω—Å</p>
                </div>
              ) : (
                <div className="loser-message">
                  <p>üòî <strong>–í —ç—Ç–æ—Ç —Ä–∞–∑ –Ω–µ –ø–æ–≤–µ–∑–ª–æ</strong></p>
                  <p>–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑ - —É–¥–∞—á–∞ –º–æ–∂–µ—Ç –ø–æ–≤–µ—Ä–Ω—É—Ç—å—Å—è!</p>
                </div>
              )}
            </div>
          </>
        )}

        {/* –ò–Ω–¥–∏–∫–∞—Ç–æ—Ä –∑–∞–≥—Ä—É–∑–∫–∏ –¥–ª—è –∞–Ω–∏–º–∞—Ü–∏–∏ */}
        {animationPhase === 'coin-flip' && (
          <div className="loading-message">
            <p>üé≤ –ü–æ–¥–±—Ä–∞—Å—ã–≤–∞–µ–º –º–æ–Ω–µ—Ç—É...</p>
            <div className="loading-dots">
              <span>.</span>
              <span>.</span>
              <span>.</span>
            </div>
          </div>
        )}

        {animationPhase === 'result' && (
          <div className="result-announcement">
            <p>üéØ –†–µ–∑—É–ª—å—Ç–∞—Ç –æ–ø—Ä–µ–¥–µ–ª–µ–Ω!</p>
          </div>
        )}
      </div>
    </div>
  );
};

export default PvPResult;