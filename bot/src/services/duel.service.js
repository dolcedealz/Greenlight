// bot/src/services/duel.service.js
const crypto = require('crypto');

/**
 * –ë–µ–∑–æ–ø–∞—Å–Ω—ã–π —Å–µ—Ä–≤–∏—Å –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –¥—É—ç–ª—è–º–∏
 */
class DuelService {
  constructor() {
    // –•—Ä–∞–Ω–∏–º –∞–∫—Ç–∏–≤–Ω—ã–µ –¥—É—ç–ª–∏ –≤ –ø–∞–º—è—Ç–∏ (–≤ –ø—Ä–æ–¥–∞–∫—à–µ–Ω–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å Redis)
    this.activeDuels = new Map();
    this.userDuels = new Map(); // –ë—ã—Å—Ç—Ä—ã–π –ø–æ–∏—Å–∫ –¥—É—ç–ª–µ–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    
    // –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏
    this.MAX_ACTIVE_DUELS_PER_USER = 3;
    this.DUEL_TIMEOUT = 5 * 60 * 1000; // 5 –º–∏–Ω—É—Ç
    this.SUPPORTED_GAMES = ['üé≤', 'üéØ', '‚öΩ', 'üèÄ', 'üé∞', 'üé≥'];
    this.SUPPORTED_FORMATS = ['bo1', 'bo3', 'bo5', 'bo7', 'bo9'];
    
    console.log('üéÆ DuelService –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω');
  }

  /**
   * –ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –±–µ–∑–æ–ø–∞—Å–Ω—ã–π ID –¥–ª—è –¥—É—ç–ª–∏
   */
  generateDuelId() {
    return `duel_${crypto.randomBytes(8).toString('hex')}`;
  }

  /**
   * –í–∞–ª–∏–¥–∏—Ä—É–µ—Ç –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –¥—É—ç–ª–∏
   */
  validateDuelParams(challengerId, opponentUsername, amount, gameType, format) {
    const errors = [];

    // –ü—Ä–æ–≤–µ—Ä–∫–∞ ID –∏–Ω–∏—Ü–∏–∞—Ç–æ—Ä–∞
    if (!challengerId || typeof challengerId !== 'string') {
      errors.push('–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π ID –∏–Ω–∏—Ü–∏–∞—Ç–æ—Ä–∞');
    }

    // –ü—Ä–æ–≤–µ—Ä–∫–∞ username –æ–ø–ø–æ–Ω–µ–Ω—Ç–∞
    if (!opponentUsername || typeof opponentUsername !== 'string' || opponentUsername.length < 2) {
      errors.push('–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π username –æ–ø–ø–æ–Ω–µ–Ω—Ç–∞');
    }

    // –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—É–º–º—ã
    if (!amount || isNaN(amount) || amount < 1 || amount > 1000) {
      errors.push('–°—É–º–º–∞ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –æ—Ç 1 –¥–æ 1000 USDT');
    }

    // –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ç–∏–ø–∞ –∏–≥—Ä—ã
    if (!this.SUPPORTED_GAMES.includes(gameType)) {
      errors.push('–ù–µ–ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–π —Ç–∏–ø –∏–≥—Ä—ã');
    }

    // –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ñ–æ—Ä–º–∞—Ç–∞
    if (!this.SUPPORTED_FORMATS.includes(format)) {
      errors.push('–ù–µ–ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–π —Ñ–æ—Ä–º–∞—Ç –∏–≥—Ä—ã');
    }

    return errors;
  }

  /**
   * –ü—Ä–æ–≤–µ—Ä—è–µ—Ç, –º–æ–∂–µ—Ç –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å–æ–∑–¥–∞—Ç—å –Ω–æ–≤—É—é –¥—É—ç–ª—å
   */
  canUserCreateDuel(userId) {
    const userDuels = this.userDuels.get(userId) || [];
    const activeDuels = userDuels.filter(duelId => {
      const duel = this.activeDuels.get(duelId);
      return duel && (duel.status === 'waiting' || duel.status === 'active');
    });

    return activeDuels.length < this.MAX_ACTIVE_DUELS_PER_USER;
  }

  /**
   * –°–æ–∑–¥–∞–µ—Ç –Ω–æ–≤—É—é –¥—É—ç–ª—å (—Ç–æ–ª—å–∫–æ —Å—Ç—Ä—É–∫—Ç—É—Ä—É –¥–∞–Ω–Ω—ã—Ö)
   */
  createDuel(challengerId, challengerUsername, opponentUsername, amount, gameType, format, type = 'private') {
    try {
      // –í–∞–ª–∏–¥–∞—Ü–∏—è
      const errors = this.validateDuelParams(challengerId, opponentUsername, amount, gameType, format);
      if (errors.length > 0) {
        throw new Error(`–û—à–∏–±–∫–∏ –≤–∞–ª–∏–¥–∞—Ü–∏–∏: ${errors.join(', ')}`);
      }

      // –ü—Ä–æ–≤–µ—Ä–∫–∞ –ª–∏–º–∏—Ç–æ–≤
      if (!this.canUserCreateDuel(challengerId)) {
        throw new Error('–ü—Ä–µ–≤—ã—à–µ–Ω –ª–∏–º–∏—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –¥—É—ç–ª–µ–π');
      }

      // –û–ø—Ä–µ–¥–µ–ª—è–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ä–∞—É–Ω–¥–æ–≤
      const maxRounds = this.getWinsRequired(format);
      
      // –°–æ–∑–¥–∞–µ–º –¥—É—ç–ª—å
      const duelId = this.generateDuelId();
      const duel = {
        id: duelId,
        type: type, // 'private' –∏–ª–∏ 'group'
        
        players: {
          challenger: {
            id: challengerId,
            username: challengerUsername,
            ready: false,
            moves: [],
            score: 0
          },
          opponent: {
            id: null, // –ó–∞–ø–æ–ª–Ω–∏—Ç—Å—è –ø—Ä–∏ –ø—Ä–∏–Ω—è—Ç–∏–∏
            username: opponentUsername,
            ready: false,
            moves: [],
            score: 0
          }
        },
        
        game: {
          type: gameType,
          format: format,
          currentRound: 0,
          maxRounds: maxRounds,
          status: 'waiting' // waiting, active, finished
        },
        
        messages: {
          challenger: null,
          opponent: null,
          group: null
        },
        
        settings: {
          amount: amount,
          createdAt: Date.now(),
          expiresAt: Date.now() + this.DUEL_TIMEOUT
        },
        
        status: 'waiting'
      };

      // –°–æ—Ö—Ä–∞–Ω—è–µ–º –¥—É—ç–ª—å
      this.activeDuels.set(duelId, duel);
      
      // –ò–Ω–¥–µ–∫—Å–∏—Ä—É–µ–º –ø–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
      const userDuels = this.userDuels.get(challengerId) || [];
      userDuels.push(duelId);
      this.userDuels.set(challengerId, userDuels);

      console.log(`‚úÖ –î—É—ç–ª—å —Å–æ–∑–¥–∞–Ω–∞: ${duelId}`, {
        challenger: challengerUsername,
        opponent: opponentUsername,
        amount: amount,
        type: type
      });

      return duel;
      
    } catch (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –¥—É—ç–ª–∏:', error.message);
      throw error;
    }
  }

  /**
   * –ü–æ–ª—É—á–∞–µ—Ç –¥—É—ç–ª—å –ø–æ ID
   */
  getDuel(duelId) {
    return this.activeDuels.get(duelId);
  }

  /**
   * –ü—Ä–∏–Ω–∏–º–∞–µ—Ç –¥—É—ç–ª—å
   */
  acceptDuel(duelId, opponentId, opponentUsername) {
    const duel = this.getDuel(duelId);
    
    if (!duel) {
      throw new Error('–î—É—ç–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω–∞');
    }

    if (duel.status !== 'waiting') {
      throw new Error('–î—É—ç–ª—å —É–∂–µ –Ω–µ –æ–∂–∏–¥–∞–µ—Ç –ø—Ä–∏–Ω—è—Ç–∏—è');
    }

    if (duel.players.challenger.id === opponentId) {
      throw new Error('–ù–µ–ª—å–∑—è –ø—Ä–∏–Ω—è—Ç—å —Å–æ–±—Å—Ç–≤–µ–Ω–Ω—É—é –¥—É—ç–ª—å');
    }

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –ª–∏–º–∏—Ç—ã –æ–ø–ø–æ–Ω–µ–Ω—Ç–∞
    if (!this.canUserCreateDuel(opponentId)) {
      throw new Error('–£ –æ–ø–ø–æ–Ω–µ–Ω—Ç–∞ –ø—Ä–µ–≤—ã—à–µ–Ω –ª–∏–º–∏—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –¥—É—ç–ª–µ–π');
    }

    // –ó–∞–ø–æ–ª–Ω—è–µ–º –¥–∞–Ω–Ω—ã–µ –æ–ø–ø–æ–Ω–µ–Ω—Ç–∞
    duel.players.opponent.id = opponentId;
    duel.players.opponent.username = opponentUsername;
    duel.status = 'active';
    duel.game.status = 'active';

    // –ò–Ω–¥–µ–∫—Å–∏—Ä—É–µ–º –ø–æ –æ–ø–ø–æ–Ω–µ–Ω—Ç—É
    const opponentDuels = this.userDuels.get(opponentId) || [];
    opponentDuels.push(duelId);
    this.userDuels.set(opponentId, opponentDuels);

    console.log(`‚úÖ –î—É—ç–ª—å –ø—Ä–∏–Ω—è—Ç–∞: ${duelId}`, {
      challenger: duel.players.challenger.username,
      opponent: opponentUsername
    });

    return duel;
  }

  /**
   * –û—Ç–∫–ª–æ–Ω—è–µ—Ç –¥—É—ç–ª—å
   */
  declineDuel(duelId, userId) {
    const duel = this.getDuel(duelId);
    
    if (!duel) {
      throw new Error('–î—É—ç–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω–∞');
    }

    if (duel.status !== 'waiting') {
      throw new Error('–î—É—ç–ª—å —É–∂–µ –Ω–µ –æ–∂–∏–¥–∞–µ—Ç –æ—Ç–≤–µ—Ç–∞');
    }

    // –£–¥–∞–ª—è–µ–º –¥—É—ç–ª—å
    this.removeDuel(duelId);

    console.log(`‚ùå –î—É—ç–ª—å –æ—Ç–∫–ª–æ–Ω–µ–Ω–∞: ${duelId}`);
    return true;
  }

  /**
   * –£–¥–∞–ª—è–µ—Ç –¥—É—ç–ª—å –∏–∑ –≤—Å–µ—Ö –∏–Ω–¥–µ–∫—Å–æ–≤
   */
  removeDuel(duelId) {
    const duel = this.getDuel(duelId);
    
    if (duel) {
      // –£–¥–∞–ª—è–µ–º –∏–∑ –∏–Ω–¥–µ–∫—Å–æ–≤ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
      [duel.players.challenger.id, duel.players.opponent.id].forEach(userId => {
        if (userId) {
          const userDuels = this.userDuels.get(userId) || [];
          const filteredDuels = userDuels.filter(id => id !== duelId);
          if (filteredDuels.length > 0) {
            this.userDuels.set(userId, filteredDuels);
          } else {
            this.userDuels.delete(userId);
          }
        }
      });
    }

    // –£–¥–∞–ª—è–µ–º —Å–∞–º—É –¥—É—ç–ª—å
    this.activeDuels.delete(duelId);
  }

  /**
   * –ü–æ–ª—É—á–∞–µ—Ç –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–±–µ–¥ –¥–ª—è —Ñ–æ—Ä–º–∞—Ç–∞
   */
  getWinsRequired(format) {
    const formatMap = {
      'bo1': 1,
      'bo3': 2,
      'bo5': 3,
      'bo7': 4,
      'bo9': 5
    };
    return formatMap[format] || 1;
  }

  /**
   * –ü–æ–ª—É—á–∞–µ—Ç –Ω–∞–∑–≤–∞–Ω–∏–µ –∏–≥—Ä—ã
   */
  getGameName(gameType) {
    const gameNames = {
      'üé≤': '–ö–æ—Å—Ç–∏',
      'üéØ': '–î–∞—Ä—Ç—Å',
      '‚öΩ': '–§—É—Ç–±–æ–ª',
      'üèÄ': '–ë–∞—Å–∫–µ—Ç–±–æ–ª',
      'üé∞': '–°–ª–æ—Ç—ã',
      'üé≥': '–ë–æ—É–ª–∏–Ω–≥'
    };
    return gameNames[gameType] || '–ò–≥—Ä–∞';
  }

  /**
   * –û—á–∏—Å—Ç–∫–∞ –ø—Ä–æ—Å—Ä–æ—á–µ–Ω–Ω—ã—Ö –¥—É—ç–ª–µ–π
   */
  cleanupExpiredDuels() {
    const now = Date.now();
    let cleanedCount = 0;

    for (const [duelId, duel] of this.activeDuels.entries()) {
      if (duel.settings.expiresAt < now && duel.status === 'waiting') {
        this.removeDuel(duelId);
        cleanedCount++;
      }
    }

    if (cleanedCount > 0) {
      console.log(`üßπ –û—á–∏—â–µ–Ω–æ –ø—Ä–æ—Å—Ä–æ—á–µ–Ω–Ω—ã—Ö –¥—É—ç–ª–µ–π: ${cleanedCount}`);
    }
  }

  /**
   * –ü–æ–ª—É—á–∞–µ—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É —Å–µ—Ä–≤–∏—Å–∞
   */
  getStats() {
    const totalDuels = this.activeDuels.size;
    const waitingDuels = Array.from(this.activeDuels.values()).filter(d => d.status === 'waiting').length;
    const activeDuels = Array.from(this.activeDuels.values()).filter(d => d.status === 'active').length;
    
    return {
      total: totalDuels,
      waiting: waitingDuels,
      active: activeDuels,
      users: this.userDuels.size
    };
  }
}

// –°–æ–∑–¥–∞–µ–º singleton instance
const duelService = new DuelService();

// –ê–≤—Ç–æ–æ—á–∏—Å—Ç–∫–∞ –∫–∞–∂–¥—ã–µ 2 –º–∏–Ω—É—Ç—ã
setInterval(() => {
  duelService.cleanupExpiredDuels();
}, 2 * 60 * 1000);

module.exports = duelService;