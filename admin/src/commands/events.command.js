// admin/src/commands/events.command.js
const { Markup } = require('telegraf');
const axios = require('axios');

// API URL –∏ —Ç–æ–∫–µ–Ω
const apiUrl = process.env.API_URL || 'https://api.greenlight-casino.eu/api';
const adminToken = process.env.ADMIN_API_TOKEN;

// –õ–æ–≥–∏—Ä—É–µ–º URL –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏
console.log('EVENTS COMMAND: API URL:', apiUrl);

// –°–æ–∑–¥–∞–µ–º axios instance
const apiClient = axios.create({
  baseURL: apiUrl,
  headers: {
    'Authorization': `Bearer ${adminToken}`,
    'Content-Type': 'application/json'
  },
  timeout: 30000
});

// –î–æ–±–∞–≤–ª—è–µ–º interceptor –¥–ª—è –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
apiClient.interceptors.request.use(request => {
  console.log(`üì§ EVENTS API Request: ${request.method.toUpperCase()} ${request.url}`);
  return request;
}, error => {
  console.error('‚ùå Events Request Error:', error);
  return Promise.reject(error);
});

apiClient.interceptors.response.use(response => {
  console.log(`‚úÖ EVENTS API Response: ${response.status} ${response.config.url}`);
  return response;
}, error => {
  console.error(`‚ùå EVENTS API Error: ${error.response?.status} ${error.config?.url}`);
  console.error('   Error Data:', error.response?.data);
  return Promise.reject(error);
});

/**
 * –ö–æ–º–∞–Ω–¥—ã –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Å–æ–±—ã—Ç–∏—è–º–∏
 */
const eventsCommands = {
  /**
   * –ü–æ–∫–∞–∑–∞—Ç—å –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é —Å–æ–±—ã—Ç–∏–π
   */
  async showEventsMenu(ctx) {
    console.log('ADMIN: –ü–æ–∫–∞–∑ –º–µ–Ω—é —Å–æ–±—ã—Ç–∏–π');
    
    const message = 'üîÆ *–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Å–æ–±—ã—Ç–∏—è–º–∏*\n\n–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:';
    const keyboard = Markup.inlineKeyboard([
      [Markup.button.callback('üìã –°–ø–∏—Å–æ–∫ —Å–æ–±—ã—Ç–∏–π', 'events_list')],
      [Markup.button.callback('‚ûï –°–æ–∑–¥–∞—Ç—å —Å–æ–±—ã—Ç–∏–µ', 'events_create')],
      [Markup.button.callback('‚úÖ –ó–∞–≤–µ—Ä—à–∏—Ç—å —Å–æ–±—ã—Ç–∏–µ', 'events_finish')],
      [Markup.button.callback('‚≠ê –ì–ª–∞–≤–Ω–æ–µ —Å–æ–±—ã—Ç–∏–µ', 'events_featured')],
      [Markup.button.callback('üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Å–æ–±—ã—Ç–∏–π', 'events_stats')],
      [Markup.button.callback('üîô –ù–∞–∑–∞–¥', 'main_menu')]
    ]);

    try {
      if (ctx.callbackQuery) {
        await ctx.editMessageText(message, {
          parse_mode: 'Markdown',
          ...keyboard
        });
      } else {
        await ctx.reply(message, {
          parse_mode: 'Markdown',
          ...keyboard
        });
      }
    } catch (error) {
      console.error('ADMIN: –û—à–∏–±–∫–∞ –ø–æ–∫–∞–∑–∞ –º–µ–Ω—é —Å–æ–±—ã—Ç–∏–π:', error);
      await ctx.reply(message, {
        parse_mode: 'Markdown',
        ...keyboard
      });
    }
  },

  /**
   * –ü–æ–∫–∞–∑–∞—Ç—å —Å–ø–∏—Å–æ–∫ —Å–æ–±—ã—Ç–∏–π
   */
  async showEventsList(ctx) {
    try {
      const response = await apiClient.get('/events/admin/all');
      
      if (!response.data.success) {
        return ctx.answerCbQuery('‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å–æ–±—ã—Ç–∏–π');
      }
      
      const events = response.data.data.events;
      
      if (events.length === 0) {
        return ctx.editMessageText(
          'üìã *–°–ø–∏—Å–æ–∫ —Å–æ–±—ã—Ç–∏–π*\n\n' +
          '–°–æ–±—ã—Ç–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω—ã.',
          {
            parse_mode: 'Markdown',
            ...Markup.inlineKeyboard([[
              Markup.button.callback('‚óÄÔ∏è –ù–∞–∑–∞–¥', 'events_menu')
            ]])
          }
        );
      }
      
      let message = 'üìã *–°–ø–∏—Å–æ–∫ —Å–æ–±—ã—Ç–∏–π*\n\n';
      
      events.slice(0, 10).forEach((event, index) => {
        const statusEmoji = {
          'upcoming': '‚è≥',
          'active': 'üü¢',
          'betting_closed': 'üîí',
          'finished': '‚úÖ',
          'cancelled': '‚ùå'
        }[event.status] || '‚ùì';
        
        message += `${index + 1}. ${statusEmoji} *${event.title}*\n`;
        message += `   –°—Ç–∞—Ç—É—Å: ${event.status}\n`;
        message += `   –ü—É–ª: ${event.totalPool.toFixed(2)} USDT\n`;
        message += `   ID: \`${event._id}\`\n\n`;
      });
      
      const keyboard = Markup.inlineKeyboard([
        [Markup.button.callback('üîÑ –û–±–Ω–æ–≤–∏—Ç—å', 'events_list')],
        [Markup.button.callback('‚óÄÔ∏è –ù–∞–∑–∞–¥', 'events_menu')]
      ]);
      
      await ctx.editMessageText(message, {
        parse_mode: 'Markdown',
        ...keyboard
      });
      
    } catch (error) {
      console.error('EVENTS: –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å–ø–∏—Å–∫–∞ —Å–æ–±—ã—Ç–∏–π:', error);
      await ctx.answerCbQuery('‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å–æ–±—ã—Ç–∏–π');
    }
  },

  /**
   * –ù–∞—á–∞—Ç—å —Å–æ–∑–¥–∞–Ω–∏–µ —Å–æ–±—ã—Ç–∏—è
   */
  async startEventCreation(ctx) {
    ctx.session = ctx.session || {};
    ctx.session.creatingEvent = {
      step: 'title'
    };
    
    await ctx.editMessageText(
      '‚ûï *–°–æ–∑–¥–∞–Ω–∏–µ –Ω–æ–≤–æ–≥–æ —Å–æ–±—ã—Ç–∏—è*\n\n' +
      '–®–∞–≥ 1/6: –í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ —Å–æ–±—ã—Ç–∏—è:',
      {
        parse_mode: 'Markdown',
        ...Markup.inlineKeyboard([[
          Markup.button.callback('‚ùå –û—Ç–º–µ–Ω–∞', 'events_menu')
        ]])
      }
    );
  },

  /**
   * –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è —Å–æ–±—ã—Ç–∏—è
   */
  async handleEventCreation(ctx) {
    if (!ctx.session || !ctx.session.creatingEvent) {
      return;
    }
    
    const eventData = ctx.session.creatingEvent;
    const text = ctx.message.text;
    
    switch (eventData.step) {
      case 'title':
        eventData.title = text;
        eventData.step = 'description';
        await ctx.reply(
          'üìù –®–∞–≥ 2/6: –í–≤–µ–¥–∏—Ç–µ –æ–ø–∏—Å–∞–Ω–∏–µ —Å–æ–±—ã—Ç–∏—è:',
          Markup.inlineKeyboard([[
            Markup.button.callback('‚ùå –û—Ç–º–µ–Ω–∞', 'events_menu')
          ]])
        );
        break;
        
      case 'description':
        eventData.description = text;
        eventData.step = 'outcome1';
        await ctx.reply(
          'üéØ –®–∞–≥ 3/6: –í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –ø–µ—Ä–≤–æ–≥–æ –∏—Å—Ö–æ–¥–∞:',
          Markup.inlineKeyboard([[
            Markup.button.callback('‚ùå –û—Ç–º–µ–Ω–∞', 'events_menu')
          ]])
        );
        break;
        
      case 'outcome1':
        eventData.outcome1 = text;
        eventData.step = 'outcome2';
        await ctx.reply(
          'üéØ –®–∞–≥ 4/6: –í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –≤—Ç–æ—Ä–æ–≥–æ –∏—Å—Ö–æ–¥–∞:',
          Markup.inlineKeyboard([[
            Markup.button.callback('‚ùå –û—Ç–º–µ–Ω–∞', 'events_menu')
          ]])
        );
        break;
        
      case 'outcome2':
        eventData.outcome2 = text;
        eventData.step = 'category';
        await ctx.reply(
          'üìÇ –®–∞–≥ 5/6: –í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é —Å–æ–±—ã—Ç–∏—è:',
          Markup.inlineKeyboard([
            [
              Markup.button.callback('‚öΩ –°–ø–æ—Ä—Ç', 'event_category_sports'),
              Markup.button.callback('‚Çø –ö—Ä–∏–ø—Ç–æ', 'event_category_crypto')
            ],
            [
              Markup.button.callback('üó≥Ô∏è –ü–æ–ª–∏—Ç–∏–∫–∞', 'event_category_politics'),
              Markup.button.callback('üé¨ –†–∞–∑–≤–ª–µ—á–µ–Ω–∏—è', 'event_category_entertainment')
            ],
            [
              Markup.button.callback('üéØ –î—Ä—É–≥–æ–µ', 'event_category_other')
            ],
            [
              Markup.button.callback('‚ùå –û—Ç–º–µ–Ω–∞', 'events_menu')
            ]
          ])
        );
        break;
        
      case 'duration':
        const hours = parseInt(text);
        if (isNaN(hours) || hours < 1 || hours > 720) {
          await ctx.reply('‚ùå –í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —á–∞—Å–æ–≤ (–æ—Ç 1 –¥–æ 720):');
          return;
        }
        
        eventData.durationHours = hours;
        
        // –°–æ–∑–¥–∞–µ–º —Å–æ–±—ã—Ç–∏–µ
        await this.createEvent(ctx, eventData);
        break;
    }
  },

  /**
   * –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
   */
  async handleCategorySelection(ctx, category) {
    if (!ctx.session || !ctx.session.creatingEvent) {
      return ctx.answerCbQuery('‚ùå –°–µ—Å—Å–∏—è —Å–æ–∑–¥–∞–Ω–∏—è —Å–æ–±—ã—Ç–∏—è –∏—Å—Ç–µ–∫–ª–∞');
    }
    
    ctx.session.creatingEvent.category = category;
    ctx.session.creatingEvent.step = 'duration';
    
    await ctx.editMessageText(
      '‚è∞ –®–∞–≥ 6/6: –í–≤–µ–¥–∏—Ç–µ –ø—Ä–æ–¥–æ–ª–∂–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å —Å–æ–±—ã—Ç–∏—è –≤ —á–∞—Å–∞—Ö (1-720):',
      {
        ...Markup.inlineKeyboard([[
          Markup.button.callback('‚ùå –û—Ç–º–µ–Ω–∞', 'events_menu')
        ]])
      }
    );
    
    await ctx.answerCbQuery();
  },

  /**
   * –°–æ–∑–¥–∞—Ç—å —Å–æ–±—ã—Ç–∏–µ
   */
  async createEvent(ctx, eventData) {
    try {
      const now = new Date();
      // –î–æ–±–∞–≤–ª—è–µ–º 1 –º–∏–Ω—É—Ç—É –∫ —Ç–µ–∫—É—â–µ–º—É –≤—Ä–µ–º–µ–Ω–∏, —á—Ç–æ–±—ã –∏–∑–±–µ–∂–∞—Ç—å –æ—à–∏–±–∫–∏ "–≤—Ä–µ–º—è –≤ –ø—Ä–æ—à–ª–æ–º"
      const startTime = new Date(now.getTime() + 60 * 1000);
      const endTime = new Date(startTime.getTime() + eventData.durationHours * 60 * 60 * 1000);
      const bettingEndsAt = new Date(endTime.getTime() - 30 * 60 * 1000); // –ó–∞ 30 –º–∏–Ω—É—Ç –¥–æ –æ–∫–æ–Ω—á–∞–Ω–∏—è
      
      const createData = {
        title: eventData.title,
        description: eventData.description,
        outcomes: [
          { name: eventData.outcome1 },
          { name: eventData.outcome2 }
        ],
        category: eventData.category,
        startTime: startTime.toISOString(),
        endTime: endTime.toISOString(),
        bettingEndsAt: bettingEndsAt.toISOString(),
        featured: true, // –î–µ–ª–∞–µ–º –Ω–æ–≤–æ–µ —Å–æ–±—ã—Ç–∏–µ –≥–ª–∞–≤–Ω—ã–º
        initialOdds: 2.0,
        minBet: 1,
        maxBet: 1000
      };
      
      console.log('EVENTS: –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è —Å–æ–±—ã—Ç–∏—è:', JSON.stringify(createData, null, 2));
      
      const response = await apiClient.post('/events/admin/create', createData);
      
      if (response.data.success) {
        const event = response.data.data.event;
        
        await ctx.reply(
          '‚úÖ *–°–æ–±—ã—Ç–∏–µ —Å–æ–∑–¥–∞–Ω–æ —É—Å–ø–µ—à–Ω–æ!*\n\n' +
          `üìù –ù–∞–∑–≤–∞–Ω–∏–µ: ${event.title}\n` +
          `üìã –û–ø–∏—Å–∞–Ω–∏–µ: ${event.description}\n` +
          `üéØ –ò—Å—Ö–æ–¥—ã: ${event.outcomes[0].name} / ${event.outcomes[1].name}\n` +
          `üìÇ –ö–∞—Ç–µ–≥–æ—Ä–∏—è: ${event.category}\n` +
          `‚è∞ –û–∫–æ–Ω—á–∞–Ω–∏–µ: ${new Date(event.endTime).toLocaleString('ru-RU')}\n` +
          `üÜî ID: \`${event._id}\``,
          {
            parse_mode: 'Markdown',
            ...Markup.inlineKeyboard([[
              Markup.button.callback('üìã –ö —Å–ø–∏—Å–∫—É —Å–æ–±—ã—Ç–∏–π', 'events_list')
            ]])
          }
        );
      } else {
        throw new Error(response.data.message);
      }
      
      // –û—á–∏—â–∞–µ–º —Å–µ—Å—Å–∏—é
      delete ctx.session.creatingEvent;
      
    } catch (error) {
      console.error('EVENTS: –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è —Å–æ–±—ã—Ç–∏—è:', error);
      await ctx.reply(
        `‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è —Å–æ–±—ã—Ç–∏—è: ${error.response?.data?.message || error.message}`,
        Markup.inlineKeyboard([[
          Markup.button.callback('üîÑ –ü–æ–ø—Ä–æ–±–æ–≤–∞—Ç—å —Å–Ω–æ–≤–∞', 'events_create')
        ]])
      );
      delete ctx.session.creatingEvent;
    }
  },

  /**
   * –ó–∞–≤–µ—Ä—à–∏—Ç—å —Å–æ–±—ã—Ç–∏–µ
   */
  async finishEvent(ctx) {
    ctx.session = ctx.session || {};
    ctx.session.finishingEvent = {
      step: 'eventId'
    };
    
    await ctx.editMessageText(
      '‚úÖ *–ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ —Å–æ–±—ã—Ç–∏—è*\n\n' +
      '–í–≤–µ–¥–∏—Ç–µ ID —Å–æ–±—ã—Ç–∏—è –¥–ª—è –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è:',
      {
        parse_mode: 'Markdown',
        ...Markup.inlineKeyboard([[
          Markup.button.callback('‚ùå –û—Ç–º–µ–Ω–∞', 'events_menu')
        ]])
      }
    );
  },

  /**
   * –û–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è —Å–æ–±—ã—Ç–∏—è
   */
  async handleEventFinishing(ctx) {
    if (!ctx.session || !ctx.session.finishingEvent) {
      return;
    }
    
    const text = ctx.message.text.trim();
    
    // –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º –æ–±—ã—á–Ω—ã–µ –∫–Ω–æ–ø–∫–∏ –º–µ–Ω—é –∏ —ç–º–æ–¥–∑–∏-–∫–æ–º–∞–Ω–¥—ã
    const menuCommands = ['üìä –§–∏–Ω–∞–Ω—Å—ã', 'üë• –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏', 'üí≥ –¢—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏', 'üéØ –°–æ–±—ã—Ç–∏—è', 
                         'üéÅ –ü—Ä–æ–º–æ–∫–æ–¥—ã', 'üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞', 'üéÆ –ö–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç—ã', 'üìä –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥',
                         'üì¢ –£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è', 'üõ°Ô∏è –ë–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç—å', 'üíæ –ë—ç–∫–∞–ø—ã', '‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏',
                         'üîÆ –°–æ–±—ã—Ç–∏—è', 'üè¶ –¢—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏'];
    
    if (menuCommands.includes(text) || text.includes('üè†') || text.includes('üîô')) {
      // –û—á–∏—â–∞–µ–º —Å–µ—Å—Å–∏—é –∏ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∫–∞–∫ –æ–±—ã—á–Ω—É—é –∫–æ–º–∞–Ω–¥—É –º–µ–Ω—é
      delete ctx.session.finishingEvent;
      return;
    }
    
    if (ctx.session.finishingEvent.step === 'eventId') {
      try {
        // –ü–æ–ª—É—á–∞–µ–º —Å–æ–±—ã—Ç–∏–µ
        const response = await apiClient.get(`/events/${text}`);
        
        if (!response.data.success) {
          await ctx.reply('‚ùå –°–æ–±—ã—Ç–∏–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ. –í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π ID:');
          return;
        }
        
        const event = response.data.data.event;
        
        if (event.status === 'finished') {
          await ctx.reply('‚ùå –°–æ–±—ã—Ç–∏–µ —É–∂–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ. –í–≤–µ–¥–∏—Ç–µ ID –¥—Ä—É–≥–æ–≥–æ —Å–æ–±—ã—Ç–∏—è:');
          return;
        }
        
        ctx.session.finishingEvent.eventId = text;
        ctx.session.finishingEvent.event = event;
        ctx.session.finishingEvent.step = 'outcome';
        
        await ctx.reply(
          `üéØ –°–æ–±—ã—Ç–∏–µ: *${event.title}*\n\n` +
          '–í—ã–±–µ—Ä–∏—Ç–µ –ø–æ–±–µ–¥–∏–≤—à–∏–π –∏—Å—Ö–æ–¥:',
          {
            parse_mode: 'Markdown',
            ...Markup.inlineKeyboard([
              [
                Markup.button.callback(
                  `1Ô∏è‚É£ ${event.outcomes[0].name}`, 
                  `finish_outcome_${event.outcomes[0].id}`
                )
              ],
              [
                Markup.button.callback(
                  `2Ô∏è‚É£ ${event.outcomes[1].name}`, 
                  `finish_outcome_${event.outcomes[1].id}`
                )
              ],
              [
                Markup.button.callback('‚ùå –û—Ç–º–µ–Ω–∞', 'events_menu')
              ]
            ])
          }
        );
        
      } catch (error) {
        console.error('EVENTS: –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å–æ–±—ã—Ç–∏—è:', error);
        await ctx.reply('‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å–æ–±—ã—Ç–∏—è. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ ID –∏ –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞:');
      }
    }
  },

  /**
   * –ó–∞–≤–µ—Ä—à–∏—Ç—å —Å–æ–±—ã—Ç–∏–µ —Å –≤—ã–±—Ä–∞–Ω–Ω—ã–º –∏—Å—Ö–æ–¥–æ–º
   */
  async completeEventFinishing(ctx, outcomeId) {
    if (!ctx.session || !ctx.session.finishingEvent || !ctx.session.finishingEvent.eventId) {
      return ctx.answerCbQuery('‚ùå –°–µ—Å—Å–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è —Å–æ–±—ã—Ç–∏—è –∏—Å—Ç–µ–∫–ª–∞');
    }
    
    try {
      const eventId = ctx.session.finishingEvent.eventId;
      const event = ctx.session.finishingEvent.event;
      
      const response = await apiClient.put(`/events/admin/${eventId}/finish`, {
        winningOutcomeId: outcomeId
      });
      
      if (response.data.success) {
        const result = response.data.data;
        const winningOutcome = event.outcomes.find(o => o.id === outcomeId);
        
        await ctx.editMessageText(
          '‚úÖ *–°–æ–±—ã—Ç–∏–µ —É—Å–ø–µ—à–Ω–æ –∑–∞–≤–µ—Ä—à–µ–Ω–æ!*\n\n' +
          `üìù –°–æ–±—ã—Ç–∏–µ: ${event.title}\n` +
          `üèÜ –ü–æ–±–µ–¥–∏—Ç–µ–ª—å: ${winningOutcome.name}\n` +
          `üí∞ –í—ã–∏–≥—Ä—ã—à–Ω—ã—Ö —Å—Ç–∞–≤–æ–∫: ${result.settlementResults.winningBets}\n` +
          `üìâ –ü—Ä–æ–∏–≥—Ä—ã—à–Ω—ã—Ö —Å—Ç–∞–≤–æ–∫: ${result.settlementResults.losingBets}\n` +
          `üíµ –û–±—â–∏–µ –≤—ã–ø–ª–∞—Ç—ã: ${result.settlementResults.totalPayout.toFixed(2)} USDT\n` +
          `üè¶ –ü—Ä–∏–±—ã–ª—å –∫–∞–∑–∏–Ω–æ: ${result.houseProfit.toFixed(2)} USDT`,
          {
            parse_mode: 'Markdown',
            ...Markup.inlineKeyboard([[
              Markup.button.callback('üìã –ö —Å–ø–∏—Å–∫—É —Å–æ–±—ã—Ç–∏–π', 'events_list')
            ]])
          }
        );
      } else {
        throw new Error(response.data.message);
      }
      
      delete ctx.session.finishingEvent;
      await ctx.answerCbQuery('‚úÖ –°–æ–±—ã—Ç–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ');
      
    } catch (error) {
      console.error('EVENTS: –û—à–∏–±–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è —Å–æ–±—ã—Ç–∏—è:', error);
      await ctx.answerCbQuery(`‚ùå –û—à–∏–±–∫–∞: ${error.response?.data?.message || error.message}`);
    }
  },

  /**
   * –ü–æ–∫–∞–∑–∞—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É —Å–æ–±—ã—Ç–∏–π
   */
  async showEventsStats(ctx) {
    try {
      const response = await apiClient.get('/events/stats/general');
      
      if (!response.data.success) {
        return ctx.answerCbQuery('‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏');
      }
      
      const stats = response.data.data;
      
      let message = 'üìä *–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Å–æ–±—ã—Ç–∏–π*\n\n';
      
      if (stats.events && stats.events.length > 0) {
        message += 'üéØ –°–æ–±—ã—Ç–∏—è:\n';
        stats.events.forEach(stat => {
          const statusNames = {
            'upcoming': '–ü—Ä–µ–¥—Å—Ç–æ—è—â–∏–µ',
            'active': '–ê–∫—Ç–∏–≤–Ω—ã–µ',
            'betting_closed': '–°—Ç–∞–≤–∫–∏ –∑–∞–∫—Ä—ã—Ç—ã',
            'finished': '–ó–∞–≤–µ—Ä—à–µ–Ω–Ω—ã–µ',
            'cancelled': '–û—Ç–º–µ–Ω–µ–Ω–Ω—ã–µ'
          };
          
          message += `‚îú ${statusNames[stat._id] || stat._id}: ${stat.count} (${stat.totalPool.toFixed(2)} USDT)\n`;
        });
        message += '\n';
      }
      
      if (stats.bets && stats.bets.length > 0) {
        message += 'üí∞ –°—Ç–∞–≤–∫–∏:\n';
        stats.bets.forEach(stat => {
          const statusNames = {
            'active': '–ê–∫—Ç–∏–≤–Ω—ã–µ',
            'won': '–í—ã–∏–≥—Ä—ã—à–Ω—ã–µ',
            'lost': '–ü—Ä–æ–∏–≥—Ä—ã—à–Ω—ã–µ',
            'cancelled': '–û—Ç–º–µ–Ω–µ–Ω–Ω—ã–µ',
            'refunded': '–í–æ–∑–≤—Ä–∞—â–µ–Ω–Ω—ã–µ'
          };
          
          message += `‚îú ${statusNames[stat._id] || stat._id}: ${stat.count} (${stat.totalAmount.toFixed(2)} USDT)\n`;
        });
      }
      
      const keyboard = Markup.inlineKeyboard([
        [Markup.button.callback('üîÑ –û–±–Ω–æ–≤–∏—Ç—å', 'events_stats')],
        [Markup.button.callback('‚óÄÔ∏è –ù–∞–∑–∞–¥', 'events_menu')]
      ]);
      
      await ctx.editMessageText(message, {
        parse_mode: 'Markdown',
        ...keyboard
      });
      
    } catch (error) {
      console.error('EVENTS: –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏:', error);
      await ctx.answerCbQuery('‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏');
    }
  },

  /**
   * –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –≥–ª–∞–≤–Ω—ã–º —Å–æ–±—ã—Ç–∏–µ–º
   */
  async manageFeaturedEvent(ctx) {
    try {
      // –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ –∞–∫—Ç–∏–≤–Ω—ã—Ö —Å–æ–±—ã—Ç–∏–π
      const response = await apiClient.get('/events/admin/all?status=active');
      
      if (!response.data.success) {
        return ctx.answerCbQuery('‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å–æ–±—ã—Ç–∏–π');
      }
      
      const events = response.data.data.events;
      
      if (events.length === 0) {
        return ctx.editMessageText(
          '‚≠ê *–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –≥–ª–∞–≤–Ω—ã–º —Å–æ–±—ã—Ç–∏–µ–º*\n\n' +
          '–ù–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö —Å–æ–±—ã—Ç–∏–π –¥–ª—è –Ω–∞–∑–Ω–∞—á–µ–Ω–∏—è –≥–ª–∞–≤–Ω—ã–º.',
          {
            parse_mode: 'Markdown',
            ...Markup.inlineKeyboard([[
              Markup.button.callback('üîô –ù–∞–∑–∞–¥', 'events_menu')
            ]])
          }
        );
      }
      
      // –ù–∞—Ö–æ–¥–∏–º —Ç–µ–∫—É—â–µ–µ –≥–ª–∞–≤–Ω–æ–µ —Å–æ–±—ã—Ç–∏–µ
      const featuredEvent = events.find(e => e.featured);
      
      let message = '‚≠ê *–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –≥–ª–∞–≤–Ω—ã–º —Å–æ–±—ã—Ç–∏–µ–º*\n\n';
      
      if (featuredEvent) {
        message += `üîñ –¢–µ–∫—É—â–µ–µ –≥–ª–∞–≤–Ω–æ–µ —Å–æ–±—ã—Ç–∏–µ:\n`;
        message += `üìù ${featuredEvent.title}\n`;
        message += `üÜî ID: \`${featuredEvent._id}\`\n\n`;
      } else {
        message += '‚ùå –ì–ª–∞–≤–Ω–æ–µ —Å–æ–±—ã—Ç–∏–µ –Ω–µ –Ω–∞–∑–Ω–∞—á–µ–Ω–æ\n\n';
      }
      
      message += 'üìã –í—ã–±–µ—Ä–∏—Ç–µ —Å–æ–±—ã—Ç–∏–µ –¥–ª—è –Ω–∞–∑–Ω–∞—á–µ–Ω–∏—è –≥–ª–∞–≤–Ω—ã–º:';
      
      const buttons = [];
      
      // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–µ—Ä–≤—ã–µ 8 –∞–∫—Ç–∏–≤–Ω—ã—Ö —Å–æ–±—ã—Ç–∏–π
      events.slice(0, 8).forEach((event, index) => {
        const isFeatured = event.featured ? '‚≠ê ' : '';
        buttons.push([Markup.button.callback(
          `${index + 1}. ${isFeatured}${event.title.substring(0, 40)}...`,
          `set_featured_${event._id}`
        )]);
      });
      
      if (featuredEvent) {
        buttons.push([Markup.button.callback('‚ùå –£–±—Ä–∞—Ç—å –≥–ª–∞–≤–Ω–æ–µ —Å–æ–±—ã—Ç–∏–µ', 'unset_featured')]);
      }
      
      buttons.push([Markup.button.callback('üîô –ù–∞–∑–∞–¥', 'events_menu')]);
      
      await ctx.editMessageText(message, {
        parse_mode: 'Markdown',
        ...Markup.inlineKeyboard(buttons)
      });
      
    } catch (error) {
      console.error('EVENTS: –û—à–∏–±–∫–∞ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –≥–ª–∞–≤–Ω—ã–º —Å–æ–±—ã—Ç–∏–µ–º:', error);
      await ctx.answerCbQuery('‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å–æ–±—ã—Ç–∏–π');
    }
  },

  /**
   * –£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å —Å–æ–±—ã—Ç–∏–µ –∫–∞–∫ –≥–ª–∞–≤–Ω–æ–µ
   */
  async setFeaturedEvent(ctx, eventId) {
    try {
      const response = await apiClient.patch(`/events/admin/${eventId}/featured`, {
        featured: true
      });
      
      if (response.data.success) {
        await ctx.answerCbQuery('‚úÖ –ì–ª–∞–≤–Ω–æ–µ —Å–æ–±—ã—Ç–∏–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ');
        await this.manageFeaturedEvent(ctx);
      } else {
        await ctx.answerCbQuery('‚ùå –û—à–∏–±–∫–∞ —É—Å—Ç–∞–Ω–æ–≤–∫–∏ –≥–ª–∞–≤–Ω–æ–≥–æ —Å–æ–±—ã—Ç–∏—è');
      }
      
    } catch (error) {
      console.error('EVENTS: –û—à–∏–±–∫–∞ —É—Å—Ç–∞–Ω–æ–≤–∫–∏ –≥–ª–∞–≤–Ω–æ–≥–æ —Å–æ–±—ã—Ç–∏—è:', error);
      await ctx.answerCbQuery('‚ùå –û—à–∏–±–∫–∞ —É—Å—Ç–∞–Ω–æ–≤–∫–∏ –≥–ª–∞–≤–Ω–æ–≥–æ —Å–æ–±—ã—Ç–∏—è');
    }
  },

  /**
   * –£–±—Ä–∞—Ç—å –≥–ª–∞–≤–Ω–æ–µ —Å–æ–±—ã—Ç–∏–µ
   */
  async unsetFeaturedEvent(ctx) {
    try {
      const response = await apiClient.patch('/events/admin/featured/unset');
      
      if (response.data.success) {
        await ctx.answerCbQuery('‚úÖ –ì–ª–∞–≤–Ω–æ–µ —Å–æ–±—ã—Ç–∏–µ —É–±—Ä–∞–Ω–æ');
        await this.manageFeaturedEvent(ctx);
      } else {
        await ctx.answerCbQuery('‚ùå –û—à–∏–±–∫–∞ —Å–Ω—è—Ç–∏—è –≥–ª–∞–≤–Ω–æ–≥–æ —Å–æ–±—ã—Ç–∏—è');
      }
      
    } catch (error) {
      console.error('EVENTS: –û—à–∏–±–∫–∞ —Å–Ω—è—Ç–∏—è –≥–ª–∞–≤–Ω–æ–≥–æ —Å–æ–±—ã—Ç–∏—è:', error);
      await ctx.answerCbQuery('‚ùå –û—à–∏–±–∫–∞ —Å–Ω—è—Ç–∏—è –≥–ª–∞–≤–Ω–æ–≥–æ —Å–æ–±—ã—Ç–∏—è');
    }
  }
};

module.exports = eventsCommands;
